<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>-xGeminix-</title>
  
  <subtitle>TayE&#39;s Blog☄️</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mimori.coding.me/"/>
  <updated>2020-07-16T14:26:23.925Z</updated>
  <id>https://mimori.coding.me/</id>
  
  <author>
    <name>ReTayE</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020牛客多校第一场</title>
    <link href="https://mimori.coding.me/2020/07/16/2020%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
    <id>https://mimori.coding.me/2020/07/16/2020%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/</id>
    <published>2020-07-16T14:08:00.000Z</published>
    <updated>2020-07-16T14:26:23.925Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f105fed14195aa594b51c3b.jpg" alt><br><a id="more"></a></p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>令<script type="math/tex">C_i=\min_{j>i,s_j=s_i}\{j-i\}</script>，则题目中所说的B-Suffix Array等价于$C_1,C_2,C_3,…，C_n$。因此，只需要求出$C$后，对$C$算一下后缀数组即可。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> wa[maxn], wb[maxn], wv[maxn], wss[maxn], rak[maxn], <span class="built_in">height</span>[maxn], cal[maxn], n, sa[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span>* r, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + l] == r[b + l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span>* r, <span class="keyword">int</span>* sa, <span class="keyword">int</span> n, <span class="keyword">int</span> M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, p, *x = wa, *y = wb, *t;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        wss[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        wss[x[i] = r[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; M; i++)</span><br><span class="line">        wss[i] += wss[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        sa[--wss[x[i]]] = i;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>, p = <span class="number">1</span>; p &lt; n; j &lt;&lt;= <span class="number">1</span>, M = p) &#123;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>, i = n - j; i &lt; n; i++)</span><br><span class="line">            y[p++] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt;= j)</span><br><span class="line">                y[p++] = sa[i] - j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            wv[i] = x[y[i]];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">            wss[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            wss[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; M; i++)</span><br><span class="line">            wss[i] += wss[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            sa[--wss[wv[i]]] = y[i];</span><br><span class="line">        <span class="keyword">for</span> (t = x, x = y, y = t, p = <span class="number">1</span>, x[sa[<span class="number">0</span>]] = <span class="number">0</span>, i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            x[sa[i]] = cmp(y, sa[i - <span class="number">1</span>], sa[i], j) ? p - <span class="number">1</span> : p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("./A.in", "r", stdin);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(cal, cal + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> pre[<span class="number">2</span>] = &#123; n + <span class="number">1</span>, n + <span class="number">1</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre[s[i] - <span class="string">'a'</span>] == n + <span class="number">1</span>) &#123;</span><br><span class="line">                cal[i] = n;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cal[i] = pre[s[i] - <span class="string">'a'</span>] - i;</span><br><span class="line">            &#125;</span><br><span class="line">            pre[s[i] - <span class="string">'a'</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        cal[n + <span class="number">1</span>] = n + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//puts("cal: ");</span></span><br><span class="line">        <span class="comment">//for (int i = 1; i &lt;= n + 1; i++) &#123;</span></span><br><span class="line">        <span class="comment">//  printf("%d ",cal[i]);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//puts("");</span></span><br><span class="line">        <span class="comment">//puts("----------------------");</span></span><br><span class="line"></span><br><span class="line">        da(cal + <span class="number">1</span>, sa, n + <span class="number">2</span>, n + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, sa[i] + <span class="number">1</span>, i == <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题$n$的值一定要是$n+2$，$m$的值一定也要是$n+2$！否则不是RE就是WA！</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>待补</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>待补</p><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>待补</p><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>待补</p><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>假设两个字符串$a,b$是同一个字符串的循环节，然后在$2\times max(len(a),len(b))$的范围内比较即可。如果发现没有不相等的字符，则说明两个无穷字符串是同一个字符串，也就是相等。否则，如果$a_i&lt;b_i$，则$a&lt;b$；大于的情况同理。这道题的比较范围比较玄学，是猜出来的，但根据题解，范围只需要到$len(a)+len(b)-gcd(len(a),len(b))$即可。但目前没想明白为什么。。。等一波详细题解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> sa, sb;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; sa &gt;&gt; sb) &#123;</span><br><span class="line">        <span class="keyword">int</span> lena = sa.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> lenb = sb.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> bnd = <span class="number">2</span> * <span class="built_in">max</span>(lena, lenb);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bnd; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sa[i % lena] &lt; sb[i % lenb]) &#123;</span><br><span class="line">                ans = <span class="number">1</span>; <span class="comment">// &lt;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sa[i % lena] &gt; sb[i % lenb]) &#123;</span><br><span class="line">                ans = <span class="number">2</span>; <span class="comment">// &gt;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"=&lt;&gt;"</span>[ans] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><p>待补</p><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><p>题意是说，给定一个$n$个点$m$条边的流网络，有$q$次询问，第$i$次询问会把图上所有边的容量都设为$\frac{u_i}{v_i}$，查询当前情况下，从点1发送一个单位的流到点$n$的最小花费是多少。</p><p>为了方便处理，将所有边的容量都乘以$\frac{v_i}{u_i}$，使其变成1；原本发送一个单位的流，现在变成发送$\frac{v_i}{u_i}$个单位的流（实际上就相当于定义了一个新单位，该单位和原单位的进率是$\frac{v_i}{u_i}$）。然后在算最大流的时候，再记录下不同流量下的最小花费。</p><p>而NaN的情况有两种：</p><ul><li>$u=0$（不考虑这种情况会有除零错误）</li><li>$v/u&gt;$最大流（非整除）</li></ul><p>最后，注意一下处理最终答案的方法（代码165行）</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">200</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> nxt;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    <span class="keyword">int</span> flow;</span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">&#125; es[maxm];</span><br><span class="line"><span class="keyword">int</span> head[maxn];</span><br><span class="line"><span class="keyword">int</span> tol;</span><br><span class="line"><span class="keyword">int</span> pre[maxn], dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line">ll ansarr[maxm];</span><br><span class="line"><span class="keyword">int</span> N; <span class="comment">// 节点总个数, 节点从0~N-1</span></span><br><span class="line"><span class="keyword">int</span> M;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tol = <span class="number">0</span>;</span><br><span class="line">    mst(head, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[tol].to = v;</span><br><span class="line">    es[tol].cap = cap;</span><br><span class="line">    es[tol].cost = cost;</span><br><span class="line">    es[tol].flow = <span class="number">0</span>;</span><br><span class="line">    es[tol].nxt = head[u];</span><br><span class="line">    head[u] = tol++;</span><br><span class="line"></span><br><span class="line">    es[tol].to = u;</span><br><span class="line">    es[tol].cap = <span class="number">0</span>;</span><br><span class="line">    es[tol].cost = -cost;</span><br><span class="line">    es[tol].flow = <span class="number">0</span>;</span><br><span class="line">    es[tol].nxt = head[v];</span><br><span class="line">    head[v] = tol++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    que.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = es[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = es[i].to;</span><br><span class="line">            <span class="keyword">if</span> (es[i].cap &gt; es[i].flow &amp;&amp; dis[v] &gt; dis[u] + es[i].cost) &#123;</span><br><span class="line">                dis[v] = dis[u] + es[i].cost;</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                    vis[v] = <span class="literal">true</span>;</span><br><span class="line">                    que.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pre[t] == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">mcmf</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, ll&amp; cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll flow = <span class="number">0</span>;</span><br><span class="line">    cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (spfa(s, t)) &#123;</span><br><span class="line">        ll Min = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[t]; i != <span class="number">-1</span>; i = pre[es[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Min &gt; es[i].cap - es[i].flow) &#123;</span><br><span class="line">                Min = es[i].cap - es[i].flow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pre[t]; i != <span class="number">-1</span>; i = pre[es[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            es[i].flow += Min;</span><br><span class="line">            es[i ^ <span class="number">1</span>].flow -= Min;</span><br><span class="line">            cost += es[i].cost * Min;</span><br><span class="line">        &#125;</span><br><span class="line">        flow += Min;</span><br><span class="line">        ansarr[(<span class="keyword">int</span>)flow] = cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ch = getchar();</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">            sign = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ch &gt; <span class="string">'9'</span> || ch &lt; <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (ch - <span class="string">'0'</span>);</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//inline void Swap(ll&amp; a,ll&amp; b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//ll tmp=a;</span></span><br><span class="line"><span class="comment">//a=b;b=tmp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M) != EOF) &#123;</span><br><span class="line">        init(N);</span><br><span class="line">        <span class="keyword">int</span> ai, bi, ci;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            ai = <span class="built_in">read</span>();</span><br><span class="line">            bi = <span class="built_in">read</span>();</span><br><span class="line">            ci = <span class="built_in">read</span>();</span><br><span class="line">            ai--;</span><br><span class="line">            bi--;</span><br><span class="line">            addedge(ai, bi, <span class="number">1</span>, ci);</span><br><span class="line">        &#125;</span><br><span class="line">        ll miniflow;</span><br><span class="line">        ll maxiflow = mcmf(<span class="number">0</span>, N - <span class="number">1</span>, miniflow);</span><br><span class="line">        <span class="keyword">int</span> q;</span><br><span class="line">        q = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            u = <span class="built_in">read</span>();</span><br><span class="line">            v = <span class="built_in">read</span>();</span><br><span class="line">            <span class="comment">//printf("maxiflow = %lld\n",maxiflow);</span></span><br><span class="line">            <span class="keyword">if</span> (u == <span class="number">0</span> || ((<span class="number">1L</span>L * v) / u == maxiflow &amp;&amp; (<span class="number">1L</span>L * v) % u &gt; <span class="number">0</span>) || (<span class="number">1L</span>L * v) / u &gt; maxiflow) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"NaN"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> idx = v / u;</span><br><span class="line">            ll up = ansarr[idx] * u + (ansarr[idx + <span class="number">1</span>] - ansarr[idx]) * (v % u);</span><br><span class="line">            <span class="comment">//if(v&lt;up) Swap(v, up)</span></span><br><span class="line">            ll g = gcd(<span class="number">1L</span>L * v, up);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>, up / g, v / g);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><p>待补</p><h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><p>高数签到题。虽然这题是我A的，但是因为高数太菜，所以其实积分结果是在OEIS上找到的hhh。</p><p>积分过程如下：</p><script type="math/tex; mode=display">\begin{aligned}\because (x-x^2)^n&=\frac{1}{4}-\left( \frac{1}{2}-x\right )^2 \\\therefore \int_0^1(x-x^2)^ndx&=\int_0^1\left(\frac{1}{4}-\left(\frac{1}{2}-x\right)^2\right)^ndx\\&=\frac{1}{4^n}\int_0^1\left(1-4\left(\frac{1}{2}-x\right)^2\right)^ndx\\&=\frac{1}{4^n}\int_0^1\left(1-(2x-1)^2\right)^ndx\end{aligned}</script><p>令$\sin t=2x-1$，则有</p><script type="math/tex; mode=display">\begin{aligned}\int_0^1(x-x^2)^ndx&=\frac{1}{4^n}\int_{-\frac{\pi}{2}}^{\frac{\pi}{2}}(1-\sin^2t)^ndx\\&=\frac{1}{4^n}\int_{-\frac{\pi}{2}}^{\frac{\pi}{2}}(1-\sin^2t)^n\frac{\cos t}{2}dt\\&=\frac{1}{4^n}\int_0^{\frac{\pi}{2}}\cos^{2n+1}tdt\end{aligned}</script><p>由Wallis公式：</p><script type="math/tex; mode=display">\int_0^{\frac{\pi}{2}}\cos^nxdx=\begin{cases}\frac{\pi(2k)!!}{2(2k+1)!!}&\text{n=2k}\\\frac{(2k)!!}{(2k+1)!!}&\text{n=2k+1}\end{cases}</script><p>其中，$\frac{(2k)!!}{(2k+1)!!}=\frac{2\times4\times6\times\dots\times(2n-2)\times2n}{1\times3\times5\times\dots\times(2n-1)\times(2n+1)}$。因此，有</p><script type="math/tex; mode=display">\begin{aligned}\int_0^1(x-x^2)^ndx&=\frac{1}{4^n}\frac{(2n)!!}{(2n+1)!!}\\&=\frac{1}{4^n}\frac{(2n)!!}{\frac{(2n+1)!}{(2n)!!}}\\&=\frac{1}{4^n}\frac{(2n!!)^2}{(2n+1)!}\\&=\frac{1}{4^n}\frac{4^n(n!)^2}{(2n+1)!}\\&=\frac{(n!)^2}{(2n+1)!}\end{aligned}</script><p>得到上面的积分结果后，套式子再求个逆元就行了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bnd = <span class="number">2e6</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line">ll frac[bnd];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    frac[<span class="number">0</span>] = frac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= bnd; i++) &#123;</span><br><span class="line">        frac[i] = (frac[i - <span class="number">1</span>] % mod * i % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a, ll b, ll&amp; x, ll&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d = exgcd(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x, y;</span><br><span class="line">    ll d = exgcd(a, n, x, y);</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> (x % n + n) % n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        ll f = frac[n];</span><br><span class="line">        ll ff = frac[<span class="number">2</span> * n + <span class="number">1</span>];</span><br><span class="line">        ll up = (f % mod * f % mod) % mod;</span><br><span class="line">        ll down = ff % mod;</span><br><span class="line">        ll ans = (up % mod * inv(down, mod) % mod) % mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f105fed14195aa594b51c3b.jpg&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="多校" scheme="https://mimori.coding.me/categories/ACM/%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="多校" scheme="https://mimori.coding.me/tags/%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1374E1 - Reading Books (easy version)</title>
    <link href="https://mimori.coding.me/2020/07/08/Codeforces-1374E1-Reading-Books-easy-version/"/>
    <id>https://mimori.coding.me/2020/07/08/Codeforces-1374E1-Reading-Books-easy-version/</id>
    <published>2020-07-08T14:34:02.000Z</published>
    <updated>2020-07-08T14:36:07.719Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f05d99d14195aa59424eb9e.jpg" alt></p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>每次期末后的复建运动都格外痛苦（</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>题意是说，给定$n$本书，如果书都有属性$a,b,t$。如果$a=1$，则说明Alice喜欢读这本书，$0$则不喜欢；如果$b=1$，则说明Bob喜欢读这本书，$0$则不喜欢。$t$是每本书的代价。从中选出若干本书，这些书中Alice和Bob喜欢读的都不少于$k$本。问如何选择，才能使代价总和最小。</p><p>思路是贪心。记Alice和Bob都喜欢的书为11类，只有Alice喜欢的为10类，只有Bob喜欢的为01类。容易注意到，选择Alice和Bob都喜欢读的书性价比要更高一些。所以，我们首先对三种属性分别排序，如果当前取了$i$本11类的书，那么，对于Alice，我们要为她取10类和01类共$k-i$本书；Bob也是同理。如果发现10类或01类的书的数目小于$k-i$，则说明在取$i$本11类书的情况下，没有可行的方案。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll t;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp; nn) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> t &lt; nn.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">node allone[maxn];</span><br><span class="line">node A[maxn];</span><br><span class="line">node B[maxn];</span><br><span class="line">ll sum1[maxn];</span><br><span class="line">ll sum2[maxn];</span><br><span class="line">ll sum3[maxn];</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mp.clear();</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">int</span> idx1, idx2, idx3;</span><br><span class="line">    idx1 = idx2 = idx3 = <span class="number">1</span>;</span><br><span class="line">    ll t_;</span><br><span class="line">    <span class="keyword">int</span> a_, b_;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %d %d"</span>, &amp;t_, &amp;a_, &amp;b_);</span><br><span class="line">        <span class="keyword">if</span> (a_ &amp;&amp; b_)</span><br><span class="line">            allone[idx1++] = &#123; t_, a_, b_ &#125;;</span><br><span class="line">        <span class="keyword">if</span> (a_ &amp;&amp; !b_)</span><br><span class="line">            A[idx2++] = &#123; t_, a_, b_ &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!a_ &amp;&amp; b_)</span><br><span class="line">            B[idx3++] = &#123; t_, a_, b_ &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(allone + <span class="number">1</span>, allone + idx1);</span><br><span class="line">    sort(A + <span class="number">1</span>, A + idx2);</span><br><span class="line">    sort(B + <span class="number">1</span>, B + idx3);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        sum1[i] = sum1[i - <span class="number">1</span>] + allone[i].t;</span><br><span class="line">        sum2[i] = sum2[i - <span class="number">1</span>] + A[i].t;</span><br><span class="line">        sum3[i] = sum3[i - <span class="number">1</span>] + B[i].t;</span><br><span class="line">    &#125;</span><br><span class="line">    ll inf = numeric_limits&lt;ll&gt;::max();</span><br><span class="line">    ll ans = inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= min(k, idx1 - <span class="number">1</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = k - i;</span><br><span class="line">        <span class="keyword">if</span> (idx2 - <span class="number">1</span> &gt;= tmp &amp;&amp; idx3 - <span class="number">1</span> &gt;= tmp) &#123;</span><br><span class="line">            ans = min(ans, sum1[i] + sum2[k - i] + sum3[k - i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans == inf) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f05d99d14195aa59424eb9e.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>用手势操控你的电脑——基于Opencv.js，Tensorflow，electron的手势人机交互</title>
    <link href="https://mimori.coding.me/2020/07/04/%E7%94%A8%E6%89%8B%E5%8A%BF%E6%93%8D%E6%8E%A7%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EOpencv-js%EF%BC%8CTensorflow%EF%BC%8Celectron%E7%9A%84%E6%89%8B%E5%8A%BF%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/"/>
    <id>https://mimori.coding.me/2020/07/04/%E7%94%A8%E6%89%8B%E5%8A%BF%E6%93%8D%E6%8E%A7%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EOpencv-js%EF%BC%8CTensorflow%EF%BC%8Celectron%E7%9A%84%E6%89%8B%E5%8A%BF%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/</id>
    <published>2020-07-04T03:59:00.000Z</published>
    <updated>2020-07-04T07:03:10.837Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f00278014195aa594787856.png" alt><br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>昨晚看了以下许久没有访问的博客，发现最近一篇博客居然是今年3月份的一份AGC题解。还记得大一的时候，写博客的热情高涨，恨不得日更三篇；上了大二之后，一方面是各方面的压力变大了，另一方面是自己在这方面越来越懒，<del>于是出现了四个月没写过一篇文章的情况</del>。这学期上多媒体课程，期末大作业和刘总一起做了一个基于手势识别的人机交互小程序，就拿来<del>水一水</del>吧</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>看标题就知道，这是一个通过识别手势来完成一些电脑操作的东西。因为是一个桌面应用，同时为了界面好看（好看是第一生产力.jpg），我们选择了electron。首先是用python+Tensorflow训练一个CNN用于手势识别，并导出该模型为json格式；然后，我们在electron中使用opencv.js处理图像，并把上一步训练得到的json格式模型导入到Tensorflow.js中做手势识别；最后，借助robot.js来实现操控电脑。</p><p>放一下结构图</p><p><img src="https://pic.downk.cc/item/5f00239914195aa594769dc9.jpg"></p><p>之所以要分离出前端和服务端，是因为robot.js要塞进electron里面比较麻烦，尝试了好几次之后都没有成功，于是索性不把他放到electron里面。这样一来，避免了配置上的麻烦，而且结构更清晰，代码写起来也更方便。</p><p>目前仅支持在windows上使用，可以完成的操作有：</p><ul><li>切换窗口</li><li>隐藏窗口</li><li>静音/恢复音量</li><li>关闭当前窗口</li><li>上、下、左、右四个方向键</li></ul><h3 id="模型搭建"><a href="#模型搭建" class="headerlink" title="模型搭建"></a>模型搭建</h3><p>这一步主要就是采集训练样本，然后使用Opencv处理图像，最后扔进Tensorflow里训练。</p><p>先说一下采集训练样本以及处理图像这两部分。通过Opencv调用摄像头，每0.1秒截取一次图像，然后用Opencv处理这一图像。所做的处理包括：</p><ul><li><p>获取ROI（感兴趣区域）</p><p>其实就是从原图像上截取一个指定区域。</p><p><center><img src="https://pic.downk.cc/item/5f00061014195aa5946a4677.png" style="zoom:50%;"></center><br><center>处理前</center><br><center><img src="https://pic.downk.cc/item/5f00064814195aa5946a5c36.png" style="zoom: 67%;"></center><br><center>处理后</center><br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRoi</span><span class="params">(frame, x0, y0, width, height)</span>:</span></span><br><span class="line">    roi = frame[y0:y0 + height, x0:x0 + width]</span><br><span class="line">    cv.imshow(<span class="string">'roi'</span>, roi)</span><br><span class="line">    <span class="keyword">return</span> roi</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用Otsu法（大津法）进行肤色检测</p><p>大致原理是通过遮罩的方法，计算按位与运算，从而过滤掉那些我们不关心的像素。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSkin</span><span class="params">(frame)</span>:</span></span><br><span class="line">    ycrcb = cv.cvtColor(frame, cv.COLOR_BGR2YCR_CB)</span><br><span class="line">    y, cr, cb = cv.split(ycrcb)</span><br><span class="line">    cr_ = cv.GaussianBlur(cr, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>) <span class="comment"># 高斯模糊</span></span><br><span class="line">   _, skin = cv.threshold(cr_, <span class="number">0</span>, <span class="number">255</span>, cv.THRESH_BINARY | cv.THRESH_OTSU) <span class="comment"># otsu二值化 </span></span><br><span class="line">    ret = cv.bitwise_and(frame, frame, mask=skin)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><center><img src="https://pic.downk.cc/item/5f00064814195aa5946a5c36.png" style="zoom:50%;"></center><center>处理前</center><center><img src="https://pic.downk.cc/item/5f000a5c14195aa5946bfd10.png" style="zoom:50%;"></center><center>处理后</center></li><li><p>提取轮廓并计算傅里叶算子</p><p>提取轮廓可以用opencv中的findContour。计算傅里叶算子可以理解为提取特征。</p><center><img src="https://pic.downk.cc/item/5f000a5c14195aa5946bfd10.png" style="zoom:50%;"></center><center>处理前</center> <center><img src="https://pic.downk.cc/item/5f000ad514195aa5946c30ba.png" style="zoom:50%;"></center><center>处理后</center><p>代码如下：</p><p>提取轮廓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findContour</span><span class="params">(Laplacian)</span>:</span></span><br><span class="line">    h = cv.findContours(Laplacian, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_NONE)</span><br><span class="line">    contour = h[<span class="number">0</span>]</span><br><span class="line">    contour = sorted(contour, key=cv.contourArea, reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> contour</span><br></pre></td></tr></table></figure></li></ul><p>  计算傅里叶算子：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trucate</span><span class="params">(des)</span>:</span></span><br><span class="line">    ret = np.fft.fftshift(des)</span><br><span class="line">    centerIdx = int(len(ret) / <span class="number">2</span>)</span><br><span class="line">    low, high = centerIdx - int(MIN_DESCRIPTOR / <span class="number">2</span>), centerIdx + int(MIN_DESCRIPTOR / <span class="number">2</span>)</span><br><span class="line">    ret = ret[low:high]</span><br><span class="line">    ret = np.fft.ifftshift(ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fourier</span><span class="params">(frame)</span>:</span></span><br><span class="line">    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)</span><br><span class="line">    dst = cv.Laplacian(gray, cv.CV_16S, ksize=<span class="number">3</span>)</span><br><span class="line">    Laplacian = cv.convertScaleAbs(dst)</span><br><span class="line">    contour = findContour(Laplacian)</span><br><span class="line">    contourArray = contour[<span class="number">0</span>][:, <span class="number">0</span>, :]</span><br><span class="line">    retbg = np.ones(dst.shape, np.uint8)</span><br><span class="line">    ret = cv.drawContours(retbg, contour[<span class="number">0</span>], <span class="number">-1</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">    contourComplex = np.empty(contourArray.shape[:<span class="number">-1</span>], dtype=complex)</span><br><span class="line">    contourComplex.real = contourArray[:, <span class="number">0</span>]</span><br><span class="line">    contourComplex.imag = contourArray[:, <span class="number">1</span>]</span><br><span class="line">    fourierResult = np.fft.fft(contourComplex)</span><br><span class="line">    desInUse = trucate(fourierResult)</span><br><span class="line">    <span class="keyword">return</span> ret, desInUse</span><br></pre></td></tr></table></figure><p>  根据傅里叶算子重构：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reconstruct</span><span class="params">(img, desInUse)</span>:</span></span><br><span class="line">    contour_reconstruct = np.fft.ifft(descirptor_in_use)</span><br><span class="line">    contour_reconstruct = np.array([contour_reconstruct.real, contour_reconstruct.imag])</span><br><span class="line">    contour_reconstruct = np.transpose(contour_reconstruct)</span><br><span class="line">    contour_reconstruct = np.expand_dims(contour_reconstruct, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> contour_reconstruct.min() &lt; <span class="number">0</span>:</span><br><span class="line">        contour_reconstruct -= contour_reconstruct.min()</span><br><span class="line">    contour_reconstruct *= img.shape[<span class="number">0</span>] / contour_reconstruct.max()</span><br><span class="line">    contour_reconstruct = contour_reconstruct.astype(np.int32, copy=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    black_np = np.ones(img.shape, np.uint8)  <span class="comment"># 创建黑色幕布</span></span><br><span class="line">    black = cv2.drawContours(black_np, contour_reconstruct, <span class="number">-1</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>)  <span class="comment"># 绘制白色轮廓</span></span><br><span class="line">    cv2.imshow(<span class="string">'contour_reconstruct'</span>, black)</span><br><span class="line">    <span class="keyword">return</span> black</span><br></pre></td></tr></table></figure><p>完成上面这些步骤后，就可以得到原始的训练样本了。</p><p>接着还要处理得到测试集与训练集。这里做的事情包括:</p><ul><li><p>改变原始图片尺寸</p><p>将尺寸从$300\times 300$改成$128\times 128$。</p></li><li><p>归一化</p><p>将图片中每个像素的值除以255。</p></li><li><p>划分测试集与训练集</p></li></ul><p>最后搭建CNN并训练了。CNN的结构如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Layer</th><th style="text-align:center">Width</th><th style="text-align:center">Height</th><th style="text-align:center">Filter</th><th style="text-align:center">Kernel Size</th></tr></thead><tbody><tr><td style="text-align:center">Input</td><td style="text-align:center">128</td><td style="text-align:center">128</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">Convolution</td><td style="text-align:center">128</td><td style="text-align:center">128</td><td style="text-align:center">32</td><td style="text-align:center">3×3</td></tr><tr><td style="text-align:center">Max Pooling</td><td style="text-align:center">64</td><td style="text-align:center">64</td><td style="text-align:center">32</td><td style="text-align:center">2×2</td></tr><tr><td style="text-align:center">Convolution</td><td style="text-align:center">64</td><td style="text-align:center">64</td><td style="text-align:center">64</td><td style="text-align:center">3×3</td></tr><tr><td style="text-align:center">Max Pooling</td><td style="text-align:center">32</td><td style="text-align:center">32</td><td style="text-align:center">64</td><td style="text-align:center">2×2</td></tr><tr><td style="text-align:center">Convolution</td><td style="text-align:center">32</td><td style="text-align:center">32</td><td style="text-align:center">128</td><td style="text-align:center">3×3</td></tr><tr><td style="text-align:center">Max Pooling</td><td style="text-align:center">16</td><td style="text-align:center">16</td><td style="text-align:center">128</td><td style="text-align:center">2×2</td></tr><tr><td style="text-align:center">Flatten</td><td style="text-align:center">32768</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">Dense</td><td style="text-align:center">64</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">Dropout</td><td style="text-align:center">64</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">Dense</td><td style="text-align:center">9</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table></div><p>最终训练结果：</p><p><img src="https://pic.downk.cc/item/5f00128a14195aa5946f60ad.jpg" alt></p><p>效果还不错（至少目前来说）</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>前端部分做的事情除了展示界面，还包括以下这些：</p><ul><li><p>采集手势</p><p>调用摄像头并读取图像帧。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMedia</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> constraints = &#123;</span><br><span class="line">    video: &#123;</span><br><span class="line">      width: <span class="number">400</span>, </span><br><span class="line">      height: <span class="number">400</span>, </span><br><span class="line">      facingMode: <span class="string">'user'</span>,</span><br><span class="line">      mirrored: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    audio: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> promise = navigator.mediaDevices.getUserMedia(constraints);</span><br><span class="line">  promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">MediaStream</span>) </span>&#123;</span><br><span class="line">    video.srcObject = MediaStream;</span><br><span class="line">    video.play();</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">PermissionDeniedError</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(PermissionDeniedError);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据处理</p><p>  其实就是把在Opencv里的东西在Opencv.js上再实现一遍</p></li><li><p>模型预测</p><p>将处理后的图像帧数据转换为Tensorflow.js输入所对应的格式后，将其输入上述已经训练好的模型中，获得预测值</p></li><li><p>手势判断与输出</p><p>根据模型预测输出的Tensor判断手势类型，且根据“阈值溢出机制”判断是否向服务器发送手势。什么是“阈值溢出机制”呢？实际上就是，单位时间内，如果某个手势的出现频率超过一个阈值$\lambda(&gt;0.5)$，则认为这一手势就是当前手势。</p></li></ul><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>这一部分通过TCP协议获取前端的手势识别结果，并根据这一结果，通过调用robot.js来完成相应操作。</p><p>服务端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</span><br><span class="line"><span class="keyword">const</span> robot = <span class="built_in">require</span>(<span class="string">'robotjs'</span>)</span><br><span class="line"><span class="keyword">let</span> controlable = <span class="literal">false</span><span class="comment">//解锁</span></span><br><span class="line"><span class="keyword">let</span> directable = <span class="literal">false</span><span class="comment">//开启上下左右键</span></span><br><span class="line"><span class="keyword">let</span> key_set = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear_key</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; key_set.length; index++) &#123;</span><br><span class="line">    robot.keyToggle(key_set[index], <span class="string">'up'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  key_set = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minimize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'minimize'</span>)</span><br><span class="line">  pre_gesture = <span class="number">7</span>;</span><br><span class="line">  robot.keyToggle(<span class="string">'command'</span>, <span class="string">'down'</span>)</span><br><span class="line">  robot.keyTap(<span class="string">'D'</span>)</span><br><span class="line">  robot.keyToggle(<span class="string">'command'</span>, <span class="string">'up'</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'closeWin'</span>)</span><br><span class="line">  pre_gesture = <span class="number">4</span>;</span><br><span class="line">  robot.keyToggle(<span class="string">'alt'</span>, <span class="string">'down'</span>)</span><br><span class="line">  robot.keyTap(<span class="string">'f4'</span>)</span><br><span class="line">  robot.keyToggle(<span class="string">'alt'</span>, <span class="string">'up'</span>)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">altTab</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'altTab'</span>)</span><br><span class="line">  pre_gesture = <span class="number">8</span>;</span><br><span class="line">  robot.keyToggle(<span class="string">'alt'</span>, <span class="string">'down'</span>)</span><br><span class="line">  key_set.push(<span class="string">'alt'</span>)</span><br><span class="line">  robot.keyTap(<span class="string">'tab'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">re_altTab</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'re_altTab'</span>)</span><br><span class="line">  pre_gesture = <span class="number">9</span>;</span><br><span class="line">  robot.keyToggle(<span class="string">'alt'</span>, <span class="string">'down'</span>)</span><br><span class="line">  key_set.push(<span class="string">'alt'</span>)</span><br><span class="line">  robot.keyToggle(<span class="string">'shift'</span>, <span class="string">'down'</span>)</span><br><span class="line">  key_set.push(<span class="string">'shift'</span>)</span><br><span class="line">  robot.keyTap(<span class="string">'tab'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">audioMute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'audio_mute'</span>)</span><br><span class="line">  robot.keyTap(<span class="string">'audio_mute'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pre_gesture;</span><br><span class="line"><span class="keyword">const</span> server = net.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">sock</span>) </span>&#123;</span><br><span class="line">  sock.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'close socket'</span>)</span><br><span class="line">    server.close()</span><br><span class="line">  &#125;)</span><br><span class="line">  sock.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok!'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">    <span class="keyword">let</span> stringifyData = data.toString()</span><br><span class="line">    <span class="keyword">if</span> (stringifyData === <span class="string">'5'</span>) &#123;</span><br><span class="line">      directable = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (controlable) &#123;</span><br><span class="line">        controlable = <span class="literal">false</span>;</span><br><span class="line">        clear_key();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        controlable = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      pre_gesture = stringifyData;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (controlable) &#123;</span><br><span class="line">      <span class="keyword">if</span> (directable) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stringifyData === <span class="string">'1'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'up'</span>)</span><br><span class="line">          robot.keyTap(<span class="string">'up'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">'7'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'down'</span>)</span><br><span class="line">          robot.keyTap(<span class="string">'down'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">'8'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'right'</span>)</span><br><span class="line">          robot.keyTap(<span class="string">'right'</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">'9'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'left'</span>)</span><br><span class="line">          robot.keyTap(<span class="string">'left'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stringifyData != pre_gesture) &#123;</span><br><span class="line">          clear_key()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stringifyData === <span class="string">'6'</span>) &#123;</span><br><span class="line">          audioMute()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">'7'</span>) &#123;</span><br><span class="line">          minimize()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">'4'</span>) &#123;</span><br><span class="line">          directable = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">'2'</span>) &#123;</span><br><span class="line">          closeWindow()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">'9'</span>) &#123;</span><br><span class="line">          re_altTab()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">'8'</span>) &#123;</span><br><span class="line">          altTab()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'listening'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start listening'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'listen error'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'stop listening'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(&#123;</span><br><span class="line">  port: <span class="number">6080</span>,</span><br><span class="line">  host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">  exclusive: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>electron的主进程中连接服务端并发送手势识别结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sockConfig = &#123;</span><br><span class="line">  port: <span class="number">6080</span>,</span><br><span class="line">  host: <span class="string">'127.0.0.1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sock = net.connect(sockConfig, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'connected to server!'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">sock.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'connect success'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendGesture</span>(<span class="params">ges</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ges2string = ges.toString()</span><br><span class="line">  <span class="built_in">console</span>.log(ges2string)</span><br><span class="line">  sock.write(ges2string)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终实现效果"><a href="#最终实现效果" class="headerlink" title="最终实现效果"></a>最终实现效果</h2><p><img src="https://pic.downk.cc/item/5f00185114195aa59471b6bb.png"></p><center>为了避免误操作，一开始是上锁状态，无法操作</center><p><img src="https://pic.downk.cc/item/5f00188214195aa59471cc29.png"></p><center>手势5解锁</center><p><img src="https://pic.downk.cc/item/5f0018a814195aa59471daeb.png"></p><center>无法识别手势，需要调整手势</center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f00278014195aa594787856.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="https://mimori.coding.me/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://mimori.coding.me/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="手势识别" scheme="https://mimori.coding.me/tags/%E6%89%8B%E5%8A%BF%E8%AF%86%E5%88%AB/"/>
    
      <category term="人机交互" scheme="https://mimori.coding.me/tags/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/"/>
    
      <category term="JavaScript" scheme="https://mimori.coding.me/tags/JavaScript/"/>
    
      <category term="Electron" scheme="https://mimori.coding.me/tags/Electron/"/>
    
      <category term="Tensorflow" scheme="https://mimori.coding.me/tags/Tensorflow/"/>
    
      <category term="Python" scheme="https://mimori.coding.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>AGC016B Colorful Hats</title>
    <link href="https://mimori.coding.me/2020/03/03/ACG016B-Colorful-Hats/"/>
    <id>https://mimori.coding.me/2020/03/03/ACG016B-Colorful-Hats/</id>
    <published>2020-03-03T15:02:00.000Z</published>
    <updated>2020-04-28T08:02:17.320Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5e5e72b398271cb2b862f2b8.jpg" alt></p><a id="more"></a><p>题意是说，每只猫都带有一定帽子，且每只猫能看到除自己以外的其他人的帽子总共有多少种颜色。问是否能构造出一个帽子颜色的序列，满足每只猫看到的颜色数目。</p><p>设看到的颜色数的最大值为$maxi$，最小值为$mini$。</p><p>一个显而易见的结论是，如果$maxi-mini&gt;1$，则结果为No(可自行验证)</p><p>然后考虑$maxi==mini$的情况。如果两者的值是1或$n-1$，那结果是Yes</p><p>否则，对于任意一种颜色，必须要有至少两只猫的帽子是这种颜色的。（草稿纸上画个图即可知道，原因是，假设有一种颜色只被一只猫所拥有，因为自己是看不到自己的帽子的，所以对于这只猫来说，他所看到的帽子的颜色会比其他猫所看到的颜色少一种，这就不符合初始条件）</p><p>最后考虑$maxi!=mini$的情况。对于那些颜色数为$mini$的猫，其帽子的颜色必然只为它所拥有，即这种颜色只会在一只猫的头上出现；而对于那些颜色数为$maxi$的猫，其帽子的颜色则至少要被两只猫拥有。所以可以先把颜色数为$mini$的都填充了，然后看看剩下的颜色是否可以保证填入剩下的猫之后，每种颜色至少被两只猫所拥有。</p><p>PS：蒟蒻第一次做atcoder，感觉真的好锻炼思维qwq</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> arr[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> maxi=-INF;<span class="keyword">int</span> mini=INF;</span><br><span class="line">    <span class="keyword">int</span> minicnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i]);</span><br><span class="line">        maxi=<span class="built_in">max</span>(maxi,arr[i]);</span><br><span class="line">        mini=<span class="built_in">min</span>(mini,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==mini) minicnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(maxi-mini&gt;<span class="number">1</span>||maxi&gt;n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maxi==mini)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mini==n<span class="number">-1</span>||mini==<span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n/mini&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maxi!=mini)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=n-minicnt;</span><br><span class="line">        <span class="keyword">int</span> y=maxi-minicnt;</span><br><span class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x/y&lt;<span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5e5e72b398271cb2b862f2b8.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="Atcoder" scheme="https://mimori.coding.me/categories/ACM/Atcoder/"/>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="Atcoder" scheme="https://mimori.coding.me/tags/Atcoder/"/>
    
      <category term="思维" scheme="https://mimori.coding.me/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>线段树与树状数组总结</title>
    <link href="https://mimori.coding.me/2020/02/05/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/"/>
    <id>https://mimori.coding.me/2020/02/05/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</id>
    <published>2020-02-05T15:04:00.000Z</published>
    <updated>2020-07-02T09:28:30.210Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5e3adbdf2fb38b8c3ccee2f7.jpg" alt><br><a id="more"></a><br>本文章为2020年寒训用资料，有部分删减</p><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>问题引入：</p><ul><li>问题一：给定一个长度为$n$的数列，可以进行$m$次询问，每次询问查询区间$[l,r]$内所有数的和<ul><li>如果数据范围很小（例如$n\leq 1000,m\leq 100$），可以直接枚举。复杂度$O(n)$</li><li>如果数据范围较大（例如$n\leq 1e6,m\leq 1e3$），可以用前缀和。复杂度$O(n+m)$</li></ul></li><li>问题二：给定一个长度为$n$的数列，可以进行$m$次操作，操作分两种，一种是修改单点的数值，另一种是查询区间$[l,r]$内所有数的和<ul><li>如果数据范围很小，依然可以枚举。复杂度$O(n)$</li><li>但大数据范围的情况下会TLE</li><li>此时即使使用前缀和，在进行修改操作后需要维护前缀和，故复杂度与枚举一致。大数据范围的情况下依然会TLE</li></ul></li><li>问题三：给定一个长度为$n$的数列，可以进行$m$次操作，操作分两种，一种是修改区间$[l,r]$内每个数的数值，另一种是查询区间$[l,r]$内所有数的和<ul><li>数据范围小的话当然可以枚举……</li><li>如果数据范围很大呢？（例如$n\leq 1e6,m\leq 1e3$）</li></ul></li></ul><h3 id="线段树是什么"><a href="#线段树是什么" class="headerlink" title="线段树是什么"></a>线段树是什么</h3><p>线段树是一种二叉树，它的基本思想是在二叉树的节点上保存区间信息，并在树上进行区间\单点的修改和查询。下图是区间$[1,7]$对应的线段树</p><p><img src="https://pic.downk.cc/item/5e3ada242fb38b8c3cceb6bb.png" alt></p><p>上面这张图所表示的意思是，以求区间和为例，对于区间$[1,7]$，其区间和等于其左儿子$([1,4])$的区间和加上其右儿子$[5,7]$的区间和；而区间$[1,4]$的区间和又等于区间$[1,2]$和区间$[3,4]$的和。对于一个区间$[lef,rig]$，其左右儿子分别为$[lef,\lfloor(lef+rig)/2\rfloor]$，$[\lfloor(lef+rig)/2\rfloor+1,rig]$。对于线段树上的各节点，我们采取从上到下、从左往右的编号方法。具体而言，以上图为例，$[1,7]$是编号为1，$[1,4]$编号为2，$[5,7]$编号为3……</p><p>对于查询与修改，线段树的复杂度都是$O(\log_2n)$</p><h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><p>根据线段树的结构和节点编号方式，我们很容易得到以下建树方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line">        sum[rt]=tmp;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    build(lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很短，但有些地方可能会让初次接触的人稍微有点疑惑：</p><ul><li><p>maxn&lt;&lt;2是什么意思？</p><p>此处maxn表示的是最大区间长度，maxn&lt;&lt;2等同于4 * maxn。sum是用来存我们的线段树节点的数组。为什么需要开4倍大的空间呢？首先，线段树是一棵完全二叉树，  对于一棵完全二叉树，假如有$n$个叶子节点（对应到线段树上就是区间总长度为$n$），其总节点数为$2n-1$。似乎开2倍就够了呢……但经验告诉我们，开四倍是较为保险的选择，既不会太大导致MLE，也不会太小导致越界。</p></li><li><p>rt&lt;&lt;1和rt&lt;&lt;1|1</p><p>由于线段树节点的编号方式，父节点和其两个子节点的编号存在这样的关系：<script type="math/tex">id_{leftson}=2\times id_{father}</script>，<script type="math/tex">id_{rigson}=2\times id_{father}+1</script></p><p>为了提高速度，我们使用位运算来代替乘法、加法。</p></li><li><p>pushup</p><p>父亲节点的信息来自于两个子节点，故在完成子节点的建立后，我们要用两个子节点来建立父亲节点</p></li></ul><h3 id="单点操作"><a href="#单点操作" class="headerlink" title="单点操作"></a>单点操作</h3><p>单点操作包括单点查询与单点修改</p><h4 id="单点查询"><a href="#单点查询" class="headerlink" title="单点查询"></a>单点查询</h4><p>单点查询的大致思想与二分查找类似。如果需要查询的位置$pos$在当前区间的左侧，则查找当前区间的左儿子；否则，查找当前区间的右儿子。重复这一过程，直至区间左右端点相等，则说明已经找到。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        ans=sum[rt];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) query(pos,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos&gt;mid) query(pos,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h4><p>单点修改代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> val,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        sum[rt]+=val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) update(pos,val,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos&gt;mid) update(pos,val,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与单点查询基本一致，但要记得最后pushup一下来更新父节点。</p><h3 id="区间操作"><a href="#区间操作" class="headerlink" title="区间操作"></a>区间操作</h3><p>区间操作的总体思想是，对于带查询的区间$[L,R]$，如果当前区间$[lef,rig]$完全包含在带查询区间中，就直接将$[lef,rig]$上的信息统计到答案中。如下所示</p><script type="math/tex; mode=display">\underbrace{L,L+1,\dots \overbrace{lef,lef+1,\dots ,rig-1,rig}\dots ,R-1,R}</script><p>否则，如果当前区间不是完全包含在待查询区间内，就查询左儿子或右儿子。如下所示</p><script type="math/tex; mode=display">\rlap{\overbrace{\phantom{lef,lef+1,\dots,L,L+1,\dots,rig-1,rig}}} lef,lef+1,\dots, \underbrace{L, L+1,\dots,rig-1,rig,\dots,R-1,R}</script><h4 id="区间查询"><a href="#区间查询" class="headerlink" title="区间查询"></a>区间查询</h4><p>借用上面所提到的总体思想，可以写出这样的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef&gt;=L&amp;&amp;rig&lt;=R)&#123;</span><br><span class="line">           <span class="keyword">return</span> sum[rt];     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret+=query(L,R,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) ret+=query(L,R,mid+<span class="number">1</span>,rt&lt;&lt;<span class="number">1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h4><p>借用单点修改的思想，很容易想到，区间修改就是相当于调用多次单点修改，把区间内的数字都修改了。举个例子，对于区间$[1,7]$，如果我们要修改$[2,7]$内的数，那最终被修改的节点如下图所示<br><img src="https://pic.downk.cc/item/5e3ada522fb38b8c3ccebc1d.png" alt></p><p>一个很明显的问题在于，这样做的话，复杂度会比直接暴力修改还高！而且，如果我要查询的只是$[5,7]$的子区间，那就会存在不必要的修改。比如说我要查询$[1,5]$，那$[5,6]$等等的修改就没有用。</p><p>事实上，要修改区间$[2,7]$，我们可以仅仅修改我们需要的区间。具体而言，修改的时候只需要修改$[1,7],[1,4],[1,2],[2,2],[3,4],[5,7]$。等到需要查询这些区间以外的区间时，再去进行相应的修改。这就是懒惰标记（lazy tag）的思想</p><p>所谓懒惰，就是“要用的时候才用，否则就不用”。具体来说，懒惰标记用于存储父节点的修改信息，但暂时不把信息传给子节点，等到需要用到子节点时再把信息传给子节点。</p><p>加上了懒惰标记的区间修改代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]+=lazy[rt];</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lazy[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>]*(len-(len&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*(len&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        lazy[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef&gt;=L&amp;&amp;rig&lt;=R)&#123;</span><br><span class="line">        sum[rt]+=val*(rig-lef+<span class="number">1</span>);</span><br><span class="line">        lazy[rt]+=val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) update(L,R,val,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) update(L,R,val,mid+<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上懒惰标记后，同样是修改$[2,7]$这一区间，被修改的区间如下所示：</p><p><img src="https://pic.downk.cc/item/5e3ada6a2fb38b8c3ccebf3e.png" alt></p><p>另外，在引入了懒惰标记后，单点查询、区间查询的代码也要更改（其实就是加上pushdown而已）。具体如下：</p><p>单点查询：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">           <span class="keyword">return</span> sum[rt];     </span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef&lt;=mid) ret+=query(pos,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rig&gt;mid) ret+=query(pos,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区间查询：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;=lef&amp;&amp;R&lt;=rig)&#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret+=query(L,R,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) ret+=query(L,R,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="减法运算和乘法运算"><a href="#减法运算和乘法运算" class="headerlink" title="减法运算和乘法运算"></a>减法运算和乘法运算</h3><p>上面所提到的都是修改与查询都是基于加法的，那如果是减法、乘法、除法呢？</p><ul><li><p>如果是减法的话就直接加上负数即可。</p></li><li><p>如果是乘法或除法的话，就要另当别论。</p><p>（此处只讨论区间查询与区间修改，如果区间的会了，单点肯定也会吧 :D）</p><ul><li><p>对于乘法，只需要像这个样子修改update：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef&gt;=L&amp;&amp;rig&lt;=R)&#123;</span><br><span class="line">        lazy[rt]*=val;</span><br><span class="line">        sum[rt]*=lazy[rt];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) update(L,R,val,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) update(L,R,val,rson);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样修改pushdown：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt]!=<span class="number">1</span>)&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]*=lazy[rt];</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*=lazy[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>]=sum[rt&lt;&lt;<span class="number">1</span>]*lazy[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*lazy[rt];</span><br><span class="line">        lazy[rt]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外要记得初始化lazy中所有数为1</p><p>PS：思考一下，如果是乘法和加法同时进行，即区间修改操作中，既可以将区间上的数乘以一个数，也可以将区间上的数加上一个数，那要怎么维护sum和lazy呢？</p></li></ul></li></ul><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>所谓离散化指的是，在某些情况下，由于数据范围过大，直接保存数据的做法会导致MLE；但要解出题目其实并不需要保存实际的数据，只需要保存数据之间的相对大小即可。举个例子，现在要在一条长度为$1e9$的线段上进行区间染色，颜色与颜色之间会相互覆盖，求最终线段上可以看到多少种颜色。显然，我们不可能开一个长度为$4e9$的数组来存线段树节点，也不可能开一个长度为$4e9$的数组来存懒惰标记。如何解决这一问题呢？注意到，我们现在其实并不关心被染色的线段具体有多长，而只关心线段之间的关系（相对大小，位置关系）。所以我们可以为每一个需要染色的区间的左右端点分配一个id，并通过id来建立线段树。所有的修改与查询都在这棵”id线段树“上进行。离散化的实际实现一般通过sort()和unique。</p><p>下面用一道例题来讲解：</p><p><a href="http://poj.org/problem?id=2528" rel="external nofollow noopener noreferrer" target="_blank">Mayor’s posters</a></p><p>题目大意是说，有一堵长为10000000，现在要在墙上贴$n(1\leq n\leq 10000)$张海报（海报与海报之间会相互覆盖），问贴完所有海报后，能看到的海报有多少张？</p><p>与上面提到的染色问题思路一致，将每张海报离散化后，用离散化得到的id建立线段树，并通过query查询能看到的海报的数目。完成离散化后，通过lower_bound()查询左右端点对应的id。</p><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10000</span>+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lef;</span><br><span class="line">    <span class="keyword">int</span> rig;</span><br><span class="line">&#125;;</span><br><span class="line">node ps[<span class="number">20000</span>+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt]!=<span class="number">0</span>)&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[rt];</span><br><span class="line">        lazy[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> todo,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig)&#123;</span><br><span class="line">        lazy[rt]=todo;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        update(toL,toR,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        update(toL,toR,todo,rson);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[lazy[rt]])&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            vis[lazy[rt]]=<span class="number">1</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef&lt;=mid)</span><br><span class="line">        query(lson);</span><br><span class="line">    <span class="keyword">if</span>(rig&gt;mid)</span><br><span class="line">        query(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> lsh[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        mst(lsh,<span class="number">0</span>);</span><br><span class="line">        mst(lazy,<span class="number">0</span>);mst(vis,<span class="number">0</span>);</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;ps[i].lef,&amp;ps[i].rig);</span><br><span class="line">            lsh[idx++]=ps[i].lef;lsh[idx++]=ps[i].rig;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(lsh,lsh+idx);</span><br><span class="line">        <span class="keyword">int</span> cnt=unique(lsh,lsh+idx)-lsh;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> L=lower_bound(lsh,lsh+cnt,ps[i].lef)-lsh+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> R=lower_bound(lsh,lsh+cnt,ps[i].rig)-lsh+<span class="number">1</span>;</span><br><span class="line">            update(L,R,i+<span class="number">1</span>,<span class="number">1</span>,cnt+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        query(<span class="number">1</span>,cnt+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>拓展内容包括：</p><ul><li><p>区间除、维护区间平方和、维护区间立方和、区间位运算…</p></li><li><p>扫描线</p></li><li>权值线段树</li><li>主席树</li><li>etc…</li></ul><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><p>所谓树状数组，就是用数组来模拟树形结构，常用于解决一些区间问题（区间加、区间求和等）。相较于线段树，其优点在于常数更小，且代码更短。缺点在于功能比较有限，对于一些复杂的区间问题很难解决，甚至是无法解决。可以说，能用树状数组解决的问题都能用线段树解决，但能用线段树解决的问题不一定能用树状数组解决。</p><h3 id="辅助数组c与lowbit"><a href="#辅助数组c与lowbit" class="headerlink" title="辅助数组c与lowbit"></a>辅助数组c与lowbit</h3><p>首先，定义一个序列$a_n$，其长度为$n(1\leq n\leq1e6)$，可进行$m(1\leq m \leq 1e3)$次操作，每次操作要么是对一个数加上一个数值（单点修改），要么是查询一段区间内的总和（区间查询）。</p><p>这一问题当然可以用上面所说的线段树来解决，但现在我们引入树状数组。</p><p>首先定义函数$lowbit(x)$，有</p><script type="math/tex; mode=display">lowbit(x)=x\&(-x)</script><p>$lowbit(x)$的具体含义在于，求出<script type="math/tex">x</script>最低位1所对应的值。比方说，<script type="math/tex">lowbit(10100_2)=100_2=4_{10}</script>，<script type="math/tex">lowbit(10001111_2)=1_2=1_{10}</script>，<script type="math/tex">lowbit(100010_2)=10_2=2_{10}</script></p><p>再定义一个辅助数组$c_i$，有</p><script type="math/tex; mode=display">c_i=a_{i}+a_{i-1}+\dots+a_{i-lowbit(i)+1}</script><p>也就是说，c[i]表示的是, 从a[i]开始，一直到 a[i-lowbit(i)+1] 这一长度为lowbit(i) 的连续区间的总和。如下图</p><p><img src="https://pic.downk.cc/item/5e3adb222fb38b8c3cced2a6.png" alt></p><p>构建出来的树状数组大致长下面这个样子</p><p><img src="https://pic.downk.cc/item/5e3adb452fb38b8c3cced59d.jpg" alt></p><h3 id="修改与查询"><a href="#修改与查询" class="headerlink" title="修改与查询"></a>修改与查询</h3><p>此处只考虑单点修改和区间查询。</p><ul><li><p>单点修改：当我们要修改<script type="math/tex">a_j</script>的时候，因为有<script type="math/tex">c_i=a_i+a_{i-1}+\dots+a_{i-lowbit(i)+1}</script>，所以修改一个数可能会导致多个<script type="math/tex">c_i</script>的改变。所以我们这么编写单点修改的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        c[i]+=val;</span><br><span class="line">        i+=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于区间查询，$c_i$的定义让我们想到，是否可以通过求前缀和的方法求区间和。因此，查询的代码可以这样编写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        ans+=c[i];</span><br><span class="line">        i-=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>通过观察修改、查询的代码，以及树状数组的结构，我们可以看出，树状数组其实巧用二进制来对整个序列进行分段。以一个长度为7的序列为例，有</p><script type="math/tex; mode=display">\begin{aligned}lowbit(1)&=1,c_1=a_1;\\lowbit(2)&=2,c_2=a_2+a_1;\\lowbit(3)&=1,c_2=a_3;\\lowbit(4)&=4,c_4=a_4+a_3+a_2+a_1;\\lowbit(5)&=1,c_5=a_5;\\lowbit(6)&=2,c_6=a_6+a_5;\\lowbit(7)&=1,c_7=a_7;\end{aligned}</script><p>我们把这些数据套到query()代码中，可以发现，加上的$c[i]$分别是$c[7],c[6],c[4]$，也就是$a[7],a[6]+a[5],a[4]+a[3]+a[2]+a[1]$这三段。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5e3adbdf2fb38b8c3ccee2f7.jpg&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="数据结构" scheme="https://mimori.coding.me/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://mimori.coding.me/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="数据结构" scheme="https://mimori.coding.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://mimori.coding.me/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="树状数组" scheme="https://mimori.coding.me/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>2018-2019算法学习总结</title>
    <link href="https://mimori.coding.me/2019/11/25/2018%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://mimori.coding.me/2019/11/25/2018%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2019-11-25T10:30:00.000Z</published>
    <updated>2019-11-30T02:02:05.923Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.superbed.cn/item/5de1cd848e0e2e3ee92caa4b.jpg" alt><br><a id="more"></a></p><h4 id="正题开始前的bb"><a href="#正题开始前的bb" class="headerlink" title="正题开始前的bb"></a>正题开始前的bb</h4><p>写这篇东西的原因一方面是感觉自己已经学了一年多算法了，多少有点想法，应该做个总结记录一下。另一方面是今晚状态极差，本来打算写写cf的，结果一道水题因为一些傻逼错误wa了三发才过……</p><h4 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h4><p>总的来说，如果要让我用一句话评价这一年的算法学习的话，我会这么说：虽然编程能力与思维能力有一定的提升（与大一刚入学时相比），但付出的时间过多，获得的提升却过少。</p><p>原因在哪？</p><p>我的看法一直都是，无论是课内学习，还是课外学习，只要掌握了恰当的学习方法，再加以足够的时间投入，大概率可以获得自己能力极限内的成果。但我在做到了“足够的时间投入”的前提下，却不能获得足够好的成绩，说明原因在于学习方法（或者训练）上。</p><p>具体来说，个人认为自己学习竞赛算法时不正确的地方有这些。一个是过度依赖题解。往往出现这样的情况：在还没有尽全力解决一道题时，就去翻看题解，看着题解AC（真的是看着题解AC，虽然现在好一点，至少代码会自己实现，以前大一时真的有很长一段时间是90%地抄代码）。学习竞赛算法这种偏难的东西，思考非常重要，它能帮助学习者更深刻地理解一个算法或数据结构。而过度依赖题解就会导致思考过程被跳过，学习效果下降。这也是为什么我把kuangbin的线段树专题刷完且写了题解后，在比赛时依然很难AC线段树的题目。</p><p>另一个则是对比赛不够重视。lxdl说，每周至少要保证一场比赛。仔细想想，竞赛算法说到底是要用来比赛的，就像是高三学生学的文化课，说到底是用来高考的。算法竞赛选手在平时多参加比赛提高自己的能力，与高三学生刷衡水金卷是一样的，都是在模拟中提高自己的能力。平时比赛参加得少，正式赛时表现差不足为奇。这就像是高中生刷题，平时不好好刷卷子，高考时能考好吗？（大佬除外）扪心自问，从大一开始，你自发地打过多少场比赛呢？几次其他学校的校赛，两次coj，两次cf，好像就没了。每次比赛都以各种愿意说服自己不去参加，其实不过是不愿意面对自己菜的现实。但不面对现实，又怎能改变现实呢？</p><p>所以，往后的训练计划很简单：一是保证每天两道CF，分数高的不会做就先从每场比赛的A和B做起，要练到比赛时前两题半小时内AC。二是认真对待每一道题，仔细思考，直到自己真的想不出来了才去看题解。三是多参加比赛，coj也好cf也好牛客也好，反正不要钱，为什么不参加？每次都担心自己菜会打得很菜，这样下去只会永远这么菜！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic.superbed.cn/item/5de1cd848e0e2e3ee92caa4b.jpg&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="总结" scheme="https://mimori.coding.me/categories/ACM/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="总结" scheme="https://mimori.coding.me/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>CCPC2019哈尔滨站总结</title>
    <link href="https://mimori.coding.me/2019/10/15/CCPC2019%E5%93%88%E5%B0%94%E6%BB%A8%E7%AB%99%E6%80%BB%E7%BB%93/"/>
    <id>https://mimori.coding.me/2019/10/15/CCPC2019%E5%93%88%E5%B0%94%E6%BB%A8%E7%AB%99%E6%80%BB%E7%BB%93/</id>
    <published>2019-10-15T14:54:00.000Z</published>
    <updated>2019-10-16T11:20:50.775Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Hc44a6b020fd5413ca3b54eea908034afn.jpg" alt></p><a id="more"></a><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>萌新的第一场区域赛，抱队友大腿拿了个铜，不至于打铁qwq。队友实在太强辣！</p><h4 id="热身赛"><a href="#热身赛" class="headerlink" title="热身赛"></a>热身赛</h4><p>热身赛四道题，A，B都是傻逼题；C，D是牛客多校原题，然而我们并没有敲出来……C题原本的想法是枚举矩阵起点，然后单调栈维护纵向横向两个方向最远可以拓展的距离；后来听对面女队的小姐姐讨论，觉得可以尺取法搞搞，结果热身赛结束了都没弄出来😭。后悔没有好好补多校的题😭</p><p>热身赛草草结束，去东林恰了个晚饭，<del>东林的饭堂还挺好吃的</del></p><h4 id="正赛"><a href="#正赛" class="headerlink" title="正赛"></a>正赛</h4><p>正赛一共过了下面四题</p><div class="table-container"><table><thead><tr><th>Problem</th><th>Solution</th></tr></thead><tbody><tr><td>F - Fixing Banners</td><td>直接6!暴力枚举</td></tr><tr><td>I - Interesting Permutation</td><td>牛逼队友找规律，我一脸懵逼……</td></tr><tr><td>J - Justifying the Conjecture</td><td>>=5的情况都有解，奇数分解成3 + x，偶数分解成2 + x</td></tr><tr><td>K - Keeping Rabbits</td><td>无论经过多少天，概率分布都不会变化</td></tr></tbody></table></div><p>开场看题时沿用了我们队一直以来的策略，我从后面开始看题，zh学长从前面开始看题，pzc中间随便看。根据赛前训练的经验，签到题一般是倒数第二或第三题，再加上这次的倒数第一题是一道题面贼长的大模拟，于是看题时我没有从倒数第一题开始，而是直接选了最签到的 J，发现果然是水题，于是把题意喂给主代码手，10min内水过。</p><p>往后又看到了K，于是把题意告诉学长，然后自己接着看题。看题过程中发现了F和I，觉得有搞头，然后去搞了搞F，喂给学长和代码手，过了。紧接着是学长敲K，也是一发过。开场签到感觉很顺利，<del>然后就开始自闭了</del></p><p>签完前三题后，开始搞I 。题意是说给定一个$1$到$n$的排列$a_1,a_2,a_3,…,a_n$，对于两个序列<script type="math/tex">f_i=max\{a_1,a_2,a_3,...,a_i\}</script>，<script type="math/tex">g_i=min\{a_1,a_2,a_3,...,a_i\}</script>，定义$h_i=f_i-g_i$。现在给出一个$h$序列，问有多少个$1$到$n$的排列，可以生成这样的一个$h$序列。</p><p>第一反应是dp，但队里的dp选手想不出要怎么d OTZ。过了一会后牛逼队友发现这东西可以找规律解决，结果打了个表对拍一下，结果发现规律好像推错了……于是继续自闭，直到差不多一点的时候，队友才把正确的规律搞了出来，然后搞搞搞，终于过了😭。对于这题我个人感觉挺惭愧的，可以说除了读题对拍意外没有其他贡献，<del>后期还挂机了</del>。I题过了之后，排名上升到了121，终于苟到铜牌了OTZ</p><p>这时候还剩下一个半小时，感觉如果不把E过掉，很可能会打铁（不过事实证明还是能有铜的）。于是疯狂搞E，但最终还是很遗憾没有弄出来。赛后跟我校的另一支队了解了一下，得知他们将快读换成了A题题面上的快读就过了……过了……队友听到这都要哭了，<del>我也要哭了qwq</del></p><p>第一场区域赛，没有打铁，我个人已经非常满意了。大致总结一下自身的问题，一就是精神不够集中，容易进入挂机状态。无论是平时训练还是现场赛都是如此。二就是时间的利用效率还不够高，比如说这次现场赛，后期卡E题的时候，我对这题几乎是0贡献，那这时为什么我不去搞搞那两道模拟题，想个大概的框架，然后把题意和自己的想法喂给擅长模拟题的队友呢？或许这样我们能A五题？</p><p>就这样吧，这周银川站加油💪</p><h4 id="一些题外话"><a href="#一些题外话" class="headerlink" title="一些题外话"></a>一些题外话</h4><p><img src="https://ae01.alicdn.com/kf/H7d0f28ea3f4c49c19ad981ce10d5ac0du.jpg" alt></p><center>摄于深圳—哈尔滨的飞机上</center><p><img src="https://ae01.alicdn.com/kf/Hb1000c4c83664acb8eda52e37b4c3bdce.png" alt></p><center>东林里面居然还有个自然博物馆，我酸了qwq</center><p><img src="https://ae01.alicdn.com/kf/H3d63cdbd1f44496ca159ea95fcf3795cR.jpg" alt></p><center>哈尔滨特色锅包肉，然而并不喜欢甜食。。。</center><p><img src="https://ae01.alicdn.com/kf/Hc44a6b020fd5413ca3b54eea908034afn.jpg" alt></p><center>摄于哈尔滨太阳岛</center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/Hc44a6b020fd5413ca3b54eea908034afn.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="赛后总结" scheme="https://mimori.coding.me/categories/ACM/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="CCPC" scheme="https://mimori.coding.me/tags/CCPC/"/>
    
      <category term="赛后总结" scheme="https://mimori.coding.me/tags/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>最大流，最大流最小割与最大权闭合子图</title>
    <link href="https://mimori.coding.me/2019/10/10/%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%8C%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2%E4%B8%8E%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE/"/>
    <id>https://mimori.coding.me/2019/10/10/%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%8C%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2%E4%B8%8E%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE/</id>
    <published>2019-10-10T11:46:00.000Z</published>
    <updated>2019-10-11T00:44:53.078Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H5f34d005235d4ae08a65080af36eb1b35.jpg" alt><br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很久之前学过最大流，但当时网络流的学习便止步于此。国庆时做了几套去年ICPC Regional的题目，有好几道网络流相关的题目，遂决定复习一下最大流，同时学点新东西</p><h3 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h3><p>解决最大流问题主要有FF，EK，Dinic，ISAP这四种算法。FF和EK在时间复杂度上较劣，不适合用来解题，故大多数情况使用的都是Dinic和ISAP。而这两种算法相比较，虽然ISAP会比Dinic更快一点，但由于网络流相关的题目重点往往不在算法实现，而在于如何对问题建模。再加上Dinic的思路比ISAP更简明，实现也很简单，故实际解题时，Dinic使用得更多一些。</p><h4 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h4><h5 id="该算法的大致步骤如下："><a href="#该算法的大致步骤如下：" class="headerlink" title="该算法的大致步骤如下："></a>该算法的大致步骤如下：</h5><ol><li>连边，建立网络</li><li>BFS建立分层图</li><li>判断分层后汇点所处层次是否为-1。若是，说明此时汇点已不可达，直接输出答案；否则，进行下一步</li><li>一边DFS完成所有增广。对于网络中的每一条边，都加上当前的最小残量，同时对于每一条边的反向边，都减去当前的最小残量，并将答案加上该最小残量。</li><li>返回步骤2</li></ol><p>该算法的最坏时间复杂度为：$O(n^2 m)$，但大多数情况下都是挺快的</p><h5 id="当前弧优化"><a href="#当前弧优化" class="headerlink" title="当前弧优化"></a>当前弧优化</h5><p>每一次在做dfs时，对于一个点，有可能有一些边在之前已经计算过了，那我们在遍历这个点的边的时候，就没必要再计算那些已经计算过的边。因此，我们可以用一个cur[]数组记录某个点已经计算到了那条边。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> head[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cur[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;<span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">int</span> wei;</span><br><span class="line">&#125;;</span><br><span class="line">edge es[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;mst(head,<span class="number">-1</span>);</span><br><span class="line">    mst(dep,<span class="number">-1</span>);mst(cur,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[cnt].to=v;</span><br><span class="line">    es[cnt].wei=wei;</span><br><span class="line">    es[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(u,v,wei);</span><br><span class="line">    add(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    mst(dep,<span class="number">-1</span>);dep[s]=<span class="number">0</span>;</span><br><span class="line">    que.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==<span class="number">-1</span>)&#123;</span><br><span class="line">                dep[es[i].to]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                que.push(es[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> mini)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==t) <span class="keyword">return</span> mini;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=cur[s];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==dep[s]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> d=dfs(es[i].to,t,<span class="built_in">min</span>(es[i].wei,mini));</span><br><span class="line">            <span class="keyword">if</span>(d&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                es[i].wei-=d;</span><br><span class="line">                es[i^<span class="number">1</span>].wei+=d;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;<span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(bfs(s,t))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) cur[i]=head[i];</span><br><span class="line">        <span class="keyword">while</span>((tmp=dfs(s,t,INF))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,s,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        add_edge(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=Dinic(s,t,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验板子"><a href="#验板子" class="headerlink" title="验板子"></a>验板子</h5><p><a href="https://www.luogu.org/problem/P3376" rel="external nofollow noopener noreferrer" target="_blank">P3376 【模板】网络最大流</a></p><h3 id="最大流最小割"><a href="#最大流最小割" class="headerlink" title="最大流最小割"></a>最大流最小割</h3><h4 id="什么是割-什么是最小割？"><a href="#什么是割-什么是最小割？" class="headerlink" title="什么是割?什么是最小割？"></a>什么是割?什么是最小割？</h4><p>所谓的割，指的是对于一个网络上的一个边集，如果从网络上将该边集中的边都删去后，不存在一条从源点到汇点的路，则该边集称为割。最小割指的就是边权和最小的割</p><h4 id="一个结论"><a href="#一个结论" class="headerlink" title="一个结论"></a>一个结论</h4><center><strong>最小割&emsp;==&emsp;最大流</strong></center><p>我是这么理解这个结论的：因为割的意思是指拿掉割里面的边以后，就不能找到一条从源点到汇点的路了，也就是说割将网络的两个部分连接起来，拿掉之后网络就分成了两个部分。那我们是否可以将割集中的边合并成一条边呢？这样去理解的话就可以很容易得出这样一个结论：在满足最大流的情况下，这一条边的流量就是等于最大流。而又因为流量不能超过容量，故在满足最大流的情况下，任意一个割的容量和都是大于等于最大流的。在这个基础上，我们不断地去找容量和更小的割，最终一定能够找到一个割，他们的容量和等于最大流。为什么一定能找到呢？因为最大流意味着满流，意味着我们已经无法继续增广了。</p><h4 id="来道例题"><a href="#来道例题" class="headerlink" title="来道例题"></a>来道例题</h4><p><a href="https://www.luogu.org/problem/P2774" rel="external nofollow noopener noreferrer" target="_blank">P2774 方格取数</a></p><p>第一反应是贪心，隔一个数取一个什么的。但很容易就能举出反例。正确的做法是按照$(i+j)$（$i,j$分别是行数和列数）的奇偶来连边构建一个二分图。对于一个方格，如果其所在行加上所在列<script type="math/tex">row_{cur} + col_{cur}</script>为奇数，则将其与超级源点连一条容量为1的边；如果为偶数，则将其与超级汇点连一条容量为1的边。最后，对于左侧的奇数点，将它们与所有<strong>不符合限制的不能取的</strong>偶数点，即与它们相邻的那些点各连一条容量为INF的边。最后算一遍最小割，将所有方格的数的总和减去最小割即为答案。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug puts(<span class="meta-string">"debug"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> head[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cur[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;<span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">int</span> wei;</span><br><span class="line">&#125;;</span><br><span class="line">edge es[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;mst(head,<span class="number">-1</span>);</span><br><span class="line">    mst(dep,<span class="number">-1</span>);mst(cur,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[cnt].to=v;</span><br><span class="line">    es[cnt].wei=wei;</span><br><span class="line">    es[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(u,v,wei);</span><br><span class="line">    add(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    mst(dep,<span class="number">-1</span>);dep[s]=<span class="number">0</span>;</span><br><span class="line">    que.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==<span class="number">-1</span>)&#123;</span><br><span class="line">                dep[es[i].to]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                que.push(es[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> mini)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==t) <span class="keyword">return</span> mini;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=cur[s];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==dep[s]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> d=dfs(es[i].to,t,<span class="built_in">min</span>(es[i].wei,mini));</span><br><span class="line">            <span class="keyword">if</span>(d&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                es[i].wei-=d;</span><br><span class="line">                es[i^<span class="number">1</span>].wei+=d;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;<span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(bfs(s,t))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) cur[i]=head[i];</span><br><span class="line">        <span class="keyword">while</span>((tmp=dfs(s,t,INF))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;mp[i][j]);</span><br><span class="line">            sum+=mp[i][j]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cntt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++,cntt++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i+j)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                add_edge(<span class="number">0</span>,cntt,mp[i][j]);</span><br><span class="line">                <span class="keyword">if</span>(j&lt;m) </span><br><span class="line">                    add_edge(cntt,cntt+<span class="number">1</span>,INF);</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">1</span>) </span><br><span class="line">                    add_edge(cntt,cntt<span class="number">-1</span>,INF);</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">1</span>) </span><br><span class="line">                    add_edge(cntt,cntt-m,INF);</span><br><span class="line">                <span class="keyword">if</span>(i&lt;n) </span><br><span class="line">                    add_edge(cntt,cntt+m,INF);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                add_edge(cntt,n*m+<span class="number">1</span>,mp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    debug;</span></span><br><span class="line">    <span class="keyword">int</span> ans=Dinic(<span class="number">0</span>,n*m+<span class="number">1</span>,n*m*<span class="number">2</span>);</span><br><span class="line">    ans=sum-ans;    <span class="comment">//总和减去最小割</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这道题中我们可以看出，最小割可以解决这样的一类问题，在满足某些限制的情况下，计算可以获得的最大价值。在这种情况下，我们可以先假设所有价值都可取，然后将那些不满足情况的作为割删去，那么求最小割就等价于求最小损失。</p><h3 id="最大权闭合子图"><a href="#最大权闭合子图" class="headerlink" title="最大权闭合子图"></a>最大权闭合子图</h3><h4 id="什么是最大权闭合子图？"><a href="#什么是最大权闭合子图？" class="headerlink" title="什么是最大权闭合子图？"></a>什么是最大权闭合子图？</h4><p>首先，闭合子图指的是对于一个图，我们从中选出一个子图，它的任意一个点的出度指向的点仍然在这个子图内。而最大权闭合子图指的就是所有闭合子图中点权和最大的那一个。</p><h4 id="如何求最大权闭合子图？"><a href="#如何求最大权闭合子图？" class="headerlink" title="如何求最大权闭合子图？"></a>如何求最大权闭合子图？</h4><p>有一个结论，对于一个图，满足</p><center><strong>最大权闭合子图权值=所有权值为正的权值总和-最大流</strong></center><p>证明不会……</p><p>如何得到这样的一个图呢？</p><ol><li>抽象出一个超级源点和一个超级汇点</li><li>将权值为正的点与源点连边，容量分别为各点点权</li><li>将权值为负的点与汇点连边，容量分别为各点点权的绝对值</li><li>权值为0的点不做处理</li><li>将除了源点和汇点之外的边按照题目中的关系连边，容量为INF</li></ol><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> head[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cur[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;<span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">int</span> wei;</span><br><span class="line">&#125;;</span><br><span class="line">edge es[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;mst(head,<span class="number">-1</span>);</span><br><span class="line">    mst(dep,<span class="number">-1</span>);mst(cur,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[cnt].to=v;</span><br><span class="line">    es[cnt].wei=wei;</span><br><span class="line">    es[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(u,v,wei);</span><br><span class="line">    add(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    mst(dep,<span class="number">-1</span>);dep[s]=<span class="number">0</span>;</span><br><span class="line">    que.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==<span class="number">-1</span>)&#123;</span><br><span class="line">                dep[es[i].to]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                que.push(es[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> mini)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==t) <span class="keyword">return</span> mini;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=cur[s];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==dep[s]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> d=dfs(es[i].to,t,<span class="built_in">min</span>(es[i].wei,mini));</span><br><span class="line">            <span class="keyword">if</span>(d&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                es[i].wei-=d;</span><br><span class="line">                es[i^<span class="number">1</span>].wei+=d;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;<span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(bfs(s,t))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) cur[i]=head[i];</span><br><span class="line">        <span class="keyword">while</span>((tmp=dfs(s,t,INF))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn&lt;&lt;<span class="number">1</span>],b[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);        <span class="comment">//学生 </span></span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;        <span class="comment">//活动 </span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        sum+=a[i];</span><br><span class="line">        <span class="keyword">int</span> k;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</span><br><span class="line">            add_edge(i,v+n,INF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) add_edge(<span class="number">0</span>,i,a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) add_edge(i+n,n+m+<span class="number">1</span>,b[i]);</span><br><span class="line">    <span class="keyword">int</span> ans=Dinic(<span class="number">0</span>,n+m+<span class="number">1</span>,n+m+<span class="number">3</span>);</span><br><span class="line">    ans=sum-ans;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测一下板子"><a href="#测一下板子" class="headerlink" title="测一下板子"></a>测一下板子</h4><p><a href="https://vjudge.net/problem/HihoCoder-1398" rel="external nofollow noopener noreferrer" target="_blank">网络流五·最大权闭合子图</a></p><h3 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h3><ul><li><a href="https://www.cnblogs.com/songorz/p/9642840.html" rel="external nofollow noopener noreferrer" target="_blank">最大权闭合子图</a></li><li><a href="https://blog.csdn.net/qq_41357771/article/details/79416899" rel="external nofollow noopener noreferrer" target="_blank">网络流【最大流&amp;&amp;最小割&amp;&amp;费用流】——一篇简单易懂的博文</a></li><li><a href="https://www.cnblogs.com/linzhengmin/p/9313216.html" rel="external nofollow noopener noreferrer" target="_blank">[算法]网络最大流Dinic<br>前言</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H5f34d005235d4ae08a65080af36eb1b35.jpg&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="图论" scheme="https://mimori.coding.me/categories/ACM/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="网络流" scheme="https://mimori.coding.me/categories/ACM/%E5%9B%BE%E8%AE%BA/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="网络流" scheme="https://mimori.coding.me/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="https://mimori.coding.me/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
      <category term="最大流最小割" scheme="https://mimori.coding.me/tags/%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2/"/>
    
      <category term="最大权闭合子图" scheme="https://mimori.coding.me/tags/%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>POJ2104 - Kth number 主席树or划分树模板</title>
    <link href="https://mimori.coding.me/2019/09/07/HDU2665-Kth-Number-%E4%B8%BB%E5%B8%AD%E6%A0%91or%E5%88%92%E5%88%86%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
    <id>https://mimori.coding.me/2019/09/07/HDU2665-Kth-Number-%E4%B8%BB%E5%B8%AD%E6%A0%91or%E5%88%92%E5%88%86%E6%A0%91%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-09-07T01:00:00.000Z</published>
    <updated>2019-09-07T01:13:13.399Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/He1712fd2c08f40a985b1ef436e9be051G.jpg" alt></p><a id="more"></a><p><a href="http://poj.org/problem?id=2104" rel="external nofollow noopener noreferrer" target="_blank">Kth number</a></p><p>模板题，题意是求区间第k大，套一下主席树模板或者划分树模板即可（屯板子）</p><p>代码如下：</p><p>主席树：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> rt[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> ls[maxn&lt;&lt;<span class="number">5</span>],rs[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span>&amp; root)</span>        <span class="comment">//其实就是一个为各节点分配id的过程 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    root=++tot;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)    <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lef,mid,ls[root]);</span><br><span class="line">    build(mid+<span class="number">1</span>,rig,rs[root]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> root)</span>        </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root_=++tot;        <span class="comment">//建一棵新树 </span></span><br><span class="line">    ls[root_]=ls[root];</span><br><span class="line">    rs[root_]=rs[root];</span><br><span class="line">    sum[root_]=sum[root]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)    <span class="keyword">return</span> root_;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;=mid)&#123;</span><br><span class="line">        ls[root_]=update(lef,mid,ls[root_]);        <span class="comment">//如果修改点在左儿子，就新建一个左儿子 </span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        rs[root_]=update(mid+<span class="number">1</span>,rig,rs[root_]);        <span class="comment">//如果修改点在右儿子，就新建一个右儿子 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> x=sum[ls[v]]-sum[ls[u]];</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)    <span class="keyword">return</span> lef;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=k)&#123;</span><br><span class="line">        ans=query(ls[u],ls[v],lef,mid,k);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ans=query(rs[u],rs[v],mid+<span class="number">1</span>,rig,k-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> arr[maxn];</span><br><span class="line"><span class="keyword">int</span> lisan[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    <span class="built_in">cin</span>&gt;&gt;arr[i],lisan[i]=arr[i];</span><br><span class="line">    sort(lisan+<span class="number">1</span>,lisan+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">int</span> len=unique(lisan+<span class="number">1</span>,lisan+<span class="number">1</span>+n)-lisan<span class="number">-1</span>;</span><br><span class="line">    build(<span class="number">1</span>,len,rt[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        p=lower_bound(lisan+<span class="number">1</span>,lisan+<span class="number">1</span>+len,arr[i])-lisan;</span><br><span class="line">        rt[i]=update(<span class="number">1</span>,len,rt[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> L,R,k;<span class="built_in">cin</span>&gt;&gt;L&gt;&gt;R&gt;&gt;k;</span><br><span class="line">        ans=query(rt[L<span class="number">-1</span>],rt[R],<span class="number">1</span>,len,k);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;lisan[ans]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>划分树：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> tree[<span class="number">20</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> to_lef[<span class="number">20</span>][maxn]; </span><br><span class="line"><span class="keyword">int</span> sorted[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> lev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>; </span><br><span class="line">    <span class="keyword">int</span> sup=mid-lef+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lef;i&lt;=rig;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[lev][i]&lt;sorted[mid])&#123;</span><br><span class="line">            sup--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sublef=lef;<span class="keyword">int</span> subrig=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lef;i&lt;=rig;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==lef)&#123;</span><br><span class="line">            to_lef[lev][i]=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            to_lef[lev][i]=to_lef[lev][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tree[lev][i]&lt;sorted[mid]||tree[lev][i]==sorted[mid]&amp;&amp;sup&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            tree[lev+<span class="number">1</span>][sublef++]=tree[lev][i];</span><br><span class="line">            to_lef[lev][i]++;</span><br><span class="line">            <span class="keyword">if</span>(tree[lev][i]==sorted[mid])    sup--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tree[lev+<span class="number">1</span>][subrig++]=tree[lev][i]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    build(lef,mid,lev+<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,rig,lev+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> lev,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L==R)    <span class="keyword">return</span> tree[lev][L];</span><br><span class="line">    <span class="keyword">int</span> lef_,tolef;</span><br><span class="line">    <span class="keyword">if</span>(L==lef)&#123;</span><br><span class="line">        lef_=<span class="number">0</span>;tolef=to_lef[lev][R];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        lef_=to_lef[lev][L<span class="number">-1</span>];</span><br><span class="line">        tolef=to_lef[lev][R]-lef_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=tolef)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp_lef=lef+lef_;</span><br><span class="line">        <span class="keyword">int</span> tmp_rig=lef+lef_+tolef<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> query(lev+<span class="number">1</span>,lef,mid,tmp_lef,tmp_rig,k);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp_lef=mid+L-lef-lef_+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp_rig=mid+R-lef-lef_-tolef+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> query(lev+<span class="number">1</span>,mid+<span class="number">1</span>,rig,tmp_lef,tmp_rig,k-tolef);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sorted[i]);</span><br><span class="line">        tree[<span class="number">0</span>][i]=sorted[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(sorted+<span class="number">1</span>,sorted+<span class="number">1</span>+n);</span><br><span class="line">    build(<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,k;<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">        <span class="keyword">int</span> ans=query(<span class="number">0</span>,<span class="number">1</span>,n,x,y,k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/He1712fd2c08f40a985b1ef436e9be051G.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="数据结构" scheme="https://mimori.coding.me/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="主席树" scheme="https://mimori.coding.me/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="数据结构" scheme="https://mimori.coding.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="主席树" scheme="https://mimori.coding.me/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="划分树" scheme="https://mimori.coding.me/tags/%E5%88%92%E5%88%86%E6%A0%91/"/>
    
      <category term="屯板子" scheme="https://mimori.coding.me/tags/%E5%B1%AF%E6%9D%BF%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>HDU2222 &amp; HDU2896 - AC自动机模板</title>
    <link href="https://mimori.coding.me/2019/08/31/HDU2222-HDU2896-AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E6%A8%A1%E6%9D%BF/"/>
    <id>https://mimori.coding.me/2019/08/31/HDU2222-HDU2896-AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-08-31T01:21:00.000Z</published>
    <updated>2019-08-31T01:26:36.463Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H65722373b7674099b56790ec509eb5a8B.jpg" alt></p><a id="more"></a><p>屯板子屯板子……</p><p><a href="https://cn.vjudge.net/problem/HDU-2222" rel="external nofollow noopener noreferrer" target="_blank">HDU2222 - Keywords Search</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">500005</span>][<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> fail[<span class="number">500005</span>];</span><br><span class="line">    <span class="keyword">int</span> ed[<span class="number">500005</span>];</span><br><span class="line">    <span class="keyword">int</span> rt,L;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            next[L][i]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ed[L]=<span class="number">0</span>;<span class="keyword">int</span> tmpL=L;L++;</span><br><span class="line">        <span class="keyword">return</span> tmpL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        L=<span class="number">0</span>;</span><br><span class="line">        rt=newnode();</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())    que.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert_</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> cur=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch=str[i];</span><br><span class="line">            <span class="keyword">if</span>(next[cur][ch-<span class="string">'a'</span>]==<span class="number">-1</span>)&#123;</span><br><span class="line">                next[cur][ch-<span class="string">'a'</span>]=newnode();</span><br><span class="line">            &#125;</span><br><span class="line">            cur=next[cur][ch-<span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ed[cur]++;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fail[rt]=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next[rt][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">                next[rt][i]=rt;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fail[next[rt][i]]=rt;</span><br><span class="line">                que.push(next[rt][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> u=que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(next[u][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">                    next[u][i]=next[fail[u]][i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    fail[next[u][i]]=next[fail[u]][i];</span><br><span class="line">                    que.push(next[u][i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">queue</span><span class="params">(<span class="built_in">string</span> str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> now=rt;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            now=next[now][str[i]-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">int</span> tmp=now;</span><br><span class="line">            <span class="keyword">while</span>(tmp!=rt)&#123;</span><br><span class="line">                ans+=ed[tmp];</span><br><span class="line">                ed[tmp]=<span class="number">0</span>;</span><br><span class="line">                tmp=fail[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"i = "</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;ed[i]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Trie acmaton;        <span class="comment">//内部有大数组，需要开全局变量 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        acmaton.init();</span><br><span class="line">        <span class="built_in">string</span> tmps;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;tmps;acmaton.insert_(tmps);</span><br><span class="line">        &#125;</span><br><span class="line">        acmaton.build();</span><br><span class="line"><span class="comment">//        acmaton.show();</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tmps;</span><br><span class="line">        <span class="keyword">int</span> ans=acmaton.<span class="built_in">queue</span>(tmps);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/HDU-2896" rel="external nofollow noopener noreferrer" target="_blank">HDU2896 - 病毒侵袭</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ansvec;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next[<span class="number">100005</span>][<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">int</span> fail[<span class="number">100005</span>];</span><br><span class="line">    <span class="keyword">int</span> edstr[<span class="number">100005</span>];</span><br><span class="line">    <span class="keyword">int</span> rt,L;</span><br><span class="line">    <span class="keyword">int</span> scnt;    <span class="comment">//字符串数量 </span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">128</span>;i++)&#123;</span><br><span class="line">            next[L][i]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        edstr[L]=<span class="number">0</span>;<span class="keyword">int</span> tmpL=L;L++;</span><br><span class="line">        <span class="keyword">return</span> tmpL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        L=<span class="number">0</span>;scnt=<span class="number">0</span>;</span><br><span class="line">        rt=newnode();</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())    que.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert_</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">int</span> cur=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch=str[i];</span><br><span class="line">            <span class="keyword">if</span>(next[cur][ch]==<span class="number">-1</span>)&#123;</span><br><span class="line">                next[cur][ch]=newnode();</span><br><span class="line">            &#125;</span><br><span class="line">            cur=next[cur][ch];</span><br><span class="line">        &#125;</span><br><span class="line">        edstr[cur]=++scnt;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fail[rt]=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">128</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next[rt][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">                next[rt][i]=rt;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fail[next[rt][i]]=rt;</span><br><span class="line">                que.push(next[rt][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">            <span class="keyword">int</span> u=que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">128</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(next[u][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">                    next[u][i]=next[fail[u]][i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    fail[next[u][i]]=next[fail[u]][i];</span><br><span class="line">                    que.push(next[u][i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> str[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">int</span> now=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            now=next[now][str[i]];</span><br><span class="line">            <span class="keyword">int</span> tmp=now;</span><br><span class="line">            <span class="keyword">while</span>(tmp!=rt)&#123;</span><br><span class="line">                <span class="keyword">if</span>(edstr[tmp]!=<span class="number">0</span>)</span><br><span class="line">                    ansvec.push_back(edstr[tmp]);</span><br><span class="line">                tmp=fail[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"i = "</span>&lt;&lt;i&lt;&lt;<span class="string">" edstr[i] = "</span>&lt;&lt;edstr[i]&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Trie acmaton;        <span class="comment">//内部有大数组，需要开全局变量 </span></span><br><span class="line"><span class="keyword">char</span> cha[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">char</span> web[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        acmaton.init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,cha);acmaton.insert_(cha);</span><br><span class="line">        &#125;</span><br><span class="line">        acmaton.build();</span><br><span class="line">        <span class="keyword">int</span> m;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">int</span> webtot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            ansvec.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,web);</span><br><span class="line">    <span class="comment">//        printf("web: %s\n",web);</span></span><br><span class="line">            acmaton.query(web);</span><br><span class="line">            <span class="keyword">int</span> cntt=ansvec.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//        debug;</span></span><br><span class="line">            <span class="keyword">if</span>(cntt&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                sort(ansvec.<span class="built_in">begin</span>(),ansvec.<span class="built_in">end</span>());</span><br><span class="line">                webtot++;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"web %d: "</span>,i+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">int</span> sz=ansvec.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i==sz<span class="number">-1</span>)    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ansvec[i]);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d "</span>,ansvec[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//    cout&lt;&lt;"total: "&lt;&lt;webtot&lt;&lt;"\n";//</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"total: %d\n"</span>,webtot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H65722373b7674099b56790ec509eb5a8B.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="字符串" scheme="https://mimori.coding.me/categories/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="AC自动机" scheme="https://mimori.coding.me/categories/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="AC自动机" scheme="https://mimori.coding.me/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1064D - Labyrinth</title>
    <link href="https://mimori.coding.me/2019/08/25/Codeforces-1064D-Labyrinth/"/>
    <id>https://mimori.coding.me/2019/08/25/Codeforces-1064D-Labyrinth/</id>
    <published>2019-08-25T12:37:00.000Z</published>
    <updated>2019-08-25T12:47:55.758Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H322f2a344041467eac0980910fa45d97Q.jpg" alt></p><a id="more"></a><p><a href="https://cn.vjudge.net/problem/CodeForces-1064D" rel="external nofollow noopener noreferrer" target="_blank">Labyrinth</a></p><p>题意是说，有一个迷宫，限制了左移和右移的次数，但上移和下移的次数不做限制，问从某一点出发，最多能访问多少个点。</p><p>bfs搜一遍，每个节点记录当前剩余的左移和右移次数。需要注意的是，这题应该使用优先队列，每次走的时候优先走那些剩余左右移动次数多的点，这样才能尽可能地访问更多的点。这应该也算是一种贪心策略。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> lmx,rmx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> lef,rig;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node&amp; na) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lef==na.lef)    <span class="keyword">return</span> rig&lt;na.rig;        <span class="comment">//优先走那些左右次数大的点,否则会导致有些点无法到达 </span></span><br><span class="line">        <span class="keyword">return</span> lef&lt;na.lef;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;        <span class="comment">//上,下,左,右 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> cx,<span class="keyword">int</span> cy)</span>            <span class="comment">//行,列 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cx&lt;<span class="number">0</span>||cx&gt;=n||cy&lt;<span class="number">0</span>||cy&gt;=m||mp[cx][cy]==<span class="string">'*'</span>||vis[cx][cy])    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> sx,<span class="keyword">int</span> sy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    mst(vis,<span class="number">0</span>);</span><br><span class="line">    priority_queue&lt;node&gt; que;</span><br><span class="line">    que.push(node&#123;sx,sy,lmx,rmx&#125;);</span><br><span class="line">    vis[sx][sy]=<span class="number">1</span>;ans++;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        node cur=que.top();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">int</span> xx=cur.x;<span class="keyword">int</span> yy=cur.y;</span><br><span class="line">        <span class="keyword">int</span> L=cur.lef;</span><br><span class="line">        <span class="keyword">int</span> R=cur.rig;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tx=xx+dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ty=yy+dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(L&lt;=<span class="number">0</span>)    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(check(tx,ty))&#123;</span><br><span class="line">                    vis[tx][ty]=<span class="number">1</span>;</span><br><span class="line">                    que.push(node&#123;tx,ty,L<span class="number">-1</span>,R&#125;);</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(R&lt;=<span class="number">0</span>)    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(check(tx,ty))&#123;</span><br><span class="line">                    vis[tx][ty]=<span class="number">1</span>;</span><br><span class="line">                    que.push(node&#123;tx,ty,L,R<span class="number">-1</span>&#125;);</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(check(tx,ty))&#123;</span><br><span class="line">                    vis[tx][ty]=<span class="number">1</span>;</span><br><span class="line">                    que.push(node&#123;tx,ty,L,R&#125;);</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> r,c;<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;r,&amp;c);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;lmx,&amp;rmx);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=bfs(r<span class="number">-1</span>,c<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H322f2a344041467eac0980910fa45d97Q.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="BFS&amp;DFS" scheme="https://mimori.coding.me/categories/ACM/BFS-DFS/"/>
    
    
      <category term="C++" scheme="https://mimori.coding.me/tags/C/"/>
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="BFS" scheme="https://mimori.coding.me/tags/BFS/"/>
    
      <category term="优先队列" scheme="https://mimori.coding.me/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>HDU6609 - Find the answer</title>
    <link href="https://mimori.coding.me/2019/08/23/HDU6609-Find-the-answer/"/>
    <id>https://mimori.coding.me/2019/08/23/HDU6609-Find-the-answer/</id>
    <published>2019-08-23T00:31:00.000Z</published>
    <updated>2019-08-23T00:32:34.040Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H113a5f2732fe4bb3bd03c7a0516eeb26n.jpg" alt></p><a id="more"></a><p><a href="https://cn.vjudge.net/problem/HDU-6609" rel="external nofollow noopener noreferrer" target="_blank">Find the answer</a></p><p>题意是说，有一个给定的序列$W$与整数$m$，对于$W$的前$k$项，删掉$d_k$项就可以该子序列的前缀和不大于$m$。问对于$W$的所有前缀子序列，其最小的$d$分别是多少。</p><p>思路就是通过线段树维护区间和以及区间中数字个数，查询时二分找到符合要求的区间，查询其数字个数，此时的数字个数是需要保留下来的数字的个数，因此答案应该是$i-1-tmp$（$tmp$为查询结果）。另外，该题数据范围比较大，需要做离散化。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll arr[maxn],lisan[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    cnt[rt]=cnt[rt&lt;&lt;<span class="number">1</span>]+cnt[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        sum[rt]=cnt[rt]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        sum[rt]+=lisan[pos];</span><br><span class="line">        cnt[rt]++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">        update(pos,lson);</span><br><span class="line">    <span class="keyword">else</span>    </span><br><span class="line">        update(pos,rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(ll val,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum[rt]&lt;=val)</span><br><span class="line">        <span class="keyword">return</span> cnt[rt];    </span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[rt]==<span class="number">0</span>)  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> val/(sum[rt]/cnt[rt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(sum[rt&lt;&lt;<span class="number">1</span>]&gt;val)</span><br><span class="line">        <span class="keyword">return</span> query(val,lson);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> cnt[rt&lt;&lt;<span class="number">1</span>]+query(val-sum[rt&lt;&lt;<span class="number">1</span>],rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        ll m;<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">            lisan[i]=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(lisan+<span class="number">1</span>,lisan+<span class="number">1</span>+n);</span><br><span class="line">        <span class="keyword">int</span> len=unique(lisan+<span class="number">1</span>,lisan+<span class="number">1</span>+n)-lisan<span class="number">-1</span>;</span><br><span class="line">        build(<span class="number">1</span>,len,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> idx=lower_bound(lisan+<span class="number">1</span>,lisan+<span class="number">1</span>+n,arr[i])-lisan;</span><br><span class="line">            <span class="keyword">int</span> tmp=query(m-arr[i],<span class="number">1</span>,len,<span class="number">1</span>);</span><br><span class="line">            update(idx,<span class="number">1</span>,len,<span class="number">1</span>);</span><br><span class="line">            ans[i]=i-tmp<span class="number">-1</span>;     <span class="comment">//tmp是可以保留下来的数的个数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H113a5f2732fe4bb3bd03c7a0516eeb26n.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="数据结构" scheme="https://mimori.coding.me/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://mimori.coding.me/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="数据结构" scheme="https://mimori.coding.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://mimori.coding.me/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>HDU6608 - Fansblog</title>
    <link href="https://mimori.coding.me/2019/08/22/HDU6608-Fansblog/"/>
    <id>https://mimori.coding.me/2019/08/22/HDU6608-Fansblog/</id>
    <published>2019-08-22T15:14:00.000Z</published>
    <updated>2019-08-23T00:33:10.846Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H527f9558b59e43299d761e5671297f57k.jpg" alt></p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><a href="https://cn.vjudge.net/problem/HDU-6608" rel="external nofollow noopener noreferrer" target="_blank">Fanblog</a></p><p>题意就是给你一个素数$P$，让你找出一个最大的且小于$P$的素数$Q$，求$Q!\ mod\ P$。</p><p>emmm数论题一向是弱势，这道题能做出来也是查了大佬博客上的一个结论（链接见附录），简单来说，若要求</p><script type="math/tex; mode=display">Q!\ mod\ P</script><p>只需要求</p><script type="math/tex; mode=display">(-1)^{Q+1}\times inv((P-1-Q)!,P)</script><p>$inv(a,p)$表示的是$a$对$p$的逆元</p><p><del>又根据瞎猜结论</del>，$P$和$Q$之间的距离一定不会很大，所以可以直接暴力求$Q$以及$(P-1-Q)!$。套个拓展欧几里得就搞定了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">20005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line">ll p,q;</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll&amp; x,ll&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>&amp;&amp;b==<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>;y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d=exgcd(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a,ll pp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    ll d=exgcd(a,pp,x,y);</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">1</span>)    <span class="keyword">return</span> (x%pp+pp)%pp;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">chk</span><span class="params">(ll todo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=todo;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(todo%i==<span class="number">0</span>)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll todo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ll i=todo<span class="number">-1</span>;i&gt;=<span class="number">2</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(chk(i))  <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">frac</span><span class="params">(ll todo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">2</span>;i&lt;=todo;i++)</span><br><span class="line">        ans=ans%p*i%p;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p;</span><br><span class="line">        q=solve(p);</span><br><span class="line">        ll ans=((q+<span class="number">1</span>)&amp;<span class="number">1</span>?<span class="number">-1</span>:<span class="number">1</span>)*inv(frac(p<span class="number">-1</span>-q),p);</span><br><span class="line">        ans%p;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul><li><p>正文所提到的结论在此处</p><p><a href="https://www.cnblogs.com/Judge/p/10755703.html#_label2" rel="external nofollow noopener noreferrer" target="_blank"><a href="https://www.cnblogs.com/Judge/p/10755703.html" rel="external nofollow noopener noreferrer" target="_blank">威尔逊定理小讲解</a></a></p></li><li><p>对于相邻两个素数的距离，最大可能为无穷大，但在题目数据范围内，这个距离不会很大。可参考以下文章：<a href="https://wenku.baidu.com/view/e5a209acdd3383c4bb4cd2c6.html" rel="external nofollow noopener noreferrer" target="_blank">任意相邻两个素数之间的最大距离公式</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H527f9558b59e43299d761e5671297f57k.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="数论" scheme="https://mimori.coding.me/categories/ACM/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="威尔逊定理" scheme="https://mimori.coding.me/categories/ACM/%E6%95%B0%E8%AE%BA/%E5%A8%81%E5%B0%94%E9%80%8A%E5%AE%9A%E7%90%86/"/>
    
    
      <category term="C++" scheme="https://mimori.coding.me/tags/C/"/>
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="数论" scheme="https://mimori.coding.me/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="威尔逊定理" scheme="https://mimori.coding.me/tags/%E5%A8%81%E5%B0%94%E9%80%8A%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>POJ2449 - Remmarguts&#39; Date</title>
    <link href="https://mimori.coding.me/2019/08/20/POJ2449-Remmarguts-Date/"/>
    <id>https://mimori.coding.me/2019/08/20/POJ2449-Remmarguts-Date/</id>
    <published>2019-08-20T01:49:00.000Z</published>
    <updated>2019-08-20T02:07:35.889Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H9cd98d6e6a1347cfb0327ada94690b69u.jpg" alt></p><a id="more"></a><p><a href="https://cn.vjudge.net/problem/POJ-2449" rel="external nofollow noopener noreferrer" target="_blank">Remmarguts’s Date</a></p><p>第一场区域赛选拔赛的题目，虽然是板子题，但这个板子我是第一次敲……不仅板子是第一次敲，k短路也是第一次敲……</p><p>题意就是让你求一张图上从起点S到终点T的k短路。这里我们使用A*来进行求解。构造一个函数$h[x] = f[x] + g[x]$，其中f[x]表示当前搜索时的代价,也就是边权；g[x]表示的是从当前点到终点的最短路,这可以通过以T为起点反向dijkstra得到。对于终点T，当它第k次从队首中被拿出来时，说明此时已经找到了k短路。事实上这里的A*只是使用估价函数优化了的BFS，是简化了的A*，真正的A*还需要维护OpenList和CloseList两个集合。</p><p>代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> v,c;</span><br><span class="line">    <span class="keyword">int</span> nxt;</span><br><span class="line">    <span class="keyword">int</span> nxt1;</span><br><span class="line">    edge()&#123;&#125;</span><br><span class="line">    edge(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span><br><span class="line">        :u(u),v(v),c(c)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">edge es[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> head1[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> tot_e;        <span class="comment">//总边数 </span></span><br><span class="line"><span class="keyword">int</span> st,ed,k;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pro</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,c;</span><br><span class="line">    pro()&#123;&#125;</span><br><span class="line">    pro(<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span><br><span class="line">        :v(v),c(c)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    h[x] = f[x] + g[x]</span></span><br><span class="line"><span class="comment">    其中f[x]表示当前搜索时的代价,也就是边权</span></span><br><span class="line"><span class="comment">    g[x]表示的是从当前点到终点的最短路,可以</span></span><br><span class="line"><span class="comment">    反向跑一遍dij得到 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> pro&amp; pa) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c+dis[v]&gt;pa.c+dis[pa.v];        <span class="comment">//估价函数 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mst(head,<span class="number">-1</span>);mst(head1,<span class="number">-1</span>);</span><br><span class="line">    tot_e=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//链式前向星加边</span></span><br><span class="line">    es[tot_e]=edge(u,v,c);</span><br><span class="line">    es[tot_e].nxt=head[u];head[u]=tot_e;</span><br><span class="line">    es[tot_e].nxt1=head1[v];head1[v]=tot_e++;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pro&gt; que;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mst(vis,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    dis[i]=INF;</span><br><span class="line">    dis[start]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())    que.pop();</span><br><span class="line">    que.push(pro(start,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        pro cur=que.top();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[cur.v])    <span class="keyword">continue</span>;</span><br><span class="line">        vis[cur.v]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head1[cur.v];i!=<span class="number">-1</span>;i=es[i].nxt1)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[es[i].u]&gt;dis[cur.v]+es[i].c)&#123;</span><br><span class="line">                dis[es[i].u]=dis[cur.v]+es[i].c;</span><br><span class="line">                que.push(pro(es[i].u,<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Astar</span><span class="params">(<span class="keyword">int</span> start)</span>        <span class="comment">//其实这里只是经过了启发式优化的BFS </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())    que.pop();</span><br><span class="line">    que.push(pro(start,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        pro cur=que.top();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">if</span>(cur.v==ed)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k&gt;<span class="number">1</span>)    k--;        <span class="comment">//终点第k次入队时,说明找到了k短路 </span></span><br><span class="line">            <span class="keyword">else</span>    <span class="keyword">return</span> cur.c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[cur.v];i!=<span class="number">-1</span>;i=es[i].nxt)</span><br><span class="line">            que.push(pro(es[i].v,cur.c+es[i].c));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> u,v,c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;u,&amp;v,&amp;c);</span><br><span class="line">            add(u,v,c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;st,&amp;ed,&amp;k);</span><br><span class="line">        dijkstra(ed);</span><br><span class="line">        <span class="keyword">if</span>(dis[st]==INF)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(st==ed)    k++;</span><br><span class="line">            <span class="keyword">int</span> ans=Astar(st);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H9cd98d6e6a1347cfb0327ada94690b69u.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="图论" scheme="https://mimori.coding.me/categories/ACM/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="A*" scheme="https://mimori.coding.me/categories/ACM/%E5%9B%BE%E8%AE%BA/A/"/>
    
    
      <category term="C++" scheme="https://mimori.coding.me/tags/C/"/>
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="图论" scheme="https://mimori.coding.me/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="k短路" scheme="https://mimori.coding.me/tags/k%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="A*" scheme="https://mimori.coding.me/tags/A/"/>
    
  </entry>
  
  <entry>
    <title>Knapsack Cryptosystem（2019牛客多校第9场  D题）</title>
    <link href="https://mimori.coding.me/2019/08/16/Knapsack-Cryptosystem/"/>
    <id>https://mimori.coding.me/2019/08/16/Knapsack-Cryptosystem/</id>
    <published>2019-08-16T02:17:00.000Z</published>
    <updated>2019-08-16T02:29:46.173Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H65115833a3a8484fbe57a426ff7b309fM.jpg" alt></p><p>From <strong>Google Earth</strong></p><a id="more"></a><p><a href="https://ac.nowcoder.com/acm/contest/889/D" rel="external nofollow noopener noreferrer" target="_blank">Knapsack Cryptosystem</a></p><p>题意很简单，是说有一个排好序的升序正整数序列，现在给出总和s，让你从数列中挑出若干个数，使得它们相加后总和为s。</p><p>第一反应就是dfs，因为之前做过几乎一模一样的题，且这题数据范围很小，数列最长才36。但事实证明，dfs会T飞……无论怎么剪枝都没用。</p><p>正确解法是，将数列折半，对于前一半，状压枚举出每一种选取情况的总和，将它们存入一个map里面。对于后一半，依然是状压枚举每种选取情况的总和，记作$s_i$，在算出$s_i$后，二分lower_bound()在map中找$s-s_i$，如果找到了，就可以输出结果了，答案就是此时后半的选取情况以及$s-s_i$对应的前半选取情况。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line">ll s,arr[<span class="number">45</span>];</span><br><span class="line"><span class="keyword">int</span> p,q,n;</span><br><span class="line"><span class="built_in">map</span>&lt;ll,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">int</span> to[(<span class="number">1</span>&lt;&lt;<span class="number">18</span>)+<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> msk=<span class="number">2</span>;</span><br><span class="line">    to[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">17</span>;i++)&#123;</span><br><span class="line">        to[msk]=i;</span><br><span class="line">        msk&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> mskp,<span class="keyword">int</span> mskq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">1</span>&amp;(mskp&gt;&gt;i));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">1</span>&amp;(mskq&gt;&gt;i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %lld"</span>,&amp;n,&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;arr[i]);</span><br><span class="line">    p=(n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    q=n-p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;p);i++)&#123;</span><br><span class="line">        ll tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j;j-=(lowbit(j)))</span><br><span class="line">            tmp+=arr[to[lowbit(j)]];        </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            lowbit(x)返回x最右端的1所表示的数.</span></span><br><span class="line"><span class="comment">            如,9 = 1001 ,则lowbit(9) = 1 = 1;</span></span><br><span class="line"><span class="comment">            8 = 100 ,则lowbit(8) = 100 = 8. </span></span><br><span class="line"><span class="comment">            */</span> </span><br><span class="line">        mp[tmp]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;q);i++)&#123;</span><br><span class="line">        ll tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j;j-=lowbit(j))</span><br><span class="line">            tmp+=arr[to[lowbit(j)]+p];</span><br><span class="line">        <span class="keyword">auto</span> it=mp.lower_bound(s-tmp);</span><br><span class="line">        <span class="keyword">if</span>(it-&gt;first+tmp==s)&#123;</span><br><span class="line">            show(it-&gt;second,i);flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)    <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H65115833a3a8484fbe57a426ff7b309fM.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;From &lt;strong&gt;Google Earth&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="暴力" scheme="https://mimori.coding.me/categories/ACM/%E6%9A%B4%E5%8A%9B/"/>
    
    
      <category term="C++" scheme="https://mimori.coding.me/tags/C/"/>
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="牛客多校" scheme="https://mimori.coding.me/tags/%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
      <category term="状压+暴力" scheme="https://mimori.coding.me/tags/%E7%8A%B6%E5%8E%8B-%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>线段树专题总结</title>
    <link href="https://mimori.coding.me/2019/08/10/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://mimori.coding.me/2019/08/10/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2019-08-10T00:40:00.000Z</published>
    <updated>2019-08-12T03:01:50.715Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H8248ceab1da6430e949cd345061b92c0I.jpg" alt></p><p>Photo by <strong>Mohsin</strong> khan from <strong>Pexels</strong><br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>线段树的专题事实上早就已经刷完了，然而一直拖到现在才写题解……</p><p>bin巨的线段树专题主要包括以下几个方面：</p><ul><li>线段树维护和、区间和、立方和、最大值、最小值</li><li>线段树与染色问题</li><li>区间合并</li><li>扫描线</li></ul><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><a href="https://cn.vjudge.net/problem/HDU-1166" rel="external nofollow noopener noreferrer" target="_blank">HDU1166 敌兵布阵</a></p><p>题意是说，现在有N个数，三种操作，这三种操作分别是：</p><ul><li>Add i j，表示在第$i$个数$a_i$上加上$j$</li><li>Sub i j，表示在第$i$个数$a_i$上减去$j$</li><li>Query i j，表示询问区间$[i,j]$的总和</li></ul><p>典型的单点修改区间查询。直接套线段树模板即可。sub操作可以通过add上相反数实现。</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> arr[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;sum[rt]);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> todo,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        sum[rt]+=todo;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">        update(pos,todo,lson);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        update(pos,todo,rson);</span><br><span class="line">    push_up(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=lef&amp;&amp;R&gt;=rig)</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">        ret+=query(L,R,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">        ret+=query(L,R,rson);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> kase=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,++kase);</span><br><span class="line">        mst(arr,<span class="number">0</span>);mst(sum,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        getchar();</span><br><span class="line"><span class="comment">//        for(int i=1;i&lt;=n;i++)</span></span><br><span class="line"><span class="comment">//            scanf("%d",&amp;arr[i]);</span></span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">char</span> str[<span class="number">15</span>];<span class="keyword">int</span> a,b;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'E'</span>)        <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b); </span><br><span class="line">            getchar();</span><br><span class="line">            <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'Q'</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> ans=query(a,b,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'A'</span>)&#123;</span><br><span class="line">                update(a,b,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'S'</span>)&#123;</span><br><span class="line">                update(a,-b,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/HDU-1754" rel="external nofollow noopener noreferrer" target="_blank">HDU1754 I Hate It</a></p><p>题意是查询区间最大值，同时还要有修改操作。线段树维护区间最大值即可。</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> maxi[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    maxi[rt]=<span class="built_in">max</span>(maxi[rt&lt;&lt;<span class="number">1</span>],maxi[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tmp);</span><br><span class="line">        maxi[rt]=tmp;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> val,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        maxi[rt]=val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">        update(pos,val,lson);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        update(pos,val,rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=lef&amp;&amp;rig&lt;=R)&#123;</span><br><span class="line">        ans=<span class="built_in">max</span>(ans,maxi[rt]);</span><br><span class="line">        <span class="keyword">return</span> ;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">        query(L,R,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">        query(L,R,rson);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        ans=<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//        getchar();</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="keyword">char</span> op;<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;op);</span><br><span class="line">            <span class="keyword">int</span> x,y;<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="string">'Q'</span>)&#123;</span><br><span class="line">                ans=<span class="number">-1</span>;</span><br><span class="line">                query(x,y,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'U'</span>)&#123;</span><br><span class="line">                update(x,y,<span class="number">1</span>,n,<span class="number">1</span>);    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题有多组样例…OTZ</p><p><a href="https://cn.vjudge.net/problem/POJ-3468" rel="external nofollow noopener noreferrer" target="_blank">POJ3468 A Simple Problem with integers</a></p><p>题意是说，有一串数字以及两种操作，一是为某一区间上的数都加上某个数，另一个操作是询问区间和。最简单的区间修改区间查询。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line">ll sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll lazy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(ll rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll lef,ll rig,ll rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;lazy[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line"><span class="comment">//        cin&gt;&gt;sum[rt];</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;sum[rt]);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(ll rt,ll len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]+=lazy[rt];</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lazy[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>]+=lazy[rt]*(len-(len&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lazy[rt]*(len&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        lazy[rt]=<span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll toL,ll toR,ll todo,ll lef,ll rig,ll rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig)&#123;</span><br><span class="line">        lazy[rt]+=todo;</span><br><span class="line">        sum[rt]+=todo*(rig-lef+<span class="number">1</span>); </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt,rig-lef+<span class="number">1</span>);</span><br><span class="line">    ll mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        update(toL,toR,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        update(toL,toR,todo,rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll toL,ll toR,ll lef,ll rig,ll rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig)&#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt,rig-lef+<span class="number">1</span>);</span><br><span class="line">    ll mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    ll ans=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        ans+=query(toL,toR,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        ans+=query(toL,toR,rson);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    std::ios::sync_with_stdio(false);</span></span><br><span class="line">    ll n,q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;n,&amp;q);</span><br><span class="line">    build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> op;<span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">'Q'</span>)&#123;</span><br><span class="line">            ll L,R;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;L,&amp;R);</span><br><span class="line">            ll ans=query(L,R,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'C'</span>)&#123;</span><br><span class="line">            ll L,R,to;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;L,&amp;R,&amp;to);</span><br><span class="line">            update(L,R,to,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/POJ-2528" rel="external nofollow noopener noreferrer" target="_blank">POJ2528 Mayor’s posters</a></p><p>已写题解，不再赘述</p><p><a href="https://mimori.coding.me/2019/05/18/POJ2528-Mayor-s-poster/">Mayor’s poster</a></p><p><a href="https://cn.vjudge.net/problem/HDU-1698" rel="external nofollow noopener noreferrer" target="_blank">HDU1698 Just a Hook</a></p><p>就是区间修改区间查询。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt]!=<span class="number">0</span>)&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>]=(len-(len&gt;&gt;<span class="number">1</span>))*lazy[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(len&gt;&gt;<span class="number">1</span>)*lazy[rt];</span><br><span class="line">        lazy[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        sum[rt]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> todo,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig)&#123;</span><br><span class="line">        lazy[rt]=todo;</span><br><span class="line">        sum[rt]=(rig-lef+<span class="number">1</span>)*todo;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    pushdown(rt,rig-lef+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        update(toL,toR,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        update(toL,toR,todo,rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig)&#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    pushdown(rt,rig-lef+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        ret+=query(toL,toR,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        ret+=query(toL,toR,rson);</span><br><span class="line">    <span class="keyword">return</span> ret; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    std::ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">int</span> kase=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        mst(lazy,<span class="number">0</span>);mst(sum,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//        debug;</span></span><br><span class="line">        <span class="keyword">int</span> q;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="comment">//        debug;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line"><span class="comment">//            debug;</span></span><br><span class="line">            <span class="keyword">int</span> x,y,z;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            update(x,y,z,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=query(<span class="number">1</span>,n,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: The total value of the hook is %d.\n"</span>,++kase,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/ZOJ-1610" rel="external nofollow noopener noreferrer" target="_blank">ZOJ1610 Count the Colors</a></p><p>依然是染色问题。题意是说，在一条直线上涂色，颜色与颜色之间可以相互覆盖，问最终可以看到的颜色有多少。</p><p>与贴海报那题思路几乎一样。只需要用个$cnt[]$数组记录一下颜色个数即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">8005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lef;</span><br><span class="line">    <span class="keyword">int</span> rig;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line">node ns[<span class="number">8005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[rt];</span><br><span class="line">        lazy[rt]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> todo,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig)&#123;</span><br><span class="line">        lazy[rt]=todo;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        update(toL,toR,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        update(toL,toR,todo,rson);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tag=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazy[rt]!=<span class="number">-1</span>&amp;&amp;lazy[rt]!=tag)&#123;</span><br><span class="line">            cnt[lazy[rt]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        tag=lazy[rt];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    query(lson);</span><br><span class="line">    query(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> max_id=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> range=<span class="number">-1</span>;</span><br><span class="line">        mst(lazy,<span class="number">-1</span>);mst(cnt,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> lef,rig,to;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;ns[i].lef,&amp;ns[i].rig,&amp;ns[i].to);</span><br><span class="line">            range=<span class="built_in">max</span>(range,ns[i].rig); </span><br><span class="line">            max_id=<span class="built_in">max</span>(max_id,ns[i].to);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            update(ns[i].lef+<span class="number">1</span>,ns[i].rig,ns[i].to,<span class="number">0</span>,range,<span class="number">1</span>);</span><br><span class="line">        query(<span class="number">0</span>,range,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=max_id;i++)</span><br><span class="line">            <span class="keyword">if</span>(cnt[i]!=<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i,cnt[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/POJ-3264" rel="external nofollow noopener noreferrer" target="_blank">POJ3264 Balanced Lineup</a></p><p>线段树维护区间最大值和最小值</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">8005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lef;</span><br><span class="line">    <span class="keyword">int</span> rig;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">&#125;;</span><br><span class="line">node ns[<span class="number">8005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[rt];</span><br><span class="line">        lazy[rt]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> todo,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig)&#123;</span><br><span class="line">        lazy[rt]=todo;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        update(toL,toR,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        update(toL,toR,todo,rson);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tag=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        <span class="keyword">if</span>(lazy[rt]!=<span class="number">-1</span>&amp;&amp;lazy[rt]!=tag)&#123;</span><br><span class="line">            cnt[lazy[rt]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        tag=lazy[rt];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    query(lson);</span><br><span class="line">    query(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> max_id=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> range=<span class="number">-1</span>;</span><br><span class="line">        mst(lazy,<span class="number">-1</span>);mst(cnt,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> lef,rig,to;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;ns[i].lef,&amp;ns[i].rig,&amp;ns[i].to);</span><br><span class="line">            range=<span class="built_in">max</span>(range,ns[i].rig); </span><br><span class="line">            max_id=<span class="built_in">max</span>(max_id,ns[i].to);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            update(ns[i].lef+<span class="number">1</span>,ns[i].rig,ns[i].to,<span class="number">0</span>,range,<span class="number">1</span>);</span><br><span class="line">        query(<span class="number">0</span>,range,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=max_id;i++)</span><br><span class="line">            <span class="keyword">if</span>(cnt[i]!=<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i,cnt[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/HDU-4027" rel="external nofollow noopener noreferrer" target="_blank">HDU4027 Can you answer these queries?</a></p><p>题意是说，现在有一正整数序列，还有两种操作，第一种是可以将某一区间内的整数变为其自身的平方根；第二种操作是询问区间和。</p><p>注意本题有一个条件，“Notice that the square root operation should be rounded down to integer.”，因此，当某次操作后，如果某个数的结果小于1，那它就直接变成0了！这就给了我们一个解题的思路：这题我们可以一直走到叶子节点再进行平方根操作，对于那些已经为0的数，就可以将它们记录下来，下次操作的时候就可以不用操作这个数了！由此降低复杂度。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line">ll sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> flag[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    flag[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(flag[rt&lt;&lt;<span class="number">1</span>]&amp;&amp;flag[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])</span><br><span class="line">        flag[rt]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;sum[rt]);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag[rt])</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        sum[rt]=(ll)<span class="built_in">sqrt</span>(sum[rt]);</span><br><span class="line">        <span class="keyword">if</span>(sum[rt]&lt;=<span class="number">1</span>)        </span><br><span class="line">            flag[rt]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid) </span><br><span class="line">        update(toL,toR,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)    </span><br><span class="line">        update(toL,toR,rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR)&#123;</span><br><span class="line">        ans+=sum[rt];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        query(toL,toR,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        query(toL,toR,rson);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="keyword">int</span> kase=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        mst(flag,<span class="number">0</span>);</span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,++kase);</span><br><span class="line">        <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">            <span class="keyword">int</span> op,l,r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;op,&amp;l,&amp;r);</span><br><span class="line">            <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">                swap(l,r);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">0</span>)&#123;</span><br><span class="line">                update(l,r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">                ans=<span class="number">0</span>;</span><br><span class="line">                query(l,r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/HDU-1540" rel="external nofollow noopener noreferrer" target="_blank">HDU1540 Tunnel Warfare</a></p><p>地道战。</p><p>题意是说，有一系列的村庄，除了末端的两个村庄以外，其他的都与相邻的两个连接形成一条线。现在有三种操作，一种是摧毁第$x$个村庄；一种是询问有多少个村庄与第$x$个村庄直接或间接连接；还有一种是将最后被摧毁的村庄修复，意味着该村庄与其邻近两个村庄的连接重新建立。</p><p>这题的正解是区间合并，但有一种很巧妙的做法：用线段树维护区间最大值和最小值。对于最大值，一开始初始化每个村庄都为0；对于最小值，初始化每个村庄都为INF。摧毁的时候，如果要摧毁第$x$个村庄，只需要将对应的maxi[rt]改为$x$，对应的mini[rt]也改为$x$即可。查询的时候，对于第$x$个村庄，查询区间$[1,x-1]$的最小值$mini_val$，再查询区间$[x,n]$的最大值$mini_val$，答案就是$mini_val-maxi_val-1$。而对于修复操作，只需要将对应的maxi[rt]改回0，mini[rt]改回INF即可。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50000</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> mini[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> maxi[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mini[rt]=<span class="built_in">min</span>(mini[rt&lt;&lt;<span class="number">1</span>],mini[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    maxi[rt]=<span class="built_in">max</span>(maxi[rt&lt;&lt;<span class="number">1</span>],maxi[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        mini[rt]=n+<span class="number">1</span>;</span><br><span class="line">        maxi[rt]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_max</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> todo,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        maxi[rt]=todo;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">        update_max(pos,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(pos&gt;mid)</span><br><span class="line">        update_max(pos,todo,rson);</span><br><span class="line">    maxi[rt]=<span class="built_in">max</span>(maxi[rt&lt;&lt;<span class="number">1</span>],maxi[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_min</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> todo,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        mini[rt]=todo;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">        update_min(pos,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(pos&gt;mid)</span><br><span class="line">        update_min(pos,todo,rson);</span><br><span class="line">    mini[rt]=<span class="built_in">min</span>(mini[rt&lt;&lt;<span class="number">1</span>],mini[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> min_val=INF;</span><br><span class="line"><span class="keyword">int</span> max_val=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_max</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR)&#123;</span><br><span class="line">        max_val=<span class="built_in">max</span>(max_val,maxi[rt]);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        query_max(toL,toR,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        query_max(toL,toR,rson);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query_min</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR)&#123;</span><br><span class="line">        min_val=<span class="built_in">min</span>(min_val,mini[rt]);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        query_min(toL,toR,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        query_min(toL,toR,rson);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> stk[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">     <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m)!=EOF)&#123;</span><br><span class="line">         getchar();<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">         mst(stk,<span class="number">0</span>);</span><br><span class="line">         build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">             max_val=<span class="number">-2</span>;min_val=INF;</span><br><span class="line">            <span class="keyword">char</span> op;<span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line"><span class="comment">//            getchar();getchar();</span></span><br><span class="line">            <span class="keyword">if</span>(op==<span class="string">'D'</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> a;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">                stk[cnt++]=a;</span><br><span class="line">                update_max(a,a,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">                update_min(a,a,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'Q'</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> a;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">                query_max(<span class="number">1</span>,a,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">                query_min(a,n,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//                cout&lt;&lt;"max:"&lt;&lt;max_val&lt;&lt;" "&lt;&lt;"min:"&lt;&lt;min_val&lt;&lt;endl; </span></span><br><span class="line"><span class="comment">//                if(min_val==50001)        min_val=n+1;</span></span><br><span class="line"><span class="comment">//                if(max_val==-1)        max_val=1;</span></span><br><span class="line">                <span class="keyword">int</span> ans=min_val-max_val<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(min_val==max_val)        ans=<span class="number">0</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'R'</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=stk[--cnt];</span><br><span class="line">                update_max(tmp,<span class="number">0</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">                update_min(tmp,n+<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而本题的正解我却没有写hhhh，先挖个坑，到时再补</p><p><a href="https://cn.vjudge.net/problem/HDU-3974" rel="external nofollow noopener noreferrer" target="_blank">HDU3974 Assign the task</a></p><p>题意是说，一个公司有N个员工，每个员工都有一个直接的上司。叶子节点没有下属，树根没有上司。当上司收到工作后，上司会将这份工作下发给他的所有下属，包括不直属的下属。下属在收到一份新的工作后，会马上停止手头上的工作开始新的工作。问，当前某个员工的工作是什么。</p><p>先用dfs序将树转为线性区间，就转化为单点查询区间修改的问题了，可以直接用线段树来搞。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50010</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> in[maxn];</span><br><span class="line"><span class="keyword">int</span> out[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; gra[maxn];</span><br><span class="line"><span class="keyword">int</span> tree[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> id=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span>        <span class="comment">//id从1开始 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    len++;</span><br><span class="line">    in[u]=id++;        <span class="comment">//记录一下入栈时间 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gra[u].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        dfs(gra[u][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    out[u]=id++;    <span class="comment">//记录一下出栈时间 </span></span><br><span class="line">    len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[rt]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[rt]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        tree[rt&lt;&lt;<span class="number">1</span>]=tree[rt];</span><br><span class="line">        tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=tree[rt];</span><br><span class="line">        tree[rt]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> todo,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR)&#123;</span><br><span class="line">        tree[rt]=todo;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        update(toL,toR,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        update(toL,toR,todo,rson);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        ans=tree[rt];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    pushdown(rt);</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid)</span><br><span class="line">        query(pos,lson);</span><br><span class="line">    <span class="keyword">if</span>(pos&gt;mid)</span><br><span class="line">        query(pos,rson);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("data_generator.txt","r",stdin);</span></span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">int</span> kase=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,++kase);</span><br><span class="line">        ans=<span class="number">0</span>;id=<span class="number">1</span>;</span><br><span class="line">        mst(vis,<span class="number">0</span>);</span><br><span class="line">        mst(in,<span class="number">0</span>);mst(out,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">2</span>*n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">            gra[v].push_back(u);</span><br><span class="line">            vis[u]=<span class="number">1</span>;        <span class="comment">//用来记录节点u是否是别人的儿子 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">                dfs(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="comment">//        getchar();</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> op;<span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line"><span class="comment">//            char tmp=getchar();</span></span><br><span class="line">            <span class="keyword">if</span>(op==<span class="string">'C'</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                query(in[x],<span class="number">1</span>,<span class="number">2</span>*n,<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);    </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'T'</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x,y;<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line">                update(in[x],out[x],y,<span class="number">1</span>,<span class="number">2</span>*n,<span class="number">1</span>);    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            gra[i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/HDU-4578" rel="external nofollow noopener noreferrer" target="_blank">HDU4578 Transformation</a></p><p>题意是说，现在有$n$个整数$a_1,a_2,a_3,…,a_n$，初始值都为0。有以下四种操作：</p><ul><li><p>对$a_x$到$a_y$的数，分别都加上$c$。</p></li><li><p>对$a_x$到$a_y$的数，分别都乘上$c$。</p></li><li><p>将$a_x$到$a_y$的数，都改为$c$。</p></li><li><p>求$a<em>x$到$a_y$的数的$p$次幂的总和。即$a_x^p+a</em>{x+1}^p+a<em>{x+2}^p+…+a</em>{y}^p$。其中，$0 \lt p \lt 4$，$p$是整数。</p><p>这是一道比较复杂的题目，难点在于怎么维护$p$次幂的区间和，以及加操作与乘操作之间的相互影响怎么处理。事实上根据以下两条式子来维护三次方和以及二次方和即可：</p><script type="math/tex; mode=display">(x+c)^3=x^3+3cx^2+3c^2x+c^3 \\(x+c)^2=x^2+2cx+c^2</script><p>具体的看代码注释吧。</p><p>代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line">ll mod=<span class="number">10007</span>;</span><br><span class="line">ll sum1[maxn&lt;&lt;<span class="number">2</span>];        <span class="comment">//区间和 </span></span><br><span class="line">ll sum2[maxn&lt;&lt;<span class="number">2</span>];        <span class="comment">//区间平方和 </span></span><br><span class="line">ll sum3[maxn&lt;&lt;<span class="number">2</span>];        <span class="comment">//区间立方和</span></span><br><span class="line">ll lazy_add[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll lazy_mul[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll lazy_set[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum1[rt]=(sum1[rt&lt;&lt;<span class="number">1</span>]+sum1[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%mod;</span><br><span class="line">    sum2[rt]=(sum2[rt&lt;&lt;<span class="number">1</span>]+sum2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%mod;</span><br><span class="line">    sum3[rt]=(sum3[rt&lt;&lt;<span class="number">1</span>]+sum3[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%mod; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum1[rt]=sum2[rt]=sum3[rt]=<span class="number">0</span>;</span><br><span class="line">    lazy_add[rt]=<span class="number">0</span>;</span><br><span class="line">    lazy_mul[rt]=<span class="number">1</span>;</span><br><span class="line">    lazy_set[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line"><span class="comment">//        sum1[rt]=sum2[rt]=sum3[rt]=0;</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    push_up(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy_set[rt]!=<span class="number">0</span>)&#123;</span><br><span class="line">        lazy_add[rt&lt;&lt;<span class="number">1</span>]=lazy_add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;        </span><br><span class="line">        lazy_mul[rt&lt;&lt;<span class="number">1</span>]=lazy_mul[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        lazy_set[rt&lt;&lt;<span class="number">1</span>]=lazy_set[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy_set[rt];</span><br><span class="line">        ll tmp=(lazy_set[rt]*(lazy_set[rt]%mod)*(lazy_set[rt]%mod))%mod;</span><br><span class="line">        sum3[rt&lt;&lt;<span class="number">1</span>]=((len-(len&gt;&gt;<span class="number">1</span>))*tmp)%mod;</span><br><span class="line">        sum3[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=((len&gt;&gt;<span class="number">1</span>)*tmp)%mod;</span><br><span class="line">        </span><br><span class="line">        sum2[rt&lt;&lt;<span class="number">1</span>]=((len-(len&gt;&gt;<span class="number">1</span>))*((lazy_set[rt]%mod)*(lazy_set[rt]%mod)))%mod;</span><br><span class="line">        sum2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=((len&gt;&gt;<span class="number">1</span>)*((lazy_set[rt]%mod)*(lazy_set[rt]%mod)))%mod;</span><br><span class="line">        </span><br><span class="line">        sum1[rt&lt;&lt;<span class="number">1</span>]=((len-(len&gt;&gt;<span class="number">1</span>))*(lazy_set[rt]%mod))%mod;</span><br><span class="line">        sum1[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=((len&gt;&gt;<span class="number">1</span>)*(lazy_set[rt]%mod))%mod;</span><br><span class="line">        </span><br><span class="line">        lazy_set[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lazy_add[rt]!=<span class="number">0</span>||lazy_mul[rt]!=<span class="number">1</span>)&#123;</span><br><span class="line">        ll add=lazy_add[rt];ll mul=lazy_mul[rt];</span><br><span class="line">        ll tmp=(mul*mul%mod*mul%mod)%mod;</span><br><span class="line">        </span><br><span class="line">        lazy_add[rt&lt;&lt;<span class="number">1</span>]=(lazy_add[rt&lt;&lt;<span class="number">1</span>]*mul%mod+add%mod)%mod;</span><br><span class="line">        lazy_add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(lazy_add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*mul%mod+add%mod)%mod;</span><br><span class="line">        lazy_mul[rt&lt;&lt;<span class="number">1</span>]=(lazy_mul[rt&lt;&lt;<span class="number">1</span>]%mod*mul%mod)%mod;</span><br><span class="line">        lazy_mul[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(lazy_mul[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*mul%mod)%mod;</span><br><span class="line">        </span><br><span class="line">        sum3[rt&lt;&lt;<span class="number">1</span>]=(sum3[rt&lt;&lt;<span class="number">1</span>]*tmp%mod+add*add%mod*add%mod*(len-(len&gt;&gt;<span class="number">1</span>))</span><br><span class="line">                    +<span class="number">3</span>*sum2[rt&lt;&lt;<span class="number">1</span>]*mul*mul%mod*add%mod+<span class="number">3</span>*sum1[rt&lt;&lt;<span class="number">1</span>]*mul</span><br><span class="line">                    *add%mod*add%mod)%mod;        <span class="comment">//(x + c)^3 = x^3 + 3cx^2 + 3(c^2)x + c^3</span></span><br><span class="line">        sum3[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sum3[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*tmp%mod+add*add%mod*add%mod*(len&gt;&gt;<span class="number">1</span>)</span><br><span class="line">                    +<span class="number">3</span>*sum2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*mul*mul%mod*add%mod+<span class="number">3</span>*sum1[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*mul</span><br><span class="line">                    *add%mod*add%mod)%mod;        <span class="comment">//(x + c)^3 = x^3 + 3cx^2 + 3(c^2)x + c^3</span></span><br><span class="line">                    </span><br><span class="line">        sum2[rt&lt;&lt;<span class="number">1</span>]=(sum2[rt&lt;&lt;<span class="number">1</span>]*mul*mul%mod+add*add%mod*(len-(len&gt;&gt;<span class="number">1</span>))</span><br><span class="line">                    +<span class="number">2</span>*mul*add%mod*sum1[rt&lt;&lt;<span class="number">1</span>]%mod)%mod;    <span class="comment">//(x + c)^2 = x^2 + 2cx + c^2</span></span><br><span class="line">        sum2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sum2[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*mul*mul%mod+add*add%mod*(len&gt;&gt;<span class="number">1</span>)</span><br><span class="line">                    +<span class="number">2</span>*mul*add%mod*sum1[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%mod)%mod;    <span class="comment">//(x + c)^2 = x^2 + 2cx + c^2</span></span><br><span class="line">                    </span><br><span class="line">        sum1[rt&lt;&lt;<span class="number">1</span>]=(sum1[rt&lt;&lt;<span class="number">1</span>]*mul%mod+add%mod*(len-(len&gt;&gt;<span class="number">1</span>)))%mod;</span><br><span class="line">        sum1[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sum1[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*mul%mod+add%mod*(len&gt;&gt;<span class="number">1</span>))%mod;</span><br><span class="line">        </span><br><span class="line">        lazy_add[rt]=<span class="number">0</span>;lazy_mul[rt]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">op==1:add </span></span><br><span class="line"><span class="comment">op==2:mul</span></span><br><span class="line"><span class="comment">op==3:set</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> op,<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> todo,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toR&lt;lef||toL&gt;rig)        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig)&#123;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            lazy_add[rt]=(todo+lazy_add[rt])%mod;</span><br><span class="line">            sum3[rt]=(sum3[rt]+(todo*todo%mod*todo%mod*(rig-lef+<span class="number">1</span>))</span><br><span class="line">            +<span class="number">3</span>*todo%mod*sum2[rt]%mod+<span class="number">3</span>*todo*todo%mod*sum1[rt]%mod)%mod;</span><br><span class="line">            <span class="comment">//(x + c)^3 = x^3 + 3cx^2 + 3(c^2)x + c^3</span></span><br><span class="line">            sum2[rt]=(sum2[rt]+(todo*todo%mod)*(rig-lef+<span class="number">1</span>)</span><br><span class="line">            +<span class="number">2</span>*sum1[rt]%mod*todo%mod)%mod;</span><br><span class="line">            </span><br><span class="line">            sum1[rt]=(sum1[rt]+(rig-lef+<span class="number">1</span>)*todo%mod)%mod;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">            lazy_add[rt]=(lazy_add[rt]*todo)%mod;</span><br><span class="line">            lazy_mul[rt]=(lazy_mul[rt]*todo)%mod;</span><br><span class="line">            sum1[rt]=(todo*sum1[rt])%mod;</span><br><span class="line">            sum2[rt]=(todo*todo%mod*sum2[rt])%mod;</span><br><span class="line">            sum3[rt]=(todo*todo%mod*todo%mod*sum3[rt]%mod)%mod;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line">            lazy_add[rt]=<span class="number">0</span>;</span><br><span class="line">            lazy_mul[rt]=<span class="number">1</span>;</span><br><span class="line">            lazy_set[rt]=todo;</span><br><span class="line">            sum3[rt]=(rig-lef+<span class="number">1</span>)%mod*todo*todo%mod*todo%mod;</span><br><span class="line">            sum2[rt]=(rig-lef+<span class="number">1</span>)%mod*todo*todo%mod;</span><br><span class="line">            sum1[rt]=(rig-lef+<span class="number">1</span>)%mod*todo%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    push_down(rt,rig-lef+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        update(op,toL,toR,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        update(op,toL,toR,todo,rson);</span><br><span class="line">    push_up(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> sum1[rt];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p==<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> sum2[rt];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p==<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> sum3[rt]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    push_down(rt,rig-lef+<span class="number">1</span>);</span><br><span class="line">    ll ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        ret+=query(p,toL,toR,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        ret+=query(p,toL,toR,rson);</span><br><span class="line">    <span class="keyword">return</span> ret%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//void update(int op,int toL,int toR,int todo,int lef,int rig,int rt)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    freopen("data_generator.txt","r",stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out_hdu4578.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m)!=EOF&amp;&amp;n&amp;&amp;m)&#123;</span><br><span class="line"><span class="comment">//        mst(sum1,0);mst(sum2,0);mst(sum3,0);</span></span><br><span class="line"><span class="comment">//        mst(lazy_add,0);mst(lazy_mul,0);mst(lazy_set,0);</span></span><br><span class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> type;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;type);</span><br><span class="line">            <span class="keyword">int</span> a,b,c;</span><br><span class="line">            c%=mod; </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            <span class="keyword">if</span>(type!=<span class="number">4</span>)&#123;</span><br><span class="line">                update(type,a,b,c,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ll ans=query(c,a,b,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">                ans%=mod;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://cn.vjudge.net/problem/HDU-4614" rel="external nofollow noopener noreferrer" target="_blank">HDU4614 Vases and Flowers</a></p><p>题意是说，有若干个花瓶，有两种操作，分别是</p><ul><li>从花瓶A开始放F朵花，如果某个花瓶已经有花了，就跳过这个花瓶。不断尝试花瓶，直至所有花都放完了，或者A以及A以后的花瓶都被尝试了一边。输出放第一朵花的位置以及放最后一朵花的位置。</li><li>第二种操作则是清楚区间内的花。并输出清除了多少花</li></ul><p>思路是，空花瓶用1表示，线段树提供set操作，维护区间和。清空花瓶的操作很简单，只需要查询一下区间和，然后用区间长度减去区间和即可。对于放花的操作，可以用二分找到左边界和右边界。具体见代码及注释。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">int</span> lazy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lazy[rt]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        sum[rt]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>]=lazy[rt]*(len-(len&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[rt]*(len&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        lazy[rt]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> todo,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span>        <span class="comment">//进行set操作    //空花瓶用1表示 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR)&#123;</span><br><span class="line">        lazy[rt]=todo;</span><br><span class="line">        sum[rt]=(rig-lef+<span class="number">1</span>)*todo;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(rt,rig-lef+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        update(toL,toR,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        update(toL,toR,todo,rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> toL,<span class="keyword">int</span> toR,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR)&#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    pushdown(rt,rig-lef+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        ret+=query(toL,toR,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        ret+=query(toL,toR,rson);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> num,<span class="keyword">int</span> cnt)</span>        <span class="comment">//cnt为要找的空花瓶的数目 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=L+(R-L)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;=R)&#123;</span><br><span class="line">        mid=L+(R-L)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(query(<span class="number">0</span>,mid,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">1</span>)-num&gt;=cnt)&#123;</span><br><span class="line">            R=mid<span class="number">-1</span>;</span><br><span class="line">            ans=mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            L=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        build(<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> op;<span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> tot=query(x,n<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(tot==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Can not put any one.\n"</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(tot&lt;y)        y=tot;    <span class="comment">//tot为从x开始最多能放的花的数目 </span></span><br><span class="line">                <span class="keyword">int</span> nu=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(x&gt;=<span class="number">1</span>)</span><br><span class="line">                    nu=query(<span class="number">0</span>,x<span class="number">-1</span>,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    nu=<span class="number">0</span>;        <span class="comment">//此时x-1为负数，要特判一下 </span></span><br><span class="line">                <span class="keyword">int</span> lef=binary(x,n<span class="number">-1</span>,nu,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">int</span> rig=binary(x,n<span class="number">-1</span>,nu,y);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;lef&lt;&lt;<span class="string">" "</span>&lt;&lt;rig&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                update(lef,rig,<span class="number">0</span>,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> ans=(y-x+<span class="number">1</span>)-query(x,y,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                update(x,y,<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">1</span>);        <span class="comment">//1表示空花瓶 </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/POJ-1177" rel="external nofollow noopener noreferrer" target="_blank">POJ1177 Picture</a></p><p>题目是让我们求若干个矩形重叠后形成的大矩形的周长。<br>扫描线题目，但一般来说扫描线都是用来求取重叠面积的，而此处是求取周长。线段树维护区间中被覆盖的长度以及区间中线段的数目。之所以要维护线段长度，是因为在计算矩形$y$方向上的周长时需要用到。每次update的时候根据线段树更新区间结果即可。<br>代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">20005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lef,rig;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">    seg()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    seg(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> h,<span class="keyword">int</span> tag)</span><br><span class="line">        :lef(lef),rig(rig),h(h),tag(tag)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> seg&amp; se) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h&lt;se.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">seg segs[<span class="number">5005</span>*<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>        <span class="comment">//表示一个区间 </span></span><br><span class="line">    <span class="keyword">int</span> lef,rig;    <span class="comment">//左右端点 </span></span><br><span class="line">    <span class="keyword">int</span> len;        <span class="comment">//被覆盖的长度 </span></span><br><span class="line">    <span class="keyword">int</span> cover_cnt;    <span class="comment">//被覆盖的次数 </span></span><br><span class="line">    <span class="keyword">bool</span> lc,rc;        <span class="comment">//左右端点是否被覆盖 </span></span><br><span class="line">    <span class="keyword">int</span> num;        <span class="comment">//区间中线段数目 </span></span><br><span class="line">    node()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">node ns[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ns[rt].lef=lef;ns[rt].rig=rig;</span><br><span class="line">    ns[rt].len=<span class="number">0</span>;</span><br><span class="line">    ns[rt].cover_cnt=ns[rt].lc=ns[rt].rc=<span class="number">0</span>;</span><br><span class="line">    ns[rt].num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ns[rt].cover_cnt)&#123;</span><br><span class="line">        ns[rt].len=ns[rt].rig-ns[rt].lef+<span class="number">1</span>;</span><br><span class="line">        ns[rt].lc=ns[rt].rc=<span class="number">1</span>;</span><br><span class="line">        ns[rt].num=<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ns[rt].lef==ns[rt].rig)&#123;</span><br><span class="line">        ns[rt].len=<span class="number">0</span>;</span><br><span class="line">        ns[rt].lc=ns[rt].rc=<span class="number">0</span>;</span><br><span class="line">        ns[rt].num=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ns[rt&lt;&lt;<span class="number">1</span>].rc&amp;&amp;ns[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lc)</span><br><span class="line">            tmp=<span class="number">1</span>;</span><br><span class="line">        ns[rt].len=ns[rt&lt;&lt;<span class="number">1</span>].len+ns[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">        ns[rt].num=ns[rt&lt;&lt;<span class="number">1</span>].num+ns[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].num-tmp;        </span><br><span class="line">        <span class="comment">//当左儿子的右端点以及右儿子的左端点完全被覆盖时，中间会有一段被重复计算</span></span><br><span class="line">        <span class="comment">//的线段，故需要将其减去. </span></span><br><span class="line">        ns[rt].lc=ns[rt&lt;&lt;<span class="number">1</span>].lc;ns[rt].rc=ns[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> val,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span>        <span class="comment">//根据扫描线对线段树节点进行更新</span></span></span><br><span class="line"><span class="function"><span class="comment">//参数表中的lef和rig表示扫描线的左右端点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    cout&lt;&lt;"rt = "&lt;&lt;rt&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(lef==ns[rt].lef&amp;&amp;ns[rt].rig==rig)&#123;</span><br><span class="line">        ns[rt].cover_cnt+=val;</span><br><span class="line">        pushup(rt);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(ns[rt].lef)+(ns[rt].rig-ns[rt].lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(rig&lt;=mid)&#123;</span><br><span class="line">        update(val,lef,rig,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lef&gt;mid)&#123;</span><br><span class="line">        update(val,lef,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        update(val,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        update(val,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ub=-INF;</span><br><span class="line">    <span class="keyword">int</span> lb=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">        segs[cnt++]=seg(x1,x2,y1,<span class="number">1</span>);</span><br><span class="line">        segs[cnt++]=seg(x1,x2,y2,<span class="number">-1</span>);</span><br><span class="line">        ub=<span class="built_in">max</span>(ub,x2);</span><br><span class="line">        lb=<span class="built_in">min</span>(lb,x1);        </span><br><span class="line">    &#125;</span><br><span class="line">    sort(segs,segs+cnt);</span><br><span class="line">    build(lb,ub,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;<span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        update(segs[i].tag,segs[i].lef,segs[i].rig<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">        ans+=<span class="built_in">abs</span>(ns[<span class="number">1</span>].len-last);        <span class="comment">//当前的ns[1].len包括上一次统计的区间长度,因此需要减去last </span></span><br><span class="line">        last=ns[<span class="number">1</span>].len;</span><br><span class="line">        ans+=(segs[i+<span class="number">1</span>].h-segs[i].h)*<span class="number">2</span>*ns[<span class="number">1</span>].num;        <span class="comment">//ns[1]为当前扫描线下区间的线段数目 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/HDU-1255" rel="external nofollow noopener noreferrer" target="_blank">HDU1255 覆盖的面积</a></p><p>扫描线计算被覆盖两次及以上的覆盖面积。$cover_cnt$表示的是被完全覆盖的区间的长度。当一个区间被完全覆盖的次数大于等于2时，其二次覆盖长度就是其区间长度；当被完全覆盖的次数为1时，其二次覆盖长度为左儿子与右儿子的一次覆盖面积的和；若以上两种情况都不符合，那就由左儿子和右儿子的二次覆盖面积转移得到。</p><p>另外，这题需要离散化。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> lef,rig;</span><br><span class="line">    <span class="keyword">double</span> hei;</span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">    seg()&#123;&#125;</span><br><span class="line">    seg(<span class="keyword">double</span> lef,<span class="keyword">double</span> rig,<span class="keyword">double</span> hei,<span class="keyword">int</span> tag)</span><br><span class="line">        :lef(lef),rig(rig),hei(hei),tag(tag)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> seg&amp; se) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hei&lt;se.hei;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">seg segs[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>        <span class="comment">//线段树节点,表示一个区间</span></span><br><span class="line">    <span class="keyword">int</span> lef,rig;</span><br><span class="line">    <span class="keyword">double</span> len,len2;</span><br><span class="line">    <span class="keyword">int</span> cover_cnt;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line">    node(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig)</span><br><span class="line">        :lef(lef),rig(rig)&#123;</span><br><span class="line">            len=<span class="number">0</span>;cover_cnt=<span class="number">0</span>;len2=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">node ns[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="keyword">double</span> xs[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ns[rt].lef=lef;ns[rt].rig=rig;</span><br><span class="line">    ns[rt].len=ns[rt].len2=<span class="number">0</span>;</span><br><span class="line">    ns[rt].cover_cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)    <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ns[rt].cover_cnt)&#123;</span><br><span class="line">        ns[rt].len=xs[ns[rt].rig+<span class="number">1</span>]-xs[ns[rt].lef];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ns[rt].lef==ns[rt].rig)&#123;</span><br><span class="line">        ns[rt].len=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ns[rt].len=ns[rt&lt;&lt;<span class="number">1</span>].len+ns[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ns[rt].cover_cnt&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">        ns[rt].len2=xs[ns[rt].rig+<span class="number">1</span>]-xs[ns[rt].lef];</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ns[rt].lef==ns[rt].rig)&#123;</span><br><span class="line">        ns[rt].len2=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ns[rt].cover_cnt==<span class="number">1</span>)&#123;</span><br><span class="line">        ns[rt].len2=ns[rt&lt;&lt;<span class="number">1</span>].len+ns[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ns[rt].len2=ns[rt&lt;&lt;<span class="number">1</span>].len2+ns[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> val,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ns[rt].lef==lef&amp;&amp;ns[rt].rig==rig)&#123;</span><br><span class="line">        ns[rt].cover_cnt+=val;</span><br><span class="line">        pushup(rt);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(ns[rt].lef)+(ns[rt].rig-ns[rt].lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(rig&lt;=mid)&#123;</span><br><span class="line">        update(val,lef,rig,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lef&gt;mid)&#123;</span><br><span class="line">        update(val,lef,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        update(val,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        update(val,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary</span><span class="params">(<span class="keyword">double</span> arr[],<span class="keyword">double</span> key,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lef=<span class="number">0</span>;<span class="keyword">int</span> rig=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(lef&lt;=rig)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(arr[mid]==key)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(arr[mid]&lt;key)</span><br><span class="line">            lef=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            rig=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rig;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        mst(xs,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> x1,y1,x2,y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf %lf"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            segs[cnt]=seg(x1,x2,y1,<span class="number">1</span>);       <span class="comment">//下位</span></span><br><span class="line">            xs[cnt++]=x1;</span><br><span class="line">            segs[cnt]=seg(x1,x2,y2,<span class="number">-1</span>);</span><br><span class="line">            xs[cnt++]=x2;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(xs,xs+cnt);</span><br><span class="line"><span class="comment">//        for(int i=0;i&lt;cnt;i++)</span></span><br><span class="line"><span class="comment">//            cout&lt;&lt;xs[i]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">//        cout&lt;&lt;"\n";</span></span><br><span class="line">        sort(segs,segs+cnt);</span><br><span class="line">        <span class="keyword">int</span> idx=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)</span><br><span class="line">            <span class="keyword">if</span>(xs[i]!=xs[i<span class="number">-1</span>])</span><br><span class="line">                xs[idx++]=xs[i];</span><br><span class="line">        build(<span class="number">0</span>,idx<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> lx=binary(xs,segs[i].lef,idx);</span><br><span class="line">            <span class="keyword">int</span> rx=binary(xs,segs[i].rig,idx)<span class="number">-1</span>;</span><br><span class="line">            update(segs[i].tag,lx,rx,<span class="number">1</span>);</span><br><span class="line">            ans+=(segs[i+<span class="number">1</span>].hei-segs[i].hei)*(ns[<span class="number">1</span>].len2);</span><br><span class="line"><span class="comment">//            printf("ans+: %.2lf\n",(segs[i+1].hei-segs[i].hei)*(ns[1].len2));</span></span><br><span class="line"><span class="comment">//            printf("ns[1].len2: %.2lf\n",ns[1].len2);</span></span><br><span class="line"><span class="comment">//            printf("segs[i+1].hei-segs[i].hei: %.2lf\n\n",segs[i+1].hei-segs[i].hei);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/HDU-1542" rel="external nofollow noopener noreferrer" target="_blank">HDU1542 Atlantis</a></p><p>扫描线最经典的应用，求矩形的面积并。线段树维护区间的被覆盖长度，然后根据扫描线高度差计算面积即可。另外，本题需要离散化。<br>代码如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> lef;<span class="keyword">double</span> rig;</span><br><span class="line">    <span class="keyword">double</span> hei;<span class="keyword">int</span> tag;</span><br><span class="line">    <span class="comment">//tag=1表示下位边,tag=-1表示上位边</span></span><br><span class="line">    seg()&#123;</span><br><span class="line">    &#125; </span><br><span class="line">    seg(<span class="keyword">double</span> lef,<span class="keyword">double</span> rig,<span class="keyword">double</span> hei,<span class="keyword">int</span> tag)</span><br><span class="line">        :lef(lef),rig(rig),hei(hei),tag(tag)&#123;</span><br><span class="line">        &#125; </span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> seg&amp; se) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hei&lt;se.hei;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">seg segs[maxn];</span><br><span class="line"><span class="keyword">double</span> X[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> vis[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> sum[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[rt])</span><br><span class="line">        sum[rt]=X[r+<span class="number">1</span>]-X[l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l==r)</span><br><span class="line">        sum[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> val,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=lef&amp;&amp;rig&lt;=R)&#123;</span><br><span class="line">        vis[rt]+=val;</span><br><span class="line">        pushup(lef,rig,rt);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">        update(L,R,val,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">        update(L,R,val,rson);</span><br><span class="line">    pushup(lef,rig,rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary</span><span class="params">(<span class="keyword">double</span> todo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Lef,Rig;</span><br><span class="line">    Lef=<span class="number">0</span>;Rig=idx<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(Lef&lt;=Rig)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=Lef+(Rig-Lef)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(X[mid]&gt;todo)</span><br><span class="line">            Rig=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Lef=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Rig;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="keyword">int</span> kase=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&amp;&amp;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;idx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> x1,y1,x2,y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf %lf"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2); </span><br><span class="line">            segs[cnt]=seg(x1,x2,y1,<span class="number">1</span>);</span><br><span class="line">            X[cnt++]=x1;</span><br><span class="line">            segs[cnt]=seg(x1,x2,y2,<span class="number">-1</span>);</span><br><span class="line">            X[cnt++]=x2;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(segs,segs+cnt);</span><br><span class="line">        sort(X,X+cnt);</span><br><span class="line">        idx=<span class="number">1</span>;<span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)</span><br><span class="line">            <span class="keyword">if</span>(X[i]!=X[i<span class="number">-1</span>])</span><br><span class="line">                X[idx++]=X[i];</span><br><span class="line">        mst(sum,<span class="number">0</span>);mst(vis,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> L=binary(segs[i].lef);</span><br><span class="line">            <span class="keyword">int</span> R=binary(segs[i].rig)<span class="number">-1</span>;</span><br><span class="line">            update(L,R,segs[i].tag,<span class="number">0</span>,idx<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            ans+=sum[<span class="number">1</span>]*(segs[i+<span class="number">1</span>].hei-segs[i].hei);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>,++kase);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Total explored area: %.2lf\n\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://cn.vjudge.net/problem/HDU-3642" rel="external nofollow noopener noreferrer" target="_blank">HDU3642 Get the Treasury</a><br>题意是求在三维空间中，有若干个矩形区域，求重叠次数大于等于3的区域的体积。<br>思路是用线段树维护单个平面被覆盖次数大于等于3的平面区域的面积，然后枚举z轴上的高度差，进而算出面积（z的范围并不大，可以枚举）<br>具体见代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug cout&lt;&lt;<span class="meta-string">"debug"</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2500</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lef,rig;</span><br><span class="line">    <span class="keyword">int</span> hei;</span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">    seg()&#123;&#125;</span><br><span class="line">    seg(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> hei,<span class="keyword">int</span> tag)</span><br><span class="line">        :lef(lef),rig(rig),hei(hei),tag(tag)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> h,<span class="keyword">int</span> tt)</span></span>&#123;</span><br><span class="line">        lef=l;rig=r;hei=h;</span><br><span class="line">        tag=tt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> seg&amp; se)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hei&lt;se.hei;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lef,rig;</span><br><span class="line">    <span class="keyword">int</span> len,len2,len3;    </span><br><span class="line">    <span class="keyword">int</span> cover_cnt;</span><br><span class="line">    node()&#123;&#125;</span><br><span class="line"><span class="comment">//    node(int lef,int rig)</span></span><br><span class="line"><span class="comment">//        :lef(lef),rig(rig)&#123;len=len2=len3=cover_cnt=0;&#125;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    <span class="built_in">point</span>(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span><br><span class="line">        :x(x),y(y),z(z)&#123;&#125;</span><br><span class="line">    <span class="built_in">point</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">node tree[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="built_in">point</span> ps[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> xs[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> zs[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">seg segs[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[rt].lef=lef;tree[rt].rig=rig;</span><br><span class="line">    tree[rt].len=tree[rt].len2=tree[rt].len3=tree[rt].cover_cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    build(lson);</span><br><span class="line">    build(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[rt].cover_cnt&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">        tree[rt].len3=xs[tree[rt].rig+<span class="number">1</span>]-xs[tree[rt].lef];</span><br><span class="line">        tree[rt].len2=tree[rt].len=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tree[rt].cover_cnt&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">        tree[rt].len3=tree[rt&lt;&lt;<span class="number">1</span>].len3+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len3+tree[rt&lt;&lt;<span class="number">1</span>].len2+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len2+tree[rt&lt;&lt;<span class="number">1</span>].len+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">        tree[rt].len2=xs[tree[rt].rig+<span class="number">1</span>]-xs[tree[rt].lef]-tree[rt].len3;</span><br><span class="line">        tree[rt].len=<span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tree[rt].cover_cnt&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        tree[rt].len3=tree[rt&lt;&lt;<span class="number">1</span>].len3+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len3+tree[rt&lt;&lt;<span class="number">1</span>].len2+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len2;</span><br><span class="line">        tree[rt].len2=tree[rt&lt;&lt;<span class="number">1</span>].len+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">        tree[rt].len=xs[tree[rt].rig+<span class="number">1</span>]-xs[tree[rt].lef]-tree[rt].len2-tree[rt].len3;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        tree[rt].len3=tree[rt&lt;&lt;<span class="number">1</span>].len3+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len3;</span><br><span class="line">        tree[rt].len2=tree[rt&lt;&lt;<span class="number">1</span>].len2+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len2;</span><br><span class="line">        tree[rt].len=tree[rt&lt;&lt;<span class="number">1</span>].len+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> val,<span class="keyword">int</span> lef,<span class="keyword">int</span> rig,<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==tree[rt].lef&amp;&amp;rig==tree[rt].rig)&#123;</span><br><span class="line">        tree[rt].cover_cnt+=val;</span><br><span class="line">        pushup(rt);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(tree[rt].lef)+(tree[rt].rig-tree[rt].lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(rig&lt;=mid)&#123;</span><br><span class="line">        update(val,lef,rig,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lef&gt;mid)&#123;</span><br><span class="line">        update(val,lef,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        update(val,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        update(val,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        tree[i].cover_cnt=tree[i].lef=tree[i].rig=<span class="number">0</span>;</span><br><span class="line">        tree[i].len=tree[i].len2=tree[i].len3=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">int</span> kase=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        init(<span class="number">2005</span>);</span><br><span class="line">        mst(xs,<span class="number">0</span>);mst(zs,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x1,y1,z1;</span><br><span class="line">            <span class="keyword">int</span> x2,y2,z2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d %d"</span>,&amp;x1,&amp;y1,&amp;z1,&amp;x2,&amp;y2,&amp;z2);</span><br><span class="line">            xs[cnt]=x1;xs[cnt+<span class="number">1</span>]=x2;</span><br><span class="line">            zs[cnt]=z1;zs[cnt+<span class="number">1</span>]=z2;</span><br><span class="line">            ps[cnt]=<span class="built_in">point</span>(x1,y1,z1);ps[cnt+<span class="number">1</span>]=<span class="built_in">point</span>(x2,y2,z2);</span><br><span class="line">            cnt+=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(xs,xs+cnt);</span><br><span class="line">        sort(zs,zs+cnt);</span><br><span class="line">        <span class="keyword">int</span> idx=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)</span><br><span class="line">            <span class="keyword">if</span>(xs[i]!=xs[i<span class="number">-1</span>])</span><br><span class="line">                xs[idx++]=xs[i];</span><br><span class="line">        <span class="keyword">int</span> idx1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)</span><br><span class="line">            <span class="keyword">if</span>(zs[i]!=zs[i<span class="number">-1</span>])</span><br><span class="line">                zs[idx1++]=zs[i];</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;idx1<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt;j+=<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ps[j].z&lt;=zs[i]&amp;&amp;ps[j+<span class="number">1</span>].z&gt;zs[i])&#123;</span><br><span class="line">                    segs[k++].<span class="built_in">set</span>(ps[j].x,ps[j+<span class="number">1</span>].x,ps[j].y,<span class="number">1</span>);</span><br><span class="line">                    segs[k++].<span class="built_in">set</span>(ps[j].x,ps[j+<span class="number">1</span>].x,ps[j+<span class="number">1</span>].y,<span class="number">-1</span>);</span><br><span class="line">                    <span class="comment">// segs[k++]=seg(ps[j].x,ps[j+1].x,ps[j].y,1);</span></span><br><span class="line">                    <span class="comment">// segs[k++]=seg(ps[j].x,ps[j+1].x,ps[j+1].y,-1);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            init(idx<span class="number">-1</span>);</span><br><span class="line">            sort(segs,segs+k);</span><br><span class="line">            build(<span class="number">0</span>,idx<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            ll tmp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k<span class="number">-1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> lx=lower_bound(xs,xs+idx,segs[j].lef)-xs;</span><br><span class="line">                <span class="keyword">int</span> rx=lower_bound(xs,xs+idx,segs[j].rig)-xs<span class="number">-1</span>;</span><br><span class="line">                update(segs[j].tag,lx,rx,<span class="number">1</span>);</span><br><span class="line">                tmp+=(ll)tree[<span class="number">1</span>].len3*(ll)(segs[j+<span class="number">1</span>].hei-segs[j].hei);</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=(ll)tmp*(ll)(zs[i+<span class="number">1</span>]-zs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span>)</span><br><span class="line">            ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %lld\n"</span>,++kase,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">4 5 0 8 9 5</span></span><br><span class="line"><span class="comment">0 3 3 4 5 7</span></span><br><span class="line"><span class="comment">5 4 4 10 6 9</span></span><br><span class="line"><span class="comment">5 5 5 9 9 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>看了一下，虽然专题里面有区间合并的题目，但我并不是用正统的区间合并的方法做的啊……所以说这方面还需要再好好学一下呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H8248ceab1da6430e949cd345061b92c0I.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Photo by &lt;strong&gt;Mohsin&lt;/strong&gt; khan from &lt;strong&gt;Pexels&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>POJ - 1330 Nearest Common Ancestors (Tarjan求LCA模板)</title>
    <link href="https://mimori.coding.me/2019/08/07/POJ-1330-Nearest-Common-Ancestors-Tarjan%E6%B1%82LCA%E6%A8%A1%E6%9D%BF/"/>
    <id>https://mimori.coding.me/2019/08/07/POJ-1330-Nearest-Common-Ancestors-Tarjan%E6%B1%82LCA%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-08-07T13:29:37.000Z</published>
    <updated>2019-08-08T02:30:24.784Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Hefa1fd510a004e5b986687c88e78c004A.jpg" alt></p><p>From <strong>Google Earth</strong></p><a id="more"></a><p><a href="https://cn.vjudge.net/problem/POJ-1330" rel="external nofollow noopener noreferrer" target="_blank">Nearest Common Ancestors</a></p><p>其实就是LCA的模板题……屯一下板子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> next; </span><br><span class="line">&#125;;</span><br><span class="line">edge es[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[cnt].to=v;</span><br><span class="line">    es[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> in[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        fa[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_fa</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]!=x)    </span><br><span class="line">        fa[x]=find_fa(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=find_fa(x);</span><br><span class="line">    <span class="keyword">int</span> fy=find_fa(y);</span><br><span class="line">    <span class="keyword">if</span>(fx!=fy)&#123;</span><br><span class="line">        fa[fy]=fx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> qx,qy;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> v=es[i].to;</span><br><span class="line">        lca(v);</span><br><span class="line">        join(u,v);</span><br><span class="line">        vis[v]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qx==u&amp;&amp;vis[qy])</span><br><span class="line">        ans=find_fa(qy);</span><br><span class="line">    <span class="keyword">if</span>(qy==u&amp;&amp;vis[qx])</span><br><span class="line">        ans=find_fa(qx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;;</span><br><span class="line">        mst(vis,<span class="number">0</span>);</span><br><span class="line">        mst(head,<span class="number">-1</span>);mst(in,<span class="number">0</span>);</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> u,v;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">            add(u,v);in[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                rt=i;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;qx&gt;&gt;qy;</span><br><span class="line">        lca(rt);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/Hefa1fd510a004e5b986687c88e78c004A.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;From &lt;strong&gt;Google Earth&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Windows10下安装C++ linear algebra library Armadillo</title>
    <link href="https://mimori.coding.me/2019/08/03/Windows10%E4%B8%8B%E5%AE%89%E8%A3%85C-linear-algebra-library-Armadillo/"/>
    <id>https://mimori.coding.me/2019/08/03/Windows10%E4%B8%8B%E5%AE%89%E8%A3%85C-linear-algebra-library-Armadillo/</id>
    <published>2019-08-03T15:45:00.000Z</published>
    <updated>2019-08-04T00:26:42.958Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H628e81e21f2f4cd6994afcb0bc0d008ap.jpg" alt></p><a id="more"></a><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>装这个库的原因是因为昨天写题写得有点自闭，所以就去复习一下很久之前学过的numpy，打算调整一下思维。复习着复习着，就想C++下有没有像numpy这种这么好用的矩阵库呢？上某乎找了一下，果然有，便打算配一个玩玩<del>（一句话概括，原因就是想要找个合适的理由划水）</del></p><h4 id="Armadill简介"><a href="#Armadill简介" class="headerlink" title="Armadill简介"></a>Armadill简介</h4><p>以下摘自官网</p><blockquote><ul><li><p>Armadillo is a high quality linear algebra library (matrix maths) for the C++ language, aiming towards a good balance between speed and ease of use </p></li><li><p>Provides high-level syntax and <a href="http://arma.sourceforge.net/docs.html" rel="external nofollow noopener noreferrer" target="_blank">functionality</a> deliberately similar to Matlab </p></li><li><p>Useful for algorithm development directly in C++, or quick conversion of research code into production environments (eg. software &amp; hardware products) </p></li><li><p>Provides efficient classes for vectors, matrices and cubes (1st, 2nd and 3rd order tensors); dense and sparse matrices are supported </p></li><li><p>Integer, floating point and complex numbers are supported </p></li><li><p>Various matrix decompositions are provided through integration with <a href="http://www.netlib.org/lapack/" rel="external nofollow noopener noreferrer" target="_blank">LAPACK</a>, or one of its high performance drop-in replacements (eg. multi-threaded <a href="http://software.intel.com/en-us/intel-mkl/" rel="external nofollow noopener noreferrer" target="_blank">Intel MKL</a>, or <a href="https://github.com/xianyi/OpenBLAS/releases" rel="external nofollow noopener noreferrer" target="_blank">OpenBLAS</a>) </p></li><li><p>A sophisticated expression evaluator (based on template meta-programming) automatically combines several operations to increase speed and efficiency </p></li><li><p>Can automatically use OpenMP multi-threading (parallelisation) to speed up computationally expensive operations </p></li><li><p>Available under a <a href="http://arma.sourceforge.net/license.html" rel="external nofollow noopener noreferrer" target="_blank">permissive license</a>, useful for both open-source and proprietary (closed-source) software </p></li><li><p>Can be used for machine learning, pattern recognition, computer vision, signal processing, bioinformatics, statistics, finance, etc </p></li></ul></blockquote><p>翻译一下就是</p><ul><li>Armadillo是一个高质量的C++线性代数库，目的是实现速度与易用性的良好平衡。</li><li>提供与Matlab相似的高阶语法及功能。</li><li>对于C++算法开发或代码在生产环境中的快速转换很有帮助。</li><li>提供高效的vectors，matrices与cubes（一阶、二阶和三阶张量）的类实现；同时支持密集矩阵和稀疏矩阵</li><li>支持整数、浮点数和复数。</li><li>通过与LAPACK或其高性能替换（如多线程的 Intel MKL，或OpenBLAS），提供多种矩阵分解。</li><li>复杂表达式评估程序（基于模板元编程）会自动地将多个操作组合以提高速度和效率</li><li>可以自动使用OpenMP的多线程来加速计算耗时较大的操作</li><li>在许可下可用，对于开源与闭源软件都是可用的。</li><li>可用于机器学习、模式识别、计算机视觉、信号处理、生物信息学、统计学、金融学等等。</li></ul><p><del>辣鸡英语水平，有些地方翻译得很生硬</del></p><p><del>一句话概括就是这个库很nb</del></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="首先当然是去下载这个库"><a href="#首先当然是去下载这个库" class="headerlink" title="首先当然是去下载这个库"></a>首先当然是去下载这个库</h5><p>点击下面👇这个链接即可</p><p><a href="http://arma.sourceforge.net/download.html" rel="external nofollow noopener noreferrer" target="_blank">Armadillo Download</a></p><p>进去之后是这样的</p><p><img src="https://ae01.alicdn.com/kf/H65ff87aeecba45f98168ccb69b43be582.jpg" alt></p><p>推荐下载Stable Version</p><p>下载之后，将文件解压到任意目录。比方说我就把它解压到了D盘根目录下的Armadillo目录。</p><p>打开文件夹，其中内容如下。</p><p><img src="https://ae01.alicdn.com/kf/H2dfea56dc4234694a8fe40ae51bc7d3dx.jpg" alt></p><h5 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h5><p>打开Visual Studio，我这里用的是2017的版本。新建一个项目，配置如下图</p><p><img src="https://ae01.alicdn.com/kf/Hdf2647655d364e549a34f68f4f272312l.jpg" alt></p><p>进入项目后，在“调试”一栏找到项目属性，然后进行目录配置。具体配置过程如下：</p><ul><li><p>修改“配置”与“平台”</p><p>在我这是要这样配置</p><p><img src="https://ae01.alicdn.com/kf/H0c0177cf0f9143ceaa8daa4a82ca6bdcW.jpg" alt></p></li></ul><div class="note warning"><p>注意！“平台”处不一定是像我这样选，网上有很多文章选的是x64，但由于我这里是建立了一个Win32项目，所以要选择Win32。</p></div><p>此处的设置很重要，错误的话可能会导致找不到头文件</p><ul><li><p>配置包含目录</p><p>所谓包含目录就是头文件的目录。在“配置属性”中选择“VC++目录”，然后在“包含目录”一栏选择你的Armadillo的include目录。如下图。</p><p><img src="https://ae01.alicdn.com/kf/Hb9c8bdce83b248b6b01db5caa1255144w.jpg" alt></p></li><li><p>配置附加依赖项</p><p>选择“链接器”的“输入”，在“附加依赖项”一栏，添加Armadillo中example\lib_win64目录下的lapack_win64_MT.lib和blas_win64_MT.lib。</p></li></ul><div class="note warning"><p>注意！实际需要的并不一定是这两个lib，这两个都是win64的，如果你是win32的项目，请使用win32的lib文件！下载地址见附录</p></div><h5 id="配置完成，开始使用吧！"><a href="#配置完成，开始使用吧！" class="headerlink" title="配置完成，开始使用吧！"></a>配置完成，开始使用吧！</h5><p>运行一下附带的example1.cpp</p><p><img src="https://ae01.alicdn.com/kf/H5ef973a92ae94889938ff2ad18d34a95S.jpg" alt></p><p>另外，还需要将labpack和blas对应的.dll文件放到编译生成的.exe所在目录处。否则.exe会无法运行。</p><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><ul><li><p>labpack和blas的下载地址，内含32位版和64位版</p><p><a href="https://icl.cs.utk.edu/lapack-for-windows/lapack/" rel="external nofollow noopener noreferrer" target="_blank">Download labpack and blas</a></p></li><li><p><del>不要尝试用Devcpp配置任何第三方库</del></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H628e81e21f2f4cd6994afcb0bc0d008ap.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://mimori.coding.me/categories/C/"/>
    
      <category term="第三方库" scheme="https://mimori.coding.me/categories/C/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
      <category term="Armadillo" scheme="https://mimori.coding.me/categories/C/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/Armadillo/"/>
    
    
      <category term="C++" scheme="https://mimori.coding.me/tags/C/"/>
    
      <category term="第三方库" scheme="https://mimori.coding.me/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
      <category term="Armadillo" scheme="https://mimori.coding.me/tags/Armadillo/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客中加入B站视频与网易云歌单</title>
    <link href="https://mimori.coding.me/2019/08/01/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5B%E7%AB%99%E8%A7%86%E9%A2%91/"/>
    <id>https://mimori.coding.me/2019/08/01/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5B%E7%AB%99%E8%A7%86%E9%A2%91/</id>
    <published>2019-08-01T15:02:00.000Z</published>
    <updated>2019-08-01T15:55:49.116Z</updated>
    
    <content type="html"><![CDATA[<p>没有封面图，懒得找了……</p><a id="more"></a><h3 id="添加B站视频"><a href="#添加B站视频" class="headerlink" title="添加B站视频"></a>添加B站视频</h3><p>在文章中添加如下代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: relative; width: 100%; height: 0; padding-bottom: 75%;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=57933879&amp;cid=101052438&amp;page=1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"position: absolute; width: 100%; height: 100%; left: 0; top: 0;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></p><p>在b站视频分享处可以得到视频对应&lt; iframe &gt;标签</p><p>效果如下:</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=57933879&cid=101052438&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h3 id="添加网易云歌单"><a href="#添加网易云歌单" class="headerlink" title="添加网易云歌单"></a>添加网易云歌单</h3><h4 id="获取外链"><a href="#获取外链" class="headerlink" title="获取外链"></a>获取外链</h4><p>首先打开网易云音乐网页版，找到要生成外链的歌单。然后点击“分享”。</p><p><img src="https://ae01.alicdn.com/kf/Ha0f6cd7fae4e4b1e8fade6891b755091r.jpg" alt></p><p>分享成功后，返回首页，进入个人动态，可以看到之前的分享。</p><p><img src="https://ae01.alicdn.com/kf/Hbb20fa711df74bc480e5f97a249ed77d7.jpg" alt></p><p>点击分享链接，就可以看到生成外链播放器的选项</p><p><img src="https://ae01.alicdn.com/kf/H47884c7176254ed8be7cfb2b1c11d7ddD.jpg" alt></p><h4 id="插入播放器"><a href="#插入播放器" class="headerlink" title="插入播放器"></a>插入播放器</h4><p>获取外链后，直接在文章中将其插入即可。最好加上。</p><p><br><br><br></p><div align="center"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="400" height="450" src="//music.163.com/outchain/player?type=0&id=648450046&auto=1&height=430"></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有封面图，懒得找了……&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://mimori.coding.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://mimori.coding.me/tags/hexo/"/>
    
      <category term="Bilibili" scheme="https://mimori.coding.me/tags/Bilibili/"/>
    
  </entry>
  
  <entry>
    <title>POJ1985 &amp; HDU2196 求树的直径模板</title>
    <link href="https://mimori.coding.me/2019/07/31/POJ1985-HDU2196-%E6%B1%82%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E6%A8%A1%E6%9D%BF/"/>
    <id>https://mimori.coding.me/2019/07/31/POJ1985-HDU2196-%E6%B1%82%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-07-31T03:42:00.000Z</published>
    <updated>2019-07-31T03:52:16.935Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H3f36fb9928484479b586fc1764a50805L.jpg" alt></p><p>Photo by <strong>Nick Kwan</strong> from <strong>Pexels</strong></p><a id="more"></a><p>这篇文章的主要目的是为了屯模板……</p><p><a href="https://cn.vjudge.net/problem/POJ-1985" rel="external nofollow noopener noreferrer" target="_blank">POJ1985 Cow Marathon</a><br>裸题，直接两边dfs求出直径即可（输入里面的那个方向是没用的……）<br>代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50000</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,next;</span><br><span class="line">    ll wei;</span><br><span class="line">&#125;;</span><br><span class="line">node es[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">ll dis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[cnt].to=v;</span><br><span class="line">    es[cnt].wei=wei;</span><br><span class="line">    es[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    dis[st]=dis[fa]+es[fa].wei;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[st];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">        <span class="keyword">int</span> to=es[i].to;</span><br><span class="line">        <span class="keyword">if</span>(to==fa)    <span class="keyword">continue</span>;</span><br><span class="line">        dis[to]=dis[st]+es[i].wei;</span><br><span class="line">        dfs(to,st);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">        mst(head,<span class="number">-1</span>);cnt=<span class="number">0</span>;</span><br><span class="line">        mst(dis,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> start;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a,b,L;<span class="keyword">char</span> dir;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;L&gt;&gt;dir;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)    start=a;</span><br><span class="line">            add(a,b,L);add(b,a,L);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> end_;ll ans=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[i]&gt;ans)&#123;</span><br><span class="line">                ans=dis[i];</span><br><span class="line">                end_=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        cout&lt;&lt;"end = "&lt;&lt;end_&lt;&lt;endl;</span></span><br><span class="line">        mst(dis,<span class="number">0</span>);</span><br><span class="line">        dfs(end_,<span class="number">0</span>);</span><br><span class="line">        ans=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,dis[i]);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://cn.vjudge.net/problem/HDU-2196" rel="external nofollow noopener noreferrer" target="_blank">HDU2196 Computer</a></p><p>对于每一个点，其最大距离即为直径的两个端点到该点的距离的较大值。</p><p>做法是跑三次bfs。第一次用于求出直径的一个端点；第二次从该端点出发找另一个端点，同时算出从该端点到其他点的距离；第三次从找出来的另一个端点出发算出它到其他点的距离。</p><p>代码如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug printf(<span class="meta-string">"debug\n"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> next,wei;</span><br><span class="line">&#125;;</span><br><span class="line">node es[<span class="number">80005</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">40005</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[cnt].to=v;</span><br><span class="line">    es[cnt].wei=wei;</span><br><span class="line">    es[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dis1[<span class="number">40005</span>];</span><br><span class="line"><span class="keyword">int</span> dis2[<span class="number">40005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">40005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs1</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    que.push(st);</span><br><span class="line">    mst(vis,<span class="number">0</span>);mst(dis1,<span class="number">0</span>);</span><br><span class="line">    dis1[st]=<span class="number">0</span>;vis[st]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxi_len=dis1[st];</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">point</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> now=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> to=es[i].to;</span><br><span class="line">            <span class="keyword">if</span>(vis[to]==<span class="number">0</span>)&#123;</span><br><span class="line">                vis[to]=<span class="number">1</span>;</span><br><span class="line">                dis1[to]=dis1[now]+es[i].wei;</span><br><span class="line">                que.push(to);</span><br><span class="line">                <span class="keyword">if</span>(maxi_len&lt;dis1[to])&#123;</span><br><span class="line">                    maxi_len=dis1[to];</span><br><span class="line">                    <span class="built_in">point</span>=to;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">point</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs2</span><span class="params">(<span class="keyword">int</span> st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    que.push(st);</span><br><span class="line">    mst(vis,<span class="number">0</span>);mst(dis2,<span class="number">0</span>);</span><br><span class="line">    dis2[st]=<span class="number">0</span>;vis[st]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxi_len=dis2[st];</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">point</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> now=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">            <span class="keyword">int</span> to=es[i].to;</span><br><span class="line">            <span class="keyword">if</span>(vis[to]==<span class="number">0</span>)&#123;</span><br><span class="line">                vis[to]=<span class="number">1</span>;</span><br><span class="line">                dis2[to]=dis2[now]+es[i].wei;</span><br><span class="line">                que.push(to);</span><br><span class="line">                <span class="keyword">if</span>(maxi_len&lt;dis2[to])&#123;</span><br><span class="line">                    maxi_len=dis2[to];</span><br><span class="line">                    <span class="built_in">point</span>=to;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">point</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">//    freopen("data_generator.txt","r",stdin);</span></span><br><span class="line"><span class="comment">//    freopen("computer.txt","w",stdout);</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        mst(head,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v,wei;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;v,&amp;wei);</span><br><span class="line">            add(i,v,wei);</span><br><span class="line">            add(v,i,wei);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> p1=bfs1(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> p2=bfs2(p1);            <span class="comment">//得到端点1到其他点的距离 </span></span><br><span class="line">        bfs1(p2);                <span class="comment">//得到端点2到其他点的距离 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">max</span>(dis1[i],dis2[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H3f36fb9928484479b586fc1764a50805L.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Photo by &lt;strong&gt;Nick Kwan&lt;/strong&gt; from &lt;strong&gt;Pexels&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="https://mimori.coding.me/categories/ACM/"/>
    
      <category term="数据结构" scheme="https://mimori.coding.me/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="https://mimori.coding.me/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
      <category term="C++" scheme="https://mimori.coding.me/tags/C/"/>
    
      <category term="ACM" scheme="https://mimori.coding.me/tags/ACM/"/>
    
      <category term="数据结构" scheme="https://mimori.coding.me/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="https://mimori.coding.me/tags/%E6%A0%91/"/>
    
      <category term="树的直径" scheme="https://mimori.coding.me/tags/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    
  </entry>
  
</feed>

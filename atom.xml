<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>-xGeminix-</title>
  
  <subtitle>TayE&#39;s Blog☄️</subtitle>
  <link href="https://xtayex.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://xtayex.gitee.io/"/>
  <updated>2022-12-31T13:01:13.022Z</updated>
  <id>https://xtayex.gitee.io/</id>
  
  <author>
    <name>ReTayE</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022年终总结</title>
    <link href="https://xtayex.gitee.io/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://xtayex.gitee.io/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2022-12-31T12:08:00.000Z</published>
    <updated>2022-12-31T13:01:13.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="年年终总结">2022年年终总结</h1><p>又到了一年的最后一天了。在这一年即将过去的现在，回看一下，2022年给我一种特别漫长的感觉。这种漫长感并不是因为这一年特别难过让人感到"度日如年"。而是因为这一年的容量很大，发生的事情特别多特别充实，给我一种"虽然只过了一年，但是却经历了以往不止一年才能经历的事情"的感觉。那么，这一年都发生了什么事情呢？</p><p>2022年刚开始没多久，就发生了一件足以影响我后半生的大事。那就是，我和秦一在一起啦！22年的1月11号，我还记得我是下午四点左右到的遵义。坐了六个小时的高铁，列车停靠在站台打开车门后，我就迫不及待地拉上我的行李箱找出站口。下车后感觉到的是明显不同于三亚和深圳的温度，虽说不上很冷，但也让人不禁打了一哆嗦。身上薄薄的一件卫衣也让我成为"整个遵义穿得最少的人"（秦一原话）。出站的时候还遇到了一个小插曲：快走到出站口的时候，工作人员让扫一下健康码，没想到这时候手机居然没电关机了。最后在工作人员的帐篷里折腾了一会充了点电才顺利出的站。</p><p>出站口的人很多，大家围在一起伸长脖子期盼着自己等待的人早点出现。人群中有一个穿着红红大衣和光腿神器的小美女，远远地我就认出她就是我的秦一。离出站口还有十米左右的时候，我在想等会见面了要说什么呢。思来想去，最终走到秦一面前的时候，我用自觉最温柔的声音说了声："宴如！"。后面才知道，这个小笨蛋美女，原来当时也在想要说些什么，还说要不要和我握手哇！</p><p>我们两个并排走在一起，手臂挨着手臂，手指碰到手指，但是却默契地没有去牵对方的手。秦一叫来了一辆出租车，我说，我做前面吧。秦一听到了以后有点点惊讶，拉着我的衣袖说："唔你不和我一起坐吗......"</p><p>吃罢晚饭后，我们俩回到酒店。秦一小美女把房间门关上的时候，虽然我知道好像确实会这样，但是又有一点紧张和激动，因为这是我第一次和女生、和自己喜欢的女生单独在一个房间嘞。我们躺在酒店的床上，叽叽喳喳地聊着天，好像有无限聊不完的话题（现在是不是也是这样呢）。我记得很清楚，九点多的时候，我支起身子，看着秦一说，我们来玩一个游戏吧，互相看着对方的眼睛，谁先笑出来谁就输啦。小美女很爽快地答应了。于是，秦一也从床上支起了身子。我看着她褐色的像水晶一样的眼睛，心里默念着倒计时：3、2、1、0！</p><p><img src="https://s2.loli.net/2022/12/31/VTDf6H3cFlP2OLr.jpg" /></p><center>我们一起吃的第一顿饭，苏州路的外婆家传菜🦐</center><p>"宴如，我真的好喜欢你，可以做我女朋友吗？"</p><p>小美女秦一害羞地把头埋进了被子里，然后......然后我们就在一起啦！</p><p>写到这里，突然想起这应该是一篇年终总结，而不是表白回忆录。还是让我们继续来写流水帐吧！</p><p><img src="https://s2.loli.net/2022/12/31/x4rGWA96TjPztBK.jpg" width=1000px></img></p><center>我们在亲亲🥰</center><p>和秦一在一起的这一年里，我们一起经历了很多大大小小的事情。三月份的时候，我们在京光海景花园一起租房子，一起运动，一起睡觉，一起做饭，一起洗衣服......这段时光让我发现我们俩并不像其他人所说的那样，情侣一同居就会见光死，反而发现对方很多生活细节和自己很像，即使不一样的也可以相互包容相互协调。我们都喜欢把东西扔得乱七八糟的，所以不会有其中一方跳出来嫌弃另一方不好好收拾；秦一不太会做饭，于是就我来做；我洗碗秦一觉得太慢了，所以就由她来洗。每晚饭后的散步环节我们要么在楼下转悠转悠聊着各种话题，要么去来福士买两块钱一个的碗。每天秦一去上班，我就在家里研究做什么好吃的，到点了就去接她下班......这样的生活可以说是鸡毛蒜皮、柴米油盐，但是却是这样平实的生活，让我们尝到了生活的甜，看到了未来最有可能呈现的模样。</p><p><img src="https://s2.loli.net/2022/12/31/yRLF2lvOeEtaI6Q.jpg" width=600px></img></p><center>秦一在化妆💅</center><p>在京光海景花园的日子短暂而珍贵，而我们在2022年创造的回忆并不仅仅只有这些。我们一起去旅游，一起去看展，一起去实习；秦一在广州实习的时候，我们在广州各种地方留下了我们的足迹（印象最深刻的当然是在雨中亲亲咯！）；我们还一起去看了很多地方的海，有盐田的，有前海的，有横石基的；我们也闹过一两次小别扭，但每一次总会有一方马上道歉安抚另一方的情绪，我们从这些小矛盾中也认识到了更真实更完整的对方，知道了以后应该怎么改进相互之间的相处关系......其实之所以说2022年的容量很多，很大一部分原因是因为，秦一和鲤鱼之间在这一年里发生了太多太多的事情，留下了太多太多的脚步。回头看看，真的会惊讶于我们俩才在一起一年。或许这就是100分的感情吧！</p><p>再来说说我自己在这一年的成长吧。其实这一年里面，我经历了本科毕业、两段实习、研究生入学等等大大小小的事情，很多方面都有或多或少的变化。但我觉得与其说是经历了多少事情，不如说我的思想有了一定的变化。</p><p>一方面，从本科到研究生的转变，以及两段实习经历，让我的思维方式变得更加清醒和精准。"清醒"指的是，过去，我可能会觉得学习就是为了拿高分、保研、去好学校，而不是因为自己喜欢。但如今的我却更愿意将学习回归到本身，仅仅是要学到新知识。这种情况下，我不会在自己不感兴趣的学科上花费过多的经历去苛求一个A+或者90分，而是把精力放在真正感兴趣的学科上，即便它可能并不是课程只是，也没有什么作用，这就是"精准"——"好钢用在刀刃上"。</p><p>另一方面，我觉得我的技术思想有了广度和深度上的拓展。这主要源自于，我终于系统且比较深入地学习 Haskell 了。函数式编程的实践让我知道了完成一件事情，除了常见的命令式编程、OOP，还有完全不同的编程思想。这就像是做一个家具不仅仅可以用常见的锤子、电锯、螺丝刀，现在还获得了一件过去闻所未闻的"外星工具"。不夸张地说，Haskell 就是这样一个"外星产物"。初次接触的时候，我惊讶于居然可以完全不依赖于常见的模式来解决常见的所有问题，且这种新方式与那些老东西可以说完全不相似。但这两种看似完全不同的方式，其背后确实可以被证明是相等的。这又是何等的统一对偶！</p><p><img src="https://s2.loli.net/2022/12/31/8n4bmHXygUkAYDp.png" /></p><center>正在写的一个俄罗斯方块，进度非常缓慢😅</center><p>2022年马上就要过去啦。我们都很喜欢说祝自己新的一年更加厉害，今年我也要这样对自己说。"更厉害"不是指比以前多掌握多少技能，这固然是一种能力，但我更希望的，是自己在新的一年里面，能在思想上——或者更准确地说，方法论上，有更多的进步。当然啦，希望2023年可以和我家小美女有更多更多聊不完的话题，创造更多更多独家回忆。对啦，今年我们就可以结束异地啦！2022再见，2023你好！</p><p><img src="https://s2.loli.net/2022/12/31/2XE4Bnmj8qZUQKA.jpg" /></p><center>盐田的日出🌅</center>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;年年终总结&quot;&gt;2022年年终总结&lt;/h1&gt;
&lt;p&gt;又到了一年的最后一天了。在这一年即将过去的现在，回看一下，2022年给我一种特别漫长的感觉。这种漫长感并不是因为这一年特别难过让人感到&quot;度日如年&quot;。而是因为这一年的容量很大，发生的事情特别多特别充实，给我一种&quot;虽然</summary>
      
    
    
    
    
    <category term="年终总结" scheme="https://xtayex.gitee.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>上海探店 - 蔡师傅</title>
    <link href="https://xtayex.gitee.io/2022/10/04/%E4%B8%8A%E6%B5%B7%E6%8E%A2%E5%BA%97-%E8%94%A1%E5%B8%88%E5%82%85/"/>
    <id>https://xtayex.gitee.io/2022/10/04/%E4%B8%8A%E6%B5%B7%E6%8E%A2%E5%BA%97-%E8%94%A1%E5%B8%88%E5%82%85/</id>
    <published>2022-10-04T12:47:00.000Z</published>
    <updated>2022-10-04T12:55:02.359Z</updated>
    
    <content type="html"><![CDATA[<p>今天从浦东机场下飞机后还没吃东西，就想着到外面吃一点吧。刚好想起之前在小红书看到有一家叫蔡师傅的阳春面店，据说量大管饱，性价比挺高，于是打算去看看</p><p><img src="https://s2.loli.net/2022/10/04/PlhniSZHWuaT6OE.jpg" /></p><p>我点了一个雪菜肉丝面，一个煎鸡蛋和一个素面。雪菜肉丝面中规中矩，算是好吃；荷包蛋也没什么好说的；但是他家的素鸡确实非常好吃，厚厚的，很多孔，吸饱了汤汁，真的非常好吃。这三样总共花了17.5，在上海确实非常便宜了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天从浦东机场下飞机后还没吃东西，就想着到外面吃一点吧。刚好想起之前在小红书看到有一家叫蔡师傅的阳春面店，据说量大管饱，性价比挺高，于是打算去看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/10/04/PlhniSZHWuaT6OE</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>哈哈，好一个国庆出行</title>
    <link href="https://xtayex.gitee.io/2022/10/04/%E5%93%88%E5%93%88%EF%BC%8C%E5%A5%BD%E4%B8%80%E4%B8%AA%E5%9B%BD%E5%BA%86%E5%87%BA%E8%A1%8C/"/>
    <id>https://xtayex.gitee.io/2022/10/04/%E5%93%88%E5%93%88%EF%BC%8C%E5%A5%BD%E4%B8%80%E4%B8%AA%E5%9B%BD%E5%BA%86%E5%87%BA%E8%A1%8C/</id>
    <published>2022-10-04T08:54:00.000Z</published>
    <updated>2022-10-04T12:14:18.664Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="6a7df64cd3bd58ab79d1967e2bc1ce7f3d61eaaa8b1a95c5a2be2080f27eb04e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="生活" scheme="https://xtayex.gitee.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="国庆" scheme="https://xtayex.gitee.io/tags/%E5%9B%BD%E5%BA%86/"/>
    
    <category term="出行" scheme="https://xtayex.gitee.io/tags/%E5%87%BA%E8%A1%8C/"/>
    
    <category term="见面" scheme="https://xtayex.gitee.io/tags/%E8%A7%81%E9%9D%A2/"/>
    
    <category term="游记" scheme="https://xtayex.gitee.io/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统三（二）——指令</title>
    <link href="https://xtayex.gitee.io/2020/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%89%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%8C%87%E4%BB%A4/"/>
    <id>https://xtayex.gitee.io/2020/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%89%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%8C%87%E4%BB%A4/</id>
    <published>2020-10-23T08:08:00.000Z</published>
    <updated>2022-09-27T13:46:54.947Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f928ffc1cd1bbb86bf44e2f.jpg" /></p><span id="more"></span><h4 id="mips寄存器">MIPS寄存器</h4><p><img src="https://pic.downk.cc/item/5f928fc01cd1bbb86bf44392.png" /></p><h4 id="mips指令表">MIPS指令表</h4><table><colgroup><col style="width: 22%" /><col style="width: 14%" /><col style="width: 24%" /><col style="width: 39%" /></colgroup><thead><tr class="header"><th style="text-align: center;">指令</th><th style="text-align: center;">示例</th><th style="text-align: center;">含义</th><th style="text-align: center;">注释</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">加法</td><td style="text-align: center;">add \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | \\\)</span>s1=\<span class="math inline">\(s2+\\\)</span>s3</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">减法</td><td style="text-align: center;">sub \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | \\\)</span>s1=\<span class="math inline">\(s2-\\\)</span>s3</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">立即数加法</td><td style="text-align: center;">addi \<span class="math inline">\(s1,\\\)</span>s2,20</td><td style="text-align: center;">\$s1=\<span class="math inline">\(2+20 | | | 取字 | lw \\\)</span>s1,20(\<span class="math inline">\(s2) | \\\)</span>s1=memory[\$s2+20] | | | 存字 | sw \<span class="math inline">\(s1,20(\\\)</span>s2) | memory[\$s2+20]=\<span class="math inline">\(s1 | | | 取半字 | lh \\\)</span>s1,20(\<span class="math inline">\(s2) | memory[\\\)</span>s2+20]=\<span class="math inline">\(s1 | 从地址20(\\\)</span>s2)开始取半字（16biwordts）（h==halfword）</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">取无符号半字</td><td style="text-align: center;">lhu \<span class="math inline">\(s1,20(\\\)</span>s2)</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">存半字</td><td style="text-align: center;">sh \<span class="math inline">\(s1,20(\$s2) | | | | 取字节 | lb \\\)</span>s1,20(\<span class="math inline">\(s2) | | | | 取无符号字节 | lbu \\\)</span>s1,20(\<span class="math inline">\(s2) | | | | 存字节 | sb \\\)</span>s1,20(\<span class="math inline">\(s2) | | | | 取链接字 | ll \\\)</span>s1,20($s2)</td><td style="text-align: center;"></td><td style="text-align: center;">是原子交换的前半部分</td></tr><tr class="even"><td style="text-align: center;">存条件字</td><td style="text-align: center;">sc \<span class="math inline">\(s1,20(\\\)</span>s2)</td><td style="text-align: center;"></td><td style="text-align: center;">是原子交换的后半部分</td></tr><tr class="odd"><td style="text-align: center;">取立即数的最高位</td><td style="text-align: center;">lui \<span class="math inline">\(s1,20 | \\\)</span>s1=20*2^{16}</td><td style="text-align: center;">取立即数并放到高16位</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">与</td><td style="text-align: center;">and \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | \\\)</span>s1=\<span class="math inline">\(s2 &amp; \\\)</span>s3</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">或</td><td style="text-align: center;">or \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | \\\)</span>s1=\<span class="math inline">\(s2 bitor \\\)</span>s3</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">或非</td><td style="text-align: center;">or \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | \\\)</span>s1=~(\<span class="math inline">\(s2 bitor \\\)</span>s3)</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">立即数与</td><td style="text-align: center;">andi \<span class="math inline">\(s1,\\\)</span>s2,20</td><td style="text-align: center;">\<span class="math inline">\(s1=\\\)</span>s2 &amp; 20</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">立即数或</td><td style="text-align: center;">ori \<span class="math inline">\(s1,\\\)</span>s2,20</td><td style="text-align: center;">\<span class="math inline">\(s1=\\\)</span>s2 bitor 20</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">逻辑左移</td><td style="text-align: center;">sll \<span class="math inline">\(s1,\\\)</span>s2,10</td><td style="text-align: center;">\<span class="math inline">\(s1=\\\)</span>s2*4（左移两位）</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">逻辑右移</td><td style="text-align: center;">srl \<span class="math inline">\(s1,\\\)</span>s2,20</td><td style="text-align: center;"></td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">相等时跳转</td><td style="text-align: center;">beq \<span class="math inline">\(s1,\\\)</span>s2,25</td><td style="text-align: center;">if(\<span class="math inline">\(s1==\\\)</span>s2) goto PC+4+100</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">不相等时跳转</td><td style="text-align: center;">bne \<span class="math inline">\(s1,\\\)</span>s2,25</td><td style="text-align: center;">if(\$s1!=\<span class="math inline">\(2) goto PC+4+100 | | | 小于时置位 | slt \\\)</span>s1,\<span class="math inline">\(s2,\\\)</span>s3</td><td style="text-align: center;">if(\<span class="math inline">\(s2&lt;\\\)</span>s3) \<span class="math inline">\(s1=1 else \\\)</span>s1=0</td></tr><tr class="odd"><td style="text-align: center;">无符号数比较小于时置位</td><td style="text-align: center;">sltu \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | if(\\\)</span>s2&lt;\<span class="math inline">\(s3) \\\)</span>s1=1 else \<span class="math inline">\(s1=0 | 比较是否小于无符号数 | | 无符号数比较小于立即数时置位 | slti \\\)</span>s1,\<span class="math inline">\(s2,20 | if(\\\)</span>s2&lt;20) \<span class="math inline">\(s1=1 else \\\)</span>s1=0</td><td style="text-align: center;">比较是否小于常数</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">无符号数比较小于无符号数时置位</td><td style="text-align: center;">sltiu \<span class="math inline">\(s1,\\\)</span>s2,20</td><td style="text-align: center;">if(\<span class="math inline">\(s2&lt;20) \\\)</span>s1=1 else \<span class="math inline">\(s1=0 | 比较是否小于无符号常数 | | 跳转 | j 2500 | goto 10000 | 跳转到目标地址 | | 跳转到寄存器所指位置 | jr \\\)</span>ra</td><td style="text-align: center;">goto \$</td></tr><tr class="odd"><td style="text-align: center;">跳转并链接</td><td style="text-align: center;">jal 2500</td><td style="text-align: center;">\$ra=PC+4; goto 10000</td><td style="text-align: center;">用于过程调用</td></tr></tbody></table><p><strong>MIPS32指令集文档：https://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MD00086-2B-MIPS32BIS-AFP-6.06.pdf</strong></p><h4 id="三种指令格式">三种指令格式</h4><ul><li>R-型</li></ul><table><thead><tr class="header"><th style="text-align: center;">op</th><th style="text-align: center;">rs</th><th style="text-align: center;">rt</th><th style="text-align: center;">rd</th><th style="text-align: center;">shamt</th><th style="text-align: center;">funct</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">6bits</td><td style="text-align: center;">5bits</td><td style="text-align: center;">5bits</td><td style="text-align: center;">5bits</td><td style="text-align: center;">5bits</td><td style="text-align: center;">6bits</td></tr></tbody></table><p>其中：</p><ul><li>op：操作码</li><li>rs：第一个源寄存器编号</li><li>rt：第二个源寄存器编号</li><li>rd：destination目的寄存器编号</li><li>shamt：移位位数（00000表示不移位），仅在位移指令中使用</li><li>funct：功能码，用于选择op操作中的具体函数，如运算操作中的加法函数</li><li><p>R-型指令包括：add,sub,and,or,nor,slt,sltu,sll,srl,jr</p></li><li><p>I-型指令</p></li></ul><table><thead><tr class="header"><th style="text-align: center;">op</th><th style="text-align: center;">rs</th><th style="text-align: center;">rt</th><th style="text-align: center;">constant or address</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">6bits</td><td style="text-align: center;">5bits</td><td style="text-align: center;">5bits</td><td style="text-align: center;">16bits</td></tr></tbody></table><p>其中：</p><ul><li>op：操作码</li><li>rs：第一个源操作数寄存器号，参与运算使用</li><li>rt：第二个源操作数寄存器号，参与运算使用</li><li>16位立即数</li><li><p>I-型指令包括：addi,lw,sw,lh,sh,lb,sb,ll,sc,lui,andi,ori,beq,bne,slti,sltiu</p></li><li><p>J-型指令</p></li></ul><table><thead><tr class="header"><th style="text-align: center;">op</th><th style="text-align: center;">address</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">6bits</td><td style="text-align: center;">26bits</td></tr></tbody></table><ul><li>目标地址计算方法：dst=PC+4+address&lt;&lt;2（下一条指令的地址时当前PC加上4后，取最高的四位，再加上J型指令编码中的26位左移2位（×4）的结果）</li><li><p>J-型指令有：j, jr, jal</p></li><li><p>MIPS中的同步</p><ul><li><p>背景：处理器共享存储器同一区域，P1写，P2读。P1写的结果是P2要读的值，如果P1和P2不同步，将会发生数据竞争</p></li><li><p>解决方法：依赖硬件提供同步指令，即原子读/写内存操作</p></li><li><p>MIPS中靠ll和sc这两个指令实现同步</p><blockquote><p>LL 指令的功能是从内存中读取一个字，以实现接下来的 RMW（Read-Modify-Write） 操作；SC 指令的功能是向内存中写入一个字，以完成前面的 RMW 操作。LL/SC 指令的独特之处在于，它们不是一个简单的内存读取/写入的函数，当使用 LL 指令从内存中读取一个字之后，比如 LL d, off(b)，处理器会记住 LL 指令的这次操作（会在 CPU 的寄存器中设置一个不可见的 bit 位），同时 LL 指令读取的地址 off(b) 也会保存在处理器的寄存器中。接下来的 SC 指令，比如 SC t, off(b)，会检查上次 LL 指令执行后的 RMW 操作是否是原子操作（即不存在其它对这个地址的操作），如果是原子操作，则 t 的值将会被更新至内存中，同时 t 的值也会变为1，表示操作成功；反之，如果 RMW 的操作不是原子操作（即存在其它对这个地址的访问冲突），则 t 的值不会被更新至内存中，且 t 的值也会变为0，表示操作失败。</p></blockquote></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f928ffc1cd1bbb86bf44e2f.jpg&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="计算机系统三" scheme="https://xtayex.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%89/"/>
    
    
    <category term="计算机系统三" scheme="https://xtayex.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%89/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统三（一）——计算机概要与技术</title>
    <link href="https://xtayex.gitee.io/2020/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%89%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E6%8A%80%E6%9C%AF/"/>
    <id>https://xtayex.gitee.io/2020/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%89%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E6%8A%80%E6%9C%AF/</id>
    <published>2020-10-23T03:17:00.000Z</published>
    <updated>2022-09-27T13:46:54.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f924bd31cd1bbb86be6ec2b.jpg" /> <span id="more"></span></p><h4 id="八个伟大思想">八个伟大思想</h4><ul><li>面向摩尔定律的设计</li><li>使用抽象简化设计</li><li>加速大概率时间</li><li>通过并行提高性能</li><li>通过流水线提高性能</li><li>存储器层次</li><li>通过冗余提高可靠性</li></ul><h4 id="集成电路的成本">集成电路的成本</h4><ul><li><span class="math inline">\(每芯片的价格=每晶圆的价格/(每晶圆的芯片数\times 成品率)\)</span></li><li><span class="math inline">\(每晶圆的芯片数\approx 晶圆面积/芯片面积\)</span></li><li><span class="math inline">\(成品率=1/(1+(单位面积的瑕疵数\times芯片面积/2))^2\)</span>（经验公式）</li><li>芯片面积与缺陷率非线性相关<ul><li>晶圆成本和面积是固定的</li><li>缺陷率取决于制造过程</li><li>芯片面积取决于结构和电路设计</li></ul></li></ul><h4 id="响应时间和吞吐量">响应时间和吞吐量</h4><ul><li><p>响应时间（也叫执行时间）</p><p>计算机完成某任务所需的总时间</p></li><li><p>吞吐量（也叫带宽）</p><p>单位时间段内完成的任务数</p></li></ul><h4 id="时钟周期时钟频率与cpi计算题">时钟周期、时钟频率与CPI（计算题）</h4><ul><li><p>时钟周期：从一个上升沿到下一个上升沿的时间</p></li><li><p>时钟频率=1/时钟周期</p></li><li><p>对于时钟频率，1ns的时钟周期对应1GHz的时钟频率，所以0.25ns的时钟周期对应4GHz的时钟频率</p></li><li><p>CPU时间=CPU时钟周期数×时钟周期=CPU时钟周期数×1/时钟频率</p></li><li><p>CPI：clocks per instruction，每条指令占用的平均时钟周期数</p></li><li><p>如果有n种不同类型指令，则</p><p>总cpu时钟周期数=<span class="math inline">\(\sum_{i=1}^n(CPI_i\times C_i)\)</span></p><p>加权平均CPI：CPU=<span class="math inline">\(总CPU时钟周期数/指令数=\sum_{i=1}^n(CPI_i\times\frac{C_i}{指令数})\)</span></p></li><li><p>能耗正比于：<span class="math inline">\(1/2\times负载电容\times电压^2\)</span></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f924bd31cd1bbb86be6ec2b.jpg&quot; /&gt;</summary>
    
    
    
    <category term="计算机系统三" scheme="https://xtayex.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%89/"/>
    
    
    <category term="计算机系统三" scheme="https://xtayex.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%89/"/>
    
  </entry>
  
  <entry>
    <title>2020杭电多校第六场 I题</title>
    <link href="https://xtayex.gitee.io/2020/08/07/2020%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AD%E5%9C%BA-I%E9%A2%98/"/>
    <id>https://xtayex.gitee.io/2020/08/07/2020%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AD%E5%9C%BA-I%E9%A2%98/</id>
    <published>2020-08-07T07:49:00.000Z</published>
    <updated>2022-09-27T13:46:54.895Z</updated>
    
    <content type="html"><![CDATA[<p><span style="color: grey;">没有封面图</span> <span id="more"></span></p><p>题意：对于给定的<span class="math display">\[b\]</span>进制数<span class="math display">\[y\]</span>，定义<span class="math display">\[f(y)\]</span>表示其<span class="math display">\[y\]</span>在<span class="math display">\[b\]</span>进制下的数位和。现在有这样的一个命题：对于任意的<span class="math display">\[b\]</span>进制数<span class="math display">\[y\]</span>和给定的<span class="math display">\[b\]</span>进制数<span class="math display">\[x\]</span>，如果<span class="math display">\[f(y)\]</span>整除<span class="math display">\[x\]</span>，则<span class="math display">\[y\]</span>也整除<span class="math display">\[x\]</span>。判断给定<span class="math display">\[b\]</span>和<span class="math display">\[x\]</span>下命题正确性。</p><p>思路：结论是，当<span class="math display">\[b\equiv 1 \pmod x\]</span>时，命题成立。原因在于，对于<span class="math display">\[b\]</span>进制的数<span class="math display">\[y\]</span>，可以将其表示为<span class="math display">\[y=c_0*b^0+c_1*b^1+c_2*b^2+\dots+c_{n-2}*b^{n-2}+c_{n-1}*b^{n-1}\]</span>。可以发现，如果<span class="math display">\[b\equiv 1\pmod x\]</span>，那么由于有<span class="math display">\[A\equiv B \pmod p\Leftrightarrow f(A)\equiv f(B)\pmod x\]</span>，所以，在这种情况下，有 <span class="math display">\[\begin{equation}c_0*b^0+c_1*b^1+c_2*b^2+\dots+c_{n-2}*b^{n-2}+c_{n-1}*b^{n-1}\equiv c_0+c_1+c_2+\dots+c_{n-2}+c_{n-1}\pmod x\end{equation}\]</span></p><p><span class="math display">\[c_0+c_1+c_2+\dots+c_{n-2}+c_{n-1}\]</span>就是题目中的<span class="math display">\[f(y)\]</span>。所以，结论成立。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        ll b, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;b, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (b &lt; x) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (b % x == <span class="number">1LL</span>)</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span style=&quot;color: grey;&quot;&gt;没有封面图&lt;/span&gt;</summary>
    
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/categories/ACM/"/>
    
    <category term="思维" scheme="https://xtayex.gitee.io/categories/ACM/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="数学" scheme="https://xtayex.gitee.io/categories/ACM/%E6%80%9D%E7%BB%B4/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/tags/ACM/"/>
    
    <category term="思维" scheme="https://xtayex.gitee.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="数学" scheme="https://xtayex.gitee.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1389 B&amp;C</title>
    <link href="https://xtayex.gitee.io/2020/08/06/Codeforces-1389B-Array-Walk/"/>
    <id>https://xtayex.gitee.io/2020/08/06/Codeforces-1389B-Array-Walk/</id>
    <published>2020-08-06T00:43:43.000Z</published>
    <updated>2022-09-27T13:46:54.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="b.-array-walk">B. Array Walk</h2><p>题意：给定一个长度为<span class="math inline">\(n\)</span>的序列，从下标1开始，走<span class="math inline">\(k\)</span>步，其中最多<span class="math inline">\(z\)</span>步向左。每走到一个位置就取一次这个位置的数。问可以取到的最大总和是多少。</p><span id="more"></span><p>思路：考虑dp，<span class="math inline">\(dp[i][j]\)</span>表示走了<span class="math inline">\(i\)</span>步，<span class="math inline">\(j\)</span>步为向左时的最大总和。则当<span class="math inline">\(dp[i][j]\)</span>可以由走了<span class="math inline">\(i-1\)</span>步、现在向右走以及走了<span class="math inline">\(i-1\)</span>步、现在向左走这两个状态转移而来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> a[maxn], dp[maxn][<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="type">int</span> n, k, z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;k, &amp;z);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= z; j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + a[<span class="number">1</span> + i - <span class="number">2</span> * j];</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[<span class="number">1</span> + i - <span class="number">2</span> * j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= z; j++) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c.-good-string">C. Good String</h2><p>题意：如果将一个字符串循环左移一位与循环右移一位后，得到的两个新字符串相等，则称该字符串为good string。给定一个字符串<span class="math inline">\(s\)</span>，问需要至少删除<span class="math inline">\(s\)</span>中多少个字符，才能使其变成good string。</p><p>思路：容易发现，good string只有两种情况：1、整个字符串只有一种字符；2、字符串形如<span class="math inline">\(ababab...\)</span>，且长度为偶数。对于第一种情况，只需要找出出现次数最多的字符即可；对于第二种情况，因为字符只有10种，暴力枚举一下可以组成good string的两种字符就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">char</span> s[maxn];</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">mst</span>(cnt, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            cnt[s[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxi = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            maxi = <span class="built_in">max</span>(maxi, cnt[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=len;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(l%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(s[k]==i+<span class="string">&#x27;0&#x27;</span>) l++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(s[k]==j+<span class="string">&#x27;0&#x27;</span>) l++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(l&amp;<span class="number">1</span>) l--;</span><br><span class="line">                ans2=<span class="built_in">max</span>(ans2,l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//printf(&quot;ans2 = %d\n&quot;, ans2);</span></span><br><span class="line">        ans2 = len - ans2;</span><br><span class="line">        <span class="type">int</span> ans1 = len - maxi;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">min</span>(ans2, ans1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;b.-array-walk&quot;&gt;B. Array Walk&lt;/h2&gt;
&lt;p&gt;题意：给定一个长度为&lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt;的序列，从下标1开始，走&lt;span class=&quot;math inline&quot;&gt;\(k\)&lt;/span&gt;步，其中最多&lt;span class=&quot;math inline&quot;&gt;\(z\)&lt;/span&gt;步向左。每走到一个位置就取一次这个位置的数。问可以取到的最大总和是多少。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JS中的展开语法</title>
    <link href="https://xtayex.gitee.io/2020/08/04/JS%E4%B8%AD%E7%9A%84%E5%B1%95%E5%BC%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://xtayex.gitee.io/2020/08/04/JS%E4%B8%AD%E7%9A%84%E5%B1%95%E5%BC%80%E8%AF%AD%E6%B3%95/</id>
    <published>2020-08-04T06:47:57.000Z</published>
    <updated>2022-09-27T13:46:55.103Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f29068a14195aa594529081.jpg" /> <span id="more"></span></p><p>看代码的时候遇到了下面这样一段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generateSkeleton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 文字节点</span></span><br><span class="line">  ;[...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;*&#x27;</span>)]</span><br><span class="line">    .<span class="title function_">filter</span>(</span><br><span class="line">      <span class="function">(<span class="params">node</span>) =&gt;</span></span><br><span class="line">        ![<span class="string">&#x27;script&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;body&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;title&#x27;</span>].<span class="title function_">includes</span>(</span><br><span class="line">          node.<span class="property">tagName</span>.<span class="title function_">toLowerCase</span>()</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> [...node.<span class="property">childNodes</span>].<span class="title function_">filter</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> node <span class="keyword">instanceof</span> <span class="title class_">Text</span>))</span><br><span class="line">    .<span class="title function_">flat</span>(<span class="title class_">Infinity</span>)</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">      node.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(span, node)</span><br><span class="line">      span.<span class="title function_">appendChild</span>(node)</span><br><span class="line">      span.<span class="property">style</span> = <span class="string">`</span></span><br><span class="line"><span class="string">        background: #f2f2f2;</span></span><br><span class="line"><span class="string">        color: transparent !important;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(代码链接：https://zhuanlan.zhihu.com/p/166009071)</p><p>发现有“...”这样的语法。查了一下文档，原来这是js中的展开语法。MDN上的定义为:</p><blockquote><p><strong>展开语法(Spread syntax),</strong> 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开；还可以在构造字面量对象时, 将对象表达式按key-value的方式展开。</p></blockquote><p>以上面代码中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><p>为例，在chrome中的运行结果是：</p><p><img src="https://pic.downk.cc/item/5f29032d14195aa59450fba2.jpg" /></p><p>在这里，...把一个nodelist展开来，作为Array的构造参数。</p><p>再看一个在String中应用的一个例子</p><p><img src="https://pic.downk.cc/item/5f29040c14195aa5945151b3.jpg" /></p><p>不难明白，“...“的作用其实就是把nodelist，string等可迭代的东西展开来。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f29068a14195aa594529081.jpg&quot; /&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【OpenGL学习笔记】一、VBO，VAO与EBO</title>
    <link href="https://xtayex.gitee.io/2020/07/25/%E3%80%90OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E4%B8%80%E3%80%81VBO%EF%BC%8CVAO%E4%B8%8EEBO/"/>
    <id>https://xtayex.gitee.io/2020/07/25/%E3%80%90OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E4%B8%80%E3%80%81VBO%EF%BC%8CVAO%E4%B8%8EEBO/</id>
    <published>2020-07-25T01:22:00.000Z</published>
    <updated>2022-09-27T13:46:54.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f1b8a4e14195aa594516bd0.png" /> <span id="more"></span> ### 前言 VBO、VAO和EBO是OpenGL中三个很基础的概念，但一开始时总是分不清他们的区别与联系。 ### 正文 * VBO：顶点缓冲对象</p><ul><li><p>是在显卡存储空间中开辟的一块内存缓存区，用于存储顶点的各类属性（顶点坐标、顶点法向量、顶点颜色等）</p></li><li><p>渲染时，可以直接从VBO中取出顶点的各类属性数据</p></li><li><p>每个VBO都有其唯一标识ID</p></li><li><p>使用glGenBuffers开辟VBO并分配id</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> VBO;</span><br><span class="line"><span class="built_in">glGenBuffers</span>(<span class="number">1</span>,&amp;VBO);</span><br></pre></td></tr></table></figure></li><li><p>通过glBindBuffer将某种类型的顶点数据绑定到某个VBO上（可以暂时理解为告诉该VBO它要存储的数据的类型，当然这是不准确的，因为同一类型的顶点数据一次只能绑定一个VBO）。绑定的类型必须是以下几种中的一种</p><ul><li>GL_ARRAY_BUFFER</li><li>GL_ELEMENT_ARRAY_BUFFER</li><li>GL_PIXEL_PACK_BUFFER</li><li>GL_PIXEL_UNPACK_BUFFER</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> VBO;</span><br><span class="line"><span class="built_in">glGenBuffers</span>(<span class="number">1</span>,&amp;VBO);</span><br><span class="line"><span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER,VBO);</span><br></pre></td></tr></table></figure></li><li><p>通过glBufferData将数据传送到绑定的VBO中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER,<span class="built_in">sizeof</span>(vertices),vertices,GL_STATIC_DRAW);</span><br></pre></td></tr></table></figure></li><li><p>使用glVertexAttribPointer告知OpenGL如何处理某个VBO中的数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>,<span class="number">4</span>,GL_FLOAT,GL_FALSE,<span class="number">0</span>,(<span class="type">void</span>*)<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>第一个参数指定顶点属性位置，与顶点着色器中的layout(location=0)对应</li><li>第二个参数指定一个顶点属性组的大小（数据元素个数）</li><li>第三个参数指定顶点属性数据类型</li><li>第四个参数指定数据是否要被标准化</li><li>第五个参数是步长，指定连续顶点属性组之间的间隔。比方说三个GL_FLOAT数据表示一个坐标点，那就把他们作为一个属性组，步长就是3*sizeof(float)</li><li>第六个参数是数据起始位置距离缓冲区中起始位置的偏移量</li></ul></li><li><p>使用glEnableVertexAttribArray开启glVertexAttribPointer。由于glVertexAttribPointer默认是关闭的，所以使用时要用顶点属性位置的值为参数，通过glEnableVertexAttribArray来开启这一功能</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>VAO：顶点数组对象</p><ul><li><p>保存了很多VBO的引用，相当于把很多VBO统一到一个对象中进行管理</p></li><li><p>使用glGenVertexArrays得到一个VAO，并分配id</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glGenVertexArrays</span>(<span class="number">1</span>,&amp;VAO);</span><br></pre></td></tr></table></figure></li><li><p>使用glBindVertexArray绑定VAO。绑定后，后面所有VBO的引用都会被保存在这一个VAO中。</p></li><li><p>VAO的存在意义是减少绑定的工作量。因为每次绘制某些之前都需要绑定顶点的所有信息到对应的VBO中。这样做未免有点太麻烦，尤其是数据量很大的情况下。使用VAO，可以把所有顶点信息都绑定到VBO后，再通过VAO把所有顶点信息绑定到一个对象上(VAO)，后面只需要绑定VAO这一个对象即可。</p></li></ul></li><li><p>EBO：索引缓存对象</p><ul><li>存储顶点的索引，避免因为某些点重复存储导致的空间浪费</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f1b8a4e14195aa594516bd0.png&quot; /&gt;</summary>
    
    
    
    <category term="OpenGL学习笔记" scheme="https://xtayex.gitee.io/categories/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="计算机图形学" scheme="https://xtayex.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="OpenGL" scheme="https://xtayex.gitee.io/tags/OpenGL/"/>
    
    <category term="OpenGL学习笔记" scheme="https://xtayex.gitee.io/tags/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2020牛客多校第三场</title>
    <link href="https://xtayex.gitee.io/2020/07/19/2020%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/"/>
    <id>https://xtayex.gitee.io/2020/07/19/2020%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/</id>
    <published>2020-07-19T14:17:00.000Z</published>
    <updated>2022-09-27T13:46:54.883Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f14552214195aa594e12634.jpg" /> <span id="more"></span></p><h3 id="a-贪心">A 贪心</h3><p>给定四种状态，状态0没有钓鱼也不能做鱼饵；状态1可以做鱼饵，但是没有鱼；状态三有鱼但不能做鱼饵；状态四有鱼也可以做鱼饵。没有鱼的状态下，如果有鱼饵，可以钓鱼。</p><p>做法是简单贪心。有鱼的时候直接钓鱼，没鱼但能做鱼饵就做鱼饵，没鱼且不能做鱼饵就看看有没有鱼饵可以用来钓鱼。从左到右扫一遍，如果最后发现鱼饵有剩下，那就答案加上<strong>鱼饵数/2</strong>，表示原本做鱼饵的状态，一半用来做鱼饵，一般用这些做出来的鱼饵钓鱼</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="type">int</span> n;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="type">int</span> ba=<span class="number">0</span>,ans=<span class="number">0</span>;<span class="type">int</span> tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>,&amp;tmp);</span><br><span class="line">            <span class="keyword">if</span>(tmp==<span class="number">2</span>||tmp==<span class="number">3</span>) ans++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tmp==<span class="number">1</span>) ba++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(ba&gt;<span class="number">0</span>) ba--,ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans+ba/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-简单思维题">B 简单思维题</h3><p>刚看完题目的时候以为是线段树or Splay区间搬移，但想到签到题不太可能需要用到复杂的数据结构。后来wxdl说有很简单的思路，于是我就去看其他题了。赛后发现，实际上只需要移动指针即可维护答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> q;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];<span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>,op,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                p=(p+x)%len;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                x=<span class="built_in">abs</span>(x);</span><br><span class="line">                p-=x;</span><br><span class="line">                p=(p%len+len)%len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">            x--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,s[(p+x)%len]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-简单计算几何">C 简单计算几何</h3><p>给出右手的形状，并说明左手和右手是对称的。现在给出一组20个点的坐标，问这些坐标表示的是左手还是右手。</p><p>题目中一个很重要的条件是，测试数据中的手和题面中的手相比，只会平移和旋转，而不会放大缩小。同时又观察到，图中由一条长为6的边、一条长为1的边和一条长为3的边组成的手指只有拇指。所以可以搞一个宽度为4的窗口，找到这样的四个点：两组相邻点的距离分别是6和3。这样就能找到拇指的位置。找到之后，用叉乘判断下在拇指左侧的点多还是右侧的点多即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-3</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> Eps=<span class="number">1e-8</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;Eps)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">    <span class="built_in">point</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">double</span> _x,<span class="type">double</span> _y)&#123;</span><br><span class="line">        x=_x;y=_y;</span><br><span class="line">    &#125;</span><br><span class="line">    point <span class="keyword">operator</span>-(<span class="type">const</span> point&amp; b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">point</span>(x-b.x,y-b.y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="keyword">operator</span>^(<span class="type">const</span> point&amp; b)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*b.y-y*b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line">    point s,e;</span><br><span class="line">    <span class="built_in">line</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">line</span>(point _s,point _e)&#123;</span><br><span class="line">        s=_s;e=_e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relation</span><span class="params">(point p)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> c=<span class="built_in">sgn</span>((p-s)^(e-s));</span><br><span class="line">        <span class="keyword">if</span>(c&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">point ps[<span class="number">22</span>];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sqr</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dist</span><span class="params">(<span class="type">const</span> point&amp; pa,<span class="type">const</span> point&amp; pb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">sqr</span>(pa.x-pb.x)+<span class="built_in">sqr</span>(pa.y-pb.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">const</span> point&amp; pa,<span class="type">const</span> point&amp; pb,<span class="type">const</span> point&amp; pc,<span class="type">const</span> point&amp; pd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> dis1=<span class="built_in">dist</span>(pa,pb);</span><br><span class="line">    <span class="type">double</span> dis2=<span class="built_in">dist</span>(pc,pd);</span><br><span class="line">    <span class="comment">//printf(&quot;dis1 = %lf, dis2 = %lf, %lf, %lf\n&quot;,dis1,dis2,fabs(dis1-3.0),fabs(dis2-6.0));</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="built_in">fabs</span>(dis1<span class="number">-6.00</span>)&lt;eps&amp;&amp;<span class="built_in">fabs</span>(dis2<span class="number">-3.00</span>)&lt;eps)||(<span class="built_in">fabs</span>(dis1<span class="number">-3.00</span>)&lt;eps&amp;&amp;<span class="built_in">fabs</span>(dis2<span class="number">-6.00</span>)&lt;eps)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">double</span> X,Y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>,&amp;X,&amp;Y);</span><br><span class="line">            ps[i].x=X;ps[i].y=Y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> pos;</span><br><span class="line">        <span class="type">int</span> idx1,idx2,idx3,idx4;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            idx1=i;idx2=(i+<span class="number">1</span>)%<span class="number">20</span>;</span><br><span class="line">            idx3=(i+<span class="number">2</span>)%<span class="number">20</span>;idx4=(i+<span class="number">3</span>)%<span class="number">20</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(ps[idx1],ps[idx2],ps[idx3],ps[idx4]))&#123;</span><br><span class="line">                pos=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//printf(&quot;pos = %d\n&quot;,pos);</span></span><br><span class="line">        <span class="function">line <span class="title">L</span><span class="params">(ps[pos],ps[(pos+<span class="number">1</span>)%<span class="number">20</span>])</span></span>;</span><br><span class="line">        <span class="type">int</span> lef=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rig=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=(pos+<span class="number">2</span>)%<span class="number">20</span>;i!=pos;i=(i+<span class="number">1</span>)%<span class="number">20</span>)&#123;</span><br><span class="line">            <span class="type">int</span> rela=L.<span class="built_in">relation</span>(ps[i]);</span><br><span class="line">            <span class="keyword">if</span>(rela==<span class="number">1</span>) lef++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(rela==<span class="number">2</span>) rig++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(lef&lt;rig) <span class="built_in">puts</span>(<span class="string">&quot;right&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;left&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="f-数论拓展欧几里得">F 数论、拓展欧几里得</h3><p>题意是说，给出两个整数<span class="math inline">\(a,b\)</span>，<span class="math inline">\(c,d,e,f\)</span>都是未知数，求方程<span class="math inline">\(\frac{c}{d}-\frac{e}{f}=\frac{a}{b}\)</span>的任意一个解。同时，需要满足以下两个条件：</p><ul><li><span class="math inline">\(d&lt;b\ and\ f&lt;d\)</span></li><li><span class="math inline">\(1\leq c,e\leq 4\times 10^{12}\)</span></li></ul><p>思路是这样的，分三种情况讨论：</p><ul><li><p><span class="math inline">\(\gcd(a,b)&gt;1\)</span></p><p>设<span class="math inline">\(g=\gcd(a,b)\)</span>，则有<span class="math inline">\(\frac{(a+1)/g}{b/g}-\frac{a/g}{b/g}=\frac{a}{b}\)</span>。因为<span class="math inline">\(g&gt;1\)</span>，所以<span class="math inline">\(b/g&lt;b\)</span>，所以直接令<span class="math inline">\(c=(a+1)/g,d=b/g,e=a/g,f=b/g\)</span>即可。</p></li><li><p><span class="math inline">\(\gcd(a,b)=1\)</span>，且<span class="math inline">\(b\)</span>的质因数至少有两个</p><p>设此时的<span class="math inline">\(b=p_1^{x_1}p_2^{x_2}p_3^{x_3}\dots p_n^{x_n}\)</span>，令<span class="math inline">\(d=p_1^{x_1},f=\frac{b}{d}\)</span>，则有<span class="math inline">\(df=b\)</span>。问题转化为求解不定方程<span class="math inline">\(cf-de=a\)</span>。用exgcd求解即可。</p></li><li><p><span class="math inline">\(\gcd(a,b)=1\)</span>，且<span class="math inline">\(b=p^x\)</span>（<span class="math inline">\(p\)</span>是素数）。也就是说<span class="math inline">\(b\)</span>是1或者一个指数的幂次</p><p>此时无解，原因是，如果<span class="math inline">\(b\)</span>是1，那么<span class="math inline">\(d,f\)</span>就只能取0，这显然是不可能的。如果<span class="math inline">\(b=p^x\)</span>，则可以设<span class="math inline">\(d=p^u,f=p^{x-u}\)</span>。exgcd有解的充要条件是<span class="math inline">\(\gcd(d,f)\mid a\)</span>，所以有<span class="math inline">\(\gcd(d,f)=p^{\min\{u,x-u\}}\)</span>。但因为<span class="math inline">\(\gcd(a,b)=1\)</span>，所以<span class="math inline">\(a\)</span>的质因子中没有<span class="math inline">\(p\)</span>，也就是说<span class="math inline">\(\gcd(d,f)\nmid a\)</span>，exgcd不可能有解。</p></li></ul><p>拓展欧几里得解不定方程<span class="math inline">\(ax+by=c\)</span>，最后的解一定要乘以<span class="math inline">\(\frac{c}{\gcd(a,b)}\)</span>！因为求解这个方程的时候，实际上是在求解<span class="math inline">\(ax&#39;+by&#39;=\gcd(a,b)\)</span>，因此要左右两边都同乘上<span class="math inline">\(\frac{c}{\gcd(a,b)}\)</span>这个因子，才是最终的解！数论忘得一干二净orz</p><h3 id="l-签到题">L 签到题</h3><p>温暖的签到题，代码就不放了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f14552214195aa594e12634.jpg&quot; /&gt;</summary>
    
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/categories/ACM/"/>
    
    <category term="多校" scheme="https://xtayex.gitee.io/categories/ACM/%E5%A4%9A%E6%A0%A1/"/>
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/tags/ACM/"/>
    
    <category term="多校" scheme="https://xtayex.gitee.io/tags/%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>2020牛客多校第一场</title>
    <link href="https://xtayex.gitee.io/2020/07/16/2020%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
    <id>https://xtayex.gitee.io/2020/07/16/2020%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/</id>
    <published>2020-07-16T14:08:00.000Z</published>
    <updated>2022-09-27T13:46:54.867Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f105fed14195aa594b51c3b.jpg" /> <span id="more"></span></p><h3 id="a">A</h3><p>令<span class="math display">\[C_i=\min_{j&gt;i,s_j=s_i}\{j-i\}\]</span>，则题目中所说的B-Suffix Array等价于<span class="math inline">\(C_1,C_2,C_3,...，C_n\)</span>。因此，只需要求出<span class="math inline">\(C\)</span>后，对<span class="math inline">\(C\)</span>算一下后缀数组即可。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> wa[maxn], wb[maxn], wv[maxn], wss[maxn], rak[maxn], height[maxn], cal[maxn], n, sa[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span>* r, <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + l] == r[b + l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">da</span><span class="params">(<span class="type">int</span>* r, <span class="type">int</span>* sa, <span class="type">int</span> n, <span class="type">int</span> M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j, p, *x = wa, *y = wb, *t;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        wss[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        wss[x[i] = r[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; M; i++)</span><br><span class="line">        wss[i] += wss[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        sa[--wss[x[i]]] = i;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>, p = <span class="number">1</span>; p &lt; n; j &lt;&lt;= <span class="number">1</span>, M = p) &#123;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>, i = n - j; i &lt; n; i++)</span><br><span class="line">            y[p++] = i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (sa[i] &gt;= j)</span><br><span class="line">                y[p++] = sa[i] - j;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            wv[i] = x[y[i]];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">            wss[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            wss[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; M; i++)</span><br><span class="line">            wss[i] += wss[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            sa[--wss[wv[i]]] = y[i];</span><br><span class="line">        <span class="keyword">for</span> (t = x, x = y, y = t, p = <span class="number">1</span>, x[sa[<span class="number">0</span>]] = <span class="number">0</span>, i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            x[sa[i]] = <span class="built_in">cmp</span>(y, sa[i - <span class="number">1</span>], sa[i], j) ? p - <span class="number">1</span> : p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;./A.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        <span class="built_in">fill</span>(cal, cal + maxn, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> pre[<span class="number">2</span>] = &#123; n + <span class="number">1</span>, n + <span class="number">1</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre[s[i] - <span class="string">&#x27;a&#x27;</span>] == n + <span class="number">1</span>) &#123;</span><br><span class="line">                cal[i] = n;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cal[i] = pre[s[i] - <span class="string">&#x27;a&#x27;</span>] - i;</span><br><span class="line">            &#125;</span><br><span class="line">            pre[s[i] - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        cal[n + <span class="number">1</span>] = n + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//puts(&quot;cal: &quot;);</span></span><br><span class="line">        <span class="comment">//for (int i = 1; i &lt;= n + 1; i++) &#123;</span></span><br><span class="line">        <span class="comment">//  printf(&quot;%d &quot;,cal[i]);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="comment">//puts(&quot;&quot;);</span></span><br><span class="line">        <span class="comment">//puts(&quot;----------------------&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">da</span>(cal + <span class="number">1</span>, sa, n + <span class="number">2</span>, n + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, sa[i] + <span class="number">1</span>, i == <span class="number">1</span> ? <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题<span class="math inline">\(n\)</span>的值一定要是<span class="math inline">\(n+2\)</span>，<span class="math inline">\(m\)</span>的值一定也要是<span class="math inline">\(n+2\)</span>！否则不是RE就是WA！</p><h3 id="b">B</h3><p>待补</p><h3 id="c">C</h3><p>待补</p><h3 id="d">D</h3><p>待补</p><h3 id="e">E</h3><p>待补</p><h3 id="f">F</h3><p>假设两个字符串<span class="math inline">\(a,b\)</span>是同一个字符串的循环节，然后在<span class="math inline">\(2\times max(len(a),len(b))\)</span>的范围内比较即可。如果发现没有不相等的字符，则说明两个无穷字符串是同一个字符串，也就是相等。否则，如果<span class="math inline">\(a_i&lt;b_i\)</span>，则<span class="math inline">\(a&lt;b\)</span>；大于的情况同理。这道题的比较范围比较玄学，是猜出来的，但根据题解，范围只需要到<span class="math inline">\(len(a)+len(b)-gcd(len(a),len(b))\)</span>即可。但目前没想明白为什么。。。等一波详细题解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string sa, sb;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; sa &gt;&gt; sb) &#123;</span><br><span class="line">        <span class="type">int</span> lena = sa.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> lenb = sb.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> bnd = <span class="number">2</span> * <span class="built_in">max</span>(lena, lenb);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bnd; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sa[i % lena] &lt; sb[i % lenb]) &#123;</span><br><span class="line">                ans = <span class="number">1</span>; <span class="comment">// &lt;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sa[i % lena] &gt; sb[i % lenb]) &#123;</span><br><span class="line">                ans = <span class="number">2</span>; <span class="comment">// &gt;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;=&lt;&gt;&quot;</span>[ans] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="g">G</h3><p>待补</p><h3 id="h">H</h3><p>题意是说，给定一个<span class="math inline">\(n\)</span>个点<span class="math inline">\(m\)</span>条边的流网络，有<span class="math inline">\(q\)</span>次询问，第<span class="math inline">\(i\)</span>次询问会把图上所有边的容量都设为<span class="math inline">\(\frac{u_i}{v_i}\)</span>，查询当前情况下，从点1发送一个单位的流到点<span class="math inline">\(n\)</span>的最小花费是多少。</p><p>为了方便处理，将所有边的容量都乘以<span class="math inline">\(\frac{v_i}{u_i}\)</span>，使其变成1；原本发送一个单位的流，现在变成发送<span class="math inline">\(\frac{v_i}{u_i}\)</span>个单位的流（实际上就相当于定义了一个新单位，该单位和原单位的进率是<span class="math inline">\(\frac{v_i}{u_i}\)</span>）。然后在算最大流的时候，再记录下不同流量下的最小花费。</p><p>而NaN的情况有两种：</p><ul><li><span class="math inline">\(u=0\)</span>（不考虑这种情况会有除零错误）</li><li><span class="math inline">\(v/u&gt;\)</span>最大流（非整除）</li></ul><p>最后，注意一下处理最终答案的方法（代码165行）</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm = <span class="number">200</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> to;</span><br><span class="line">    <span class="type">int</span> nxt;</span><br><span class="line">    <span class="type">int</span> cap;</span><br><span class="line">    <span class="type">int</span> flow;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">&#125; es[maxm];</span><br><span class="line"><span class="type">int</span> head[maxn];</span><br><span class="line"><span class="type">int</span> tol;</span><br><span class="line"><span class="type">int</span> pre[maxn], dis[maxn];</span><br><span class="line"><span class="type">bool</span> vis[maxn];</span><br><span class="line">ll ansarr[maxm];</span><br><span class="line"><span class="type">int</span> N; <span class="comment">// 节点总个数, 节点从0~N-1</span></span><br><span class="line"><span class="type">int</span> M;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    N = n;</span><br><span class="line">    tol = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">mst</span>(head, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> cap, <span class="type">int</span> cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[tol].to = v;</span><br><span class="line">    es[tol].cap = cap;</span><br><span class="line">    es[tol].cost = cost;</span><br><span class="line">    es[tol].flow = <span class="number">0</span>;</span><br><span class="line">    es[tol].nxt = head[u];</span><br><span class="line">    head[u] = tol++;</span><br><span class="line"></span><br><span class="line">    es[tol].to = u;</span><br><span class="line">    es[tol].cap = <span class="number">0</span>;</span><br><span class="line">    es[tol].cost = -cost;</span><br><span class="line">    es[tol].flow = <span class="number">0</span>;</span><br><span class="line">    es[tol].nxt = head[v];</span><br><span class="line">    head[v] = tol++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        dis[i] = INF;</span><br><span class="line">        vis[i] = <span class="literal">false</span>;</span><br><span class="line">        pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    vis[s] = <span class="literal">true</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i != <span class="number">-1</span>; i = es[i].nxt) &#123;</span><br><span class="line">            <span class="type">int</span> v = es[i].to;</span><br><span class="line">            <span class="keyword">if</span> (es[i].cap &gt; es[i].flow &amp;&amp; dis[v] &gt; dis[u] + es[i].cost) &#123;</span><br><span class="line">                dis[v] = dis[u] + es[i].cost;</span><br><span class="line">                pre[v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                    vis[v] = <span class="literal">true</span>;</span><br><span class="line">                    que.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pre[t] == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, ll&amp; cost)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll flow = <span class="number">0</span>;</span><br><span class="line">    cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">        ll Min = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = pre[t]; i != <span class="number">-1</span>; i = pre[es[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Min &gt; es[i].cap - es[i].flow) &#123;</span><br><span class="line">                Min = es[i].cap - es[i].flow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = pre[t]; i != <span class="number">-1</span>; i = pre[es[i ^ <span class="number">1</span>].to]) &#123;</span><br><span class="line">            es[i].flow += Min;</span><br><span class="line">            es[i ^ <span class="number">1</span>].flow -= Min;</span><br><span class="line">            cost += es[i].cost * Min;</span><br><span class="line">        &#125;</span><br><span class="line">        flow += Min;</span><br><span class="line">        ansarr[(<span class="type">int</span>)flow] = cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            sign = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ch &gt; <span class="string">&#x27;9&#x27;</span> || ch &lt; <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">&#x27;0&#x27;</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * sign;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//inline void Swap(ll&amp; a,ll&amp; b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//ll tmp=a;</span></span><br><span class="line"><span class="comment">//a=b;b=tmp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;M) != EOF) &#123;</span><br><span class="line">        <span class="built_in">init</span>(N);</span><br><span class="line">        <span class="type">int</span> ai, bi, ci;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">            ai = <span class="built_in">read</span>();</span><br><span class="line">            bi = <span class="built_in">read</span>();</span><br><span class="line">            ci = <span class="built_in">read</span>();</span><br><span class="line">            ai--;</span><br><span class="line">            bi--;</span><br><span class="line">            <span class="built_in">addedge</span>(ai, bi, <span class="number">1</span>, ci);</span><br><span class="line">        &#125;</span><br><span class="line">        ll miniflow;</span><br><span class="line">        ll maxiflow = <span class="built_in">mcmf</span>(<span class="number">0</span>, N - <span class="number">1</span>, miniflow);</span><br><span class="line">        <span class="type">int</span> q;</span><br><span class="line">        q = <span class="built_in">read</span>();</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            u = <span class="built_in">read</span>();</span><br><span class="line">            v = <span class="built_in">read</span>();</span><br><span class="line">            <span class="comment">//printf(&quot;maxiflow = %lld\n&quot;,maxiflow);</span></span><br><span class="line">            <span class="keyword">if</span> (u == <span class="number">0</span> || ((<span class="number">1LL</span> * v) / u == maxiflow &amp;&amp; (<span class="number">1LL</span> * v) % u &gt; <span class="number">0</span>) || (<span class="number">1LL</span> * v) / u &gt; maxiflow) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;NaN&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> idx = v / u;</span><br><span class="line">            ll up = ansarr[idx] * u + (ansarr[idx + <span class="number">1</span>] - ansarr[idx]) * (v % u);</span><br><span class="line">            <span class="comment">//if(v&lt;up) Swap(v, up)</span></span><br><span class="line">            ll g = <span class="built_in">gcd</span>(<span class="number">1LL</span> * v, up);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld/%lld\n&quot;</span>, up / g, v / g);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="i">I</h3><p>待补</p><h3 id="j">J</h3><p>高数签到题。虽然这题是我A的，但是因为高数太菜，所以其实积分结果是在OEIS上找到的hhh。</p><p>积分过程如下： <span class="math display">\[\begin{aligned}\because (x-x^2)^n&amp;=\frac{1}{4}-\left( \frac{1}{2}-x\right )^2 \\\therefore \int_0^1(x-x^2)^ndx&amp;=\int_0^1\left(\frac{1}{4}-\left(\frac{1}{2}-x\right)^2\right)^ndx\\&amp;=\frac{1}{4^n}\int_0^1\left(1-4\left(\frac{1}{2}-x\right)^2\right)^ndx\\&amp;=\frac{1}{4^n}\int_0^1\left(1-(2x-1)^2\right)^ndx\end{aligned}\]</span> 令<span class="math inline">\(\sin t=2x-1\)</span>，则有 <span class="math display">\[\begin{aligned}\int_0^1(x-x^2)^ndx&amp;=\frac{1}{4^n}\int_{-\frac{\pi}{2}}^{\frac{\pi}{2}}(1-\sin^2t)^ndx\\&amp;=\frac{1}{4^n}\int_{-\frac{\pi}{2}}^{\frac{\pi}{2}}(1-\sin^2t)^n\frac{\cos t}{2}dt\\&amp;=\frac{1}{4^n}\int_0^{\frac{\pi}{2}}\cos^{2n+1}tdt\end{aligned}\]</span></p><p>由Wallis公式： <span class="math display">\[\int_0^{\frac{\pi}{2}}\cos^nxdx=\begin{cases}\frac{\pi(2k)!!}{2(2k+1)!!}&amp;\text{n=2k}\\\frac{(2k)!!}{(2k+1)!!}&amp;\text{n=2k+1}\end{cases}\]</span> 其中，<span class="math inline">\(\frac{(2k)!!}{(2k+1)!!}=\frac{2\times4\times6\times\dots\times(2n-2)\times2n}{1\times3\times5\times\dots\times(2n-1)\times(2n+1)}\)</span>。因此，有 <span class="math display">\[\begin{aligned}\int_0^1(x-x^2)^ndx&amp;=\frac{1}{4^n}\frac{(2n)!!}{(2n+1)!!}\\&amp;=\frac{1}{4^n}\frac{(2n)!!}{\frac{(2n+1)!}{(2n)!!}}\\&amp;=\frac{1}{4^n}\frac{(2n!!)^2}{(2n+1)!}\\&amp;=\frac{1}{4^n}\frac{4^n(n!)^2}{(2n+1)!}\\&amp;=\frac{(n!)^2}{(2n+1)!}\end{aligned}\]</span> 得到上面的积分结果后，套式子再求个逆元就行了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> bnd = <span class="number">2e6</span> + <span class="number">2</span>;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line">ll frac[bnd];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    frac[<span class="number">0</span>] = frac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= bnd; i++) &#123;</span><br><span class="line">        frac[i] = (frac[i - <span class="number">1</span>] % mod * i % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a, ll b, ll&amp; x, ll&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x, y;</span><br><span class="line">    ll d = <span class="built_in">exgcd</span>(a, n, x, y);</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> (x % n + n) % n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n) != EOF) &#123;</span><br><span class="line">        ll f = frac[n];</span><br><span class="line">        ll ff = frac[<span class="number">2</span> * n + <span class="number">1</span>];</span><br><span class="line">        ll up = (f % mod * f % mod) % mod;</span><br><span class="line">        ll down = ff % mod;</span><br><span class="line">        ll ans = (up % mod * <span class="built_in">inv</span>(down, mod) % mod) % mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f105fed14195aa594b51c3b.jpg&quot; /&gt;</summary>
    
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/categories/ACM/"/>
    
    <category term="多校" scheme="https://xtayex.gitee.io/categories/ACM/%E5%A4%9A%E6%A0%A1/"/>
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/tags/ACM/"/>
    
    <category term="多校" scheme="https://xtayex.gitee.io/tags/%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1374E1 - Reading Books (easy version)</title>
    <link href="https://xtayex.gitee.io/2020/07/08/Codeforces-1374E1-Reading-Books-easy-version/"/>
    <id>https://xtayex.gitee.io/2020/07/08/Codeforces-1374E1-Reading-Books-easy-version/</id>
    <published>2020-07-08T14:34:02.000Z</published>
    <updated>2022-09-27T13:46:54.871Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f05d99d14195aa59424eb9e.jpg" /></p><span id="more"></span><h3 id="前言">前言</h3><p>每次期末后的复建运动都格外痛苦（</p><h3 id="正文">正文</h3><p>题意是说，给定<span class="math inline">\(n\)</span>本书，如果书都有属性<span class="math inline">\(a,b,t\)</span>。如果<span class="math inline">\(a=1\)</span>，则说明Alice喜欢读这本书，<span class="math inline">\(0\)</span>则不喜欢；如果<span class="math inline">\(b=1\)</span>，则说明Bob喜欢读这本书，<span class="math inline">\(0\)</span>则不喜欢。<span class="math inline">\(t\)</span>是每本书的代价。从中选出若干本书，这些书中Alice和Bob喜欢读的都不少于<span class="math inline">\(k\)</span>本。问如何选择，才能使代价总和最小。</p><p>思路是贪心。记Alice和Bob都喜欢的书为11类，只有Alice喜欢的为10类，只有Bob喜欢的为01类。容易注意到，选择Alice和Bob都喜欢读的书性价比要更高一些。所以，我们首先对三种属性分别排序，如果当前取了<span class="math inline">\(i\)</span>本11类的书，那么，对于Alice，我们要为她取10类和01类共<span class="math inline">\(k-i\)</span>本书；Bob也是同理。如果发现10类或01类的书的数目小于<span class="math inline">\(k-i\)</span>，则说明在取<span class="math inline">\(i\)</span>本11类书的情况下，没有可行的方案。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef, mid, rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid + 1, rig, rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    ll t;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node&amp; nn) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> t &lt; nn.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">node allone[maxn];</span><br><span class="line">node A[maxn];</span><br><span class="line">node B[maxn];</span><br><span class="line">ll sum1[maxn];</span><br><span class="line">ll sum2[maxn];</span><br><span class="line">ll sum3[maxn];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="type">int</span> idx1, idx2, idx3;</span><br><span class="line">    idx1 = idx2 = idx3 = <span class="number">1</span>;</span><br><span class="line">    ll t_;</span><br><span class="line">    <span class="type">int</span> a_, b_;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %d %d&quot;</span>, &amp;t_, &amp;a_, &amp;b_);</span><br><span class="line">        <span class="keyword">if</span> (a_ &amp;&amp; b_)</span><br><span class="line">            allone[idx1++] = &#123; t_, a_, b_ &#125;;</span><br><span class="line">        <span class="keyword">if</span> (a_ &amp;&amp; !b_)</span><br><span class="line">            A[idx2++] = &#123; t_, a_, b_ &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!a_ &amp;&amp; b_)</span><br><span class="line">            B[idx3++] = &#123; t_, a_, b_ &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(allone + <span class="number">1</span>, allone + idx1);</span><br><span class="line">    <span class="built_in">sort</span>(A + <span class="number">1</span>, A + idx2);</span><br><span class="line">    <span class="built_in">sort</span>(B + <span class="number">1</span>, B + idx3);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        sum1[i] = sum1[i - <span class="number">1</span>] + allone[i].t;</span><br><span class="line">        sum2[i] = sum2[i - <span class="number">1</span>] + A[i].t;</span><br><span class="line">        sum3[i] = sum3[i - <span class="number">1</span>] + B[i].t;</span><br><span class="line">    &#125;</span><br><span class="line">    ll inf = numeric_limits&lt;ll&gt;::<span class="built_in">max</span>();</span><br><span class="line">    ll ans = inf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="built_in">min</span>(k, idx1 - <span class="number">1</span>); i++) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = k - i;</span><br><span class="line">        <span class="keyword">if</span> (idx2 - <span class="number">1</span> &gt;= tmp &amp;&amp; idx3 - <span class="number">1</span> &gt;= tmp) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, sum1[i] + sum2[k - i] + sum3[k - i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans == inf) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f05d99d14195aa59424eb9e.jpg&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>用手势操控你的电脑——基于Opencv.js，Tensorflow，electron的手势人机交互</title>
    <link href="https://xtayex.gitee.io/2020/07/04/%E7%94%A8%E6%89%8B%E5%8A%BF%E6%93%8D%E6%8E%A7%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EOpencv-js%EF%BC%8CTensorflow%EF%BC%8Celectron%E7%9A%84%E6%89%8B%E5%8A%BF%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/"/>
    <id>https://xtayex.gitee.io/2020/07/04/%E7%94%A8%E6%89%8B%E5%8A%BF%E6%93%8D%E6%8E%A7%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EOpencv-js%EF%BC%8CTensorflow%EF%BC%8Celectron%E7%9A%84%E6%89%8B%E5%8A%BF%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/</id>
    <published>2020-07-04T03:59:00.000Z</published>
    <updated>2022-09-27T13:46:54.859Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5f00278014195aa594787856.png" /> <span id="more"></span></p><h3 id="前言">前言</h3><p>昨晚看了以下许久没有访问的博客，发现最近一篇博客居然是今年3月份的一份AGC题解。还记得大一的时候，写博客的热情高涨，恨不得日更三篇；上了大二之后，一方面是各方面的压力变大了，另一方面是自己在这方面越来越懒，<del>于是出现了四个月没写过一篇文章的情况</del>。这学期上多媒体课程，期末大作业和刘总一起做了一个基于手势识别的人机交互小程序，就拿来<del>水一水</del>吧</p><h3 id="介绍">介绍</h3><p>看标题就知道，这是一个通过识别手势来完成一些电脑操作的东西。因为是一个桌面应用，同时为了界面好看（好看是第一生产力.jpg），我们选择了electron。首先是用python+Tensorflow训练一个CNN用于手势识别，并导出该模型为json格式；然后，我们在electron中使用opencv.js处理图像，并把上一步训练得到的json格式模型导入到Tensorflow.js中做手势识别；最后，借助robot.js来实现操控电脑。</p><p>放一下结构图</p><p><img src="https://pic.downk.cc/item/5f00239914195aa594769dc9.jpg"></p><p>之所以要分离出前端和服务端，是因为robot.js要塞进electron里面比较麻烦，尝试了好几次之后都没有成功，于是索性不把他放到electron里面。这样一来，避免了配置上的麻烦，而且结构更清晰，代码写起来也更方便。</p><p>目前仅支持在windows上使用，可以完成的操作有：</p><ul><li>切换窗口</li><li>隐藏窗口</li><li>静音/恢复音量</li><li>关闭当前窗口</li><li>上、下、左、右四个方向键</li></ul><h3 id="模型搭建">模型搭建</h3><p>这一步主要就是采集训练样本，然后使用Opencv处理图像，最后扔进Tensorflow里训练。</p><p>先说一下采集训练样本以及处理图像这两部分。通过Opencv调用摄像头，每0.1秒截取一次图像，然后用Opencv处理这一图像。所做的处理包括：</p><ul><li><p>获取ROI（感兴趣区域）</p><p>其实就是从原图像上截取一个指定区域。</p><center><img src="https://pic.downk.cc/item/5f00061014195aa5946a4677.png" style="zoom:50%;" /></center><center>处理前</center><center><img src="https://pic.downk.cc/item/5f00064814195aa5946a5c36.png" style="zoom: 67%;" /></center><center>处理后</center><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getRoi</span>(<span class="params">frame, x0, y0, width, height</span>):</span><br><span class="line">    roi = frame[y0:y0 + height, x0:x0 + width]</span><br><span class="line">    cv.imshow(<span class="string">&#x27;roi&#x27;</span>, roi)</span><br><span class="line">    <span class="keyword">return</span> roi</span><br></pre></td></tr></table></figure></li><li><p>使用Otsu法（大津法）进行肤色检测</p><p>大致原理是通过遮罩的方法，计算按位与运算，从而过滤掉那些我们不关心的像素。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getSkin</span>(<span class="params">frame</span>):</span><br><span class="line">    ycrcb = cv.cvtColor(frame, cv.COLOR_BGR2YCR_CB)</span><br><span class="line">    y, cr, cb = cv.split(ycrcb)</span><br><span class="line">    cr_ = cv.GaussianBlur(cr, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>) <span class="comment"># 高斯模糊</span></span><br><span class="line">   _, skin = cv.threshold(cr_, <span class="number">0</span>, <span class="number">255</span>, cv.THRESH_BINARY | cv.THRESH_OTSU) <span class="comment"># otsu二值化 </span></span><br><span class="line">    ret = cv.bitwise_and(frame, frame, mask=skin)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><center><img src="https://pic.downk.cc/item/5f00064814195aa5946a5c36.png" style="zoom:50%;" /></center><center>处理前</center><center><img src="https://pic.downk.cc/item/5f000a5c14195aa5946bfd10.png" style="zoom:50%;" /></center><center>处理后</center></li><li><p>提取轮廓并计算傅里叶算子</p><p>提取轮廓可以用opencv中的findContour。计算傅里叶算子可以理解为提取特征。</p><center><img src="https://pic.downk.cc/item/5f000a5c14195aa5946bfd10.png" style="zoom:50%;" /></center><center>处理前</center><center><img src="https://pic.downk.cc/item/5f000ad514195aa5946c30ba.png" style="zoom:50%;" /></center><center>处理后</center><p>代码如下：</p><p>提取轮廓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findContour</span>(<span class="params">Laplacian</span>):</span><br><span class="line">    h = cv.findContours(Laplacian, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_NONE)</span><br><span class="line">    contour = h[<span class="number">0</span>]</span><br><span class="line">    contour = <span class="built_in">sorted</span>(contour, key=cv.contourArea, reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> contour</span><br></pre></td></tr></table></figure><p>计算傅里叶算子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">trucate</span>(<span class="params">des</span>):</span><br><span class="line">    ret = np.fft.fftshift(des)</span><br><span class="line">    centerIdx = <span class="built_in">int</span>(<span class="built_in">len</span>(ret) / <span class="number">2</span>)</span><br><span class="line">    low, high = centerIdx - <span class="built_in">int</span>(MIN_DESCRIPTOR / <span class="number">2</span>), centerIdx + <span class="built_in">int</span>(MIN_DESCRIPTOR / <span class="number">2</span>)</span><br><span class="line">    ret = ret[low:high]</span><br><span class="line">    ret = np.fft.ifftshift(ret)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fourier</span>(<span class="params">frame</span>):</span><br><span class="line">    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)</span><br><span class="line">    dst = cv.Laplacian(gray, cv.CV_16S, ksize=<span class="number">3</span>)</span><br><span class="line">    Laplacian = cv.convertScaleAbs(dst)</span><br><span class="line">    contour = findContour(Laplacian)</span><br><span class="line">    contourArray = contour[<span class="number">0</span>][:, <span class="number">0</span>, :]</span><br><span class="line">    retbg = np.ones(dst.shape, np.uint8)</span><br><span class="line">    ret = cv.drawContours(retbg, contour[<span class="number">0</span>], -<span class="number">1</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">    contourComplex = np.empty(contourArray.shape[:-<span class="number">1</span>], dtype=<span class="built_in">complex</span>)</span><br><span class="line">    contourComplex.real = contourArray[:, <span class="number">0</span>]</span><br><span class="line">    contourComplex.imag = contourArray[:, <span class="number">1</span>]</span><br><span class="line">    fourierResult = np.fft.fft(contourComplex)</span><br><span class="line">    desInUse = trucate(fourierResult)</span><br><span class="line">    <span class="keyword">return</span> ret, desInUse</span><br></pre></td></tr></table></figure><p>根据傅里叶算子重构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reconstruct</span>(<span class="params">img, desInUse</span>):</span><br><span class="line">    contour_reconstruct = np.fft.ifft(descirptor_in_use)</span><br><span class="line">    contour_reconstruct = np.array([contour_reconstruct.real, contour_reconstruct.imag])</span><br><span class="line">    contour_reconstruct = np.transpose(contour_reconstruct)</span><br><span class="line">    contour_reconstruct = np.expand_dims(contour_reconstruct, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> contour_reconstruct.<span class="built_in">min</span>() &lt; <span class="number">0</span>:</span><br><span class="line">        contour_reconstruct -= contour_reconstruct.<span class="built_in">min</span>()</span><br><span class="line">    contour_reconstruct *= img.shape[<span class="number">0</span>] / contour_reconstruct.<span class="built_in">max</span>()</span><br><span class="line">    contour_reconstruct = contour_reconstruct.astype(np.int32, copy=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    black_np = np.ones(img.shape, np.uint8)  <span class="comment"># 创建黑色幕布</span></span><br><span class="line">    black = cv2.drawContours(black_np, contour_reconstruct, -<span class="number">1</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>)  <span class="comment"># 绘制白色轮廓</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;contour_reconstruct&#x27;</span>, black)</span><br><span class="line">    <span class="keyword">return</span> black</span><br></pre></td></tr></table></figure></li></ul><p>完成上面这些步骤后，就可以得到原始的训练样本了。</p><p>接着还要处理得到测试集与训练集。这里做的事情包括:</p><ul><li><p>改变原始图片尺寸</p><p>将尺寸从<span class="math inline">\(300\times 300\)</span>改成<span class="math inline">\(128\times 128\)</span>。</p></li><li><p>归一化</p><p>将图片中每个像素的值除以255。</p></li><li><p>划分测试集与训练集</p></li></ul><p>最后搭建CNN并训练了。CNN的结构如下：</p><table><thead><tr class="header"><th style="text-align: center;">Layer</th><th style="text-align: center;">Width</th><th style="text-align: center;">Height</th><th style="text-align: center;">Filter</th><th style="text-align: center;">Kernel Size</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Input</td><td style="text-align: center;">128</td><td style="text-align: center;">128</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr><tr class="even"><td style="text-align: center;">Convolution</td><td style="text-align: center;">128</td><td style="text-align: center;">128</td><td style="text-align: center;">32</td><td style="text-align: center;">3×3</td></tr><tr class="odd"><td style="text-align: center;">Max Pooling</td><td style="text-align: center;">64</td><td style="text-align: center;">64</td><td style="text-align: center;">32</td><td style="text-align: center;">2×2</td></tr><tr class="even"><td style="text-align: center;">Convolution</td><td style="text-align: center;">64</td><td style="text-align: center;">64</td><td style="text-align: center;">64</td><td style="text-align: center;">3×3</td></tr><tr class="odd"><td style="text-align: center;">Max Pooling</td><td style="text-align: center;">32</td><td style="text-align: center;">32</td><td style="text-align: center;">64</td><td style="text-align: center;">2×2</td></tr><tr class="even"><td style="text-align: center;">Convolution</td><td style="text-align: center;">32</td><td style="text-align: center;">32</td><td style="text-align: center;">128</td><td style="text-align: center;">3×3</td></tr><tr class="odd"><td style="text-align: center;">Max Pooling</td><td style="text-align: center;">16</td><td style="text-align: center;">16</td><td style="text-align: center;">128</td><td style="text-align: center;">2×2</td></tr><tr class="even"><td style="text-align: center;">Flatten</td><td style="text-align: center;">32768</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr><tr class="odd"><td style="text-align: center;">Dense</td><td style="text-align: center;">64</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr><tr class="even"><td style="text-align: center;">Dropout</td><td style="text-align: center;">64</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr><tr class="odd"><td style="text-align: center;">Dense</td><td style="text-align: center;">9</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr></tbody></table><p>最终训练结果：</p><p><img src="https://pic.downk.cc/item/5f00128a14195aa5946f60ad.jpg" /></p><p>效果还不错（至少目前来说）</p><h3 id="前端">前端</h3><p>前端部分做的事情除了展示界面，还包括以下这些：</p><ul><li><p>采集手势</p><p>调用摄像头并读取图像帧。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMedia</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> constraints = &#123;</span><br><span class="line">    <span class="attr">video</span>: &#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="number">400</span>, </span><br><span class="line">      <span class="attr">height</span>: <span class="number">400</span>, </span><br><span class="line">      <span class="attr">facingMode</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">mirrored</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">audio</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> promise = navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(constraints);</span><br><span class="line">  promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">MediaStream</span>) &#123;</span><br><span class="line">    video.<span class="property">srcObject</span> = <span class="title class_">MediaStream</span>;</span><br><span class="line">    video.<span class="title function_">play</span>();</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">PermissionDeniedError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">PermissionDeniedError</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据处理</p>其实就是把在Opencv里的东西在Opencv.js上再实现一遍</li><li><p>模型预测</p><p>将处理后的图像帧数据转换为Tensorflow.js输入所对应的格式后，将其输入上述已经训练好的模型中，获得预测值</p></li><li><p>手势判断与输出</p><p>根据模型预测输出的Tensor判断手势类型，且根据“阈值溢出机制”判断是否向服务器发送手势。什么是“阈值溢出机制”呢？实际上就是，单位时间内，如果某个手势的出现频率超过一个阈值<span class="math inline">\(\lambda(&gt;0.5)\)</span>，则认为这一手势就是当前手势。</p></li></ul><h3 id="服务端">服务端</h3><p>这一部分通过TCP协议获取前端的手势识别结果，并根据这一结果，通过调用robot.js来完成相应操作。</p><p>服务端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> robot = <span class="built_in">require</span>(<span class="string">&#x27;robotjs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> controlable = <span class="literal">false</span><span class="comment">//解锁</span></span><br><span class="line"><span class="keyword">let</span> directable = <span class="literal">false</span><span class="comment">//开启上下左右键</span></span><br><span class="line"><span class="keyword">let</span> key_set = []</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clear_key</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; key_set.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    robot.<span class="title function_">keyToggle</span>(key_set[index], <span class="string">&#x27;up&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  key_set = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">minimize</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;minimize&#x27;</span>)</span><br><span class="line">  pre_gesture = <span class="number">7</span>;</span><br><span class="line">  robot.<span class="title function_">keyToggle</span>(<span class="string">&#x27;command&#x27;</span>, <span class="string">&#x27;down&#x27;</span>)</span><br><span class="line">  robot.<span class="title function_">keyTap</span>(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">  robot.<span class="title function_">keyToggle</span>(<span class="string">&#x27;command&#x27;</span>, <span class="string">&#x27;up&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">closeWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;closeWin&#x27;</span>)</span><br><span class="line">  pre_gesture = <span class="number">4</span>;</span><br><span class="line">  robot.<span class="title function_">keyToggle</span>(<span class="string">&#x27;alt&#x27;</span>, <span class="string">&#x27;down&#x27;</span>)</span><br><span class="line">  robot.<span class="title function_">keyTap</span>(<span class="string">&#x27;f4&#x27;</span>)</span><br><span class="line">  robot.<span class="title function_">keyToggle</span>(<span class="string">&#x27;alt&#x27;</span>, <span class="string">&#x27;up&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">altTab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;altTab&#x27;</span>)</span><br><span class="line">  pre_gesture = <span class="number">8</span>;</span><br><span class="line">  robot.<span class="title function_">keyToggle</span>(<span class="string">&#x27;alt&#x27;</span>, <span class="string">&#x27;down&#x27;</span>)</span><br><span class="line">  key_set.<span class="title function_">push</span>(<span class="string">&#x27;alt&#x27;</span>)</span><br><span class="line">  robot.<span class="title function_">keyTap</span>(<span class="string">&#x27;tab&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">re_altTab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;re_altTab&#x27;</span>)</span><br><span class="line">  pre_gesture = <span class="number">9</span>;</span><br><span class="line">  robot.<span class="title function_">keyToggle</span>(<span class="string">&#x27;alt&#x27;</span>, <span class="string">&#x27;down&#x27;</span>)</span><br><span class="line">  key_set.<span class="title function_">push</span>(<span class="string">&#x27;alt&#x27;</span>)</span><br><span class="line">  robot.<span class="title function_">keyToggle</span>(<span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;down&#x27;</span>)</span><br><span class="line">  key_set.<span class="title function_">push</span>(<span class="string">&#x27;shift&#x27;</span>)</span><br><span class="line">  robot.<span class="title function_">keyTap</span>(<span class="string">&#x27;tab&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">audioMute</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;audio_mute&#x27;</span>)</span><br><span class="line">  robot.<span class="title function_">keyTap</span>(<span class="string">&#x27;audio_mute&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pre_gesture;</span><br><span class="line"><span class="keyword">const</span> server = net.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">sock</span>) &#123;</span><br><span class="line">  sock.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;close socket&#x27;</span>)</span><br><span class="line">    server.<span class="title function_">close</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  sock.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok!&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">    <span class="keyword">let</span> stringifyData = data.<span class="title function_">toString</span>()</span><br><span class="line">    <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">      directable = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (controlable) &#123;</span><br><span class="line">        controlable = <span class="literal">false</span>;</span><br><span class="line">        <span class="title function_">clear_key</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        controlable = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      pre_gesture = stringifyData;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (controlable) &#123;</span><br><span class="line">      <span class="keyword">if</span> (directable) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;up&#x27;</span>)</span><br><span class="line">          robot.<span class="title function_">keyTap</span>(<span class="string">&#x27;up&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;7&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;down&#x27;</span>)</span><br><span class="line">          robot.<span class="title function_">keyTap</span>(<span class="string">&#x27;down&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;8&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">          robot.<span class="title function_">keyTap</span>(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">          robot.<span class="title function_">keyTap</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stringifyData != pre_gesture) &#123;</span><br><span class="line">          <span class="title function_">clear_key</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;6&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">audioMute</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;7&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">minimize</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;4&#x27;</span>) &#123;</span><br><span class="line">          directable = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">closeWindow</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">re_altTab</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stringifyData === <span class="string">&#x27;8&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">altTab</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;listening&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start listening&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listen error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stop listening&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(&#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">6080</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  <span class="attr">exclusive</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>electron的主进程中连接服务端并发送手势识别结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sockConfig = &#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">6080</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sock = net.<span class="title function_">connect</span>(sockConfig, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;connected to server!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">sock.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;connect success&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendGesture</span>(<span class="params">ges</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ges2string = ges.<span class="title function_">toString</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ges2string)</span><br><span class="line">  sock.<span class="title function_">write</span>(ges2string)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终实现效果">最终实现效果</h2><p><img src="https://pic.downk.cc/item/5f00185114195aa59471b6bb.png"></p><center>为了避免误操作，一开始是上锁状态，无法操作</center><p><img src="https://pic.downk.cc/item/5f00188214195aa59471cc29.png"></p><center>手势5解锁</center><p><img src="https://pic.downk.cc/item/5f0018a814195aa59471daeb.png"></p><center>无法识别手势，需要调整手势</center>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5f00278014195aa594787856.png&quot; /&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://xtayex.gitee.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://xtayex.gitee.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="手势识别" scheme="https://xtayex.gitee.io/tags/%E6%89%8B%E5%8A%BF%E8%AF%86%E5%88%AB/"/>
    
    <category term="人机交互" scheme="https://xtayex.gitee.io/tags/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/"/>
    
    <category term="JavaScript" scheme="https://xtayex.gitee.io/tags/JavaScript/"/>
    
    <category term="Electron" scheme="https://xtayex.gitee.io/tags/Electron/"/>
    
    <category term="Tensorflow" scheme="https://xtayex.gitee.io/tags/Tensorflow/"/>
    
    <category term="Python" scheme="https://xtayex.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>AGC016B Colorful Hats</title>
    <link href="https://xtayex.gitee.io/2020/03/03/ACG016B-Colorful-Hats/"/>
    <id>https://xtayex.gitee.io/2020/03/03/ACG016B-Colorful-Hats/</id>
    <published>2020-03-03T15:02:00.000Z</published>
    <updated>2022-09-27T13:46:54.847Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5e5e72b398271cb2b862f2b8.jpg" /></p><span id="more"></span><p>题意是说，每只猫都带有一顶帽子，且每只猫能看到除自己以外的其他人的帽子总共有多少种颜色。问是否能构造出一个帽子颜色的序列，满足每只猫看到的颜色数目。</p><p>设看到的颜色数的最大值为<span class="math inline">\(maxi\)</span>，最小值为<span class="math inline">\(mini\)</span>。</p><p>一个显而易见的结论是，如果<span class="math inline">\(maxi-mini&gt;1\)</span>，则结果为No(可自行验证)</p><p>然后考虑<span class="math inline">\(maxi==mini\)</span>的情况。如果两者的值是1或<span class="math inline">\(n-1\)</span>，那结果是Yes</p><p>否则，对于任意一种颜色，必须要有至少两只猫的帽子是这种颜色的。（草稿纸上画个图即可知道，原因是，假设有一种颜色只被一只猫所拥有，因为自己是看不到自己的帽子的，所以对于这只猫来说，他所看到的帽子的颜色会比其他猫所看到的颜色少一种，这就不符合初始条件）</p><p>最后考虑<span class="math inline">\(maxi!=mini\)</span>的情况。对于那些颜色数为<span class="math inline">\(mini\)</span>的猫，其帽子的颜色必然只为它所拥有，即这种颜色只会在一只猫的头上出现；而对于那些颜色数为<span class="math inline">\(maxi\)</span>的猫，其帽子的颜色则至少要被两只猫拥有。所以可以先把颜色数为<span class="math inline">\(mini\)</span>的都填充了，然后看看剩下的颜色是否可以保证填入剩下的猫之后，每种颜色至少被两只猫所拥有。</p><p>PS：蒟蒻第一次做atcoder，感觉真的好锻炼思维qwq</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> arr[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> maxi=-INF;<span class="type">int</span> mini=INF;</span><br><span class="line">    <span class="type">int</span> minicnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">        maxi=<span class="built_in">max</span>(maxi,arr[i]);</span><br><span class="line">        mini=<span class="built_in">min</span>(mini,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==mini) minicnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(maxi-mini&gt;<span class="number">1</span>||maxi&gt;n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maxi==mini)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mini==n<span class="number">-1</span>||mini==<span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(n/mini&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maxi!=mini)&#123;</span><br><span class="line">        <span class="type">int</span> x=n-minicnt;</span><br><span class="line">        <span class="type">int</span> y=maxi-minicnt;</span><br><span class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x/y&lt;<span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5e5e72b398271cb2b862f2b8.jpg&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/categories/ACM/"/>
    
    <category term="Atcoder" scheme="https://xtayex.gitee.io/categories/ACM/Atcoder/"/>
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/tags/ACM/"/>
    
    <category term="思维" scheme="https://xtayex.gitee.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
    <category term="Atcoder" scheme="https://xtayex.gitee.io/tags/Atcoder/"/>
    
  </entry>
  
  <entry>
    <title>线段树与树状数组总结</title>
    <link href="https://xtayex.gitee.io/2020/02/05/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/"/>
    <id>https://xtayex.gitee.io/2020/02/05/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</id>
    <published>2020-02-05T15:04:00.000Z</published>
    <updated>2022-09-27T13:46:55.123Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic.downk.cc/item/5e3adbdf2fb38b8c3ccee2f7.jpg" /> <span id="more"></span> 本文章为2020年寒训用资料，有部分删减</p><h2 id="线段树">线段树</h2><h3 id="引入">引入</h3><p>问题引入：</p><ul><li>问题一：给定一个长度为<span class="math inline">\(n\)</span>的数列，可以进行<span class="math inline">\(m\)</span>次询问，每次询问查询区间<span class="math inline">\([l,r]\)</span>内所有数的和<ul><li>如果数据范围很小（例如<span class="math inline">\(n\leq 1000,m\leq 100\)</span>），可以直接枚举。复杂度<span class="math inline">\(O(n)\)</span></li><li>如果数据范围较大（例如<span class="math inline">\(n\leq 1e6,m\leq 1e3\)</span>），可以用前缀和。复杂度<span class="math inline">\(O(n+m)\)</span></li></ul></li><li>问题二：给定一个长度为<span class="math inline">\(n\)</span>的数列，可以进行<span class="math inline">\(m\)</span>次操作，操作分两种，一种是修改单点的数值，另一种是查询区间<span class="math inline">\([l,r]\)</span>内所有数的和<ul><li>如果数据范围很小，依然可以枚举。复杂度<span class="math inline">\(O(n)\)</span></li><li>但大数据范围的情况下会TLE</li><li>此时即使使用前缀和，在进行修改操作后需要维护前缀和，故复杂度与枚举一致。大数据范围的情况下依然会TLE</li></ul></li><li>问题三：给定一个长度为<span class="math inline">\(n\)</span>的数列，可以进行<span class="math inline">\(m\)</span>次操作，操作分两种，一种是修改区间<span class="math inline">\([l,r]\)</span>内每个数的数值，另一种是查询区间<span class="math inline">\([l,r]\)</span>内所有数的和<ul><li>数据范围小的话当然可以枚举……</li><li>如果数据范围很大呢？（例如<span class="math inline">\(n\leq 1e6,m\leq 1e3\)</span>）</li></ul></li></ul><h3 id="线段树是什么">线段树是什么</h3><p>线段树是一种二叉树，它的基本思想是在二叉树的节点上保存区间信息，并在树上进行区间。下图是区间<span class="math inline">\([1,7]\)</span>对应的线段树</p><p><img src="https://pic.downk.cc/item/5e3ada242fb38b8c3cceb6bb.png" /></p><p>上面这张图所表示的意思是，以求区间和为例，对于区间<span class="math inline">\([1,7]\)</span>，其区间和等于其左儿子<span class="math inline">\(([1,4])\)</span>的区间和加上其右儿子<span class="math inline">\([5,7]\)</span>的区间和；而区间<span class="math inline">\([1,4]\)</span>的区间和又等于区间<span class="math inline">\([1,2]\)</span>和区间<span class="math inline">\([3,4]\)</span>的和。对于一个区间<span class="math inline">\([lef,rig]\)</span>，其左右儿子分别为<span class="math inline">\([lef,\lfloor(lef+rig)/2\rfloor]\)</span>，<span class="math inline">\([\lfloor(lef+rig)/2\rfloor+1,rig]\)</span>。对于线段树上的各节点，我们采取从上到下、从左往右的编号方法。具体而言，以上图为例，<span class="math inline">\([1,7]\)</span>是编号为1，<span class="math inline">\([1,4]\)</span>编号为2，<span class="math inline">\([5,7]\)</span>编号为3……</p><p>对于查询与修改，线段树的复杂度都是<span class="math inline">\(O(\log_2n)\)</span></p><h3 id="建树">建树</h3><p>根据线段树的结构和节点编号方式，我们很容易得到以下建树方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sum[maxn&lt;&lt;<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line">        sum[rt]=tmp;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pushup</span>(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很短，但有些地方可能会让初次接触的人稍微有点疑惑：</p><ul><li><p>maxn&lt;&lt;2是什么意思？</p><p>此处maxn表示的是最大区间长度，maxn&lt;&lt;2等同于4 * maxn。sum是用来存我们的线段树节点的数组。为什么需要开4倍大的空间呢？首先，线段树是一棵完全二叉树， 对于一棵完全二叉树，假如有<span class="math inline">\(n\)</span>个叶子节点（对应到线段树上就是区间总长度为<span class="math inline">\(n\)</span>），其总节点数为<span class="math inline">\(2n-1\)</span>。似乎开2倍就够了呢……但经验告诉我们，开四倍是较为保险的选择，既不会太大导致MLE，也不会太小导致越界。</p></li><li><p>rt&lt;&lt;1和rt&lt;&lt;1|1</p><p>由于线段树节点的编号方式，父节点和其两个子节点的编号存在这样的关系：<span class="math display">\[id_{leftson}=2\times id_{father}\]</span>，<span class="math display">\[id_{rigson}=2\times id_{father}+1\]</span></p><p>为了提高速度，我们使用位运算来代替乘法、加法。</p></li><li><p>pushup</p><p>父亲节点的信息来自于两个子节点，故在完成子节点的建立后，我们要用两个子节点来建立父亲节点</p></li></ul><h3 id="单点操作">单点操作</h3><p>单点操作包括单点查询与单点修改</p><h4 id="单点查询">单点查询</h4><p>单点查询的大致思想与二分查找类似。如果需要查询的位置<span class="math inline">\(pos\)</span>在当前区间的左侧，则查找当前区间的左儿子；否则，查找当前区间的右儿子。重复这一过程，直至区间左右端点相等，则说明已经找到。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        ans=sum[rt];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">query</span>(pos,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos&gt;mid) <span class="built_in">query</span>(pos,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单点修改">单点修改</h4><p>单点修改代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> val,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">        sum[rt]+=val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">update</span>(pos,val,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pos&gt;mid) <span class="built_in">update</span>(pos,val,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pushup</span>(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与单点查询基本一致，但要记得最后pushup一下来更新父节点。</p><h3 id="区间操作">区间操作</h3><p>区间操作的总体思想是，对于带查询的区间<span class="math inline">\([L,R]\)</span>，如果当前区间<span class="math inline">\([lef,rig]\)</span>完全包含在带查询区间中，就直接将<span class="math inline">\([lef,rig]\)</span>上的信息统计到答案中。如下所示 <span class="math display">\[\underbrace{L,L+1,\dots \overbrace{lef,lef+1,\dots ,rig-1,rig}\dots ,R-1,R}\]</span> 否则，如果当前区间不是完全包含在待查询区间内，就查询左儿子或右儿子。如下所示 <span class="math display">\[\rlap{\overbrace{\phantom{lef,lef+1,\dots,L,L+1,\dots,rig-1,rig}}} lef,lef+1,\dots, \underbrace{L, L+1,\dots,rig-1,rig,\dots,R-1,R}\]</span></p><h4 id="区间查询">区间查询</h4><p>借用上面所提到的总体思想，可以写出这样的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef&gt;=L&amp;&amp;rig&lt;=R)&#123;</span><br><span class="line">           <span class="keyword">return</span> sum[rt];     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret+=<span class="built_in">query</span>(L,R,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) ret+=<span class="built_in">query</span>(L,R,mid+<span class="number">1</span>,rt&lt;&lt;<span class="number">1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区间修改">区间修改</h4><p>借用单点修改的思想，很容易想到，区间修改就是相当于调用多次单点修改，把区间内的数字都修改了。举个例子，对于区间<span class="math inline">\([1,7]\)</span>，如果我们要修改<span class="math inline">\([2,7]\)</span>内的数，那最终被修改的节点如下图所示 <img src="https://pic.downk.cc/item/5e3ada522fb38b8c3ccebc1d.png" /></p><p>一个很明显的问题在于，这样做的话，复杂度会比直接暴力修改还高！而且，如果我要查询的只是<span class="math inline">\([5,7]\)</span>的子区间，那就会存在不必要的修改。比如说我要查询<span class="math inline">\([1,5]\)</span>，那<span class="math inline">\([5,6]\)</span>等等的修改就没有用。</p><p>事实上，要修改区间<span class="math inline">\([2,7]\)</span>，我们可以仅仅修改我们需要的区间。具体而言，修改的时候只需要修改<span class="math inline">\([1,7],[1,4],[1,2],[2,2],[3,4],[5,7]\)</span>。等到需要查询这些区间以外的区间时，再去进行相应的修改。这就是懒惰标记（lazy tag）的思想</p><p>所谓懒惰，就是“要用的时候才用，否则就不用”。具体来说，懒惰标记用于存储父节点的修改信息，但暂时不把信息传给子节点，等到需要用到子节点时再把信息传给子节点。</p><p>加上了懒惰标记的区间修改代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> rt,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]+=lazy[rt];</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lazy[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>]*(len-(len&gt;&gt;<span class="number">1</span>));</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*(len&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        lazy[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> val,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef&gt;=L&amp;&amp;rig&lt;=R)&#123;</span><br><span class="line">        sum[rt]+=val*(rig-lef+<span class="number">1</span>);</span><br><span class="line">        lazy[rt]+=val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(rt);</span><br><span class="line">    <span class="type">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">update</span>(L,R,val,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) <span class="built_in">update</span>(L,R,val,mid+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">pushup</span>(rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上懒惰标记后，同样是修改<span class="math inline">\([2,7]\)</span>这一区间，被修改的区间如下所示：</p><p><img src="https://pic.downk.cc/item/5e3ada6a2fb38b8c3ccebf3e.png" /></p><p>另外，在引入了懒惰标记后，单点查询、区间查询的代码也要更改（其实就是加上pushdown而已）。具体如下：</p><p>单点查询：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)&#123;</span><br><span class="line">           <span class="keyword">return</span> sum[rt];     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(rt);</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef&lt;=mid) ret+=<span class="built_in">query</span>(pos,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rig&gt;mid) ret+=<span class="built_in">query</span>(pos,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区间查询：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;=lef&amp;&amp;R&lt;=rig)&#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(rt);</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) ret+=<span class="built_in">query</span>(L,R,lef,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) ret+=<span class="built_in">query</span>(L,R,mid+<span class="number">1</span>,rig,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="减法运算和乘法运算">减法运算和乘法运算</h3><p>上面所提到的都是修改与查询都是基于加法的，那如果是减法、乘法、除法呢？</p><ul><li><p>如果是减法的话就直接加上负数即可。</p></li><li><p>如果是乘法或除法的话，就要另当别论。</p><p>（此处只讨论区间查询与区间修改，如果区间的会了，单点肯定也会吧 :D）</p><ul><li><p>对于乘法，只需要像这个样子修改update：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> val,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef&gt;=L&amp;&amp;rig&lt;=R)&#123;</span><br><span class="line">        lazy[rt]*=val;</span><br><span class="line">        sum[rt]*=lazy[rt];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(rt);</span><br><span class="line">    <span class="type">int</span> mid=(lef+rig)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">update</span>(L,R,val,lson);</span><br><span class="line">    <span class="keyword">if</span>(R&gt;mid) <span class="built_in">update</span>(L,R,val,rson);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样修改pushdown：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt]!=<span class="number">1</span>)&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]*=lazy[rt];</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*=lazy[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>]=sum[rt&lt;&lt;<span class="number">1</span>]*lazy[rt];</span><br><span class="line">        sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*lazy[rt];</span><br><span class="line">        lazy[rt]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外要记得初始化lazy中所有数为1</p><p>PS：思考一下，如果是乘法和加法同时进行，即区间修改操作中，既可以将区间上的数乘以一个数，也可以将区间上的数加上一个数，那要怎么维护sum和lazy呢？</p></li></ul></li></ul><h3 id="离散化">离散化</h3><p>所谓离散化指的是，在某些情况下，由于数据范围过大，直接保存数据的做法会导致MLE；但要解出题目其实并不需要保存实际的数据，只需要保存数据之间的相对大小即可。举个例子，现在要在一条长度为<span class="math inline">\(1e9\)</span>的线段上进行区间染色，颜色与颜色之间会相互覆盖，求最终线段上可以看到多少种颜色。显然，我们不可能开一个长度为<span class="math inline">\(4e9\)</span>的数组来存线段树节点，也不可能开一个长度为<span class="math inline">\(4e9\)</span>的数组来存懒惰标记。如何解决这一问题呢？注意到，我们现在其实并不关心被染色的线段具体有多长，而只关心线段之间的关系（相对大小，位置关系）。所以我们可以为每一个需要染色的区间的左右端点分配一个id，并通过id来建立线段树。所有的修改与查询都在这棵”id线段树“上进行。离散化的实际实现一般通过sort()和unique。</p><p>下面用一道例题来讲解：</p><p><a href="http://poj.org/problem?id=2528">Mayor's posters</a></p><p>题目大意是说，有一堵长为10000000，现在要在墙上贴<span class="math inline">\(n(1\leq n\leq 10000)\)</span>张海报（海报与海报之间会相互覆盖），问贴完所有海报后，能看到的海报有多少张？</p><p>与上面提到的染色问题思路一致，将每张海报离散化后，用离散化得到的id建立线段树，并通过query查询能看到的海报的数目。完成离散化后，通过lower_bound()查询左右端点对应的id。</p><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson lef,mid,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson mid+1,rig,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">10005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">10000</span>+<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> lazy[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> lef;</span><br><span class="line">    <span class="type">int</span> rig;</span><br><span class="line">&#125;;</span><br><span class="line">node ps[<span class="number">20000</span>+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt]!=<span class="number">0</span>)&#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[rt];</span><br><span class="line">        lazy[rt]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> toL,<span class="type">int</span> toR,<span class="type">int</span> todo,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig)&#123;</span><br><span class="line">        lazy[rt]=todo;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(rt);</span><br><span class="line">    <span class="type">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(toL&lt;=mid)</span><br><span class="line">        <span class="built_in">update</span>(toL,toR,todo,lson);</span><br><span class="line">    <span class="keyword">if</span>(toR&gt;mid)</span><br><span class="line">        <span class="built_in">update</span>(toL,toR,todo,rson);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt])&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[lazy[rt]])&#123;</span><br><span class="line">            ans++;</span><br><span class="line">            vis[lazy[rt]]=<span class="number">1</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">pushdown</span>(rt);</span><br><span class="line">    <span class="type">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef&lt;=mid)</span><br><span class="line">        <span class="built_in">query</span>(lson);</span><br><span class="line">    <span class="keyword">if</span>(rig&gt;mid)</span><br><span class="line">        <span class="built_in">query</span>(rson);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lsh[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">mst</span>(lsh,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">mst</span>(lazy,<span class="number">0</span>);<span class="built_in">mst</span>(vis,<span class="number">0</span>);</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;ps[i].lef,&amp;ps[i].rig);</span><br><span class="line">            lsh[idx++]=ps[i].lef;lsh[idx++]=ps[i].rig;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(lsh,lsh+idx);</span><br><span class="line">        <span class="type">int</span> cnt=<span class="built_in">unique</span>(lsh,lsh+idx)-lsh;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> L=<span class="built_in">lower_bound</span>(lsh,lsh+cnt,ps[i].lef)-lsh+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> R=<span class="built_in">lower_bound</span>(lsh,lsh+cnt,ps[i].rig)-lsh+<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">update</span>(L,R,i+<span class="number">1</span>,<span class="number">1</span>,cnt+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">query</span>(<span class="number">1</span>,cnt+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓展">拓展</h3><p>拓展内容包括：</p><ul><li><p>区间除、维护区间平方和、维护区间立方和、区间位运算...</p></li><li>扫描线</li><li>权值线段树</li><li>主席树</li><li><p>etc...</p></li></ul><h2 id="树状数组">树状数组</h2><h3 id="引入-1">引入</h3><p>所谓树状数组，就是用数组来模拟树形结构，常用于解决一些区间问题（区间加、区间求和等）。相较于线段树，其优点在于常数更小，且代码更短。缺点在于功能比较有限，对于一些复杂的区间问题很难解决，甚至是无法解决。可以说，能用树状数组解决的问题都能用线段树解决，但能用线段树解决的问题不一定能用树状数组解决。</p><h3 id="辅助数组c与lowbit">辅助数组c与lowbit</h3><p>首先，定义一个序列<span class="math inline">\(a_n\)</span>，其长度为<span class="math inline">\(n(1\leq n\leq1e6)\)</span>，可进行<span class="math inline">\(m(1\leq m \leq 1e3)\)</span>次操作，每次操作要么是对一个数加上一个数值（单点修改），要么是查询一段区间内的总和（区间查询）。</p><p>这一问题当然可以用上面所说的线段树来解决，但现在我们引入树状数组。</p><p>首先定义函数<span class="math inline">\(lowbit(x)\)</span>，有 <span class="math display">\[lowbit(x)=x\&amp;(-x)\]</span></p><p><span class="math inline">\(lowbit(x)\)</span>的具体含义在于，求出<span class="math display">\[x\]</span>最低位1所对应的值。比方说，<span class="math display">\[lowbit(10100_2)=100_2=4_{10}\]</span>，<span class="math display">\[lowbit(10001111_2)=1_2=1_{10}\]</span>，<span class="math display">\[lowbit(100010_2)=10_2=2_{10}\]</span></p><p>再定义一个辅助数组<span class="math inline">\(c_i\)</span>，有 <span class="math display">\[$c_i=a_{i}+a_{i-1}+\dots+a_{i-lowbit(i)+1}\]</span>$</p><p>也就是说，c[i]表示的是, 从a[i]开始，一直到 a[i-lowbit(i)+1] 这一长度为lowbit(i) 的连续区间的总和。如下图</p><p><img src="https://pic.downk.cc/item/5e3adb222fb38b8c3cced2a6.png" /></p><p>构建出来的树状数组大致长下面这个样子</p><p><img src="https://pic.downk.cc/item/5e3adb452fb38b8c3cced59d.jpg" /></p><h3 id="修改与查询">修改与查询</h3><p>此处只考虑单点修改和区间查询。</p><ul><li><p>单点修改：当我们要修改<span class="math display">\[a_j\]</span>的时候，因为有<span class="math display">\[c_i=a_i+a_{i-1}+\dots+a_{i-lowbit(i)+1}\]</span>，所以修改一个数可能会导致多个<span class="math display">\[c_i\]</span>的改变。所以我们这么编写单点修改的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        c[i]+=val;</span><br><span class="line">        i+=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于区间查询，<span class="math inline">\(c_i\)</span>的定义让我们想到，是否可以通过求前缀和的方法求区间和。因此，查询的代码可以这样编写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        ans+=c[i];</span><br><span class="line">        i-=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>通过观察修改、查询的代码，以及树状数组的结构，我们可以看出，树状数组其实巧用二进制来对整个序列进行分段。以一个长度为7的序列为例，有 <span class="math display">\[\begin{aligned}lowbit(1)&amp;=1,c_1=a_1;\\lowbit(2)&amp;=2,c_2=a_2+a_1;\\lowbit(3)&amp;=1,c_2=a_3;\\lowbit(4)&amp;=4,c_4=a_4+a_3+a_2+a_1;\\lowbit(5)&amp;=1,c_5=a_5;\\lowbit(6)&amp;=2,c_6=a_6+a_5;\\lowbit(7)&amp;=1,c_7=a_7;\end{aligned}\]</span> 我们把这些数据套到query()代码中，可以发现，加上的<span class="math inline">\(c[i]\)</span>分别是<span class="math inline">\(c[7],c[6],c[4]\)</span>，也就是<span class="math inline">\(a[7],a[6]+a[5],a[4]+a[3]+a[2]+a[1]\)</span>这三段。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic.downk.cc/item/5e3adbdf2fb38b8c3ccee2f7.jpg&quot; /&gt;</summary>
    
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/categories/ACM/"/>
    
    <category term="数据结构" scheme="https://xtayex.gitee.io/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="线段树" scheme="https://xtayex.gitee.io/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/tags/ACM/"/>
    
    <category term="数据结构" scheme="https://xtayex.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="线段树" scheme="https://xtayex.gitee.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="树状数组" scheme="https://xtayex.gitee.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>2018-2019算法学习总结</title>
    <link href="https://xtayex.gitee.io/2019/11/25/2018%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://xtayex.gitee.io/2019/11/25/2018%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</id>
    <published>2019-11-25T10:30:00.000Z</published>
    <updated>2022-10-04T12:07:14.947Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="cee0c0453cb2dcc5b8b51d32665c8211b5bbcbccf93afe200bee8712aec490a3">bc222d1b1305729f70b2ed8cb52da7f36b9c72240c71ae81b9f8ec63be1c5e838182444e1b19d7385d4d05442635c90a41d833ad31621c75ae753e6c38886085776bb69d8aba51109a40b8fda30c079edb943f57bf3009d08dff59a6929a995a44447c67eded60aea56fea19db5912cc9181056366601c0417c7bb2e818983b8890cdc620813afb788d5324d94e676d4cde67cef49744cc50519c23e9fee9b025c34a464782067d0b56ed2e5eee92a102f81c89a828e9ef94bd05869aaf5bd9080bf980204a8319ce41bd457a656123ab3f5f0bf3a6c6bc712fac911c8ed744b10ef0df79df9200a56261a24ba53b96bafe6c70a7f8f6afe2b44da030bb418ea88ccd9c850b90368dbc4f3a010a2b0a3bab6d225c34cd9789bf7d828a54b4f0b474ecd3e6144eae99487e802098f038416e5d0a364881627932e82fe8cae563747e5a58ffd6fc3b249ebc15e364f5b0daded7810d4f0c7746ae74a728774fa7d41ced000cd89571de29b3ec5e5fa04480943c61e7239ee80d079095de70c2f8a8a72f4520957bbca9ce7b6de5c0d3c6fc2f8a54101c6a70de73433a3576a8e4a6c2226f89acc323033b9d3aa951035ec8efbbe2e0faeb0a6806a318592681173f673f58f566f3b150746e0e1e1af58c9d0c1ea108f676be903192dac5f2fd9afcbbf7d77c8627e2d5118293560a0e4b779179b236cbb95526fdf57973665dda1e05a4120b184ef5ce8afdbd70a01d5951c1ea98abf47a79f8aee28337fe2cfdda7d51adfd77a69a24b9640e2feed404a08a2161112c49cfbb31883e7ffb8c626dfa486ada806568060cc85610ce84644d8d1e53462961f3a5e3f64877f2f89ad7ba4ba760216e7421c39ab022e40af7c0af44fafb0141dba283f95e2e2f5aa6a736c01e44af1ad028450664a034c4ff350c4237ba7dd118f7bb78c0e4edb3648a4ca4df5d18cb954fbbd36d04fb109d26265aec0074a496055ebb5c609feb120d7952529961fc90b6929cbd490c2691cd17d9ec2ab924df159c7c9e1c5f230defc8f6d43db66ed9f8a76874972cfd4208117ef708518bdec26f504579102fe6dc37268e53632da298fb90377d8505779364b870562d837af7604a9d7c14488b4455595944dbf129a3f73b66086d2e1229e7c91f18599e4267c536de1a58862efeac4df62968d9e87acb9ced5e3ff978329657ab3174f6e9351ef5e5cbd163b7c95cb77bead223cb1b5745353695bcde34bf880f1cdc656d6cfc4d74c831fc30e1b348b4cbbe5264854372b20c4db49151c3753e1321fc9e63b79f784f37e9434f8991a1eb71760b67ab7c8a657057d05cc481b9ddf6986230d2c95789773b5094cdafd2a2a3bd2024573ca07fd8987f5c2ff75904c55f938e3ba368a3716534402cc3afccfa3e4dd2db3127b0918f7b8380a3eed998ad5d3473c37023eaf56f91400bb9bf72d0a22bf6f9d33ea054215c012f1248b059d09c03ce6e64c82c6adf73bf3bc36ce66fb00a33232251f0485a1f3c2a36a489d740e26b2383c2aacb1018e45b35e301b0e7c3138074b1decbba21098f2e650fc8900d2ee64dd6a287a5397381a42f9ef2a8c020b3793d86ed44108b77729e19e72d608cebfc727ef6ea9956d2d3469648a97522b6ba1cda4413fe833b9dbc71cd7a2ee6096e08e7cf541f4dcdd32208307b93cba543f3545a8550ba2561a221b99fbeed0624c670a43728fe9a17cac3f0f4116b1799950dd3c3361fe952b658f722a9dfe6fc2620e4b75a9337f76d4f338352f1547008aa737137a5f400ceaed755d6319ce29458ec0e61756a30cb687196360a88cbcd8bf57709eb10fff3cbd2687d3cf14533ae1d4c56800cdc46f49b08014f868652a3c32a6bf9e6ee5c0ef44b6c2f87f5b04ed51cb8299d62b50283a23cee550aad55fe5eef919932b2500d7b37982f29eef7b667470fdec6f3a88110486bb5e8e33f7992264c4c44a1f8cf06db5c267db768aa0cf1b83381822ce794c57f1e1412c7ca77af498c66a10966c52e8bcff45e56ffb6fd4f0eb0c9eb3e3a98416fb76b115120afac794dfc1dafa6a00b2551d0c3a4c8aa02b255fa2a55d8a8bd625432f4fb35a85308e040d90d8a977a7b918723c9f4cf08313f4cf02f7dc39df02c8772af980dd4c1151d82531cd56175a3363448f02b43cae7342e4095ffd796a547672778837cba61c3514cd33853c06184e4e43168c52901bea8bbd5383dd2602af81aa46623b9a9594c86854b99129e532838de8c4f8975bb94a81a3dc8cffc5b18c5a21e3c0887d7889333f1ff2fa772d62fc42571318d4802d2e872b695171b28dfe940ff79448ff67de2282b8b0718f424ea5748a685961cc25d416d35b18f0ccb46b8af589206e08de0412607c9e2850012f609ff0c3d39f0a171f75c83388b3c2ee3c69026b67d02bd8e89d13126cb5a857245fc3ef4f8ace3496712dc7c152fca486f142d44fec7b35d480a41e30773525fb3ff08a299eae8e0c0975c534b9d0a92c6480e60f026a671be1849e6eb2bec602e08d392b67a588a3eaa0a8fb2184e77d041097b0936c31bffbba1651a09e00e3ddf85f43d9ffcc5ee0dbff2a9a9946df11d81bdaf92bce82122e036e09bc4ecd23e68e2e6b7310b251667c2c5ac42e040465bfdddab2390d23a78eeccce38f10e3da77ad1d129425ffe0535b3253fb21f704bacefd0d9c8dce237c4784505531ef41ca722b59af92ad9fa17fc5b41bd268b57933ae5d38d046937a74fa6f59a392c7257e2e7794f894bc6b13f5ea0cbcb7c832d23d077b033d2dc3d03712ea48a4ceab968591d479dc634701b0c1ec009a5c41f3d7e3ea482c5bdcc786c7fa4d60e501d8458a6a23d6727e8568cc980f48ed0fc2aaea169dcb5d0a25fea101e2e2518e8aafaf7d20f8e2d80379d7d4c4e8d6c5ae3ad19af8aa038a84780203ebe7135537b5d5dacddf8bdfa3ed01d17d846853c5c2ee317c13fee41c73adbf2e15273e91059f9cc1bd7d8e1b2e4423723012b4dc6f41d8d48874fcd6331cbcce30cff272b21016f3c24a56bf1cfccf45afbab8002474f50df40b7b07a6dfff9a1d1c47b9766eed9da085347f77462d2ede7b28717e7b443e1e12427a41a15ae6b9ac8cd21ffbf1c7a33c75cb1a262e3b2a0c5a44732f7d0e24e3e71d788a9fa3f7784cdd6412f2f3f154539e10e941441c99732634471a050dfae681e2c55a77cdc3f83ecbdc9b76a4ae7f8fb0113aa5fa4640fe7bd6d9add7f041564dc9af9c1f85b75be452b8b3d09e2d7539f4e8fd210ec528d15724f30dc090a89fa7aac7968e3ddb9c640c794332b6436bad016d99437730b2add3ad7573cb45ab29074e61e796358f760a7703e04e7ce3564e6c35a09c4146c014c287edd53fbe6696b837e4a019f8cea5621c41e03c6ce5d85988b61943d071101d87d379c1e5bb14575571c8f2bb1be1998a3858bd3327d6d41a43ebb336501226aae6a2cedd7ca8dd6cee62c024636e9f399ae54ee9d0dea2d7c1bec4105bc072b1c7e141c35d4574aa11ad07ba83430a52ff729b16566b4a5da29d95b7f4cf4d68b5e781875b737ca0181241d492b21d626172ce92f49a7255fc66ff7e5fe86322bf0d9a5daaec79b1bac6e868cb9fce1614855e02a8c52867ba89db5e001065611310a9bc11680707795a7e17049d78eb5eeab3e90fe094ff423552ebf5466ef95155eeb35b645eb4a115f4b00981c36988f860e85f10ef10c8075479ed6aad5373dea6584dff9a1cf94ae987bf65a6a0b08907ec90ff46e3f39e8290fb8092201816ef5ded3f56c24eebe918501dc6fc660bc3a2758f501be47414bb93f5ac83ede03d282ebd53bec5f3b33f2a432faaae198fc9d344b24c493e20ff2e6c31a116f1dbf87ad4877a05deeb5f360bbd5223a6e26517fb0bd2ca916f145a2ddc70d34392beeed6d6a9f3d9664fa766219eb05ddc6c8187b424d4db3fabfd0d3bc9b6cbabed30a721e0e80d31787cdf8424dc5f3d5c5053510c5ceb16eae26cb35d0da88d465f364a3ba120ab368e734cd7abbcb8a690c62aa8a7078412813c3f31b66cb05ac9ab7ccd3f8c1ecbb9a16c89f37d65e7b6c432af80b820cace4b7f9df075426d38f0878b244e84106fbab5a0a48ac48e1d5c4d3ca7f8c5e9a302a41a11ef298b7ee2364436e0f6d16be5450e10ac8fab73ea4ad46aaf681ee3c0d22e8bf6dedd640c89591acc7f13244af7881f3eda89d08027c21e1989c8b7d5942846cd0e7f2f21f514fdac2244ed3d115cc0e3f915f27ffbb428e8fd90715dde2f1ebb058132f55b388d1003ae6452ab882a23926ef359e088d8c1a9123b93f5f43799e4f0ed827f7cccffb37b1e7016ba99f526dd77768139877de401891615ac33ded562ec159e95145bda9619f59287e6f311ab88</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/categories/ACM/"/>
    
    <category term="总结" scheme="https://xtayex.gitee.io/categories/ACM/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/tags/ACM/"/>
    
    <category term="总结" scheme="https://xtayex.gitee.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>CCPC2019哈尔滨站总结</title>
    <link href="https://xtayex.gitee.io/2019/10/15/CCPC2019%E5%93%88%E5%B0%94%E6%BB%A8%E7%AB%99%E6%80%BB%E7%BB%93/"/>
    <id>https://xtayex.gitee.io/2019/10/15/CCPC2019%E5%93%88%E5%B0%94%E6%BB%A8%E7%AB%99%E6%80%BB%E7%BB%93/</id>
    <published>2019-10-15T14:54:00.000Z</published>
    <updated>2022-09-27T13:46:54.835Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Hc44a6b020fd5413ca3b54eea908034afn.jpg" /></p><span id="more"></span><h4 id="前言">前言</h4><p>萌新的第一场区域赛，抱队友大腿拿了个铜，不至于打铁qwq。队友实在太强辣！</p><h4 id="热身赛">热身赛</h4><p>热身赛四道题，A，B都是傻逼题；C，D是牛客多校原题，然而我们并没有敲出来......C题原本的想法是枚举矩阵起点，然后单调栈维护纵向横向两个方向最远可以拓展的距离；后来听对面女队的小姐姐讨论，觉得可以尺取法搞搞，结果热身赛结束了都没弄出来😭。后悔没有好好补多校的题😭</p><p>热身赛草草结束，去东林恰了个晚饭，<del>东林的饭堂还挺好吃的</del></p><h4 id="正赛">正赛</h4><p>正赛一共过了下面四题</p><table><thead><tr class="header"><th>Problem</th><th>Solution</th></tr></thead><tbody><tr class="odd"><td>F - Fixing Banners</td><td>直接6!暴力枚举</td></tr><tr class="even"><td>I - Interesting Permutation</td><td>牛逼队友找规律，我一脸懵逼......</td></tr><tr class="odd"><td>J - Justifying the Conjecture</td><td>&gt;=5的情况都有解，奇数分解成3 + x，偶数分解成2 + x</td></tr><tr class="even"><td>K - Keeping Rabbits</td><td>无论经过多少天，概率分布都不会变化</td></tr></tbody></table><p>开场看题时沿用了我们队一直以来的策略，我从后面开始看题，zh学长从前面开始看题，pzc中间随便看。根据赛前训练的经验，签到题一般是倒数第二或第三题，再加上这次的倒数第一题是一道题面贼长的大模拟，于是看题时我没有从倒数第一题开始，而是直接选了最签到的 J，发现果然是水题，于是把题意喂给主代码手，10min内水过。</p><p>往后又看到了K，于是把题意告诉学长，然后自己接着看题。看题过程中发现了F和I，觉得有搞头，然后去搞了搞F，喂给学长和代码手，过了。紧接着是学长敲K，也是一发过。开场签到感觉很顺利，<del>然后就开始自闭了</del></p><p>签完前三题后，开始搞I 。题意是说给定一个<span class="math inline">\(1\)</span>到<span class="math inline">\(n\)</span>的排列<span class="math inline">\(a_1,a_2,a_3,...,a_n\)</span>，对于两个序列<span class="math display">\[f_i=max\{a_1,a_2,a_3,...,a_i\}\]</span>，<span class="math display">\[g_i=min\{a_1,a_2,a_3,...,a_i\}\]</span>，定义<span class="math inline">\(h_i=f_i-g_i\)</span>。现在给出一个<span class="math inline">\(h\)</span>序列，问有多少个<span class="math inline">\(1\)</span>到<span class="math inline">\(n\)</span>的排列，可以生成这样的一个<span class="math inline">\(h\)</span>序列。</p><p>第一反应是dp，但队里的dp选手想不出要怎么d OTZ。过了一会后牛逼队友发现这东西可以找规律解决，结果打了个表对拍一下，结果发现规律好像推错了......于是继续自闭，直到差不多一点的时候，队友才把正确的规律搞了出来，然后搞搞搞，终于过了😭。对于这题我个人感觉挺惭愧的，可以说除了读题对拍意外没有其他贡献，<del>后期还挂机了</del>。I题过了之后，排名上升到了121，终于苟到铜牌了OTZ</p><p>这时候还剩下一个半小时，感觉如果不把E过掉，很可能会打铁（不过事实证明还是能有铜的）。于是疯狂搞E，但最终还是很遗憾没有弄出来。赛后跟我校的另一支队了解了一下，得知他们将快读换成了A题题面上的快读就过了......过了......队友听到这都要哭了，<del>我也要哭了qwq</del></p><p>第一场区域赛，没有打铁，我个人已经非常满意了。大致总结一下自身的问题，一就是精神不够集中，容易进入挂机状态。无论是平时训练还是现场赛都是如此。二就是时间的利用效率还不够高，比如说这次现场赛，后期卡E题的时候，我对这题几乎是0贡献，那这时为什么我不去搞搞那两道模拟题，想个大概的框架，然后把题意和自己的想法喂给擅长模拟题的队友呢？或许这样我们能A五题？</p><p>就这样吧，这周银川站加油💪</p><h4 id="一些题外话">一些题外话</h4><p><img src="https://ae01.alicdn.com/kf/H7d0f28ea3f4c49c19ad981ce10d5ac0du.jpg" /></p><center>摄于深圳—哈尔滨的飞机上</center><p><img src="https://ae01.alicdn.com/kf/Hb1000c4c83664acb8eda52e37b4c3bdce.png" /></p><center>东林里面居然还有个自然博物馆，我酸了qwq</center><p><img src="https://ae01.alicdn.com/kf/H3d63cdbd1f44496ca159ea95fcf3795cR.jpg" /></p><center>哈尔滨特色锅包肉，然而并不喜欢甜食。。。</center><p><img src="https://ae01.alicdn.com/kf/Hc44a6b020fd5413ca3b54eea908034afn.jpg" /></p><center>摄于哈尔滨太阳岛</center>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/Hc44a6b020fd5413ca3b54eea908034afn.jpg&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/categories/ACM/"/>
    
    <category term="赛后总结" scheme="https://xtayex.gitee.io/categories/ACM/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/tags/ACM/"/>
    
    <category term="CCPC" scheme="https://xtayex.gitee.io/tags/CCPC/"/>
    
    <category term="赛后总结" scheme="https://xtayex.gitee.io/tags/%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>最大流，最大流最小割与最大权闭合子图</title>
    <link href="https://xtayex.gitee.io/2019/10/10/%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%8C%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2%E4%B8%8E%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE/"/>
    <id>https://xtayex.gitee.io/2019/10/10/%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%8C%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2%E4%B8%8E%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE/</id>
    <published>2019-10-10T11:46:00.000Z</published>
    <updated>2022-09-27T13:46:55.111Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H5f34d005235d4ae08a65080af36eb1b35.jpg" /> <span id="more"></span></p><h3 id="前言">前言</h3><p>很久之前学过最大流，但当时网络流的学习便止步于此。国庆时做了几套去年ICPC Regional的题目，有好几道网络流相关的题目，遂决定复习一下最大流，同时学点新东西</p><h3 id="最大流">最大流</h3><p>解决最大流问题主要有FF，EK，Dinic，ISAP这四种算法。FF和EK在时间复杂度上较劣，不适合用来解题，故大多数情况使用的都是Dinic和ISAP。而这两种算法相比较，虽然ISAP会比Dinic更快一点，但由于网络流相关的题目重点往往不在算法实现，而在于如何对问题建模。再加上Dinic的思路比ISAP更简明，实现也很简单，故实际解题时，Dinic使用得更多一些。</p><h4 id="dinic">Dinic</h4><h5 id="该算法的大致步骤如下">该算法的大致步骤如下：</h5><ol type="1"><li>连边，建立网络</li><li>BFS建立分层图</li><li>判断分层后汇点所处层次是否为-1。若是，说明此时汇点已不可达，直接输出答案；否则，进行下一步</li><li>一边DFS完成所有增广。对于网络中的每一条边，都加上当前的最小残量，同时对于每一条边的反向边，都减去当前的最小残量，并将答案加上该最小残量。</li><li>返回步骤2</li></ol><p>该算法的最坏时间复杂度为：<span class="math inline">\(O(n^2 m)\)</span>，但大多数情况下都是挺快的</p><h5 id="当前弧优化">当前弧优化</h5><p>每一次在做dfs时，对于一个点，有可能有一些边在之前已经计算过了，那我们在遍历这个点的边的时候，就没必要再计算那些已经计算过的边。因此，我们可以用一个cur[]数组记录某个点已经计算到了那条边。</p><h5 id="代码">代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> head[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cur[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> to;<span class="type">int</span> next;</span><br><span class="line">    <span class="type">int</span> wei;</span><br><span class="line">&#125;;</span><br><span class="line">edge es[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;<span class="built_in">mst</span>(head,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">mst</span>(dep,<span class="number">-1</span>);<span class="built_in">mst</span>(cur,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[cnt].to=v;</span><br><span class="line">    es[cnt].wei=wei;</span><br><span class="line">    es[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(u,v,wei);</span><br><span class="line">    <span class="built_in">add</span>(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="built_in">mst</span>(dep,<span class="number">-1</span>);dep[s]=<span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==<span class="number">-1</span>)&#123;</span><br><span class="line">                dep[es[i].to]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                que.<span class="built_in">push</span>(es[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> mini)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==t) <span class="keyword">return</span> mini;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[s];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==dep[s]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> d=<span class="built_in">dfs</span>(es[i].to,t,<span class="built_in">min</span>(es[i].wei,mini));</span><br><span class="line">            <span class="keyword">if</span>(d&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                es[i].wei-=d;</span><br><span class="line">                es[i^<span class="number">1</span>].wei+=d;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dinic</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;<span class="type">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>(s,t))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) cur[i]=head[i];</span><br><span class="line">        <span class="keyword">while</span>((tmp=<span class="built_in">dfs</span>(s,t,INF))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,s,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u,v,w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        <span class="built_in">add_edge</span>(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="built_in">Dinic</span>(s,t,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验板子">验板子</h5><p><a href="https://www.luogu.org/problem/P3376">P3376 【模板】网络最大流</a></p><h3 id="最大流最小割">最大流最小割</h3><h4 id="什么是割什么是最小割">什么是割?什么是最小割？</h4><p>所谓的割，指的是对于一个网络上的一个边集，如果从网络上将该边集中的边都删去后，不存在一条从源点到汇点的路，则该边集称为割。最小割指的就是边权和最小的割</p><h4 id="一个结论">一个结论</h4><center><strong>最小割 == 最大流</strong></center><p>我是这么理解这个结论的：因为割的意思是指拿掉割里面的边以后，就不能找到一条从源点到汇点的路了，也就是说割将网络的两个部分连接起来，拿掉之后网络就分成了两个部分。那我们是否可以将割集中的边合并成一条边呢？这样去理解的话就可以很容易得出这样一个结论：在满足最大流的情况下，这一条边的流量就是等于最大流。而又因为流量不能超过容量，故在满足最大流的情况下，任意一个割的容量和都是大于等于最大流的。在这个基础上，我们不断地去找容量和更小的割，最终一定能够找到一个割，他们的容量和等于最大流。为什么一定能找到呢？因为最大流意味着满流，意味着我们已经无法继续增广了。</p><h4 id="来道例题">来道例题</h4><p><a href="https://www.luogu.org/problem/P2774">P2774 方格取数</a></p><p>第一反应是贪心，隔一个数取一个什么的。但很容易就能举出反例。正确的做法是按照<span class="math inline">\((i+j)\)</span>（<span class="math inline">\(i,j\)</span>分别是行数和列数）的奇偶来连边构建一个二分图。对于一个方格，如果其所在行加上所在列<span class="math display">\[ row_{cur} + col_{cur}\]</span>为奇数，则将其与超级源点连一条容量为1的边；如果为偶数，则将其与超级汇点连一条容量为1的边。最后，对于左侧的奇数点，将它们与所有<strong>不符合限制的不能取的</strong>偶数点，即与它们相邻的那些点各连一条容量为INF的边。最后算一遍最小割，将所有方格的数的总和减去最小割即为答案。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug puts(<span class="string">&quot;debug&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> head[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cur[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> to;<span class="type">int</span> next;</span><br><span class="line">    <span class="type">int</span> wei;</span><br><span class="line">&#125;;</span><br><span class="line">edge es[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;<span class="built_in">mst</span>(head,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">mst</span>(dep,<span class="number">-1</span>);<span class="built_in">mst</span>(cur,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[cnt].to=v;</span><br><span class="line">    es[cnt].wei=wei;</span><br><span class="line">    es[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(u,v,wei);</span><br><span class="line">    <span class="built_in">add</span>(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="built_in">mst</span>(dep,<span class="number">-1</span>);dep[s]=<span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==<span class="number">-1</span>)&#123;</span><br><span class="line">                dep[es[i].to]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                que.<span class="built_in">push</span>(es[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> mini)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==t) <span class="keyword">return</span> mini;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[s];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==dep[s]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> d=<span class="built_in">dfs</span>(es[i].to,t,<span class="built_in">min</span>(es[i].wei,mini));</span><br><span class="line">            <span class="keyword">if</span>(d&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                es[i].wei-=d;</span><br><span class="line">                es[i^<span class="number">1</span>].wei+=d;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dinic</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;<span class="type">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>(s,t))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) cur[i]=head[i];</span><br><span class="line">        <span class="keyword">while</span>((tmp=<span class="built_in">dfs</span>(s,t,INF))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;mp[i][j]);</span><br><span class="line">            sum+=mp[i][j]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cntt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++,cntt++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i+j)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">add_edge</span>(<span class="number">0</span>,cntt,mp[i][j]);</span><br><span class="line">                <span class="keyword">if</span>(j&lt;m) </span><br><span class="line">                    <span class="built_in">add_edge</span>(cntt,cntt+<span class="number">1</span>,INF);</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">1</span>) </span><br><span class="line">                    <span class="built_in">add_edge</span>(cntt,cntt<span class="number">-1</span>,INF);</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">1</span>) </span><br><span class="line">                    <span class="built_in">add_edge</span>(cntt,cntt-m,INF);</span><br><span class="line">                <span class="keyword">if</span>(i&lt;n) </span><br><span class="line">                    <span class="built_in">add_edge</span>(cntt,cntt+m,INF);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">add_edge</span>(cntt,n*m+<span class="number">1</span>,mp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    debug;</span></span><br><span class="line">    <span class="type">int</span> ans=<span class="built_in">Dinic</span>(<span class="number">0</span>,n*m+<span class="number">1</span>,n*m*<span class="number">2</span>);</span><br><span class="line">    ans=sum-ans;    <span class="comment">//总和减去最小割</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这道题中我们可以看出，最小割可以解决这样的一类问题，在满足某些限制的情况下，计算可以获得的最大价值。在这种情况下，我们可以先假设所有价值都可取，然后将那些不满足情况的作为割删去，那么求最小割就等价于求最小损失。</p><h3 id="最大权闭合子图">最大权闭合子图</h3><h4 id="什么是最大权闭合子图">什么是最大权闭合子图？</h4><p>首先，闭合子图指的是对于一个图，我们从中选出一个子图，它的任意一个点的出度指向的点仍然在这个子图内。而最大权闭合子图指的就是所有闭合子图中点权和最大的那一个。</p><h4 id="如何求最大权闭合子图">如何求最大权闭合子图？</h4><p>有一个结论，对于一个图，满足</p><center><strong>最大权闭合子图权值=所有权值为正的权值总和-最大流</strong></center><p>证明不会......</p><p>如何得到这样的一个图呢？</p><ol type="1"><li>抽象出一个超级源点和一个超级汇点</li><li>将权值为正的点与源点连边，容量分别为各点点权</li><li>将权值为负的点与汇点连边，容量分别为各点点权的绝对值</li><li>权值为0的点不做处理</li><li>将除了源点和汇点之外的边按照题目中的关系连边，容量为INF</li></ol><h4 id="代码-1">代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> head[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cur[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> to;<span class="type">int</span> next;</span><br><span class="line">    <span class="type">int</span> wei;</span><br><span class="line">&#125;;</span><br><span class="line">edge es[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;<span class="built_in">mst</span>(head,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">mst</span>(dep,<span class="number">-1</span>);<span class="built_in">mst</span>(cur,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    es[cnt].to=v;</span><br><span class="line">    es[cnt].wei=wei;</span><br><span class="line">    es[cnt].next=head[u];</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> wei)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(u,v,wei);</span><br><span class="line">    <span class="built_in">add</span>(v,u,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="built_in">mst</span>(dep,<span class="number">-1</span>);dep[s]=<span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==<span class="number">-1</span>)&#123;</span><br><span class="line">                dep[es[i].to]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                que.<span class="built_in">push</span>(es[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> mini)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==t) <span class="keyword">return</span> mini;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> &amp;i=cur[s];i!=<span class="number">-1</span>;i=es[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(es[i].wei&gt;<span class="number">0</span>&amp;&amp;dep[es[i].to]==dep[s]+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> d=<span class="built_in">dfs</span>(es[i].to,t,<span class="built_in">min</span>(es[i].wei,mini));</span><br><span class="line">            <span class="keyword">if</span>(d&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                es[i].wei-=d;</span><br><span class="line">                es[i^<span class="number">1</span>].wei+=d;</span><br><span class="line">                <span class="keyword">return</span> d;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Dinic</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t,<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;<span class="type">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">bfs</span>(s,t))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++) cur[i]=head[i];</span><br><span class="line">        <span class="keyword">while</span>((tmp=<span class="built_in">dfs</span>(s,t,INF))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[maxn&lt;&lt;<span class="number">1</span>],b[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);        <span class="comment">//学生 </span></span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;        <span class="comment">//活动 </span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        sum+=a[i];</span><br><span class="line">        <span class="type">int</span> k;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">            <span class="type">int</span> v;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">            <span class="built_in">add_edge</span>(i,v+n,INF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">add_edge</span>(<span class="number">0</span>,i,a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">add_edge</span>(i+n,n+m+<span class="number">1</span>,b[i]);</span><br><span class="line">    <span class="type">int</span> ans=<span class="built_in">Dinic</span>(<span class="number">0</span>,n+m+<span class="number">1</span>,n+m+<span class="number">3</span>);</span><br><span class="line">    ans=sum-ans;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测一下板子">测一下板子</h4><p><a href="https://vjudge.net/problem/HihoCoder-1398">网络流五·最大权闭合子图</a></p><h3 id="参考博文">参考博文</h3><ul><li><a href="https://www.cnblogs.com/songorz/p/9642840.html">最大权闭合子图</a></li><li><a href="https://blog.csdn.net/qq_41357771/article/details/79416899">网络流【最大流&amp;&amp;最小割&amp;&amp;费用流】——一篇简单易懂的博文</a></li><li><a href="https://www.cnblogs.com/linzhengmin/p/9313216.html">[算法]网络最大流Dinic 前言</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H5f34d005235d4ae08a65080af36eb1b35.jpg&quot; /&gt;</summary>
    
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/categories/ACM/"/>
    
    <category term="图论" scheme="https://xtayex.gitee.io/categories/ACM/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="网络流" scheme="https://xtayex.gitee.io/categories/ACM/%E5%9B%BE%E8%AE%BA/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/tags/ACM/"/>
    
    <category term="网络流" scheme="https://xtayex.gitee.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="最大流" scheme="https://xtayex.gitee.io/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
    <category term="最大流最小割" scheme="https://xtayex.gitee.io/tags/%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2/"/>
    
    <category term="最大权闭合子图" scheme="https://xtayex.gitee.io/tags/%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>POJ2104 - Kth number 主席树or划分树模板</title>
    <link href="https://xtayex.gitee.io/2019/09/07/HDU2665-Kth-Number-%E4%B8%BB%E5%B8%AD%E6%A0%91or%E5%88%92%E5%88%86%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
    <id>https://xtayex.gitee.io/2019/09/07/HDU2665-Kth-Number-%E4%B8%BB%E5%B8%AD%E6%A0%91or%E5%88%92%E5%88%86%E6%A0%91%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-09-07T01:00:00.000Z</published>
    <updated>2022-09-27T13:46:55.099Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/He1712fd2c08f40a985b1ef436e9be051G.jpg" /></p><span id="more"></span><p><a href="http://poj.org/problem?id=2104">Kth number</a></p><p>模板题，题意是求区间第k大，套一下主席树模板或者划分树模板即可（屯板子）</p><p>代码如下：</p><p>主席树：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> rt[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> sum[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> ls[maxn&lt;&lt;<span class="number">5</span>],rs[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="type">int</span> p;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span>&amp; root)</span>        <span class="comment">//其实就是一个为各节点分配id的过程 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    root=++tot;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)    <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(lef,mid,ls[root]);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,rig,rs[root]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">update</span><span class="params">(<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> root)</span>        </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> root_=++tot;        <span class="comment">//建一棵新树 </span></span><br><span class="line">    ls[root_]=ls[root];</span><br><span class="line">    rs[root_]=rs[root];</span><br><span class="line">    sum[root_]=sum[root]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)    <span class="keyword">return</span> root_;</span><br><span class="line">    <span class="type">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(p&lt;=mid)&#123;</span><br><span class="line">        ls[root_]=<span class="built_in">update</span>(lef,mid,ls[root_]);        <span class="comment">//如果修改点在左儿子，就新建一个左儿子 </span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        rs[root_]=<span class="built_in">update</span>(mid+<span class="number">1</span>,rig,rs[root_]);        <span class="comment">//如果修改点在右儿子，就新建一个右儿子 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> x=sum[ls[v]]-sum[ls[u]];</span><br><span class="line">    <span class="keyword">if</span>(lef==rig)    <span class="keyword">return</span> lef;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=k)&#123;</span><br><span class="line">        ans=<span class="built_in">query</span>(ls[u],ls[v],lef,mid,k);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ans=<span class="built_in">query</span>(rs[u],rs[v],mid+<span class="number">1</span>,rig,k-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> arr[maxn];</span><br><span class="line"><span class="type">int</span> lisan[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    cin&gt;&gt;arr[i],lisan[i]=arr[i];</span><br><span class="line">    <span class="built_in">sort</span>(lisan+<span class="number">1</span>,lisan+<span class="number">1</span>+n);</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">unique</span>(lisan+<span class="number">1</span>,lisan+<span class="number">1</span>+n)-lisan<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,len,rt[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        p=<span class="built_in">lower_bound</span>(lisan+<span class="number">1</span>,lisan+<span class="number">1</span>+len,arr[i])-lisan;</span><br><span class="line">        rt[i]=<span class="built_in">update</span>(<span class="number">1</span>,len,rt[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> L,R,k;cin&gt;&gt;L&gt;&gt;R&gt;&gt;k;</span><br><span class="line">        ans=<span class="built_in">query</span>(rt[L<span class="number">-1</span>],rt[R],<span class="number">1</span>,len,k);</span><br><span class="line">        cout&lt;&lt;lisan[ans]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>划分树：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> tree[<span class="number">20</span>][maxn];</span><br><span class="line"><span class="type">int</span> to_lef[<span class="number">20</span>][maxn]; </span><br><span class="line"><span class="type">int</span> sorted[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> lev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef==rig) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=lef+(rig-lef)/<span class="number">2</span>; </span><br><span class="line">    <span class="type">int</span> sup=mid-lef+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=lef;i&lt;=rig;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[lev][i]&lt;sorted[mid])&#123;</span><br><span class="line">            sup--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sublef=lef;<span class="type">int</span> subrig=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=lef;i&lt;=rig;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==lef)&#123;</span><br><span class="line">            to_lef[lev][i]=<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            to_lef[lev][i]=to_lef[lev][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tree[lev][i]&lt;sorted[mid]||tree[lev][i]==sorted[mid]&amp;&amp;sup&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            tree[lev+<span class="number">1</span>][sublef++]=tree[lev][i];</span><br><span class="line">            to_lef[lev][i]++;</span><br><span class="line">            <span class="keyword">if</span>(tree[lev][i]==sorted[mid])    sup--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            tree[lev+<span class="number">1</span>][subrig++]=tree[lev][i]; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>(lef,mid,lev+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(mid+<span class="number">1</span>,rig,lev+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> lev,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> L,<span class="type">int</span> R,<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> mid=lef+(rig-lef)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L==R)    <span class="keyword">return</span> tree[lev][L];</span><br><span class="line">    <span class="type">int</span> lef_,tolef;</span><br><span class="line">    <span class="keyword">if</span>(L==lef)&#123;</span><br><span class="line">        lef_=<span class="number">0</span>;tolef=to_lef[lev][R];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        lef_=to_lef[lev][L<span class="number">-1</span>];</span><br><span class="line">        tolef=to_lef[lev][R]-lef_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=tolef)&#123;</span><br><span class="line">        <span class="type">int</span> tmp_lef=lef+lef_;</span><br><span class="line">        <span class="type">int</span> tmp_rig=lef+lef_+tolef<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(lev+<span class="number">1</span>,lef,mid,tmp_lef,tmp_rig,k);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp_lef=mid+L-lef-lef_+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> tmp_rig=mid+R-lef-lef_-tolef+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(lev+<span class="number">1</span>,mid+<span class="number">1</span>,rig,tmp_lef,tmp_rig,k-tolef);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;sorted[i]);</span><br><span class="line">        tree[<span class="number">0</span>][i]=sorted[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(sorted+<span class="number">1</span>,sorted+<span class="number">1</span>+n);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,k;<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">        <span class="type">int</span> ans=<span class="built_in">query</span>(<span class="number">0</span>,<span class="number">1</span>,n,x,y,k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/He1712fd2c08f40a985b1ef436e9be051G.jpg&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/categories/ACM/"/>
    
    <category term="数据结构" scheme="https://xtayex.gitee.io/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="主席树" scheme="https://xtayex.gitee.io/categories/ACM/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/tags/ACM/"/>
    
    <category term="数据结构" scheme="https://xtayex.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="主席树" scheme="https://xtayex.gitee.io/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
    <category term="划分树" scheme="https://xtayex.gitee.io/tags/%E5%88%92%E5%88%86%E6%A0%91/"/>
    
    <category term="屯板子" scheme="https://xtayex.gitee.io/tags/%E5%B1%AF%E6%9D%BF%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>HDU2222 &amp; HDU2896 - AC自动机模板</title>
    <link href="https://xtayex.gitee.io/2019/08/31/HDU2222-HDU2896-AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E6%A8%A1%E6%9D%BF/"/>
    <id>https://xtayex.gitee.io/2019/08/31/HDU2222-HDU2896-AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-08-31T01:21:00.000Z</published>
    <updated>2022-09-27T13:46:55.095Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H65722373b7674099b56790ec509eb5a8B.jpg" /></p><span id="more"></span><p>屯板子屯板子......</p><p><a href="https://cn.vjudge.net/problem/HDU-2222">HDU2222 - Keywords Search</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line">    <span class="type">int</span> next[<span class="number">500005</span>][<span class="number">26</span>];</span><br><span class="line">    <span class="type">int</span> fail[<span class="number">500005</span>];</span><br><span class="line">    <span class="type">int</span> ed[<span class="number">500005</span>];</span><br><span class="line">    <span class="type">int</span> rt,L;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            next[L][i]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ed[L]=<span class="number">0</span>;<span class="type">int</span> tmpL=L;L++;</span><br><span class="line">        <span class="keyword">return</span> tmpL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        L=<span class="number">0</span>;</span><br><span class="line">        rt=<span class="built_in">newnode</span>();</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())    que.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert_</span><span class="params">(string str)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cur=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="type">char</span> ch=str[i];</span><br><span class="line">            <span class="keyword">if</span>(next[cur][ch-<span class="string">&#x27;a&#x27;</span>]==<span class="number">-1</span>)&#123;</span><br><span class="line">                next[cur][ch-<span class="string">&#x27;a&#x27;</span>]=<span class="built_in">newnode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur=next[cur][ch-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        ed[cur]++;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fail[rt]=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next[rt][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">                next[rt][i]=rt;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fail[next[rt][i]]=rt;</span><br><span class="line">                que.<span class="built_in">push</span>(next[rt][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> u=que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(next[u][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">                    next[u][i]=next[fail[u]][i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    fail[next[u][i]]=next[fail[u]][i];</span><br><span class="line">                    que.<span class="built_in">push</span>(next[u][i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">queue</span><span class="params">(string str)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len=str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> now=rt;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            now=next[now][str[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="type">int</span> tmp=now;</span><br><span class="line">            <span class="keyword">while</span>(tmp!=rt)&#123;</span><br><span class="line">                ans+=ed[tmp];</span><br><span class="line">                ed[tmp]=<span class="number">0</span>;</span><br><span class="line">                tmp=fail[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;i = &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ed[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Trie acmaton;        <span class="comment">//内部有大数组，需要开全局变量 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;</span><br><span class="line">    <span class="type">int</span> t;cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">        acmaton.<span class="built_in">init</span>();</span><br><span class="line">        string tmps;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;tmps;acmaton.<span class="built_in">insert_</span>(tmps);</span><br><span class="line">        &#125;</span><br><span class="line">        acmaton.<span class="built_in">build</span>();</span><br><span class="line"><span class="comment">//        acmaton.show();</span></span><br><span class="line">        cin&gt;&gt;tmps;</span><br><span class="line">        <span class="type">int</span> ans=acmaton.<span class="built_in">queue</span>(tmps);</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://cn.vjudge.net/problem/HDU-2896">HDU2896 - 病毒侵袭</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mst(a,b) memset((a),(b),sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug printf(<span class="string">&quot;debug\n&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOS std::ios::sync_with_stdio(false)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ansvec;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line">    <span class="type">int</span> next[<span class="number">100005</span>][<span class="number">128</span>];</span><br><span class="line">    <span class="type">int</span> fail[<span class="number">100005</span>];</span><br><span class="line">    <span class="type">int</span> edstr[<span class="number">100005</span>];</span><br><span class="line">    <span class="type">int</span> rt,L;</span><br><span class="line">    <span class="type">int</span> scnt;    <span class="comment">//字符串数量 </span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">128</span>;i++)&#123;</span><br><span class="line">            next[L][i]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        edstr[L]=<span class="number">0</span>;<span class="type">int</span> tmpL=L;L++;</span><br><span class="line">        <span class="keyword">return</span> tmpL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        L=<span class="number">0</span>;scnt=<span class="number">0</span>;</span><br><span class="line">        rt=<span class="built_in">newnode</span>();</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())    que.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert_</span><span class="params">(<span class="type">char</span> str[])</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="type">int</span> cur=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="type">char</span> ch=str[i];</span><br><span class="line">            <span class="keyword">if</span>(next[cur][ch]==<span class="number">-1</span>)&#123;</span><br><span class="line">                next[cur][ch]=<span class="built_in">newnode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur=next[cur][ch];</span><br><span class="line">        &#125;</span><br><span class="line">        edstr[cur]=++scnt;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fail[rt]=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">128</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(next[rt][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">                next[rt][i]=rt;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fail[next[rt][i]]=rt;</span><br><span class="line">                que.<span class="built_in">push</span>(next[rt][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> u=que.<span class="built_in">front</span>();</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">128</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(next[u][i]==<span class="number">-1</span>)&#123;</span><br><span class="line">                    next[u][i]=next[fail[u]][i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    fail[next[u][i]]=next[fail[u]][i];</span><br><span class="line">                    que.<span class="built_in">push</span>(next[u][i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">char</span> str[])</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="type">int</span> now=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            now=next[now][str[i]];</span><br><span class="line">            <span class="type">int</span> tmp=now;</span><br><span class="line">            <span class="keyword">while</span>(tmp!=rt)&#123;</span><br><span class="line">                <span class="keyword">if</span>(edstr[tmp]!=<span class="number">0</span>)</span><br><span class="line">                    ansvec.<span class="built_in">push_back</span>(edstr[tmp]);</span><br><span class="line">                tmp=fail[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;i = &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; edstr[i] = &quot;</span>&lt;&lt;edstr[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Trie acmaton;        <span class="comment">//内部有大数组，需要开全局变量 </span></span><br><span class="line"><span class="type">char</span> cha[<span class="number">205</span>];</span><br><span class="line"><span class="type">char</span> web[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">        acmaton.<span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,cha);acmaton.<span class="built_in">insert_</span>(cha);</span><br><span class="line">        &#125;</span><br><span class="line">        acmaton.<span class="built_in">build</span>();</span><br><span class="line">        <span class="type">int</span> m;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">        <span class="type">int</span> webtot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            ansvec.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,web);</span><br><span class="line">    <span class="comment">//        printf(&quot;web: %s\n&quot;,web);</span></span><br><span class="line">            acmaton.<span class="built_in">query</span>(web);</span><br><span class="line">            <span class="type">int</span> cntt=ansvec.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//        debug;</span></span><br><span class="line">            <span class="keyword">if</span>(cntt&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">sort</span>(ansvec.<span class="built_in">begin</span>(),ansvec.<span class="built_in">end</span>());</span><br><span class="line">                webtot++;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;web %d: &quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">                <span class="type">int</span> sz=ansvec.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sz;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i==sz<span class="number">-1</span>)    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ansvec[i]);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ansvec[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//    cout&lt;&lt;&quot;total: &quot;&lt;&lt;webtot&lt;&lt;&quot;\n&quot;;//</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;total: %d\n&quot;</span>,webtot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/H65722373b7674099b56790ec509eb5a8B.jpg&quot; /&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/categories/ACM/"/>
    
    <category term="字符串" scheme="https://xtayex.gitee.io/categories/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="AC自动机" scheme="https://xtayex.gitee.io/categories/ACM/%E5%AD%97%E7%AC%A6%E4%B8%B2/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
    
    <category term="ACM" scheme="https://xtayex.gitee.io/tags/ACM/"/>
    
    <category term="AC自动机" scheme="https://xtayex.gitee.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018-2019算法学习总结</title>
    <url>/2019/11/25/2018%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a2779b4771de6898045c7578e02d2a4235b1f2d4acea5c866d417f689715a0a6">bc222d1b1305729f70b2ed8cb52da7f36b9c72240c71ae81b9f8ec63be1c5e838182444e1b19d7385d4d05442635c90a41d833ad31621c75ae753e6c38886085776bb69d8aba51109a40b8fda30c079edb943f57bf3009d08dff59a6929a995afa5abb4e7e6e59c69dc10424240805ac1c10aedf5a258ae4576270c947a63a3d264e86776097b4337a82e93cdeda758e0e42a889227bafc5b3c022c5deaf2f6b332e0aa54264cc1425621238077832c0eebb5a134c416be807345b2cbaba1c83b1f3ca374fa5a8e4737cf54ad7aeb72a0fc8b8314e114fcdd78d070c0021fe566797fe3d3d68de6b835ce02e85ecfc23dc6e998f2d8bebde4dbdccc281d1264490069104f8fc7023afb949e628be8f231c03c44a33d2d96cd37ae84866f5d26c0fe8ec061d8f5fd55e493be114c086ec5b59f9ccfb234f371a9114c542d88f1c80db946fbe3cfa119a2fdc7c54e769676788c41ba21e915fb1b8024e6bab125b690822695bf75e08c98f47f133206e8e197dc6f00b1c72ae16d4cdd505ae1557e761d97b6478f2a6f32197f1e3a072b8a8910497588c0de282b1b7f9f681272794f54506b094368b58d55a61db03f7f8f7624e628dd5bb3fa7489341b8f42c478875c99709024d305dc35b175170a980a0d758cd9e615e4ce2a7364a28ba4029b258378429c524d1944843ec5cb78e8b1268e3aea2a8e6acba4cde761c5d4af56113091bc87eb7995a16dbb6f72ae0874e26c27eb2193ac65aad01be42a5df593fe17a5d5525001416f001865a1cedde7059e3f51933ccbb6f656e66ee03f6f9137fabf501f25af698dc3e5c3d4a6f3f553223ed7aef3b079b313fcc92304af0ead4cb7ec4607b9b750908f5c40d4617dc88eb2102d76328dc24977f445f482e55c74bca809cdf5403cf07cac1a518a864f8b58f2fd8255ce3bcb9c4cbcfa913b0ce0f7a61f65d70ef9eb1109b722cfed4b8b87cb0a2d10358bc2eedb39466f9114c14d25344566c66adde76bb75c7329ff70fc1e4cf45f16e376f6b34134ad21af1f476a098c58cdc11b772ce73fa7f1b12314e4ddd80db5f04d11a5a2987b90fee9c2bbee198c8fd915cd6a95d6e77898cc2c76389ae3c841099a0994fa6c30729b642fe6161f6ff03c9f968b55b6bb32e6c18d9a2346c9cc879da21ec34969e3783d94279ac8031d723e167f53c84f692d4c9bfc9cf666204782b33b239057596dd11980b7baeac29c8b8bc732794afb60c38175b5dbda03d593d336cb98f0f754102bd05426728b77d83773ca5236749e3fc055554754dbe88d8cd0bb6619b1153f7b8fad3b93870797b20091a03bb41eee1261233cde30f78f2ea501a722224831a1df364154f3721580e6bd55fe0592521cc32e3dca8404a32698ef002604ea015275712677e263b6112525ed8133281de0d83629141a127372cd96890b515f34bc37b29031ef1f20d967d6b7365f123101f10ed0ca448ce403384b49c74986d5706cc3fab8f2376fcee025dbef9b051527fbd5bb096a95105afe68b612f703d415e0d19fa1df4b94349dc97aa44cc009f8946d7b1721b54c8e8b7ee8eee3b52b5c59a39cd287e0737ad2870e5162e2292ec0cb92e9dd41c9b393dfe594788f867433979207db20d2b574d3178a0b93afef9267ba71a1651976d64a2dba187fc0ae0c7880169e2eea2f27fbd17227090b87456458fe5cc6d350db3bed0600596fbefe01d20af2232a1590f058142b27abfce26d1f06b11931725ca424aae53245ad1a0287ea2d570140e0f34425d80b3b616888485e93e22c42fc65310431eb4d434247166006887579a614ec9e8cbf55d999c48f61533ecaeab73a433d490e390de155b680807cd7d88346033f477315e8ea647c8b0177a578e78ad050397ca82000491241a0574ee77c5484f26bc35f022ebd98ffcb6f71666fc2139a2f267c2498d2dcbb1c9a9b8dcbfc3c1061fd1658f94dbbf4c45fa86d531f20f6eba4bd32d0c36b1f05958e388a20edc2283bc336da5de8f56465f2fd64d5c1ae4477213868f53615a501a9d87843c450a23b7e863e360c555dd42fb3ced6e1c16fc107a16daf621656981eaaab3f54cce224bb7ad490baf2292a574b0033dde1f72896027312172324c2e32081e492ea8e260c0c79de3e9cec0ed321061f74eb997e32ccd2640d6d5adb039dbf4af33a6efef20462cf2cea2226f1a8898255c33585ce46b946c6fca465ea60e6cdd2cecc23fa185834ce4e4e8de944a3d4d21327c4717ac98e086243627c397f1f0190b90803efc48565a203be7cb4b694461375b62f14277c3400711a24700cd22e1b3afdd21e1f63bef8e9c478cbc92c61aa70ba91435902e69370aee9004e137ef0a571204ce7b68f4806e49d1442b57116e8103a96d0d9530c8d4856129d2581237b1f1ac8d0b477f0a951c7963db84dc73b1082d2a9aa7d4f410c0374358d11b36a8d666b5f4a92eea5d0ba512efdc3b01c24dc84356625415929a87cd90a4eea88c2acf7bc881290278afd709272d8fbcde0027b131e65035fdaa6d98c3e8c1b1d3c84124e8f226575aefd86f9edbcdb859b81f953d35d5d152ece43e15ad4f3971450d9dd4e1271f49094bb9bd69bab2cf390cd5532f6bc7d0310d1a5db2a7cf27d33a853625cddd5ca739a8b3d44103b3b57b4ca8de5677f987cc62793e079f1c96a599ee54f9a80029561a1f18117e999bb1901d1712e0365217cb0f408eb20e001e8ab2cd293de9101fa4dabf6b2dbbc3074ca6d6fe515451d625263e7dddbc0ead14792b48e2c8a95fcb9e9adbbd5508a8cc6d2562cd4e66c2666859bcd20f60027072979a79dc2c25f4cf5775c304494c0566c08818f966d531f28be1307f0751013ba70d79ee7dfdfb19dc282936dbc9d81f5ec5ef735bcc0dbb5093603af3293385f3496ab3e7a9cb7000781049ffade79f64c0e03716278ad3db37b0b511683acb7566d04a46f4802c4bc578a3d96791b100f9a53f490d424d06fd8d4a024f992d1f0d357204d86b3e4bd4810bf85b0454494be17da528b22a43a5835cad5f1cde0a5bb58ecfe6fcd289f56487aa343efcc97a7c884bcefd5a231ce58e1dfd7cdcca1ef6cb2e3e97a8ce5bbede7a050b8b6ffb60fc4be411d25191663deba446e3df30d113badd4e9139350bde897321eadf2a11d743b560abaf12bbba002fce72a3fc0b361242edcd72da0e4f62f941b7b2f778d9d86a9dbfd3a371918795e2686f49fc1c3a43b6617172ded220a6f56465e3fcfc0cddeeaca33e25dde700eb4708215688caf23180a7213234a6ce413179798720690a0387ce27f9bff15bf656158cdd102505c4331ba423586cbc73a5128c333be6f63c0aa78b8ed0c07a2a86f4d398b68bba67445d7c1e5eb7d55a2f96fed8969398266b95f6e1f656ba14887649f1d256e8ed04c562463507b5704c2430c828b02777625caeda04ee3a655ff13adcc2ab82bde0855ad1d5cebee865122d06975fd4b6875ca14d7ea138f2e995a324f8d549dce9911c7b68b3c4f34980c8e00f19075a98f17dbe66d87f1d9219e63a0364e54d53f938f4879b846e52aaaaa9f0b3be701116956989b5af61cdcee9c7492cb89a829d63617974abbec352e41034a5a9109a5f5080c04265af9bd253e694f15024342355f98eee9133a5b650e32aa7df5c868d41d7f143cf8e77201ecdd836879f004543b5f4c56e7c0c7403cf3b86146b1664df172cd8cfb93daef46038d463cadb7c9466f6a41a75d43ae43e8f08bea7de4f25021d0e5f155875f4a77b9d1ecd7a860644f65eb5acad673c6711f000c38614456fce48e851797a7c89af2a0a403c53c401fc4d61d6e3ad5cff310b6b70c1e8cb8fc19bef7aee786d4380251dd3b0fef1592eb38b9eaa32ac64da28c91caa647e48c5d0cdbdab293759b29aa6bc2e7a8e2e84b90736144f0612bceb3b1d9bbc56ddfc781c8ca80231c5151a3a14f4c706c2e7c624fa752bcb2cd7736afaf62c85c9f80080ada4d390eb20d6d7bdd560f2f98fb4c365b9cd20df301c6b739e1c23c250c66f05195e077b67b93458ac0bfd6e4855ea970c9d31955bba13e262c8a0e480eadeffab9491ed455afd70f59cbd32753219a6293e8019f6eea7e71abba6804d709d0933eb11f8e57f7a3812473082910e84278ee40a5c32d050c82b13906f31437bad7007139c659d1f26283e89412ff66b5e353247af5ff701979bfe2a45b1a15c734c3eed8cb8622a5a87aa8aaf925e9d0a0575dc7c519bd998580c4e60b5984cd3ddb17654978a2c9ab50c0d738015fa7cce617452a169ee07d1e02af1f834f78658ce014b9e412798d621ca1621af729ebbb59838f09e4835a1c15121dde5a1e65484196e5f0ad5ebf816582478a43eabdb31728edbb5f1328c0f1d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>ACM</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2019GDCPC-赛后记录</title>
    <url>/2019/05/18/2019GDCPC%E6%84%9F%E6%83%B3/</url>
    <content><![CDATA[<p>没有封面图，因为我懒hhhh <span id="more"></span></p>
<p>省赛结束已经有一周的时间了，虽然一直想要写点什么记录一下，但是这周都是在处理各种DDL，所以就拖到了现在OTZ</p>
<p>这是本蒟蒻的第一次省赛，也是第一次外出参加现场赛。具体体验嘛，emmmmmm，虽然赛前bl一直说要拿金牌最后却只拿了个铜这一点让我稍微有点失望，而且实际比赛时的体验也不怎么样（云桌面的锅！），但总体来说还是感觉良好的，<del>至少没打铁</del>。而且还见到了校长（还是这么小😂），在中大逛了一波。作为一个蒟蒻，其实还是挺好的。</p>
<p>具体说一说比赛时的过程。拿到题目后，我和bl师兄还有灿佬一起看题，然后一眼就看到了E和L，并且发现E题和之前周训做过的一道题很像。于是我们就把题目交给bl师兄，然后继续找签到题，在找题的过程中，bl师兄把E和L都给过了。值得一提的是，在bl还在敲E题的时候，华工的一支队伍就把E给A了，当时只过了三分钟......(dltql!(破音))。然后后来又找到了一个J，题意就是给你几张麻将牌，让你判断可不可以组成十三幺或者九连宝灯(不会打麻将的我一开始连题目都看不懂OTZ)。然后灿佬就去敲这道题了，并很快AC...<del>直到这时除了读题我还是没干什么事</del>。</p>
<p>把麻将题过了之后，bl开始敲C。然后就是持续三小时的debug......还好灿佬在中途去A了一道B，不然我们就要打铁了OTZ。</p>
<p>所以说，从这次省赛我得到了两个结论：</p>
<ul>
<li>灿哥nb！</li>
<li>师兄nb！</li>
<li>我太菜了！（读题选手+敲模板选手）</li>
</ul>
]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>2020杭电多校第六场 I题</title>
    <url>/2020/08/07/2020%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E7%AC%AC%E5%85%AD%E5%9C%BA-I%E9%A2%98/</url>
    <content><![CDATA[<p><span style="color: grey;">没有封面图</span> <span id="more"></span></p>
<p>题意：对于给定的<span class="math display">\[b\]</span>进制数<span class="math display">\[y\]</span>，定义<span class="math display">\[f(y)\]</span>表示其<span class="math display">\[y\]</span>在<span class="math display">\[b\]</span>进制下的数位和。现在有这样的一个命题：对于任意的<span class="math display">\[b\]</span>进制数<span class="math display">\[y\]</span>和给定的<span class="math display">\[b\]</span>进制数<span class="math display">\[x\]</span>，如果<span class="math display">\[f(y)\]</span>整除<span class="math display">\[x\]</span>，则<span class="math display">\[y\]</span>也整除<span class="math display">\[x\]</span>。判断给定<span class="math display">\[b\]</span>和<span class="math display">\[x\]</span>下命题正确性。</p>
<p>思路：结论是，当<span class="math display">\[b\equiv 1 \pmod x\]</span>时，命题成立。原因在于，对于<span class="math display">\[b\]</span>进制的数<span class="math display">\[y\]</span>，可以将其表示为<span class="math display">\[y=c_0*b^0+c_1*b^1+c_2*b^2+\dots+c_{n-2}*b^{n-2}+c_{n-1}*b^{n-1}\]</span>。可以发现，如果<span class="math display">\[b\equiv 1\pmod x\]</span>，那么由于有<span class="math display">\[A\equiv B \pmod p\Leftrightarrow f(A)\equiv f(B)\pmod x\]</span>，所以，在这种情况下，有 <span class="math display">\[
\begin{equation}
c_0*b^0+c_1*b^1+c_2*b^2+\dots+c_{n-2}*b^{n-2}+c_{n-1}*b^{n-1}\equiv c_0+c_1+c_2+\dots+c_{n-2}+c_{n-1}\pmod x
\end{equation}
\]</span></p>
<p><span class="math display">\[c_0+c_1+c_2+\dots+c_{n-2}+c_{n-1}\]</span>就是题目中的<span class="math display">\[f(y)\]</span>。所以，结论成立。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,<span class="pp"> </span>b)<span class="pp"> </span>memset((a),<span class="pp"> </span>(b),<span class="pp"> </span><span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define lson </span>lef,<span class="pp"> </span>mid,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define rson </span>mid<span class="pp"> </span>+<span class="pp"> </span><span class="dv">1</span>,<span class="pp"> </span>rig,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span><span class="pp"> </span>|<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn = <span class="fl">1e5</span> + <span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-24" title="24">{</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> T;</a>
<a class="sourceLine" id="cb1-26" title="26">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>, &amp;T);</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">while</span> (T--) {</a>
<a class="sourceLine" id="cb1-28" title="28">        ll b, x;</a>
<a class="sourceLine" id="cb1-29" title="29">        scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st">"</span>, &amp;b, &amp;x);</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="cf">if</span> (b &lt; x) {</a>
<a class="sourceLine" id="cb1-31" title="31">            puts(<span class="st">"F"</span>);</a>
<a class="sourceLine" id="cb1-32" title="32">        } <span class="cf">else</span> {</a>
<a class="sourceLine" id="cb1-33" title="33">            <span class="cf">if</span> (b % x == <span class="dv">1</span><span class="bu">LL</span>)</a>
<a class="sourceLine" id="cb1-34" title="34">                puts(<span class="st">"T"</span>);</a>
<a class="sourceLine" id="cb1-35" title="35">            <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-36" title="36">                puts(<span class="st">"F"</span>);</a>
<a class="sourceLine" id="cb1-37" title="37">        }</a>
<a class="sourceLine" id="cb1-38" title="38">    }</a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-40" title="40">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>思维</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>思维</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客多校第一场</title>
    <url>/2020/07/16/2020%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%80%E5%9C%BA/</url>
    <content><![CDATA[<p><img src="https://pic.downk.cc/item/5f105fed14195aa594b51c3b.jpg"> <span id="more"></span></p>
<h3 id="a">A</h3>
<p>令<span class="math display">\[C_i=\min_{j&gt;i,s_j=s_i}\{j-i\}\]</span>，则题目中所说的B-Suffix Array等价于<span class="math inline">\(C_1,C_2,C_3,...，C_n\)</span>。因此，只需要求出<span class="math inline">\(C\)</span>后，对<span class="math inline">\(C\)</span>算一下后缀数组即可。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,<span class="pp"> </span>b)<span class="pp"> </span>memset((a),<span class="pp"> </span>(b),<span class="pp"> </span><span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define lson </span>lef,<span class="pp"> </span>mid,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define rson </span>mid<span class="pp"> </span>+<span class="pp"> </span><span class="dv">1</span>,<span class="pp"> </span>rig,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span><span class="pp"> </span>|<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn = <span class="fl">1e5</span> + <span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> wa[maxn], wb[maxn], wv[maxn], wss[maxn], rak[maxn], height[maxn], cal[maxn], n, sa[maxn &lt;&lt; <span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">char</span> s[maxn];</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">int</span> cmp(<span class="dt">int</span>* r, <span class="dt">int</span> a, <span class="dt">int</span> b, <span class="dt">int</span> l)</a>
<a class="sourceLine" id="cb1-26" title="26">{</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">return</span> r[a] == r[b] &amp;&amp; r[a + l] == r[b + l];</a>
<a class="sourceLine" id="cb1-28" title="28">}</a>
<a class="sourceLine" id="cb1-29" title="29"><span class="dt">void</span> da(<span class="dt">int</span>* r, <span class="dt">int</span>* sa, <span class="dt">int</span> n, <span class="dt">int</span> M)</a>
<a class="sourceLine" id="cb1-30" title="30">{</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="dt">int</span> i, j, p, *x = wa, *y = wb, *t;</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="cf">for</span> (i = <span class="dv">0</span>; i &lt; M; i++)</a>
<a class="sourceLine" id="cb1-33" title="33">        wss[i] = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">    <span class="cf">for</span> (i = <span class="dv">0</span>; i &lt; n; i++)</a>
<a class="sourceLine" id="cb1-35" title="35">        wss[x[i] = r[i]]++;</a>
<a class="sourceLine" id="cb1-36" title="36">    <span class="cf">for</span> (i = <span class="dv">1</span>; i &lt; M; i++)</a>
<a class="sourceLine" id="cb1-37" title="37">        wss[i] += wss[i - <span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="cf">for</span> (i = n - <span class="dv">1</span>; i &gt;= <span class="dv">0</span>; i--)</a>
<a class="sourceLine" id="cb1-39" title="39">        sa[--wss[x[i]]] = i;</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">for</span> (j = <span class="dv">1</span>, p = <span class="dv">1</span>; p &lt; n; j &lt;&lt;= <span class="dv">1</span>, M = p) {</a>
<a class="sourceLine" id="cb1-41" title="41">        <span class="cf">for</span> (p = <span class="dv">0</span>, i = n - j; i &lt; n; i++)</a>
<a class="sourceLine" id="cb1-42" title="42">            y[p++] = i;</a>
<a class="sourceLine" id="cb1-43" title="43">        <span class="cf">for</span> (i = <span class="dv">0</span>; i &lt; n; i++)</a>
<a class="sourceLine" id="cb1-44" title="44">            <span class="cf">if</span> (sa[i] &gt;= j)</a>
<a class="sourceLine" id="cb1-45" title="45">                y[p++] = sa[i] - j;</a>
<a class="sourceLine" id="cb1-46" title="46">        <span class="cf">for</span> (i = <span class="dv">0</span>; i &lt; n; i++)</a>
<a class="sourceLine" id="cb1-47" title="47">            wv[i] = x[y[i]];</a>
<a class="sourceLine" id="cb1-48" title="48">        <span class="cf">for</span> (i = <span class="dv">0</span>; i &lt; M; i++)</a>
<a class="sourceLine" id="cb1-49" title="49">            wss[i] = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-50" title="50">        <span class="cf">for</span> (i = <span class="dv">0</span>; i &lt; n; i++)</a>
<a class="sourceLine" id="cb1-51" title="51">            wss[wv[i]]++;</a>
<a class="sourceLine" id="cb1-52" title="52">        <span class="cf">for</span> (i = <span class="dv">1</span>; i &lt; M; i++)</a>
<a class="sourceLine" id="cb1-53" title="53">            wss[i] += wss[i - <span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-54" title="54">        <span class="cf">for</span> (i = n - <span class="dv">1</span>; i &gt;= <span class="dv">0</span>; i--)</a>
<a class="sourceLine" id="cb1-55" title="55">            sa[--wss[wv[i]]] = y[i];</a>
<a class="sourceLine" id="cb1-56" title="56">        <span class="cf">for</span> (t = x, x = y, y = t, p = <span class="dv">1</span>, x[sa[<span class="dv">0</span>]] = <span class="dv">0</span>, i = <span class="dv">1</span>; i &lt; n; i++)</a>
<a class="sourceLine" id="cb1-57" title="57">            x[sa[i]] = cmp(y, sa[i - <span class="dv">1</span>], sa[i], j) ? p - <span class="dv">1</span> : p++;</a>
<a class="sourceLine" id="cb1-58" title="58">    }</a>
<a class="sourceLine" id="cb1-59" title="59">    <span class="cf">return</span>;</a>
<a class="sourceLine" id="cb1-60" title="60">}</a>
<a class="sourceLine" id="cb1-61" title="61"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-62" title="62">{</a>
<a class="sourceLine" id="cb1-63" title="63">    <span class="co">//freopen("./A.in", "r", stdin);</span></a>
<a class="sourceLine" id="cb1-64" title="64">    <span class="cf">while</span> (scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>, &amp;n) != EOF) {</a>
<a class="sourceLine" id="cb1-65" title="65">        fill(cal, cal + maxn, <span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-66" title="66">        scanf(<span class="st">"</span><span class="sc">%s</span><span class="st">"</span>, s + <span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-67" title="67">        <span class="dt">int</span> pre[<span class="dv">2</span>] = { n + <span class="dv">1</span>, n + <span class="dv">1</span> };</a>
<a class="sourceLine" id="cb1-68" title="68">        <span class="cf">for</span> (<span class="dt">int</span> i = n; i &gt;= <span class="dv">1</span>; i--) {</a>
<a class="sourceLine" id="cb1-69" title="69">            <span class="cf">if</span> (pre[s[i] - <span class="ch">'a'</span>] == n + <span class="dv">1</span>) {</a>
<a class="sourceLine" id="cb1-70" title="70">                cal[i] = n;</a>
<a class="sourceLine" id="cb1-71" title="71">            } <span class="cf">else</span> {</a>
<a class="sourceLine" id="cb1-72" title="72">                cal[i] = pre[s[i] - <span class="ch">'a'</span>] - i;</a>
<a class="sourceLine" id="cb1-73" title="73">            }</a>
<a class="sourceLine" id="cb1-74" title="74">            pre[s[i] - <span class="ch">'a'</span>] = i;</a>
<a class="sourceLine" id="cb1-75" title="75">        }</a>
<a class="sourceLine" id="cb1-76" title="76">        cal[n + <span class="dv">1</span>] = n + <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-77" title="77">        <span class="co">//puts("cal: ");</span></a>
<a class="sourceLine" id="cb1-78" title="78">        <span class="co">//for (int i = 1; i &lt;= n + 1; i++) {</span></a>
<a class="sourceLine" id="cb1-79" title="79">        <span class="co">//  printf("%d ",cal[i]);</span></a>
<a class="sourceLine" id="cb1-80" title="80">        <span class="co">//}</span></a>
<a class="sourceLine" id="cb1-81" title="81">        <span class="co">//puts("");</span></a>
<a class="sourceLine" id="cb1-82" title="82">        <span class="co">//puts("----------------------");</span></a>
<a class="sourceLine" id="cb1-83" title="83"></a>
<a class="sourceLine" id="cb1-84" title="84">        da(cal + <span class="dv">1</span>, sa, n + <span class="dv">2</span>, n + <span class="dv">2</span>);</a>
<a class="sourceLine" id="cb1-85" title="85">        <span class="cf">for</span> (<span class="dt">int</span> i = n; i &gt;= <span class="dv">1</span>; i--) {</a>
<a class="sourceLine" id="cb1-86" title="86">            printf(<span class="st">"</span><span class="sc">%d%c</span><span class="st">"</span>, sa[i] + <span class="dv">1</span>, i == <span class="dv">1</span> ? <span class="ch">'</span><span class="sc">\n</span><span class="ch">'</span> : <span class="ch">' '</span>);</a>
<a class="sourceLine" id="cb1-87" title="87">        }</a>
<a class="sourceLine" id="cb1-88" title="88">    }</a>
<a class="sourceLine" id="cb1-89" title="89">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-90" title="90">}</a></code></pre></div>
<p>这道题<span class="math inline">\(n\)</span>的值一定要是<span class="math inline">\(n+2\)</span>，<span class="math inline">\(m\)</span>的值一定也要是<span class="math inline">\(n+2\)</span>！否则不是RE就是WA！</p>
<h3 id="b">B</h3>
<p>待补</p>
<h3 id="c">C</h3>
<p>待补</p>
<h3 id="d">D</h3>
<p>待补</p>
<h3 id="e">E</h3>
<p>待补</p>
<h3 id="f">F</h3>
<p>假设两个字符串<span class="math inline">\(a,b\)</span>是同一个字符串的循环节，然后在<span class="math inline">\(2\times max(len(a),len(b))\)</span>的范围内比较即可。如果发现没有不相等的字符，则说明两个无穷字符串是同一个字符串，也就是相等。否则，如果<span class="math inline">\(a_i&lt;b_i\)</span>，则<span class="math inline">\(a&lt;b\)</span>；大于的情况同理。这道题的比较范围比较玄学，是猜出来的，但根据题解，范围只需要到<span class="math inline">\(len(a)+len(b)-gcd(len(a),len(b))\)</span>即可。但目前没想明白为什么。。。等一波详细题解。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#define mst</span>(a,<span class="pp"> </span>b)<span class="pp"> </span>memset((a),<span class="pp"> </span>(b),<span class="pp"> </span><span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-17" title="17"><span class="pp">#define lson </span>lef,<span class="pp"> </span>mid,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="pp">#define rson </span>mid<span class="pp"> </span>+<span class="pp"> </span><span class="dv">1</span>,<span class="pp"> </span>rig,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span><span class="pp"> </span>|<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb2-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn = <span class="fl">1e5</span> + <span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-23" title="23"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-24" title="24">{</a>
<a class="sourceLine" id="cb2-25" title="25">    string sa, sb;</a>
<a class="sourceLine" id="cb2-26" title="26">    <span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-27" title="27">    <span class="cf">while</span> (cin &gt;&gt; sa &gt;&gt; sb) {</a>
<a class="sourceLine" id="cb2-28" title="28">        <span class="dt">int</span> lena = sa.size();</a>
<a class="sourceLine" id="cb2-29" title="29">        <span class="dt">int</span> lenb = sb.size();</a>
<a class="sourceLine" id="cb2-30" title="30">        <span class="dt">int</span> bnd = <span class="dv">2</span> * max(lena, lenb);</a>
<a class="sourceLine" id="cb2-31" title="31">        <span class="dt">int</span> ans = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-32" title="32">        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; bnd; i++) {</a>
<a class="sourceLine" id="cb2-33" title="33">            <span class="cf">if</span> (sa[i % lena] &lt; sb[i % lenb]) {</a>
<a class="sourceLine" id="cb2-34" title="34">                ans = <span class="dv">1</span>; <span class="co">// &lt;</span></a>
<a class="sourceLine" id="cb2-35" title="35">                <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb2-36" title="36">            } <span class="cf">else</span> <span class="cf">if</span> (sa[i % lena] &gt; sb[i % lenb]) {</a>
<a class="sourceLine" id="cb2-37" title="37">                ans = <span class="dv">2</span>; <span class="co">// &gt;</span></a>
<a class="sourceLine" id="cb2-38" title="38">                <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb2-39" title="39">            }</a>
<a class="sourceLine" id="cb2-40" title="40">        }</a>
<a class="sourceLine" id="cb2-41" title="41">        cout &lt;&lt; <span class="st">"=&lt;&gt;"</span>[ans] &lt;&lt; <span class="st">"</span><span class="sc">\n</span><span class="st">"</span>;</a>
<a class="sourceLine" id="cb2-42" title="42">    }</a>
<a class="sourceLine" id="cb2-43" title="43">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-44" title="44">}</a></code></pre></div>
<h3 id="g">G</h3>
<p>待补</p>
<h3 id="h">H</h3>
<p>题意是说，给定一个<span class="math inline">\(n\)</span>个点<span class="math inline">\(m\)</span>条边的流网络，有<span class="math inline">\(q\)</span>次询问，第<span class="math inline">\(i\)</span>次询问会把图上所有边的容量都设为<span class="math inline">\(\frac{u_i}{v_i}\)</span>，查询当前情况下，从点1发送一个单位的流到点<span class="math inline">\(n\)</span>的最小花费是多少。</p>
<p>为了方便处理，将所有边的容量都乘以<span class="math inline">\(\frac{v_i}{u_i}\)</span>，使其变成1；原本发送一个单位的流，现在变成发送<span class="math inline">\(\frac{v_i}{u_i}\)</span>个单位的流（实际上就相当于定义了一个新单位，该单位和原单位的进率是<span class="math inline">\(\frac{v_i}{u_i}\)</span>）。然后在算最大流的时候，再记录下不同流量下的最小花费。</p>
<p>而NaN的情况有两种：</p>
<ul>
<li><span class="math inline">\(u=0\)</span>（不考虑这种情况会有除零错误）</li>
<li><span class="math inline">\(v/u&gt;\)</span>最大流（非整除）</li>
</ul>
<p>最后，注意一下处理最终答案的方法（代码165行）</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#define mst</span>(a,<span class="pp"> </span>b)<span class="pp"> </span>memset((a),<span class="pp"> </span>(b),<span class="pp"> </span><span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-17" title="17"><span class="pp">#define lson </span>lef,<span class="pp"> </span>mid,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb3-18" title="18"><span class="pp">#define rson </span>mid<span class="pp"> </span>+<span class="pp"> </span><span class="dv">1</span>,<span class="pp"> </span>rig,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span><span class="pp"> </span>|<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb3-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn = <span class="dv">100</span> + <span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-20" title="20"><span class="at">const</span> <span class="dt">int</span> maxm = <span class="dv">200</span> + <span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-22" title="22"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-23" title="23"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-24" title="24"><span class="kw">struct</span> edge {</a>
<a class="sourceLine" id="cb3-25" title="25">    <span class="dt">int</span> to;</a>
<a class="sourceLine" id="cb3-26" title="26">    <span class="dt">int</span> nxt;</a>
<a class="sourceLine" id="cb3-27" title="27">    <span class="dt">int</span> cap;</a>
<a class="sourceLine" id="cb3-28" title="28">    <span class="dt">int</span> flow;</a>
<a class="sourceLine" id="cb3-29" title="29">    <span class="dt">int</span> cost;</a>
<a class="sourceLine" id="cb3-30" title="30">} es[maxm];</a>
<a class="sourceLine" id="cb3-31" title="31"><span class="dt">int</span> head[maxn];</a>
<a class="sourceLine" id="cb3-32" title="32"><span class="dt">int</span> tol;</a>
<a class="sourceLine" id="cb3-33" title="33"><span class="dt">int</span> pre[maxn], dis[maxn];</a>
<a class="sourceLine" id="cb3-34" title="34"><span class="dt">bool</span> vis[maxn];</a>
<a class="sourceLine" id="cb3-35" title="35">ll ansarr[maxm];</a>
<a class="sourceLine" id="cb3-36" title="36"><span class="dt">int</span> N; <span class="co">// 节点总个数, 节点从0~N-1</span></a>
<a class="sourceLine" id="cb3-37" title="37"><span class="dt">int</span> M;</a>
<a class="sourceLine" id="cb3-38" title="38"><span class="kw">inline</span> <span class="dt">void</span> init(<span class="dt">int</span> n)</a>
<a class="sourceLine" id="cb3-39" title="39">{</a>
<a class="sourceLine" id="cb3-40" title="40">    N = n;</a>
<a class="sourceLine" id="cb3-41" title="41">    tol = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-42" title="42">    mst(head, -<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-43" title="43">}</a>
<a class="sourceLine" id="cb3-44" title="44"><span class="kw">inline</span> <span class="dt">void</span> addedge(<span class="dt">int</span> u, <span class="dt">int</span> v, <span class="dt">int</span> cap, <span class="dt">int</span> cost)</a>
<a class="sourceLine" id="cb3-45" title="45">{</a>
<a class="sourceLine" id="cb3-46" title="46">    es[tol].to = v;</a>
<a class="sourceLine" id="cb3-47" title="47">    es[tol].cap = cap;</a>
<a class="sourceLine" id="cb3-48" title="48">    es[tol].cost = cost;</a>
<a class="sourceLine" id="cb3-49" title="49">    es[tol].flow = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-50" title="50">    es[tol].nxt = head[u];</a>
<a class="sourceLine" id="cb3-51" title="51">    head[u] = tol++;</a>
<a class="sourceLine" id="cb3-52" title="52"></a>
<a class="sourceLine" id="cb3-53" title="53">    es[tol].to = u;</a>
<a class="sourceLine" id="cb3-54" title="54">    es[tol].cap = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-55" title="55">    es[tol].cost = -cost;</a>
<a class="sourceLine" id="cb3-56" title="56">    es[tol].flow = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-57" title="57">    es[tol].nxt = head[v];</a>
<a class="sourceLine" id="cb3-58" title="58">    head[v] = tol++;</a>
<a class="sourceLine" id="cb3-59" title="59">}</a>
<a class="sourceLine" id="cb3-60" title="60"><span class="dt">bool</span> spfa(<span class="dt">int</span> s, <span class="dt">int</span> t)</a>
<a class="sourceLine" id="cb3-61" title="61">{</a>
<a class="sourceLine" id="cb3-62" title="62">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb3-63" title="63">    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; N; i++) {</a>
<a class="sourceLine" id="cb3-64" title="64">        dis[i] = INF;</a>
<a class="sourceLine" id="cb3-65" title="65">        vis[i] = <span class="kw">false</span>;</a>
<a class="sourceLine" id="cb3-66" title="66">        pre[i] = -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-67" title="67">    }</a>
<a class="sourceLine" id="cb3-68" title="68">    dis[s] = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-69" title="69">    vis[s] = <span class="kw">true</span>;</a>
<a class="sourceLine" id="cb3-70" title="70">    que.push(s);</a>
<a class="sourceLine" id="cb3-71" title="71">    <span class="cf">while</span> (!que.empty()) {</a>
<a class="sourceLine" id="cb3-72" title="72">        <span class="dt">int</span> u = que.front();</a>
<a class="sourceLine" id="cb3-73" title="73">        que.pop();</a>
<a class="sourceLine" id="cb3-74" title="74">        vis[u] = <span class="kw">false</span>;</a>
<a class="sourceLine" id="cb3-75" title="75">        <span class="cf">for</span> (<span class="dt">int</span> i = head[u]; i != -<span class="dv">1</span>; i = es[i].nxt) {</a>
<a class="sourceLine" id="cb3-76" title="76">            <span class="dt">int</span> v = es[i].to;</a>
<a class="sourceLine" id="cb3-77" title="77">            <span class="cf">if</span> (es[i].cap &gt; es[i].flow &amp;&amp; dis[v] &gt; dis[u] + es[i].cost) {</a>
<a class="sourceLine" id="cb3-78" title="78">                dis[v] = dis[u] + es[i].cost;</a>
<a class="sourceLine" id="cb3-79" title="79">                pre[v] = i;</a>
<a class="sourceLine" id="cb3-80" title="80">                <span class="cf">if</span> (!vis[v]) {</a>
<a class="sourceLine" id="cb3-81" title="81">                    vis[v] = <span class="kw">true</span>;</a>
<a class="sourceLine" id="cb3-82" title="82">                    que.push(v);</a>
<a class="sourceLine" id="cb3-83" title="83">                }</a>
<a class="sourceLine" id="cb3-84" title="84">            }</a>
<a class="sourceLine" id="cb3-85" title="85">        }</a>
<a class="sourceLine" id="cb3-86" title="86">    }</a>
<a class="sourceLine" id="cb3-87" title="87">    <span class="cf">if</span> (pre[t] == -<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-88" title="88">        <span class="cf">return</span> <span class="kw">false</span>;</a>
<a class="sourceLine" id="cb3-89" title="89">    <span class="cf">else</span></a>
<a class="sourceLine" id="cb3-90" title="90">        <span class="cf">return</span> <span class="kw">true</span>;</a>
<a class="sourceLine" id="cb3-91" title="91">}</a>
<a class="sourceLine" id="cb3-92" title="92">ll mcmf(<span class="dt">int</span> s, <span class="dt">int</span> t, ll&amp; cost)</a>
<a class="sourceLine" id="cb3-93" title="93">{</a>
<a class="sourceLine" id="cb3-94" title="94">    ll flow = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-95" title="95">    cost = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-96" title="96">    <span class="cf">while</span> (spfa(s, t)) {</a>
<a class="sourceLine" id="cb3-97" title="97">        ll Min = INF;</a>
<a class="sourceLine" id="cb3-98" title="98">        <span class="cf">for</span> (<span class="dt">int</span> i = pre[t]; i != -<span class="dv">1</span>; i = pre[es[i ^ <span class="dv">1</span>].to]) {</a>
<a class="sourceLine" id="cb3-99" title="99">            <span class="cf">if</span> (Min &gt; es[i].cap - es[i].flow) {</a>
<a class="sourceLine" id="cb3-100" title="100">                Min = es[i].cap - es[i].flow;</a>
<a class="sourceLine" id="cb3-101" title="101">            }</a>
<a class="sourceLine" id="cb3-102" title="102">        }</a>
<a class="sourceLine" id="cb3-103" title="103">        <span class="cf">for</span> (<span class="dt">int</span> i = pre[t]; i != -<span class="dv">1</span>; i = pre[es[i ^ <span class="dv">1</span>].to]) {</a>
<a class="sourceLine" id="cb3-104" title="104">            es[i].flow += Min;</a>
<a class="sourceLine" id="cb3-105" title="105">            es[i ^ <span class="dv">1</span>].flow -= Min;</a>
<a class="sourceLine" id="cb3-106" title="106">            cost += es[i].cost * Min;</a>
<a class="sourceLine" id="cb3-107" title="107">        }</a>
<a class="sourceLine" id="cb3-108" title="108">        flow += Min;</a>
<a class="sourceLine" id="cb3-109" title="109">        ansarr[(<span class="dt">int</span>)flow] = cost;</a>
<a class="sourceLine" id="cb3-110" title="110">    }</a>
<a class="sourceLine" id="cb3-111" title="111">    <span class="cf">return</span> flow;</a>
<a class="sourceLine" id="cb3-112" title="112">}</a>
<a class="sourceLine" id="cb3-113" title="113"><span class="kw">inline</span> <span class="dt">int</span> read()</a>
<a class="sourceLine" id="cb3-114" title="114">{</a>
<a class="sourceLine" id="cb3-115" title="115">    <span class="dt">char</span> ch;</a>
<a class="sourceLine" id="cb3-116" title="116">    <span class="dt">int</span> x = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-117" title="117">    <span class="dt">int</span> sign = <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-118" title="118">    <span class="cf">do</span> {</a>
<a class="sourceLine" id="cb3-119" title="119">        ch = getchar();</a>
<a class="sourceLine" id="cb3-120" title="120">        <span class="cf">if</span> (ch == <span class="ch">'-'</span>)</a>
<a class="sourceLine" id="cb3-121" title="121">            sign = -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-122" title="122">    } <span class="cf">while</span> (ch &gt; <span class="ch">'9'</span> || ch &lt; <span class="ch">'0'</span>);</a>
<a class="sourceLine" id="cb3-123" title="123">    <span class="cf">while</span> (<span class="ch">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="ch">'9'</span>) {</a>
<a class="sourceLine" id="cb3-124" title="124">        x = (x &lt;&lt; <span class="dv">3</span>) + (x &lt;&lt; <span class="dv">1</span>) + (ch - <span class="ch">'0'</span>);</a>
<a class="sourceLine" id="cb3-125" title="125">        ch = getchar();</a>
<a class="sourceLine" id="cb3-126" title="126">    }</a>
<a class="sourceLine" id="cb3-127" title="127">    <span class="cf">return</span> x * sign;</a>
<a class="sourceLine" id="cb3-128" title="128">}</a>
<a class="sourceLine" id="cb3-129" title="129">ll gcd(ll a, ll b)</a>
<a class="sourceLine" id="cb3-130" title="130">{</a>
<a class="sourceLine" id="cb3-131" title="131">    <span class="cf">return</span> b == <span class="dv">0</span> ? a : gcd(b, a % b);</a>
<a class="sourceLine" id="cb3-132" title="132">}</a>
<a class="sourceLine" id="cb3-133" title="133"><span class="co">//inline void Swap(ll&amp; a,ll&amp; b)</span></a>
<a class="sourceLine" id="cb3-134" title="134"><span class="co">//{</span></a>
<a class="sourceLine" id="cb3-135" title="135"><span class="co">//ll tmp=a;</span></a>
<a class="sourceLine" id="cb3-136" title="136"><span class="co">//a=b;b=tmp;</span></a>
<a class="sourceLine" id="cb3-137" title="137"><span class="co">//}</span></a>
<a class="sourceLine" id="cb3-138" title="138"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-139" title="139">{</a>
<a class="sourceLine" id="cb3-140" title="140">    <span class="cf">while</span> (scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>, &amp;N, &amp;M) != EOF) {</a>
<a class="sourceLine" id="cb3-141" title="141">        init(N);</a>
<a class="sourceLine" id="cb3-142" title="142">        <span class="dt">int</span> ai, bi, ci;</a>
<a class="sourceLine" id="cb3-143" title="143">        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; M; i++) {</a>
<a class="sourceLine" id="cb3-144" title="144">            ai = read();</a>
<a class="sourceLine" id="cb3-145" title="145">            bi = read();</a>
<a class="sourceLine" id="cb3-146" title="146">            ci = read();</a>
<a class="sourceLine" id="cb3-147" title="147">            ai--;</a>
<a class="sourceLine" id="cb3-148" title="148">            bi--;</a>
<a class="sourceLine" id="cb3-149" title="149">            addedge(ai, bi, <span class="dv">1</span>, ci);</a>
<a class="sourceLine" id="cb3-150" title="150">        }</a>
<a class="sourceLine" id="cb3-151" title="151">        ll miniflow;</a>
<a class="sourceLine" id="cb3-152" title="152">        ll maxiflow = mcmf(<span class="dv">0</span>, N - <span class="dv">1</span>, miniflow);</a>
<a class="sourceLine" id="cb3-153" title="153">        <span class="dt">int</span> q;</a>
<a class="sourceLine" id="cb3-154" title="154">        q = read();</a>
<a class="sourceLine" id="cb3-155" title="155">        <span class="dt">int</span> u, v;</a>
<a class="sourceLine" id="cb3-156" title="156">        <span class="cf">while</span> (q--) {</a>
<a class="sourceLine" id="cb3-157" title="157">            u = read();</a>
<a class="sourceLine" id="cb3-158" title="158">            v = read();</a>
<a class="sourceLine" id="cb3-159" title="159">            <span class="co">//printf("maxiflow = %lld\n",maxiflow);</span></a>
<a class="sourceLine" id="cb3-160" title="160">            <span class="cf">if</span> (u == <span class="dv">0</span> || ((<span class="dv">1</span><span class="bu">LL</span> * v) / u == maxiflow &amp;&amp; (<span class="dv">1</span><span class="bu">LL</span> * v) % u &gt; <span class="dv">0</span>) || (<span class="dv">1</span><span class="bu">LL</span> * v) / u &gt; maxiflow) {</a>
<a class="sourceLine" id="cb3-161" title="161">                puts(<span class="st">"NaN"</span>);</a>
<a class="sourceLine" id="cb3-162" title="162">                <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb3-163" title="163">            }</a>
<a class="sourceLine" id="cb3-164" title="164">            <span class="dt">int</span> idx = v / u;</a>
<a class="sourceLine" id="cb3-165" title="165">            ll up = ansarr[idx] * u + (ansarr[idx + <span class="dv">1</span>] - ansarr[idx]) * (v % u);</a>
<a class="sourceLine" id="cb3-166" title="166">            <span class="co">//if(v&lt;up) Swap(v, up)</span></a>
<a class="sourceLine" id="cb3-167" title="167">            ll g = gcd(<span class="dv">1</span><span class="bu">LL</span> * v, up);</a>
<a class="sourceLine" id="cb3-168" title="168">            printf(<span class="st">"</span><span class="sc">%lld</span><span class="st">/</span><span class="sc">%lld\n</span><span class="st">"</span>, up / g, v / g);</a>
<a class="sourceLine" id="cb3-169" title="169">        }</a>
<a class="sourceLine" id="cb3-170" title="170">    }</a>
<a class="sourceLine" id="cb3-171" title="171">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-172" title="172">}</a></code></pre></div>
<h3 id="i">I</h3>
<p>待补</p>
<h3 id="j">J</h3>
<p>高数签到题。虽然这题是我A的，但是因为高数太菜，所以其实积分结果是在OEIS上找到的hhh。</p>
<p>积分过程如下： <span class="math display">\[
\begin{aligned}
\because (x-x^2)^n&amp;=\frac{1}{4}-\left( \frac{1}{2}-x\right )^2 \\
\therefore \int_0^1(x-x^2)^ndx&amp;=\int_0^1\left(\frac{1}{4}-\left(\frac{1}{2}-x\right)^2\right)^ndx\\
&amp;=\frac{1}{4^n}\int_0^1\left(1-4\left(\frac{1}{2}-x\right)^2\right)^ndx\\
&amp;=\frac{1}{4^n}\int_0^1\left(1-(2x-1)^2\right)^ndx
\end{aligned}
\]</span> 令<span class="math inline">\(\sin t=2x-1\)</span>，则有 <span class="math display">\[
\begin{aligned}
\int_0^1(x-x^2)^ndx&amp;=\frac{1}{4^n}\int_{-\frac{\pi}{2}}^{\frac{\pi}{2}}(1-\sin^2t)^ndx\\
&amp;=\frac{1}{4^n}\int_{-\frac{\pi}{2}}^{\frac{\pi}{2}}(1-\sin^2t)^n\frac{\cos t}{2}dt\\
&amp;=\frac{1}{4^n}\int_0^{\frac{\pi}{2}}\cos^{2n+1}tdt
\end{aligned}
\]</span></p>
<p>由Wallis公式： <span class="math display">\[
\int_0^{\frac{\pi}{2}}\cos^nxdx=
\begin{cases}
\frac{\pi(2k)!!}{2(2k+1)!!}&amp;\text{n=2k}\\
\frac{(2k)!!}{(2k+1)!!}&amp;\text{n=2k+1}
\end{cases}
\]</span> 其中，<span class="math inline">\(\frac{(2k)!!}{(2k+1)!!}=\frac{2\times4\times6\times\dots\times(2n-2)\times2n}{1\times3\times5\times\dots\times(2n-1)\times(2n+1)}\)</span>。因此，有 <span class="math display">\[
\begin{aligned}
\int_0^1(x-x^2)^ndx&amp;=\frac{1}{4^n}\frac{(2n)!!}{(2n+1)!!}\\
&amp;=\frac{1}{4^n}\frac{(2n)!!}{\frac{(2n+1)!}{(2n)!!}}\\
&amp;=\frac{1}{4^n}\frac{(2n!!)^2}{(2n+1)!}\\
&amp;=\frac{1}{4^n}\frac{4^n(n!)^2}{(2n+1)!}\\
&amp;=\frac{(n!)^2}{(2n+1)!}
\end{aligned}
\]</span> 得到上面的积分结果后，套式子再求个逆元就行了。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb4-14" title="14"><span class="pp">#define mst</span>(a,<span class="pp"> </span>b)<span class="pp"> </span>memset((a),<span class="pp"> </span>(b),<span class="pp"> </span><span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb4-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb4-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb4-17" title="17"><span class="pp">#define lson </span>lef,<span class="pp"> </span>mid,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb4-18" title="18"><span class="pp">#define rson </span>mid<span class="pp"> </span>+<span class="pp"> </span><span class="dv">1</span>,<span class="pp"> </span>rig,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span><span class="pp"> </span>|<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb4-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn = <span class="fl">1e5</span> + <span class="dv">5</span>;</a>
<a class="sourceLine" id="cb4-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb4-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb4-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb4-23" title="23"><span class="at">const</span> <span class="dt">int</span> bnd = <span class="fl">2e6</span> + <span class="dv">2</span>;</a>
<a class="sourceLine" id="cb4-24" title="24"><span class="at">const</span> ll mod = <span class="dv">998244353</span>;</a>
<a class="sourceLine" id="cb4-25" title="25">ll frac[bnd];</a>
<a class="sourceLine" id="cb4-26" title="26"><span class="kw">inline</span> <span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb4-27" title="27">{</a>
<a class="sourceLine" id="cb4-28" title="28">    frac[<span class="dv">0</span>] = frac[<span class="dv">1</span>] = <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb4-29" title="29">    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">2</span>; i &lt;= bnd; i++) {</a>
<a class="sourceLine" id="cb4-30" title="30">        frac[i] = (frac[i - <span class="dv">1</span>] % mod * i % mod) % mod;</a>
<a class="sourceLine" id="cb4-31" title="31">    }</a>
<a class="sourceLine" id="cb4-32" title="32">}</a>
<a class="sourceLine" id="cb4-33" title="33">ll exgcd(ll a, ll b, ll&amp; x, ll&amp; y)</a>
<a class="sourceLine" id="cb4-34" title="34">{</a>
<a class="sourceLine" id="cb4-35" title="35">    <span class="cf">if</span> (a == <span class="dv">0</span> &amp;&amp; b == <span class="dv">0</span>) {</a>
<a class="sourceLine" id="cb4-36" title="36">        <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb4-37" title="37">    }</a>
<a class="sourceLine" id="cb4-38" title="38">    <span class="cf">if</span> (b == <span class="dv">0</span>) {</a>
<a class="sourceLine" id="cb4-39" title="39">        x = <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb4-40" title="40">        y = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-41" title="41">        <span class="cf">return</span> a;</a>
<a class="sourceLine" id="cb4-42" title="42">    }</a>
<a class="sourceLine" id="cb4-43" title="43">    ll d = exgcd(b, a % b, y, x);</a>
<a class="sourceLine" id="cb4-44" title="44">    y -= a / b * x;</a>
<a class="sourceLine" id="cb4-45" title="45">    <span class="cf">return</span> d;</a>
<a class="sourceLine" id="cb4-46" title="46">}</a>
<a class="sourceLine" id="cb4-47" title="47">ll inv(ll a, ll n)</a>
<a class="sourceLine" id="cb4-48" title="48">{</a>
<a class="sourceLine" id="cb4-49" title="49">    ll x, y;</a>
<a class="sourceLine" id="cb4-50" title="50">    ll d = exgcd(a, n, x, y);</a>
<a class="sourceLine" id="cb4-51" title="51">    <span class="cf">if</span> (d == <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb4-52" title="52">        <span class="cf">return</span> (x % n + n) % n;</a>
<a class="sourceLine" id="cb4-53" title="53">    <span class="cf">else</span></a>
<a class="sourceLine" id="cb4-54" title="54">        <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb4-55" title="55">}</a>
<a class="sourceLine" id="cb4-56" title="56"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb4-57" title="57">{</a>
<a class="sourceLine" id="cb4-58" title="58">    init();</a>
<a class="sourceLine" id="cb4-59" title="59">    ll n;</a>
<a class="sourceLine" id="cb4-60" title="60">    <span class="cf">while</span> (scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>, &amp;n) != EOF) {</a>
<a class="sourceLine" id="cb4-61" title="61">        ll f = frac[n];</a>
<a class="sourceLine" id="cb4-62" title="62">        ll ff = frac[<span class="dv">2</span> * n + <span class="dv">1</span>];</a>
<a class="sourceLine" id="cb4-63" title="63">        ll up = (f % mod * f % mod) % mod;</a>
<a class="sourceLine" id="cb4-64" title="64">        ll down = ff % mod;</a>
<a class="sourceLine" id="cb4-65" title="65">        ll ans = (up % mod * inv(down, mod) % mod) % mod;</a>
<a class="sourceLine" id="cb4-66" title="66">        printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>, ans);</a>
<a class="sourceLine" id="cb4-67" title="67">    }</a>
<a class="sourceLine" id="cb4-68" title="68">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-69" title="69">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>2020牛客多校第三场</title>
    <url>/2020/07/19/2020%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E7%AC%AC%E4%B8%89%E5%9C%BA/</url>
    <content><![CDATA[<p><img src="https://pic.downk.cc/item/5f14552214195aa594e12634.jpg"> <span id="more"></span></p>
<h3 id="a-贪心">A 贪心</h3>
<p>给定四种状态，状态0没有钓鱼也不能做鱼饵；状态1可以做鱼饵，但是没有鱼；状态三有鱼但不能做鱼饵；状态四有鱼也可以做鱼饵。没有鱼的状态下，如果有鱼饵，可以钓鱼。</p>
<p>做法是简单贪心。有鱼的时候直接钓鱼，没鱼但能做鱼饵就做鱼饵，没鱼且不能做鱼饵就看看有没有鱼饵可以用来钓鱼。从左到右扫一遍，如果最后发现鱼饵有剩下，那就答案加上<strong>鱼饵数/2</strong>，表示原本做鱼饵的状态，一半用来做鱼饵，一般用这些做出来的鱼饵钓鱼</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,<span class="pp"> </span>b)<span class="pp"> </span>memset((a),<span class="pp"> </span>(b),<span class="pp"> </span><span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define lson </span>lef,<span class="pp"> </span>mid,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define rson </span>mid<span class="pp"> </span>+<span class="pp"> </span><span class="dv">1</span>,<span class="pp"> </span>rig,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span><span class="pp"> </span>|<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn = <span class="fl">2e6</span> + <span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-24" title="24">{</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> T;</a>
<a class="sourceLine" id="cb1-26" title="26">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>, &amp;T);</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">while</span> (T--) {</a>
<a class="sourceLine" id="cb1-28" title="28">        <span class="dt">int</span> n;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="dt">int</span> ba=<span class="dv">0</span>,ans=<span class="dv">0</span>;<span class="dt">int</span> tmp;</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb1-31" title="31">            scanf(<span class="st">"%1d"</span>,&amp;tmp);</a>
<a class="sourceLine" id="cb1-32" title="32">            <span class="cf">if</span>(tmp==<span class="dv">2</span>||tmp==<span class="dv">3</span>) ans++;</a>
<a class="sourceLine" id="cb1-33" title="33">            <span class="cf">else</span> <span class="cf">if</span>(tmp==<span class="dv">1</span>) ba++;</a>
<a class="sourceLine" id="cb1-34" title="34">            <span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-35" title="35">                <span class="cf">if</span>(ba&gt;<span class="dv">0</span>) ba--,ans++;</a>
<a class="sourceLine" id="cb1-36" title="36">            }</a>
<a class="sourceLine" id="cb1-37" title="37">        }</a>
<a class="sourceLine" id="cb1-38" title="38">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans+ba/<span class="dv">2</span>);</a>
<a class="sourceLine" id="cb1-39" title="39">    }</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">}</a></code></pre></div>
<h3 id="b-简单思维题">B 简单思维题</h3>
<p>刚看完题目的时候以为是线段树or Splay区间搬移，但想到签到题不太可能需要用到复杂的数据结构。后来wxdl说有很简单的思路，于是我就去看其他题了。赛后发现，实际上只需要移动指针即可维护答案。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-17" title="17"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb2-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">2e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-23" title="23"><span class="dt">char</span> s[maxn];</a>
<a class="sourceLine" id="cb2-24" title="24"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-25" title="25">{</a>
<a class="sourceLine" id="cb2-26" title="26">    scanf(<span class="st">"</span><span class="sc">%s</span><span class="st">"</span>,s);</a>
<a class="sourceLine" id="cb2-27" title="27">    <span class="dt">int</span> len=strlen(s);</a>
<a class="sourceLine" id="cb2-28" title="28">    <span class="dt">int</span> q;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;q);</a>
<a class="sourceLine" id="cb2-29" title="29">    <span class="dt">int</span> p=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-30" title="30">    <span class="cf">while</span>(q--){</a>
<a class="sourceLine" id="cb2-31" title="31">        <span class="dt">char</span> op[<span class="dv">2</span>];<span class="dt">int</span> x;</a>
<a class="sourceLine" id="cb2-32" title="32">        scanf(<span class="st">"</span><span class="sc">%s</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,op,&amp;x);</a>
<a class="sourceLine" id="cb2-33" title="33">        <span class="cf">if</span>(op[<span class="dv">0</span>]==<span class="ch">'M'</span>){</a>
<a class="sourceLine" id="cb2-34" title="34">            <span class="cf">if</span>(x&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-35" title="35">                p=(p+x)%len;</a>
<a class="sourceLine" id="cb2-36" title="36">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-37" title="37">                x=abs(x);</a>
<a class="sourceLine" id="cb2-38" title="38">                p-=x;</a>
<a class="sourceLine" id="cb2-39" title="39">                p=(p%len+len)%len;</a>
<a class="sourceLine" id="cb2-40" title="40">            }</a>
<a class="sourceLine" id="cb2-41" title="41">        }<span class="cf">else</span> <span class="cf">if</span>(op[<span class="dv">0</span>]==<span class="ch">'A'</span>){</a>
<a class="sourceLine" id="cb2-42" title="42">            x--;</a>
<a class="sourceLine" id="cb2-43" title="43">            printf(<span class="st">"</span><span class="sc">%c\n</span><span class="st">"</span>,s[(p+x)%len]);</a>
<a class="sourceLine" id="cb2-44" title="44">        }</a>
<a class="sourceLine" id="cb2-45" title="45">    }</a>
<a class="sourceLine" id="cb2-46" title="46">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-47" title="47">}</a></code></pre></div>
<h3 id="c-简单计算几何">C 简单计算几何</h3>
<p>给出右手的形状，并说明左手和右手是对称的。现在给出一组20个点的坐标，问这些坐标表示的是左手还是右手。</p>
<p>题目中一个很重要的条件是，测试数据中的手和题面中的手相比，只会平移和旋转，而不会放大缩小。同时又观察到，图中由一条长为6的边、一条长为1的边和一条长为3的边组成的手指只有拇指。所以可以搞一个宽度为4的窗口，找到这样的四个点：两组相邻点的距离分别是6和3。这样就能找到拇指的位置。找到之后，用叉乘判断下在拇指左侧的点多还是右侧的点多即可。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-17" title="17"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb3-18" title="18"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb3-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-20" title="20"><span class="at">const</span> <span class="dt">double</span> eps=<span class="fl">1e-3</span>;</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-22" title="22"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-23" title="23"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-24" title="24"><span class="dt">int</span> sgn(<span class="dt">double</span> x)</a>
<a class="sourceLine" id="cb3-25" title="25">{</a>
<a class="sourceLine" id="cb3-26" title="26">    <span class="dt">double</span> Eps=<span class="fl">1e-8</span>;</a>
<a class="sourceLine" id="cb3-27" title="27">    <span class="cf">if</span>(fabs(x)&lt;Eps){</a>
<a class="sourceLine" id="cb3-28" title="28">        <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-29" title="29">    }</a>
<a class="sourceLine" id="cb3-30" title="30">    <span class="cf">if</span>(x&lt;<span class="dv">0</span>) <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-31" title="31">    <span class="cf">else</span> <span class="cf">return</span> <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-32" title="32">}</a>
<a class="sourceLine" id="cb3-33" title="33"><span class="kw">struct</span> point{</a>
<a class="sourceLine" id="cb3-34" title="34">    <span class="dt">double</span> x;</a>
<a class="sourceLine" id="cb3-35" title="35">    <span class="dt">double</span> y;</a>
<a class="sourceLine" id="cb3-36" title="36">    point(){}</a>
<a class="sourceLine" id="cb3-37" title="37">    point(<span class="dt">double</span> _x,<span class="dt">double</span> _y){</a>
<a class="sourceLine" id="cb3-38" title="38">        x=_x;y=_y;</a>
<a class="sourceLine" id="cb3-39" title="39">    }</a>
<a class="sourceLine" id="cb3-40" title="40">    point <span class="kw">operator</span>-(<span class="at">const</span> point&amp; b)<span class="at">const</span>{</a>
<a class="sourceLine" id="cb3-41" title="41">        <span class="cf">return</span> point(x-b.x,y-b.y);</a>
<a class="sourceLine" id="cb3-42" title="42">    }</a>
<a class="sourceLine" id="cb3-43" title="43">    <span class="dt">double</span> <span class="kw">operator</span>^(<span class="at">const</span> point&amp; b)<span class="at">const</span>{</a>
<a class="sourceLine" id="cb3-44" title="44">        <span class="cf">return</span> x*b.y-y*b.x;</a>
<a class="sourceLine" id="cb3-45" title="45">    }</a>
<a class="sourceLine" id="cb3-46" title="46">};</a>
<a class="sourceLine" id="cb3-47" title="47"><span class="kw">struct</span> line{</a>
<a class="sourceLine" id="cb3-48" title="48">    point s,e;</a>
<a class="sourceLine" id="cb3-49" title="49">    line(){}</a>
<a class="sourceLine" id="cb3-50" title="50">    line(point _s,point _e){</a>
<a class="sourceLine" id="cb3-51" title="51">        s=_s;e=_e;</a>
<a class="sourceLine" id="cb3-52" title="52">    }</a>
<a class="sourceLine" id="cb3-53" title="53">    <span class="dt">int</span> relation(point p){</a>
<a class="sourceLine" id="cb3-54" title="54">        <span class="dt">int</span> c=sgn((p-s)^(e-s));</a>
<a class="sourceLine" id="cb3-55" title="55">        <span class="cf">if</span>(c&lt;<span class="dv">0</span>) <span class="cf">return</span> <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-56" title="56">        <span class="cf">else</span> <span class="cf">if</span>(c&gt;<span class="dv">0</span>) <span class="cf">return</span> <span class="dv">2</span>;</a>
<a class="sourceLine" id="cb3-57" title="57">        <span class="cf">else</span> <span class="cf">return</span> <span class="dv">3</span>;</a>
<a class="sourceLine" id="cb3-58" title="58">    }</a>
<a class="sourceLine" id="cb3-59" title="59">};</a>
<a class="sourceLine" id="cb3-60" title="60">point ps[<span class="dv">22</span>];</a>
<a class="sourceLine" id="cb3-61" title="61"><span class="dt">double</span> sqr(<span class="dt">double</span> x)</a>
<a class="sourceLine" id="cb3-62" title="62">{</a>
<a class="sourceLine" id="cb3-63" title="63">    <span class="cf">return</span> x*x;</a>
<a class="sourceLine" id="cb3-64" title="64">}</a>
<a class="sourceLine" id="cb3-65" title="65"><span class="dt">double</span> dist(<span class="at">const</span> point&amp; pa,<span class="at">const</span> point&amp; pb)</a>
<a class="sourceLine" id="cb3-66" title="66">{</a>
<a class="sourceLine" id="cb3-67" title="67">    <span class="cf">return</span> sqrt(sqr(pa.x-pb.x)+sqr(pa.y-pb.y));</a>
<a class="sourceLine" id="cb3-68" title="68">}</a>
<a class="sourceLine" id="cb3-69" title="69"><span class="dt">bool</span> check(<span class="at">const</span> point&amp; pa,<span class="at">const</span> point&amp; pb,<span class="at">const</span> point&amp; pc,<span class="at">const</span> point&amp; pd)</a>
<a class="sourceLine" id="cb3-70" title="70">{</a>
<a class="sourceLine" id="cb3-71" title="71">    <span class="dt">double</span> dis1=dist(pa,pb);</a>
<a class="sourceLine" id="cb3-72" title="72">    <span class="dt">double</span> dis2=dist(pc,pd);</a>
<a class="sourceLine" id="cb3-73" title="73">    <span class="co">//printf("dis1 = %lf, dis2 = %lf, %lf, %lf\n",dis1,dis2,fabs(dis1-3.0),fabs(dis2-6.0));</span></a>
<a class="sourceLine" id="cb3-74" title="74">    <span class="cf">if</span>((fabs(dis1-<span class="fl">6.00</span>)&lt;eps&amp;&amp;fabs(dis2-<span class="fl">3.00</span>)&lt;eps)||(fabs(dis1-<span class="fl">3.00</span>)&lt;eps&amp;&amp;fabs(dis2-<span class="fl">6.00</span>)&lt;eps)) <span class="cf">return</span> <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-75" title="75">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-76" title="76">}</a>
<a class="sourceLine" id="cb3-77" title="77"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-78" title="78">{</a>
<a class="sourceLine" id="cb3-79" title="79">    <span class="dt">int</span> T;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;T);</a>
<a class="sourceLine" id="cb3-80" title="80">    <span class="cf">while</span>(T--){</a>
<a class="sourceLine" id="cb3-81" title="81">        <span class="dt">double</span> X,Y;</a>
<a class="sourceLine" id="cb3-82" title="82">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">20</span>;i++){</a>
<a class="sourceLine" id="cb3-83" title="83">            scanf(<span class="st">"</span><span class="sc">%lf</span><span class="st"> </span><span class="sc">%lf</span><span class="st">"</span>,&amp;X,&amp;Y);</a>
<a class="sourceLine" id="cb3-84" title="84">            ps[i].x=X;ps[i].y=Y;</a>
<a class="sourceLine" id="cb3-85" title="85">        }</a>
<a class="sourceLine" id="cb3-86" title="86">        <span class="dt">int</span> pos;</a>
<a class="sourceLine" id="cb3-87" title="87">        <span class="dt">int</span> idx1,idx2,idx3,idx4;</a>
<a class="sourceLine" id="cb3-88" title="88">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">20</span>;i++){</a>
<a class="sourceLine" id="cb3-89" title="89">            idx1=i;idx2=(i+<span class="dv">1</span>)%<span class="dv">20</span>;</a>
<a class="sourceLine" id="cb3-90" title="90">            idx3=(i+<span class="dv">2</span>)%<span class="dv">20</span>;idx4=(i+<span class="dv">3</span>)%<span class="dv">20</span>;</a>
<a class="sourceLine" id="cb3-91" title="91">            <span class="cf">if</span>(check(ps[idx1],ps[idx2],ps[idx3],ps[idx4])){</a>
<a class="sourceLine" id="cb3-92" title="92">                pos=i;</a>
<a class="sourceLine" id="cb3-93" title="93">                <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb3-94" title="94">            }</a>
<a class="sourceLine" id="cb3-95" title="95">        }  </a>
<a class="sourceLine" id="cb3-96" title="96">        <span class="co">//printf("pos = %d\n",pos);</span></a>
<a class="sourceLine" id="cb3-97" title="97">        line L(ps[pos],ps[(pos+<span class="dv">1</span>)%<span class="dv">20</span>]);</a>
<a class="sourceLine" id="cb3-98" title="98">        <span class="dt">int</span> lef=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-99" title="99">        <span class="dt">int</span> rig=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-100" title="100">        <span class="cf">for</span>(<span class="dt">int</span> i=(pos+<span class="dv">2</span>)%<span class="dv">20</span>;i!=pos;i=(i+<span class="dv">1</span>)%<span class="dv">20</span>){</a>
<a class="sourceLine" id="cb3-101" title="101">            <span class="dt">int</span> rela=L.relation(ps[i]);</a>
<a class="sourceLine" id="cb3-102" title="102">            <span class="cf">if</span>(rela==<span class="dv">1</span>) lef++;</a>
<a class="sourceLine" id="cb3-103" title="103">            <span class="cf">else</span> <span class="cf">if</span>(rela==<span class="dv">2</span>) rig++;</a>
<a class="sourceLine" id="cb3-104" title="104">        }</a>
<a class="sourceLine" id="cb3-105" title="105">        <span class="cf">if</span>(lef&lt;rig) puts(<span class="st">"right"</span>);</a>
<a class="sourceLine" id="cb3-106" title="106">        <span class="cf">else</span> puts(<span class="st">"left"</span>);</a>
<a class="sourceLine" id="cb3-107" title="107">    }</a>
<a class="sourceLine" id="cb3-108" title="108">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-109" title="109">}</a></code></pre></div>
<h3 id="f-数论拓展欧几里得">F 数论、拓展欧几里得</h3>
<p>题意是说，给出两个整数<span class="math inline">\(a,b\)</span>，<span class="math inline">\(c,d,e,f\)</span>都是未知数，求方程<span class="math inline">\(\frac{c}{d}-\frac{e}{f}=\frac{a}{b}\)</span>的任意一个解。同时，需要满足以下两个条件：</p>
<ul>
<li><span class="math inline">\(d&lt;b\ and\ f&lt;d\)</span></li>
<li><span class="math inline">\(1\leq c,e\leq 4\times 10^{12}\)</span></li>
</ul>
<p>思路是这样的，分三种情况讨论：</p>
<ul>
<li><p><span class="math inline">\(\gcd(a,b)&gt;1\)</span></p>
<p>设<span class="math inline">\(g=\gcd(a,b)\)</span>，则有<span class="math inline">\(\frac{(a+1)/g}{b/g}-\frac{a/g}{b/g}=\frac{a}{b}\)</span>。因为<span class="math inline">\(g&gt;1\)</span>，所以<span class="math inline">\(b/g&lt;b\)</span>，所以直接令<span class="math inline">\(c=(a+1)/g,d=b/g,e=a/g,f=b/g\)</span>即可。</p></li>
<li><p><span class="math inline">\(\gcd(a,b)=1\)</span>，且<span class="math inline">\(b\)</span>的质因数至少有两个</p>
<p>设此时的<span class="math inline">\(b=p_1^{x_1}p_2^{x_2}p_3^{x_3}\dots p_n^{x_n}\)</span>，令<span class="math inline">\(d=p_1^{x_1},f=\frac{b}{d}\)</span>，则有<span class="math inline">\(df=b\)</span>。问题转化为求解不定方程<span class="math inline">\(cf-de=a\)</span>。用exgcd求解即可。</p></li>
<li><p><span class="math inline">\(\gcd(a,b)=1\)</span>，且<span class="math inline">\(b=p^x\)</span>（<span class="math inline">\(p\)</span>是素数）。也就是说<span class="math inline">\(b\)</span>是1或者一个指数的幂次</p>
<p>此时无解，原因是，如果<span class="math inline">\(b\)</span>是1，那么<span class="math inline">\(d,f\)</span>就只能取0，这显然是不可能的。如果<span class="math inline">\(b=p^x\)</span>，则可以设<span class="math inline">\(d=p^u,f=p^{x-u}\)</span>。exgcd有解的充要条件是<span class="math inline">\(\gcd(d,f)\mid a\)</span>，所以有<span class="math inline">\(\gcd(d,f)=p^{\min\{u,x-u\}}\)</span>。但因为<span class="math inline">\(\gcd(a,b)=1\)</span>，所以<span class="math inline">\(a\)</span>的质因子中没有<span class="math inline">\(p\)</span>，也就是说<span class="math inline">\(\gcd(d,f)\nmid a\)</span>，exgcd不可能有解。</p></li>
</ul>
<p>拓展欧几里得解不定方程<span class="math inline">\(ax+by=c\)</span>，最后的解一定要乘以<span class="math inline">\(\frac{c}{\gcd(a,b)}\)</span>！因为求解这个方程的时候，实际上是在求解<span class="math inline">\(ax'+by'=\gcd(a,b)\)</span>，因此要左右两边都同乘上<span class="math inline">\(\frac{c}{\gcd(a,b)}\)</span>这个因子，才是最终的解！数论忘得一干二净orz</p>
<h3 id="l-签到题">L 签到题</h3>
<p>温暖的签到题，代码就不放了</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>多校</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>多校</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年终总结</title>
    <url>/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9289e8bf30c17d930599c92452a0207d27d353aaad94845d94d38832a19292c0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>AGC016B Colorful Hats</title>
    <url>/2020/03/03/ACG016B-Colorful-Hats/</url>
    <content><![CDATA[<p><img src="https://pic.downk.cc/item/5e5e72b398271cb2b862f2b8.jpg"></p>
<span id="more"></span>
<p>题意是说，每只猫都带有一顶帽子，且每只猫能看到除自己以外的其他人的帽子总共有多少种颜色。问是否能构造出一个帽子颜色的序列，满足每只猫看到的颜色数目。</p>
<p>设看到的颜色数的最大值为<span class="math inline">\(maxi\)</span>，最小值为<span class="math inline">\(mini\)</span>。</p>
<p>一个显而易见的结论是，如果<span class="math inline">\(maxi-mini&gt;1\)</span>，则结果为No(可自行验证)</p>
<p>然后考虑<span class="math inline">\(maxi==mini\)</span>的情况。如果两者的值是1或<span class="math inline">\(n-1\)</span>，那结果是Yes</p>
<p>否则，对于任意一种颜色，必须要有至少两只猫的帽子是这种颜色的。（草稿纸上画个图即可知道，原因是，假设有一种颜色只被一只猫所拥有，因为自己是看不到自己的帽子的，所以对于这只猫来说，他所看到的帽子的颜色会比其他猫所看到的颜色少一种，这就不符合初始条件）</p>
<p>最后考虑<span class="math inline">\(maxi!=mini\)</span>的情况。对于那些颜色数为<span class="math inline">\(mini\)</span>的猫，其帽子的颜色必然只为它所拥有，即这种颜色只会在一只猫的头上出现；而对于那些颜色数为<span class="math inline">\(maxi\)</span>的猫，其帽子的颜色则至少要被两只猫拥有。所以可以先把颜色数为<span class="math inline">\(mini\)</span>的都填充了，然后看看剩下的颜色是否可以保证填入剩下的猫之后，每种颜色至少被两只猫所拥有。</p>
<p>PS：蒟蒻第一次做atcoder，感觉真的好锻炼思维qwq</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-17" title="17"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="dt">int</span> arr[maxn];</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-23" title="23">{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> n;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> maxi=-INF;<span class="dt">int</span> mini=INF;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> minicnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-28" title="28">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;arr[i]);</a>
<a class="sourceLine" id="cb1-29" title="29">        maxi=max(maxi,arr[i]);</a>
<a class="sourceLine" id="cb1-30" title="30">        mini=min(mini,arr[i]);</a>
<a class="sourceLine" id="cb1-31" title="31">    }</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-33" title="33">        <span class="cf">if</span>(arr[i]==mini) minicnt++;</a>
<a class="sourceLine" id="cb1-34" title="34">    }</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="cf">if</span>(maxi-mini&gt;<span class="dv">1</span>||maxi&gt;n-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-36" title="36">        puts(<span class="st">"No"</span>);</a>
<a class="sourceLine" id="cb1-37" title="37">    }<span class="cf">else</span> <span class="cf">if</span>(maxi==mini){</a>
<a class="sourceLine" id="cb1-38" title="38">        <span class="cf">if</span>(mini==n-<span class="dv">1</span>||mini==<span class="dv">1</span>) puts(<span class="st">"Yes"</span>);</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-40" title="40">            <span class="cf">if</span>(n/mini&gt;=<span class="dv">2</span>){</a>
<a class="sourceLine" id="cb1-41" title="41">                puts(<span class="st">"Yes"</span>);</a>
<a class="sourceLine" id="cb1-42" title="42">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-43" title="43">                puts(<span class="st">"No"</span>);</a>
<a class="sourceLine" id="cb1-44" title="44">            }</a>
<a class="sourceLine" id="cb1-45" title="45">        }</a>
<a class="sourceLine" id="cb1-46" title="46">    }<span class="cf">else</span> <span class="cf">if</span>(maxi!=mini){</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="dt">int</span> x=n-minicnt;</a>
<a class="sourceLine" id="cb1-48" title="48">        <span class="dt">int</span> y=maxi-minicnt;</a>
<a class="sourceLine" id="cb1-49" title="49">        <span class="cf">if</span>(y==<span class="dv">0</span>) puts(<span class="st">"No"</span>);</a>
<a class="sourceLine" id="cb1-50" title="50">        <span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-51" title="51">            <span class="cf">if</span>(x/y&lt;<span class="dv">2</span>) puts(<span class="st">"No"</span>);</a>
<a class="sourceLine" id="cb1-52" title="52">            <span class="cf">else</span> puts(<span class="st">"Yes"</span>);</a>
<a class="sourceLine" id="cb1-53" title="53">        }</a>
<a class="sourceLine" id="cb1-54" title="54">    }</a>
<a class="sourceLine" id="cb1-55" title="55">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-56" title="56">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>思维</tag>
        <tag>Atcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Aizu - ALDS1_1_D-Maximum Profit（转化思想+DP）</title>
    <url>/2019/02/13/Aizu-ALDS1-1-D-Maximum-Profit/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/Aizu-ALDS1_1_D">Aizu - ALDS1_1_1_D</a></p>
<p>(这貌似是个日本的oj？名字叫aizu有点奇怪呢hhhh) <span id="more"></span></p>
<p>  这道题的思路是首先将相减转化为相加。我们可以在原数组的基础上再构造一个新的数组sub[],sub[]中存放的是R[i+1]-R[i]，因此，有以下式子成立： (R[i+1]-R[i]) + (R[i+2]-R[i+1]) + ··· + (R[j-1]-R[j-2]) + (R[j] - R[j-1]) = sub[i+1] + sub[i+2] + ··· + sub[j-1] + sub[j] = R[j] - R[i]   这么一来，求差的最大值就转化为了求sub[]的连续子序列和的最大值，而这只需要用dp求即可。状态转移方程为dp[j] = max(dp[j-1] + sub[j],sub[j])。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;climits&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">200000</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-9" title="9">ll R[maxn];</a>
<a class="sourceLine" id="cb1-10" title="10">ll sub[maxn];</a>
<a class="sourceLine" id="cb1-11" title="11">ll dp[maxn];</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-13" title="13">{</a>
<a class="sourceLine" id="cb1-14" title="14">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-15" title="15">    memset(R,<span class="dv">0</span>,<span class="kw">sizeof</span>(R));</a>
<a class="sourceLine" id="cb1-16" title="16">    memset(sub,<span class="dv">0</span>,<span class="kw">sizeof</span>(sub));</a>
<a class="sourceLine" id="cb1-17" title="17">    memset(dp,<span class="dv">0</span>,<span class="kw">sizeof</span>(dp));</a>
<a class="sourceLine" id="cb1-18" title="18">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb1-19" title="19">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)        scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,&amp;R[i]);</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n-<span class="dv">1</span>;i++)</a>
<a class="sourceLine" id="cb1-21" title="21">        sub[i]=R[i+<span class="dv">1</span>]-R[i];</a>
<a class="sourceLine" id="cb1-22" title="22">    dp[<span class="dv">1</span>]=sub[<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-23" title="23">    ll ans=INT_MIN;</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">2</span>;i&lt;=n-<span class="dv">1</span>;i++)</a>
<a class="sourceLine" id="cb1-25" title="25">        dp[i]=max(dp[i-<span class="dv">1</span>]+sub[i],sub[i]);</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n-<span class="dv">1</span>;i++)</a>
<a class="sourceLine" id="cb1-27" title="27">        <span class="cf">if</span>(dp[i]&gt;ans)</a>
<a class="sourceLine" id="cb1-28" title="28">            ans=dp[i];</a>
<a class="sourceLine" id="cb1-29" title="29">    printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">return</span> <span class="dv">0</span>;    </a>
<a class="sourceLine" id="cb1-31" title="31">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>简单DP</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>BZOJ4403-序列统计(组合数学，卢卡斯定理)</title>
    <url>/2019/01/28/BZOJ4403-%E5%BA%8F%E5%88%97%E7%BB%9F%E8%AE%A1-%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%EF%BC%8C%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<p>题目链接:<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4403">序列统计</a> <img src="https://pic.superbed.cn/item/5c4e754f5f3e509ed97c0c84"></p>
<p>  首先，L与R实际上是没太大意义的，因为我们需要的只是L和R之间含有多少个数，即R-L+1个数。其次，要注意一点，在一个序列中，数字是可以重复的。以样例中的2 4 5为例，符合要求的序列有{4},{5},{4,5},{4,4},{5,5}。事实上，问题可以转化为“有R-L+1个不同的盒子，若要将i(1&lt;=i&lt;=n)个相同的小球放进这些盒子里(某些盒子可以为空)，问对于所有的i，放法的总和是多少？”其中，不同的盒子代表着不同的数，在一个盒子中放入一个球，相当于选取一次该数字作为序列中的成员。再将问题抽象一下，即为“将i个小球划分成k堆(1&lt;=k&lt;=i)，问对于所有的i，划分方法的总和是多少？”对于这个问题，我们可以直接用C(m+n,n)求解(对于本题是C(seg+n,n),seg=R-L+1)另外，通过观察可知(其实是我不会推导。。。。。。),通过C(m+n,n)求出的数会比正确答案大1，故最终答案为C(seg+n,n)-1。 又因为10^6+3为素数，故可以用Lucas。</p>
<p>代码如下:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
using namespace std;
typedef long long ll;
ll fpow(ll a,ll b,ll p)
{
    ll ans=1;a%=p;
    while(b)
    {
        if(b&amp;1)
            ans=(ans*a)%p;
        a=(a*a)%p;
        b&gt;&gt;=1;
    }
    return ans;
}
ll inv(ll x,ll p)
{
    return fpow(x,p-2,p);
}
ll comb(ll n,ll m,ll p)
{
    if(n&lt;m)        return 0;
    ll up=1;ll down=1;
    for(int i=n-m+1;i&lt;=n;i++)        up=(up*i)%p;
    for(int i=1;i&lt;=m;i++)        down=(down*i)%p;
    return up*inv(down,p)%p;
}
ll lucas(ll a,ll b,ll p)
{
    return !b?1:lucas(a/p,b/p,p)*comb(a%p,b%p,p)%p;
}
int main()
{
    int t;
    ll n,lef,rig;
    ll p=3+1e6;
    scanf("%d",&amp;t);
    while(t--)
    {
        scanf("%lld %lld %lld",&amp;n,&amp;lef,&amp;rig);
        ll seg=rig-lef+1;
        ll ans=0; 
        ans=(lucas(seg+n,n,p)+p-1)%p;
        printf("%lld\n",ans); 
    }
    return 0;
}</code></pre>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>CCPC2019哈尔滨站总结</title>
    <url>/2019/10/15/CCPC2019%E5%93%88%E5%B0%94%E6%BB%A8%E7%AB%99%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Hc44a6b020fd5413ca3b54eea908034afn.jpg"></p>
<span id="more"></span>
<h4 id="前言">前言</h4>
<p>萌新的第一场区域赛，抱队友大腿拿了个铜，不至于打铁qwq。队友实在太强辣！</p>
<h4 id="热身赛">热身赛</h4>
<p>热身赛四道题，A，B都是傻逼题；C，D是牛客多校原题，然而我们并没有敲出来......C题原本的想法是枚举矩阵起点，然后单调栈维护纵向横向两个方向最远可以拓展的距离；后来听对面女队的小姐姐讨论，觉得可以尺取法搞搞，结果热身赛结束了都没弄出来😭。后悔没有好好补多校的题😭</p>
<p>热身赛草草结束，去东林恰了个晚饭，<del>东林的饭堂还挺好吃的</del></p>
<h4 id="正赛">正赛</h4>
<p>正赛一共过了下面四题</p>
<table>
<thead>
<tr class="header">
<th>Problem</th>
<th>Solution</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>F - Fixing Banners</td>
<td>直接6!暴力枚举</td>
</tr>
<tr class="even">
<td>I - Interesting Permutation</td>
<td>牛逼队友找规律，我一脸懵逼......</td>
</tr>
<tr class="odd">
<td>J - Justifying the Conjecture</td>
<td>&gt;=5的情况都有解，奇数分解成3 + x，偶数分解成2 + x</td>
</tr>
<tr class="even">
<td>K - Keeping Rabbits</td>
<td>无论经过多少天，概率分布都不会变化</td>
</tr>
</tbody>
</table>
<p>开场看题时沿用了我们队一直以来的策略，我从后面开始看题，zh学长从前面开始看题，pzc中间随便看。根据赛前训练的经验，签到题一般是倒数第二或第三题，再加上这次的倒数第一题是一道题面贼长的大模拟，于是看题时我没有从倒数第一题开始，而是直接选了最签到的 J，发现果然是水题，于是把题意喂给主代码手，10min内水过。</p>
<p>往后又看到了K，于是把题意告诉学长，然后自己接着看题。看题过程中发现了F和I，觉得有搞头，然后去搞了搞F，喂给学长和代码手，过了。紧接着是学长敲K，也是一发过。开场签到感觉很顺利，<del>然后就开始自闭了</del></p>
<p>签完前三题后，开始搞I 。题意是说给定一个<span class="math inline">\(1\)</span>到<span class="math inline">\(n\)</span>的排列<span class="math inline">\(a_1,a_2,a_3,...,a_n\)</span>，对于两个序列<span class="math display">\[f_i=max\{a_1,a_2,a_3,...,a_i\}\]</span>，<span class="math display">\[g_i=min\{a_1,a_2,a_3,...,a_i\}\]</span>，定义<span class="math inline">\(h_i=f_i-g_i\)</span>。现在给出一个<span class="math inline">\(h\)</span>序列，问有多少个<span class="math inline">\(1\)</span>到<span class="math inline">\(n\)</span>的排列，可以生成这样的一个<span class="math inline">\(h\)</span>序列。</p>
<p>第一反应是dp，但队里的dp选手想不出要怎么d OTZ。过了一会后牛逼队友发现这东西可以找规律解决，结果打了个表对拍一下，结果发现规律好像推错了......于是继续自闭，直到差不多一点的时候，队友才把正确的规律搞了出来，然后搞搞搞，终于过了😭。对于这题我个人感觉挺惭愧的，可以说除了读题对拍意外没有其他贡献，<del>后期还挂机了</del>。I题过了之后，排名上升到了121，终于苟到铜牌了OTZ</p>
<p>这时候还剩下一个半小时，感觉如果不把E过掉，很可能会打铁（不过事实证明还是能有铜的）。于是疯狂搞E，但最终还是很遗憾没有弄出来。赛后跟我校的另一支队了解了一下，得知他们将快读换成了A题题面上的快读就过了......过了......队友听到这都要哭了，<del>我也要哭了qwq</del></p>
<p>第一场区域赛，没有打铁，我个人已经非常满意了。大致总结一下自身的问题，一就是精神不够集中，容易进入挂机状态。无论是平时训练还是现场赛都是如此。二就是时间的利用效率还不够高，比如说这次现场赛，后期卡E题的时候，我对这题几乎是0贡献，那这时为什么我不去搞搞那两道模拟题，想个大概的框架，然后把题意和自己的想法喂给擅长模拟题的队友呢？或许这样我们能A五题？</p>
<p>就这样吧，这周银川站加油💪</p>
<h4 id="一些题外话">一些题外话</h4>
<p><img src="https://ae01.alicdn.com/kf/H7d0f28ea3f4c49c19ad981ce10d5ac0du.jpg"></p>
<center>
摄于深圳—哈尔滨的飞机上
</center>
<p><img src="https://ae01.alicdn.com/kf/Hb1000c4c83664acb8eda52e37b4c3bdce.png"></p>
<center>
东林里面居然还有个自然博物馆，我酸了qwq
</center>
<p><img src="https://ae01.alicdn.com/kf/H3d63cdbd1f44496ca159ea95fcf3795cR.jpg"></p>
<center>
哈尔滨特色锅包肉，然而并不喜欢甜食。。。
</center>
<p><img src="https://ae01.alicdn.com/kf/Hc44a6b020fd5413ca3b54eea908034afn.jpg"></p>
<center>
摄于哈尔滨太阳岛
</center>
]]></content>
      <categories>
        <category>ACM</category>
        <category>赛后总结</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>CCPC</tag>
        <tag>赛后总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces988A ~ 998E</title>
    <url>/2019/03/28/Co-de-for/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/CodeForces-988A">988D - Diverse Team</a></p>
<p>没什么好说的 <span id="more"></span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e4</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> cnt[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="dt">int</span> arr[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> ans[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-24" title="24">{</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> n,k;</a>
<a class="sourceLine" id="cb1-26" title="26">    cin&gt;&gt;n&gt;&gt;k;</a>
<a class="sourceLine" id="cb1-27" title="27">    mst(cnt,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-28" title="28">    mst(arr,<span class="dv">0</span>);mst(ans,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-30" title="30">        cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb1-31" title="31">        cnt[arr[i]]++;</a>
<a class="sourceLine" id="cb1-32" title="32">    }</a>
<a class="sourceLine" id="cb1-33" title="33">    <span class="dt">int</span> tot=<span class="dv">0</span>;<span class="dt">int</span> idx=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-35" title="35">        <span class="cf">if</span>(cnt[arr[i]]){</a>
<a class="sourceLine" id="cb1-36" title="36">            tot++;</a>
<a class="sourceLine" id="cb1-37" title="37">            cnt[arr[i]]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-38" title="38">            ans[idx++]=i;</a>
<a class="sourceLine" id="cb1-39" title="39">            <span class="cf">if</span>(tot&gt;=k)        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-40" title="40">        }</a>
<a class="sourceLine" id="cb1-41" title="41">    }</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">if</span>(tot&gt;=k){</a>
<a class="sourceLine" id="cb1-43" title="43">        cout&lt;&lt;<span class="st">"YES"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-44" title="44">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;idx;i++){</a>
<a class="sourceLine" id="cb1-45" title="45">            <span class="cf">if</span>(!i)</a>
<a class="sourceLine" id="cb1-46" title="46">                printf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,ans[i]);</a>
<a class="sourceLine" id="cb1-47" title="47">            <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-48" title="48">                printf(<span class="st">" </span><span class="sc">%d</span><span class="st">"</span>,ans[i]);</a>
<a class="sourceLine" id="cb1-49" title="49">        }</a>
<a class="sourceLine" id="cb1-50" title="50">        printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-51" title="51">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-52" title="52">        cout&lt;&lt;<span class="st">"NO"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-53" title="53">    }</a>
<a class="sourceLine" id="cb1-54" title="54">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-55" title="55">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/CodeForces-988B">988B - Substrings Sort</a></p>
<p>先根据字符串长度排个序，再用find找一下是否有子串即可</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e4</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-20" title="20">string strs[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="dt">bool</span> cmp(string sa,string sb)</a>
<a class="sourceLine" id="cb2-22" title="22">{</a>
<a class="sourceLine" id="cb2-23" title="23">    <span class="cf">return</span> sa.size()&gt;sb.size();</a>
<a class="sourceLine" id="cb2-24" title="24">}</a>
<a class="sourceLine" id="cb2-25" title="25"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-26" title="26">{</a>
<a class="sourceLine" id="cb2-27" title="27">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb2-28" title="28">    cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb2-29" title="29">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb2-30" title="30">        cin&gt;&gt;strs[i];</a>
<a class="sourceLine" id="cb2-31" title="31">    sort(strs,strs+n,cmp);</a>
<a class="sourceLine" id="cb2-32" title="32">    <span class="dt">bool</span> flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-33" title="33">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n-<span class="dv">1</span>;i++){</a>
<a class="sourceLine" id="cb2-34" title="34">        <span class="cf">if</span>(strs[i].find(strs[i+<span class="dv">1</span>])==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb2-35" title="35">            flag=<span class="dv">0</span>;<span class="cf">break</span>;</a>
<a class="sourceLine" id="cb2-36" title="36">        }</a>
<a class="sourceLine" id="cb2-37" title="37">    }</a>
<a class="sourceLine" id="cb2-38" title="38">    <span class="cf">if</span>(!flag){</a>
<a class="sourceLine" id="cb2-39" title="39">        cout&lt;&lt;<span class="st">"NO"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-40" title="40">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-41" title="41">        cout&lt;&lt;<span class="st">"YES"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-42" title="42">        <span class="cf">for</span>(<span class="dt">int</span> i=n-<span class="dv">1</span>;i&gt;=<span class="dv">0</span>;i--)</a>
<a class="sourceLine" id="cb2-43" title="43">            cout&lt;&lt;strs[i]&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-44" title="44">    }</a>
<a class="sourceLine" id="cb2-45" title="45">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-46" title="46">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/CodeForces-988C">988C - Equal Sums</a></p>
<p>对于一个序列，将总和减去某个元素所得到的数放进map中，map的key是这个元素，value是这个元素出现的次数，然后进行到后面的序列时再用map查找即可</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-20" title="20">map&lt;<span class="dt">int</span>,pair&lt;<span class="dt">int</span>,<span class="dt">int</span>&gt;&gt; mp;        <span class="co">//序列序号，元素序号 </span></a>
<a class="sourceLine" id="cb3-21" title="21"><span class="dt">int</span> arr[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb3-22" title="22"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-23" title="23">{</a>
<a class="sourceLine" id="cb3-24" title="24">    <span class="dt">int</span> k;</a>
<a class="sourceLine" id="cb3-25" title="25">    cin&gt;&gt;k;</a>
<a class="sourceLine" id="cb3-26" title="26">    pair&lt;<span class="dt">int</span>,<span class="dt">int</span>&gt; ansp;</a>
<a class="sourceLine" id="cb3-27" title="27">    <span class="dt">int</span> ansi,ansj;</a>
<a class="sourceLine" id="cb3-28" title="28">    <span class="dt">bool</span> flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-29" title="29">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=k;i++){</a>
<a class="sourceLine" id="cb3-30" title="30">        <span class="dt">int</span> sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-31" title="31">        <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb3-32" title="32">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=n;j++){</a>
<a class="sourceLine" id="cb3-33" title="33">            cin&gt;&gt;arr[j];</a>
<a class="sourceLine" id="cb3-34" title="34">            <span class="cf">if</span>(!flag)</a>
<a class="sourceLine" id="cb3-35" title="35">                sum+=arr[j];</a>
<a class="sourceLine" id="cb3-36" title="36">        }</a>
<a class="sourceLine" id="cb3-37" title="37">        <span class="cf">if</span>(!flag)</a>
<a class="sourceLine" id="cb3-38" title="38">        {</a>
<a class="sourceLine" id="cb3-39" title="39">            <span class="cf">for</span>(<span class="dt">int</span> idx=<span class="dv">1</span>;idx&lt;=n;idx++){</a>
<a class="sourceLine" id="cb3-40" title="40">                <span class="cf">if</span>(mp.count(sum-arr[idx])!=<span class="dv">0</span>&amp;&amp;mp[sum-arr[idx]].first!=i){</a>
<a class="sourceLine" id="cb3-41" title="41">                    flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-42" title="42">                    ansp=mp[sum-arr[idx]];</a>
<a class="sourceLine" id="cb3-43" title="43">                    ansi=i;ansj=idx;</a>
<a class="sourceLine" id="cb3-44" title="44">                    <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb3-45" title="45">                }</a>
<a class="sourceLine" id="cb3-46" title="46">                <span class="cf">else</span></a>
<a class="sourceLine" id="cb3-47" title="47">                    mp[sum-arr[idx]]=make_pair(i,idx);</a>
<a class="sourceLine" id="cb3-48" title="48">            }</a>
<a class="sourceLine" id="cb3-49" title="49">        }</a>
<a class="sourceLine" id="cb3-50" title="50">    }</a>
<a class="sourceLine" id="cb3-51" title="51">    <span class="cf">if</span>(flag){</a>
<a class="sourceLine" id="cb3-52" title="52">        printf(<span class="st">"YES</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb3-53" title="53">        printf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d\n</span><span class="st">"</span>,ansi,ansj);</a>
<a class="sourceLine" id="cb3-54" title="54">        printf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d\n</span><span class="st">"</span>,ansp.first,ansp.second);</a>
<a class="sourceLine" id="cb3-55" title="55">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb3-56" title="56">        printf(<span class="st">"NO</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb3-57" title="57">    }</a>
<a class="sourceLine" id="cb3-58" title="58">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-59" title="59">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/CodeForces-988D">988D - Points and Powes of Two</a></p>
<p>这道题有一个结论，就是符合要求的数字不超过三个，且它们之间满足一个关系，即三个数之间成等差数列，公差为2的n次幂(具体怎么来的，可以看这篇文章-&gt;<a href="https://blog.csdn.net/weixin_39453270/article/details/80548442">Codeforces 988D（STL运用+思维）</a>)</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb4-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb4-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb4-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb4-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb4-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb4-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb4-20" title="20">ll arr[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb4-21" title="21">set&lt;ll&gt; st;</a>
<a class="sourceLine" id="cb4-22" title="22"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb4-23" title="23">{</a>
<a class="sourceLine" id="cb4-24" title="24">    ll n;</a>
<a class="sourceLine" id="cb4-25" title="25">    cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb4-26" title="26">    <span class="cf">for</span>(ll i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb4-27" title="27">        scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,&amp;arr[i]);</a>
<a class="sourceLine" id="cb4-28" title="28">        st.insert(arr[i]);</a>
<a class="sourceLine" id="cb4-29" title="29">    }</a>
<a class="sourceLine" id="cb4-30" title="30">    <span class="cf">for</span>(ll i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb4-31" title="31">        <span class="cf">for</span>(ll j=<span class="dv">1</span>;j&lt;<span class="fl">2e9</span>+<span class="dv">5</span>;j&lt;&lt;=<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb4-32" title="32">            <span class="cf">if</span>(st.count(arr[i]+j)&amp;&amp;st.count(arr[i]+<span class="dv">2</span>*j)){</a>
<a class="sourceLine" id="cb4-33" title="33">                printf(<span class="st">"3</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb4-34" title="34">                printf(<span class="st">"</span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld\n</span><span class="st">"</span>,arr[i],arr[i]+j,arr[i]+<span class="dv">2</span>*j);</a>
<a class="sourceLine" id="cb4-35" title="35">                <span class="cf">goto</span> end;</a>
<a class="sourceLine" id="cb4-36" title="36">            }</a>
<a class="sourceLine" id="cb4-37" title="37">        }</a>
<a class="sourceLine" id="cb4-38" title="38">    }</a>
<a class="sourceLine" id="cb4-39" title="39">    <span class="cf">for</span>(ll i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb4-40" title="40">        <span class="cf">for</span>(ll j=<span class="dv">1</span>;j&lt;<span class="fl">2e9</span>+<span class="dv">5</span>;j&lt;&lt;=<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb4-41" title="41">            <span class="cf">if</span>(st.count(arr[i]+j)){</a>
<a class="sourceLine" id="cb4-42" title="42">                printf(<span class="st">"2</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb4-43" title="43">                printf(<span class="st">"</span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld\n</span><span class="st">"</span>,arr[i],arr[i]+j);</a>
<a class="sourceLine" id="cb4-44" title="44">                <span class="cf">goto</span> end;</a>
<a class="sourceLine" id="cb4-45" title="45">            }</a>
<a class="sourceLine" id="cb4-46" title="46">        }</a>
<a class="sourceLine" id="cb4-47" title="47">    }</a>
<a class="sourceLine" id="cb4-48" title="48">    printf(<span class="st">"1</span><span class="sc">\n%lld\n</span><span class="st">"</span>,arr[<span class="dv">0</span>]);</a>
<a class="sourceLine" id="cb4-49" title="49">    end:;</a>
<a class="sourceLine" id="cb4-50" title="50">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-51" title="51">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/CodeForces-988E">988E</a></p>
<p>因为能被25整除的数其末尾两位数一定是00,25,50,75中的其中一个，所以对于暴力模拟即可，得到四个交换次数，最后取最小的那个。对于前导0的处理，方法是若完成模拟后出现了前导0，就将这个0与数字中第一个(从高位开始数)非零的数交换，并将交换步数加到答案上。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb5-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb5-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb5-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb5-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb5-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb5-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb5-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb5-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb5-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb5-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb5-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb5-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb5-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb5-20" title="20"><span class="co">//00,25,50,75</span></a>
<a class="sourceLine" id="cb5-21" title="21"><span class="dt">void</span> <span class="va">swap_</span>(<span class="dt">char</span> a,<span class="dt">char</span> b)</a>
<a class="sourceLine" id="cb5-22" title="22">{</a>
<a class="sourceLine" id="cb5-23" title="23">    <span class="dt">char</span> tmp;</a>
<a class="sourceLine" id="cb5-24" title="24">    tmp=a;</a>
<a class="sourceLine" id="cb5-25" title="25">    a=b;</a>
<a class="sourceLine" id="cb5-26" title="26">    b=tmp;</a>
<a class="sourceLine" id="cb5-27" title="27">}</a>
<a class="sourceLine" id="cb5-28" title="28"><span class="dt">int</span> solve(<span class="dt">char</span> ch1,<span class="dt">char</span> ch2,string str)</a>
<a class="sourceLine" id="cb5-29" title="29">{</a>
<a class="sourceLine" id="cb5-30" title="30">    <span class="dt">int</span> len=str.size();</a>
<a class="sourceLine" id="cb5-31" title="31">    <span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-32" title="32">    <span class="cf">for</span>(<span class="dt">int</span> i=len-<span class="dv">1</span>;i&gt;=<span class="dv">0</span>;i--){</a>
<a class="sourceLine" id="cb5-33" title="33">        <span class="cf">if</span>(str[i]==ch2){</a>
<a class="sourceLine" id="cb5-34" title="34">            <span class="cf">for</span>(<span class="dt">int</span> j=i;j&lt;len-<span class="dv">1</span>;j++){</a>
<a class="sourceLine" id="cb5-35" title="35">                cnt++;</a>
<a class="sourceLine" id="cb5-36" title="36">                <span class="va">swap_</span>(str[j],str[j+<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb5-37" title="37">            }</a>
<a class="sourceLine" id="cb5-38" title="38">        }</a>
<a class="sourceLine" id="cb5-39" title="39">        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb5-40" title="40">    }</a>
<a class="sourceLine" id="cb5-41" title="41">    <span class="cf">for</span>(<span class="dt">int</span> i=len-<span class="dv">2</span>;i&gt;=<span class="dv">0</span>;i--){</a>
<a class="sourceLine" id="cb5-42" title="42">        <span class="cf">if</span>(str[i]==ch1){</a>
<a class="sourceLine" id="cb5-43" title="43">            <span class="cf">for</span>(<span class="dt">int</span> j=i;j&lt;len-<span class="dv">2</span>;j++){</a>
<a class="sourceLine" id="cb5-44" title="44">                cnt++;</a>
<a class="sourceLine" id="cb5-45" title="45">                <span class="va">swap_</span>(str[j],str[j+<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb5-46" title="46">            }</a>
<a class="sourceLine" id="cb5-47" title="47">        }</a>
<a class="sourceLine" id="cb5-48" title="48">        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb5-49" title="49">    }</a>
<a class="sourceLine" id="cb5-50" title="50">    <span class="dt">int</span> pos=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-51" title="51">    <span class="cf">if</span>(str[<span class="dv">0</span>]==<span class="ch">'0'</span>){</a>
<a class="sourceLine" id="cb5-52" title="52">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;len;i++){</a>
<a class="sourceLine" id="cb5-53" title="53">            <span class="cf">if</span>(str[i]!=<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb5-54" title="54">                pos=i;<span class="cf">break</span>;</a>
<a class="sourceLine" id="cb5-55" title="55">            }</a>
<a class="sourceLine" id="cb5-56" title="56">        }</a>
<a class="sourceLine" id="cb5-57" title="57">        cnt+=pos;</a>
<a class="sourceLine" id="cb5-58" title="58">    }</a>
<a class="sourceLine" id="cb5-59" title="59">    <span class="cf">return</span> cnt;</a>
<a class="sourceLine" id="cb5-60" title="60">}</a>
<a class="sourceLine" id="cb5-61" title="61"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb5-62" title="62">{</a>
<a class="sourceLine" id="cb5-63" title="63">    string num;</a>
<a class="sourceLine" id="cb5-64" title="64">    cin&gt;&gt;num;</a>
<a class="sourceLine" id="cb5-65" title="65">    <span class="dt">int</span> ans1,ans2,ans3,ans4;</a>
<a class="sourceLine" id="cb5-66" title="66">    ans1=solve(<span class="ch">'0'</span>,<span class="ch">'0'</span>,num);</a>
<a class="sourceLine" id="cb5-67" title="67">    ans2=solve(<span class="ch">'2'</span>,<span class="ch">'5'</span>,num);</a>
<a class="sourceLine" id="cb5-68" title="68">    ans3=solve(<span class="ch">'5'</span>,<span class="ch">'0'</span>,num);</a>
<a class="sourceLine" id="cb5-69" title="69">    ans4=solve(<span class="ch">'7'</span>,<span class="ch">'5'</span>,num);</a>
<a class="sourceLine" id="cb5-70" title="70">    <span class="dt">int</span> ans=min(ans1,min(ans2,min(ans3,ans4)));</a>
<a class="sourceLine" id="cb5-71" title="71">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb5-72" title="72">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-73" title="73">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces - 1095A Repeating Cipher </title>
    <url>/2019/02/24/CodeForces-1095A-Repeating-Cipher/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/CodeForces-1095A">Repeating Cipher</a></p>
<p>  emmmmmm感觉没什么好说的hhhhh</p>
<span id="more"></span>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define INF </span><span class="bn">0x3fffffff</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#define JIN </span><span class="dv">678</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">char</span> str[<span class="dv">60</span>];</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">char</span> ans[<span class="dv">2000</span>];</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-17" title="17">{</a>
<a class="sourceLine" id="cb1-18" title="18">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-19" title="19">    cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-20" title="20">    getchar();</a>
<a class="sourceLine" id="cb1-21" title="21">    scanf(<span class="st">"</span><span class="sc">%s</span><span class="st">"</span>,str);</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="dt">int</span> idx=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="dt">int</span> j;<span class="dt">int</span> i;</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="cf">for</span>(i=<span class="dv">0</span>,j=<span class="dv">0</span>;i&lt;n;j++,i+=j)</a>
<a class="sourceLine" id="cb1-26" title="26">        ans[cnt++]=str[i];</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">for</span>(<span class="dt">int</span> idx=<span class="dv">0</span>;idx&lt;cnt;idx++)</a>
<a class="sourceLine" id="cb1-28" title="28">        printf(<span class="st">"</span><span class="sc">%c</span><span class="st">"</span>,ans[idx]);</a>
<a class="sourceLine" id="cb1-29" title="29">    cout&lt;&lt;<span class="ch">'</span><span class="sc">\n</span><span class="ch">'</span>;</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-31" title="31">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces - 1095B Array Stabilization</title>
    <url>/2019/02/24/CodeForces-1095B-Array-Stabilization/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/CodeForces-1095B">Array Stabilization</a></p>
<p>  题意是要求最大值和最小值的差值的最小值。容易想到，对于一个有序序列，最可能得到这个最小值的是删去这个序列的最大值或最小值，因为删去除最大值和最小值外的数并不会改变差值的最小值。因此，我们只需要比较一下删去最大值和最小值后得到的差值，然后挑小的那个即可。 <span id="more"></span></p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define INF </span><span class="bn">0x3fffffff</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#define JIN </span><span class="dv">678</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">int</span> arr[maxn];</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-16" title="16">{</a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-18" title="18">    cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-19" title="19">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-20" title="20">        cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb1-21" title="21">    sort(arr,arr+n);</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="dt">int</span> ans1,ans2;</a>
<a class="sourceLine" id="cb1-23" title="23">    ans1=arr[n-<span class="dv">2</span>]-arr[<span class="dv">0</span>];</a>
<a class="sourceLine" id="cb1-24" title="24">    ans2=arr[n-<span class="dv">1</span>]-arr[<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> ans=min(ans1,ans2);</a>
<a class="sourceLine" id="cb1-26" title="26">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-28" title="28">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces1136C - Nastya Is Transposing Matrices</title>
    <url>/2019/04/28/CodeForces-1136C-Nastya-Is-Transposing-Matrices/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/HTB1HXZebRCw3KVjSZR0q6zcUpXak.jpg">Photo by Fancycrave.com from Pexels</p>
<span id="more"></span>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1136C">Nastya Is Transposing Matrices</a></p>
<p>题目大意就是说有两个<span class="math inline">\(n \times m\)</span>的矩阵A和B，现在可以从矩阵A中取出一个方阵并对这个方阵进行转置，问能否通过这种操作来使得A转换为B。</p>
<p>首先，转置是不会影响被转置方阵的主对角线的，他只会对被转置方阵的副对角线上的元素的顺序造成影响。因此，要判断A是否能通过这样的操作转换为B，只需要判断在每一个指向右上方方向的直线上，A和B的所具有的元素是否相同即可。比方说：</p>
<p><span class="math display">\[
\begin{aligned}
A_1=
\begin{bmatrix}
1&amp;2&amp;3\\
4&amp;5&amp;6\\
7&amp;8&amp;9
\end{bmatrix}
\  ,
B_1=
\begin{bmatrix}
1&amp;2&amp;3\\
4&amp;7&amp;6\\
5&amp;8&amp;9
\end{bmatrix}
\end{aligned}
\]</span></p>
<p>这两个矩阵之间，A<sub>1</sub>是可以通过转置得到B<sub>1</sub>的，因为它们右上角方向上的数分别是1；2，4；3，5，7；6，8；9，只是排列顺序不一样。</p>
<p>但下面这两个矩阵就不行了：</p>
<p><span class="math display">\[
\begin{aligned}
A_2=
\begin{bmatrix}
1&amp;2&amp;3\\
4&amp;5&amp;6\\
7&amp;8&amp;9
\end{bmatrix}
\  ,
B_2=
\begin{bmatrix}
1&amp;2&amp;3\\
9&amp;7&amp;6\\
5&amp;8&amp;9
\end{bmatrix}
\end{aligned}
\]</span></p>
<p>其中原因不再赘述。</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> ma[<span class="dv">505</span>][<span class="dv">505</span>];</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="dt">int</span> mb[<span class="dv">505</span>][<span class="dv">505</span>];</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> arr1[<span class="dv">505</span>];</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> arr2[<span class="dv">505</span>];</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">bool</span> check(<span class="dt">int</span> x,<span class="dt">int</span> y)</a>
<a class="sourceLine" id="cb1-26" title="26">{</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="dt">int</span> i=x;</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="dt">int</span> j=y;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> cnt1=<span class="dv">0</span>;<span class="dt">int</span> cnt2=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">for</span>(i=x,j=y;i&gt;=<span class="dv">1</span>&amp;&amp;j&lt;=m;i--,j++){</a>
<a class="sourceLine" id="cb1-31" title="31">        arr1[cnt1++]=ma[i][j];</a>
<a class="sourceLine" id="cb1-32" title="32">        arr2[cnt2++]=mb[i][j];</a>
<a class="sourceLine" id="cb1-33" title="33">    }</a>
<a class="sourceLine" id="cb1-34" title="34">    sort(arr1,arr1+cnt1);</a>
<a class="sourceLine" id="cb1-35" title="35">    sort(arr2,arr2+cnt2);</a>
<a class="sourceLine" id="cb1-36" title="36">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;cnt1;i++)</a>
<a class="sourceLine" id="cb1-37" title="37">        <span class="cf">if</span>(arr1[i]!=arr2[i])</a>
<a class="sourceLine" id="cb1-38" title="38">            <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="cf">return</span> <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-40" title="40">}</a>
<a class="sourceLine" id="cb1-41" title="41"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-42" title="42">{</a>
<a class="sourceLine" id="cb1-43" title="43">    cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb1-44" title="44">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-45" title="45">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=m;j++)</a>
<a class="sourceLine" id="cb1-46" title="46">            cin&gt;&gt;ma[i][j];</a>
<a class="sourceLine" id="cb1-47" title="47">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-48" title="48">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=m;j++)</a>
<a class="sourceLine" id="cb1-49" title="49">            cin&gt;&gt;mb[i][j];</a>
<a class="sourceLine" id="cb1-50" title="50">    <span class="dt">bool</span> flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-51" title="51">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-52" title="52">        <span class="cf">if</span>(!check(i,<span class="dv">1</span>)){</a>
<a class="sourceLine" id="cb1-53" title="53">            flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-54" title="54">            <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-55" title="55">        }</a>
<a class="sourceLine" id="cb1-56" title="56">    }</a>
<a class="sourceLine" id="cb1-57" title="57">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++){</a>
<a class="sourceLine" id="cb1-58" title="58">        <span class="cf">if</span>(!check(n,i)){</a>
<a class="sourceLine" id="cb1-59" title="59">            flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-60" title="60">            <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-61" title="61">        }</a>
<a class="sourceLine" id="cb1-62" title="62">    }</a>
<a class="sourceLine" id="cb1-63" title="63">    <span class="cf">if</span>(flag)</a>
<a class="sourceLine" id="cb1-64" title="64">        cout&lt;&lt;<span class="st">"YES"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-65" title="65">    <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-66" title="66">        cout&lt;&lt;<span class="st">"NO"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-67" title="67">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-68" title="68">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>思维</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>思维</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeForces - 149D Coloring Brackets</title>
    <url>/2019/07/30/CodeForces-149D-Coloring-Brackets/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Ha807ab515a9047d3ac8f965971498456a.jpg"></p>
<p>Photo by <strong>eberhard grossgasteiger</strong> from <strong>Pexels</strong></p>
<span id="more"></span>
<p><a href="https://cn.vjudge.net/problem/CodeForces-149D">Coloring Brackets</a></p>
<p>（区间dp好题！）</p>
<p>题目大意是说，给定一个保证配对的括号序列S，现在要对这些括号染上蓝色或红色，且需要满足以下三个要求:</p>
<ul>
<li>对于每个括号，要么染上红色，要么染上蓝色，要么不染色</li>
<li>对于每一对配对的括号，有且仅有一个括号被染色</li>
<li>任意两个相邻的括号都没有相同的颜色</li>
</ul>
<p>问一共有多少种染色方案。</p>
<p>思路是区间DP，用<span class="math inline">\(dp[lef][rig][l][r]\)</span>表示对于子区间<span class="math inline">\(S_{lef···rig}\)</span>，在左端括号颜色为<span class="math inline">\(l\)</span>右端括号颜色为<span class="math inline">\(r\)</span>的情况下，所能得到的染色方案数。如果<span class="math inline">\(S_{lef}\)</span>和<span class="math inline">\(S_{rig}\)</span>配对，则处理<span class="math inline">\(S_{lef+1···rig-1}\)</span>，然后从<span class="math inline">\(dp[lef+1][rig-1][i][j]\)</span>转移得到<span class="math inline">\(dp[lef][rig][1][0]\)</span>，<span class="math inline">\(dp[lef][rig][2][0]\)</span>，<span class="math inline">\(dp[lef][rig][0][1]\)</span>，<span class="math inline">\(dp[lef][rig][0][2]\)</span>。如果不配对，则找出区间<span class="math inline">\([lef,rig]\)</span>中和左括号配对的那个括号的下标<span class="math inline">\(mat\)</span>，然后依次为区间断点来合并区间转移得到结果。此时的状态转移方程为 <span class="math display">\[
dp[lef][rig][i][j]=(dp[lef][rig][i][j]+dp[lef][mat][i][k]*dp[mat+1][rig][p][j])\ \%\ mod
\]</span> 关于如何找到左括号配对的右括号，只需要用个栈做一下预处理即可。左括号入栈，右括号将当前栈顶元素与右括号配对并弹栈。</p>
<p>最后只需要把<span class="math inline">\(dp[1][len][0...2][0...2]\)</span>分别加起来即可得到答案。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">char</span> str[<span class="dv">705</span>];</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">int</span> match[<span class="dv">705</span>];</a>
<a class="sourceLine" id="cb1-25" title="25">ll dp[<span class="dv">705</span>][<span class="dv">705</span>][<span class="dv">3</span>][<span class="dv">3</span>];</a>
<a class="sourceLine" id="cb1-26" title="26"><span class="at">const</span> <span class="dt">int</span> mod=<span class="fl">1e9</span>+<span class="dv">7</span>;</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">void</span> init(<span class="dt">int</span> len)</a>
<a class="sourceLine" id="cb1-28" title="28">{</a>
<a class="sourceLine" id="cb1-29" title="29">    stack&lt;<span class="dt">int</span>&gt; stk;</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=len;i++){</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="cf">if</span>(str[i]==<span class="ch">'('</span>){</a>
<a class="sourceLine" id="cb1-32" title="32">            stk.push(i);</a>
<a class="sourceLine" id="cb1-33" title="33">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-34" title="34">            match[i]=stk.top();</a>
<a class="sourceLine" id="cb1-35" title="35">            match[stk.top()]=i;</a>
<a class="sourceLine" id="cb1-36" title="36">            stk.pop();</a>
<a class="sourceLine" id="cb1-37" title="37">        }</a>
<a class="sourceLine" id="cb1-38" title="38">    }</a>
<a class="sourceLine" id="cb1-39" title="39">}</a>
<a class="sourceLine" id="cb1-40" title="40"><span class="dt">void</span> solve(<span class="dt">int</span> lef,<span class="dt">int</span> rig)</a>
<a class="sourceLine" id="cb1-41" title="41">{</a>
<a class="sourceLine" id="cb1-42" title="42"><span class="co">//    mst(dp,0);</span></a>
<a class="sourceLine" id="cb1-43" title="43">    <span class="cf">if</span>(rig-<span class="dv">1</span>==lef){</a>
<a class="sourceLine" id="cb1-44" title="44">        dp[lef][rig][<span class="dv">1</span>][<span class="dv">0</span>]=dp[lef][rig][<span class="dv">0</span>][<span class="dv">1</span>]=dp[lef][rig][<span class="dv">2</span>][<span class="dv">0</span>]=dp[lef][rig][<span class="dv">0</span>][<span class="dv">2</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-45" title="45">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-46" title="46">    }</a>
<a class="sourceLine" id="cb1-47" title="47">    <span class="cf">if</span>(match[lef]==rig){</a>
<a class="sourceLine" id="cb1-48" title="48">        solve(lef+<span class="dv">1</span>,rig-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-49" title="49">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">3</span>;i++){        <span class="co">//枚举左端颜色 </span></a>
<a class="sourceLine" id="cb1-50" title="50">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;<span class="dv">3</span>;j++){    <span class="co">//枚举右端颜色 </span></a>
<a class="sourceLine" id="cb1-51" title="51">                <span class="cf">if</span>(i!=<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-52" title="52">                    dp[lef][rig][<span class="dv">1</span>][<span class="dv">0</span>]=(dp[lef][rig][<span class="dv">1</span>][<span class="dv">0</span>]+dp[lef+<span class="dv">1</span>][rig-<span class="dv">1</span>][i][j])%mod;</a>
<a class="sourceLine" id="cb1-53" title="53">                <span class="cf">if</span>(i!=<span class="dv">2</span>)</a>
<a class="sourceLine" id="cb1-54" title="54">                    dp[lef][rig][<span class="dv">2</span>][<span class="dv">0</span>]=(dp[lef][rig][<span class="dv">2</span>][<span class="dv">0</span>]+dp[lef+<span class="dv">1</span>][rig-<span class="dv">1</span>][i][j])%mod;</a>
<a class="sourceLine" id="cb1-55" title="55">                <span class="cf">if</span>(j!=<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-56" title="56">                    dp[lef][rig][<span class="dv">0</span>][<span class="dv">1</span>]=(dp[lef][rig][<span class="dv">0</span>][<span class="dv">1</span>]+dp[lef+<span class="dv">1</span>][rig-<span class="dv">1</span>][i][j])%mod;</a>
<a class="sourceLine" id="cb1-57" title="57">                <span class="cf">if</span>(j!=<span class="dv">2</span>)</a>
<a class="sourceLine" id="cb1-58" title="58">                    dp[lef][rig][<span class="dv">0</span>][<span class="dv">2</span>]=(dp[lef][rig][<span class="dv">0</span>][<span class="dv">2</span>]+dp[lef+<span class="dv">1</span>][rig-<span class="dv">1</span>][i][j])%mod;</a>
<a class="sourceLine" id="cb1-59" title="59">            }</a>
<a class="sourceLine" id="cb1-60" title="60">        }</a>
<a class="sourceLine" id="cb1-61" title="61">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-62" title="62">        <span class="dt">int</span> mat=match[lef];</a>
<a class="sourceLine" id="cb1-63" title="63">        solve(lef,mat);solve(mat+<span class="dv">1</span>,rig);</a>
<a class="sourceLine" id="cb1-64" title="64">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">3</span>;i++){</a>
<a class="sourceLine" id="cb1-65" title="65">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;<span class="dv">3</span>;j++){</a>
<a class="sourceLine" id="cb1-66" title="66">                <span class="co">//枚举颜色 </span></a>
<a class="sourceLine" id="cb1-67" title="67">                <span class="cf">for</span>(<span class="dt">int</span> k=<span class="dv">0</span>;k&lt;<span class="dv">3</span>;k++){</a>
<a class="sourceLine" id="cb1-68" title="68">                    <span class="cf">for</span>(<span class="dt">int</span> p=<span class="dv">0</span>;p&lt;<span class="dv">3</span>;p++){</a>
<a class="sourceLine" id="cb1-69" title="69">                    <span class="co">//枚举颜色 </span></a>
<a class="sourceLine" id="cb1-70" title="70">                        <span class="cf">if</span>(k!=p||k==<span class="dv">0</span>){        <span class="co">//&lt;-</span></a>
<a class="sourceLine" id="cb1-71" title="71">                            dp[lef][rig][i][j]=(dp[lef][rig][i][j]+dp[lef][mat][i][k]*dp[mat+<span class="dv">1</span>][rig][p][j])%mod;</a>
<a class="sourceLine" id="cb1-72" title="72">                        }</a>
<a class="sourceLine" id="cb1-73" title="73">                    }</a>
<a class="sourceLine" id="cb1-74" title="74">                }</a>
<a class="sourceLine" id="cb1-75" title="75">            }</a>
<a class="sourceLine" id="cb1-76" title="76">        }</a>
<a class="sourceLine" id="cb1-77" title="77">    }</a>
<a class="sourceLine" id="cb1-78" title="78">}</a>
<a class="sourceLine" id="cb1-79" title="79"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-80" title="80">{</a>
<a class="sourceLine" id="cb1-81" title="81">    scanf(<span class="st">"</span><span class="sc">%s</span><span class="st">"</span>,str+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-82" title="82">    <span class="dt">int</span> len=strlen(str+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-83" title="83">    init(len);</a>
<a class="sourceLine" id="cb1-84" title="84">    mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-85" title="85">    ll ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-86" title="86">    solve(<span class="dv">1</span>,len);</a>
<a class="sourceLine" id="cb1-87" title="87">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">3</span>;i++)</a>
<a class="sourceLine" id="cb1-88" title="88">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;<span class="dv">3</span>;j++)</a>
<a class="sourceLine" id="cb1-89" title="89">            ans=(ans+dp[<span class="dv">1</span>][len][i][j])%mod;</a>
<a class="sourceLine" id="cb1-90" title="90">    printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-91" title="91">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-92" title="92">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>区间DP</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>区间DP</tag>
        <tag>CodeForces</tag>
        <tag>好题！</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 1064D - Labyrinth</title>
    <url>/2019/08/25/Codeforces-1064D-Labyrinth/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H322f2a344041467eac0980910fa45d97Q.jpg"></p>
<span id="more"></span>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1064D">Labyrinth</a></p>
<p>题意是说，有一个迷宫，限制了左移和右移的次数，但上移和下移的次数不做限制，问从某一点出发，最多能访问多少个点。</p>
<p>bfs搜一遍，每个节点记录当前剩余的左移和右移次数。需要注意的是，这题应该使用优先队列，每次走的时候优先走那些剩余左右移动次数多的点，这样才能尽可能地访问更多的点。这应该也算是一种贪心策略。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> lmx,rmx;</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> x,y;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> lef,rig;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> node&amp; na) <span class="at">const</span>{</a>
<a class="sourceLine" id="cb1-28" title="28">        <span class="cf">if</span>(lef==na.lef)    <span class="cf">return</span> rig&lt;na.rig;        <span class="co">//优先走那些左右次数大的点,否则会导致有些点无法到达 </span></a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="cf">return</span> lef&lt;na.lef;</a>
<a class="sourceLine" id="cb1-30" title="30">    }</a>
<a class="sourceLine" id="cb1-31" title="31">};</a>
<a class="sourceLine" id="cb1-32" title="32"><span class="dt">char</span> mp[<span class="dv">2005</span>][<span class="dv">2005</span>];</a>
<a class="sourceLine" id="cb1-33" title="33"><span class="dt">bool</span> vis[<span class="dv">2005</span>][<span class="dv">2005</span>];</a>
<a class="sourceLine" id="cb1-34" title="34"><span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-35" title="35"><span class="dt">int</span> dir[<span class="dv">4</span>][<span class="dv">2</span>]=&lt;!--swig￼<span class="dv">0</span>--&gt;;        <span class="co">//上,下,左,右 </span></a>
<a class="sourceLine" id="cb1-36" title="36"><span class="dt">bool</span> check(<span class="dt">int</span> cx,<span class="dt">int</span> cy)            <span class="co">//行,列 </span></a>
<a class="sourceLine" id="cb1-37" title="37">{</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="cf">if</span>(cx&lt;<span class="dv">0</span>||cx&gt;=n||cy&lt;<span class="dv">0</span>||cy&gt;=m||mp[cx][cy]==<span class="ch">'*'</span>||vis[cx][cy])    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="cf">return</span> <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-40" title="40">}</a>
<a class="sourceLine" id="cb1-41" title="41"><span class="dt">int</span> bfs(<span class="dt">int</span> sx,<span class="dt">int</span> sy)</a>
<a class="sourceLine" id="cb1-42" title="42">{</a>
<a class="sourceLine" id="cb1-43" title="43">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-44" title="44">    mst(vis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-45" title="45">    priority_queue&lt;node&gt; que;</a>
<a class="sourceLine" id="cb1-46" title="46">    que.push(node{sx,sy,lmx,rmx});</a>
<a class="sourceLine" id="cb1-47" title="47">    vis[sx][sy]=<span class="dv">1</span>;ans++;</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb1-49" title="49">        node cur=que.top();</a>
<a class="sourceLine" id="cb1-50" title="50">        que.pop();</a>
<a class="sourceLine" id="cb1-51" title="51">        <span class="dt">int</span> xx=cur.x;<span class="dt">int</span> yy=cur.y;</a>
<a class="sourceLine" id="cb1-52" title="52">        <span class="dt">int</span> L=cur.lef;</a>
<a class="sourceLine" id="cb1-53" title="53">        <span class="dt">int</span> R=cur.rig;</a>
<a class="sourceLine" id="cb1-54" title="54">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">4</span>;i++){</a>
<a class="sourceLine" id="cb1-55" title="55">            <span class="dt">int</span> tx=xx+dir[i][<span class="dv">0</span>];</a>
<a class="sourceLine" id="cb1-56" title="56">            <span class="dt">int</span> ty=yy+dir[i][<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-57" title="57">            <span class="cf">if</span>(i==<span class="dv">2</span>){</a>
<a class="sourceLine" id="cb1-58" title="58">                <span class="cf">if</span>(L&lt;=<span class="dv">0</span>)    <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb1-59" title="59">                <span class="cf">if</span>(check(tx,ty)){</a>
<a class="sourceLine" id="cb1-60" title="60">                    vis[tx][ty]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-61" title="61">                    que.push(node{tx,ty,L-<span class="dv">1</span>,R});</a>
<a class="sourceLine" id="cb1-62" title="62">                    ans++;</a>
<a class="sourceLine" id="cb1-63" title="63">                }</a>
<a class="sourceLine" id="cb1-64" title="64">            }<span class="cf">else</span> <span class="cf">if</span>(i==<span class="dv">3</span>){</a>
<a class="sourceLine" id="cb1-65" title="65">                <span class="cf">if</span>(R&lt;=<span class="dv">0</span>)    <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb1-66" title="66">                <span class="cf">if</span>(check(tx,ty)){</a>
<a class="sourceLine" id="cb1-67" title="67">                    vis[tx][ty]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-68" title="68">                    que.push(node{tx,ty,L,R-<span class="dv">1</span>});</a>
<a class="sourceLine" id="cb1-69" title="69">                    ans++;</a>
<a class="sourceLine" id="cb1-70" title="70">                }</a>
<a class="sourceLine" id="cb1-71" title="71">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-72" title="72">                <span class="cf">if</span>(check(tx,ty)){</a>
<a class="sourceLine" id="cb1-73" title="73">                    vis[tx][ty]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-74" title="74">                    que.push(node{tx,ty,L,R});</a>
<a class="sourceLine" id="cb1-75" title="75">                    ans++;</a>
<a class="sourceLine" id="cb1-76" title="76">                }</a>
<a class="sourceLine" id="cb1-77" title="77">            }</a>
<a class="sourceLine" id="cb1-78" title="78">        }</a>
<a class="sourceLine" id="cb1-79" title="79">    }</a>
<a class="sourceLine" id="cb1-80" title="80">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-81" title="81">}</a>
<a class="sourceLine" id="cb1-82" title="82"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-83" title="83">{</a>
<a class="sourceLine" id="cb1-84" title="84">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m);</a>
<a class="sourceLine" id="cb1-85" title="85">    <span class="dt">int</span> r,c;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;r,&amp;c);</a>
<a class="sourceLine" id="cb1-86" title="86">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;lmx,&amp;rmx);</a>
<a class="sourceLine" id="cb1-87" title="87">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb1-88" title="88">        scanf(<span class="st">"</span><span class="sc">%s</span><span class="st">"</span>,mp[i]);</a>
<a class="sourceLine" id="cb1-89" title="89">    }</a>
<a class="sourceLine" id="cb1-90" title="90">    <span class="dt">int</span> ans=bfs(r-<span class="dv">1</span>,c-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-91" title="91">    printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-92" title="92">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-93" title="93">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>BFS&amp;DFS</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C++</tag>
        <tag>BFS</tag>
        <tag>优先队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces1077C - Good Array</title>
    <url>/2019/03/31/Codeforces-1077C/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/CodeForces-1077C">Good Array</a></p>
<p>题目大意就是对于一个有限数列，如果其中一个元素可以表示为数列中其他所有元素的和，则这个数列(数组)被称为Good Array。现在有一个数列a，请找出所有的元素，使得删去这些元素后这个数列为Good Array <span id="more"></span></p>
<p>思路:如果一个数列是Good Array,则一定是其他元素的和等于数列中最大的元素的值。故先排个序，然后用前缀和<span class="math display">\[O(n)\]</span>解决(注意要用long long)</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb1-21" title="21">    ll val;</a>
<a class="sourceLine" id="cb1-22" title="22">    ll id;</a>
<a class="sourceLine" id="cb1-23" title="23">};</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">bool</span> cmp(node a,node b)</a>
<a class="sourceLine" id="cb1-25" title="25">{</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="cf">return</span> a.val&lt;b.val;</a>
<a class="sourceLine" id="cb1-27" title="27">}</a>
<a class="sourceLine" id="cb1-28" title="28">node arr[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb1-29" title="29">ll sum[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb1-30" title="30">ll ans[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb1-31" title="31"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-32" title="32">{</a>
<a class="sourceLine" id="cb1-33" title="33">    ll n;</a>
<a class="sourceLine" id="cb1-34" title="34">    cin&gt;&gt;n;mst(arr,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-35" title="35">    mst(sum,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-36" title="36">    mst(ans,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-37" title="37">    <span class="cf">for</span>(ll i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-38" title="38">        cin&gt;&gt;arr[i].val;</a>
<a class="sourceLine" id="cb1-39" title="39">        arr[i].id=i;</a>
<a class="sourceLine" id="cb1-40" title="40">    }</a>
<a class="sourceLine" id="cb1-41" title="41">    sort(arr+<span class="dv">1</span>,arr+<span class="dv">1</span>+n,cmp);</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">for</span>(ll i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-43" title="43">        sum[i]=sum[i-<span class="dv">1</span>]+arr[i].val;</a>
<a class="sourceLine" id="cb1-44" title="44">    <span class="dt">bool</span> flag=<span class="dv">0</span>;ll cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-45" title="45">    <span class="cf">for</span>(ll i=n;i&gt;=<span class="dv">1</span>;i--){</a>
<a class="sourceLine" id="cb1-46" title="46">        <span class="cf">if</span>(i==n){</a>
<a class="sourceLine" id="cb1-47" title="47">            <span class="cf">if</span>(sum[n-<span class="dv">2</span>]==arr[n-<span class="dv">1</span>].val)</a>
<a class="sourceLine" id="cb1-48" title="48">                ans[cnt++]=arr[i].id;</a>
<a class="sourceLine" id="cb1-49" title="49">        }<span class="cf">else</span> <span class="cf">if</span>(i==<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-50" title="50">            <span class="cf">if</span>(sum[n-<span class="dv">1</span>]-arr[<span class="dv">1</span>].val==arr[n].val)</a>
<a class="sourceLine" id="cb1-51" title="51">                ans[cnt++]=arr[i].id;</a>
<a class="sourceLine" id="cb1-52" title="52">        }<span class="cf">else</span> <span class="cf">if</span>(i==n-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-53" title="53">            <span class="cf">if</span>(sum[i-<span class="dv">1</span>]==arr[n].val)</a>
<a class="sourceLine" id="cb1-54" title="54">                ans[cnt++]=arr[i].id;</a>
<a class="sourceLine" id="cb1-55" title="55">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-56" title="56">            <span class="cf">if</span>(sum[i-<span class="dv">1</span>]+sum[n-<span class="dv">1</span>]-sum[i-<span class="dv">1</span>]-arr[i].val==arr[n].val)</a>
<a class="sourceLine" id="cb1-57" title="57">                ans[cnt++]=arr[i].id;</a>
<a class="sourceLine" id="cb1-58" title="58">        }</a>
<a class="sourceLine" id="cb1-59" title="59">    }</a>
<a class="sourceLine" id="cb1-60" title="60">    cout&lt;&lt;cnt&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-61" title="61">    <span class="cf">for</span>(ll i=<span class="dv">0</span>;i&lt;cnt;i++){</a>
<a class="sourceLine" id="cb1-62" title="62">        <span class="cf">if</span>(i==<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-63" title="63">            printf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,ans[i]);</a>
<a class="sourceLine" id="cb1-64" title="64">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-65" title="65">            printf(<span class="st">" </span><span class="sc">%lld</span><span class="st">"</span>,ans[i]);</a>
<a class="sourceLine" id="cb1-66" title="66">    }</a>
<a class="sourceLine" id="cb1-67" title="67">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-68" title="68">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces 1374E1 - Reading Books (easy version)</title>
    <url>/2020/07/08/Codeforces-1374E1-Reading-Books-easy-version/</url>
    <content><![CDATA[<p><img src="https://pic.downk.cc/item/5f05d99d14195aa59424eb9e.jpg"></p>
<span id="more"></span>
<h3 id="前言">前言</h3>
<p>每次期末后的复建运动都格外痛苦（</p>
<h3 id="正文">正文</h3>
<p>题意是说，给定<span class="math inline">\(n\)</span>本书，如果书都有属性<span class="math inline">\(a,b,t\)</span>。如果<span class="math inline">\(a=1\)</span>，则说明Alice喜欢读这本书，<span class="math inline">\(0\)</span>则不喜欢；如果<span class="math inline">\(b=1\)</span>，则说明Bob喜欢读这本书，<span class="math inline">\(0\)</span>则不喜欢。<span class="math inline">\(t\)</span>是每本书的代价。从中选出若干本书，这些书中Alice和Bob喜欢读的都不少于<span class="math inline">\(k\)</span>本。问如何选择，才能使代价总和最小。</p>
<p>思路是贪心。记Alice和Bob都喜欢的书为11类，只有Alice喜欢的为10类，只有Bob喜欢的为01类。容易注意到，选择Alice和Bob都喜欢读的书性价比要更高一些。所以，我们首先对三种属性分别排序，如果当前取了<span class="math inline">\(i\)</span>本11类的书，那么，对于Alice，我们要为她取10类和01类共<span class="math inline">\(k-i\)</span>本书；Bob也是同理。如果发现10类或01类的书的数目小于<span class="math inline">\(k-i\)</span>，则说明在取<span class="math inline">\(i\)</span>本11类书的情况下，没有可行的方案。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;limits&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,<span class="pp"> </span>b)<span class="pp"> </span>memset((a),<span class="pp"> </span>(b),<span class="pp"> </span><span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define lson </span>lef,<span class="pp"> </span>mid,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="pp">#define rson </span>mid<span class="pp"> </span>+<span class="pp"> </span><span class="dv">1</span>,<span class="pp"> </span>rig,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span><span class="pp"> </span>|<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb1-20" title="20"><span class="at">const</span> <span class="dt">int</span> maxn = <span class="fl">2e5</span> + <span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="kw">struct</span> node {</a>
<a class="sourceLine" id="cb1-25" title="25">    ll t;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> a;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="dt">int</span> b;</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> node&amp; nn) <span class="at">const</span></a>
<a class="sourceLine" id="cb1-29" title="29">    {</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="cf">return</span> t &lt; nn.t;</a>
<a class="sourceLine" id="cb1-31" title="31">    }</a>
<a class="sourceLine" id="cb1-32" title="32">};</a>
<a class="sourceLine" id="cb1-33" title="33">node allone[maxn];</a>
<a class="sourceLine" id="cb1-34" title="34">node A[maxn];</a>
<a class="sourceLine" id="cb1-35" title="35">node B[maxn];</a>
<a class="sourceLine" id="cb1-36" title="36">ll sum1[maxn];</a>
<a class="sourceLine" id="cb1-37" title="37">ll sum2[maxn];</a>
<a class="sourceLine" id="cb1-38" title="38">ll sum3[maxn];</a>
<a class="sourceLine" id="cb1-39" title="39">unordered_map&lt;<span class="dt">int</span>, <span class="dt">bool</span>&gt; mp;</a>
<a class="sourceLine" id="cb1-40" title="40"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-41" title="41">{</a>
<a class="sourceLine" id="cb1-42" title="42">    mp.clear();</a>
<a class="sourceLine" id="cb1-43" title="43">    <span class="dt">int</span> n, k;</a>
<a class="sourceLine" id="cb1-44" title="44">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>, &amp;n, &amp;k);</a>
<a class="sourceLine" id="cb1-45" title="45">    <span class="dt">int</span> idx1, idx2, idx3;</a>
<a class="sourceLine" id="cb1-46" title="46">    idx1 = idx2 = idx3 = <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-47" title="47">    ll <span class="va">t_</span>;</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="dt">int</span> <span class="va">a_</span>, <span class="va">b_</span>;</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">1</span>; i &lt;= n; i++) {</a>
<a class="sourceLine" id="cb1-50" title="50">        scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>, &amp;<span class="va">t_</span>, &amp;<span class="va">a_</span>, &amp;<span class="va">b_</span>);</a>
<a class="sourceLine" id="cb1-51" title="51">        <span class="cf">if</span> (<span class="va">a_</span> &amp;&amp; <span class="va">b_</span>)</a>
<a class="sourceLine" id="cb1-52" title="52">            allone[idx1++] = { <span class="va">t_</span>, <span class="va">a_</span>, <span class="va">b_</span> };</a>
<a class="sourceLine" id="cb1-53" title="53">        <span class="cf">if</span> (<span class="va">a_</span> &amp;&amp; !<span class="va">b_</span>)</a>
<a class="sourceLine" id="cb1-54" title="54">            A[idx2++] = { <span class="va">t_</span>, <span class="va">a_</span>, <span class="va">b_</span> };</a>
<a class="sourceLine" id="cb1-55" title="55">        <span class="cf">if</span> (!<span class="va">a_</span> &amp;&amp; <span class="va">b_</span>)</a>
<a class="sourceLine" id="cb1-56" title="56">            B[idx3++] = { <span class="va">t_</span>, <span class="va">a_</span>, <span class="va">b_</span> };</a>
<a class="sourceLine" id="cb1-57" title="57">    }</a>
<a class="sourceLine" id="cb1-58" title="58">    sort(allone + <span class="dv">1</span>, allone + idx1);</a>
<a class="sourceLine" id="cb1-59" title="59">    sort(A + <span class="dv">1</span>, A + idx2);</a>
<a class="sourceLine" id="cb1-60" title="60">    sort(B + <span class="dv">1</span>, B + idx3);</a>
<a class="sourceLine" id="cb1-61" title="61">    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">1</span>; i &lt;= n; i++) {</a>
<a class="sourceLine" id="cb1-62" title="62">        sum1[i] = sum1[i - <span class="dv">1</span>] + allone[i].t;</a>
<a class="sourceLine" id="cb1-63" title="63">        sum2[i] = sum2[i - <span class="dv">1</span>] + A[i].t;</a>
<a class="sourceLine" id="cb1-64" title="64">        sum3[i] = sum3[i - <span class="dv">1</span>] + B[i].t;</a>
<a class="sourceLine" id="cb1-65" title="65">    }</a>
<a class="sourceLine" id="cb1-66" title="66">    ll inf = numeric_limits&lt;ll&gt;::max();</a>
<a class="sourceLine" id="cb1-67" title="67">    ll ans = inf;</a>
<a class="sourceLine" id="cb1-68" title="68">    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt;= min(k, idx1 - <span class="dv">1</span>); i++) {</a>
<a class="sourceLine" id="cb1-69" title="69">        <span class="dt">int</span> tmp = k - i;</a>
<a class="sourceLine" id="cb1-70" title="70">        <span class="cf">if</span> (idx2 - <span class="dv">1</span> &gt;= tmp &amp;&amp; idx3 - <span class="dv">1</span> &gt;= tmp) {</a>
<a class="sourceLine" id="cb1-71" title="71">            ans = min(ans, sum1[i] + sum2[k - i] + sum3[k - i]);</a>
<a class="sourceLine" id="cb1-72" title="72">        }</a>
<a class="sourceLine" id="cb1-73" title="73">    }</a>
<a class="sourceLine" id="cb1-74" title="74">    <span class="cf">if</span> (ans == inf) {</a>
<a class="sourceLine" id="cb1-75" title="75">        puts(<span class="st">"-1"</span>);</a>
<a class="sourceLine" id="cb1-76" title="76">    } <span class="cf">else</span> {</a>
<a class="sourceLine" id="cb1-77" title="77">        printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>, ans);</a>
<a class="sourceLine" id="cb1-78" title="78">    }</a>
<a class="sourceLine" id="cb1-79" title="79">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-80" title="80">}</a></code></pre></div>
]]></content>
  </entry>
  <entry>
    <title>Codeforces 1389 B&amp;C</title>
    <url>/2020/08/06/Codeforces-1389B-Array-Walk/</url>
    <content><![CDATA[<h2 id="b.-array-walk">B. Array Walk</h2>
<p>题意：给定一个长度为<span class="math inline">\(n\)</span>的序列，从下标1开始，走<span class="math inline">\(k\)</span>步，其中最多<span class="math inline">\(z\)</span>步向左。每走到一个位置就取一次这个位置的数。问可以取到的最大总和是多少。</p>
<span id="more"></span>
<p>思路：考虑dp，<span class="math inline">\(dp[i][j]\)</span>表示走了<span class="math inline">\(i\)</span>步，<span class="math inline">\(j\)</span>步为向左时的最大总和。则当<span class="math inline">\(dp[i][j]\)</span>可以由走了<span class="math inline">\(i-1\)</span>步、现在向右走以及走了<span class="math inline">\(i-1\)</span>步、现在向左走这两个状态转移而来</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,<span class="pp"> </span>b)<span class="pp"> </span>memset((a),<span class="pp"> </span>(b),<span class="pp"> </span><span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define lson </span>lef,<span class="pp"> </span>mid,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define rson </span>mid<span class="pp"> </span>+<span class="pp"> </span><span class="dv">1</span>,<span class="pp"> </span>rig,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span><span class="pp"> </span>|<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn = <span class="fl">1e5</span> + <span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> a[maxn], dp[maxn][<span class="dv">6</span>];</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-25" title="25">{</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> T;</a>
<a class="sourceLine" id="cb1-27" title="27">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>, &amp;T);</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="cf">while</span> (T--) {</a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="dt">int</span> n, k, z;</a>
<a class="sourceLine" id="cb1-30" title="30">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>, &amp;n, &amp;k, &amp;z);</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">1</span>; i &lt;= n; i++) {</a>
<a class="sourceLine" id="cb1-32" title="32">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>, &amp;a[i]);</a>
<a class="sourceLine" id="cb1-33" title="33">        }</a>
<a class="sourceLine" id="cb1-34" title="34">        dp[<span class="dv">0</span>][<span class="dv">0</span>] = a[<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-35" title="35">        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">1</span>; i &lt;= k; i++) {</a>
<a class="sourceLine" id="cb1-36" title="36">            <span class="cf">for</span> (<span class="dt">int</span> j = <span class="dv">0</span>; j &lt;= z; j++) {</a>
<a class="sourceLine" id="cb1-37" title="37">                dp[i][j] = dp[i - <span class="dv">1</span>][j] + a[<span class="dv">1</span> + i - <span class="dv">2</span> * j];</a>
<a class="sourceLine" id="cb1-38" title="38">                <span class="cf">if</span> (j &gt; <span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-39" title="39">                    dp[i][j] = max(dp[i][j], dp[i - <span class="dv">1</span>][j - <span class="dv">1</span>] + a[<span class="dv">1</span> + i - <span class="dv">2</span> * j]);</a>
<a class="sourceLine" id="cb1-40" title="40">            }</a>
<a class="sourceLine" id="cb1-41" title="41">        }</a>
<a class="sourceLine" id="cb1-42" title="42">        <span class="dt">int</span> ans = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-43" title="43">        <span class="cf">for</span> (<span class="dt">int</span> j = <span class="dv">0</span>; j &lt;= z; j++) {</a>
<a class="sourceLine" id="cb1-44" title="44">            ans = max(ans, dp[k][j]);</a>
<a class="sourceLine" id="cb1-45" title="45">        }</a>
<a class="sourceLine" id="cb1-46" title="46">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>, ans);</a>
<a class="sourceLine" id="cb1-47" title="47">    }</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-49" title="49">}</a></code></pre></div>
<h2 id="c.-good-string">C. Good String</h2>
<p>题意：如果将一个字符串循环左移一位与循环右移一位后，得到的两个新字符串相等，则称该字符串为good string。给定一个字符串<span class="math inline">\(s\)</span>，问需要至少删除<span class="math inline">\(s\)</span>中多少个字符，才能使其变成good string。</p>
<p>思路：容易发现，good string只有两种情况：1、整个字符串只有一种字符；2、字符串形如<span class="math inline">\(ababab...\)</span>，且长度为偶数。对于第一种情况，只需要找出出现次数最多的字符即可；对于第二种情况，因为字符只有10种，暴力枚举一下可以组成good string的两种字符就行。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#define mst</span>(a,<span class="pp"> </span>b)<span class="pp"> </span>memset((a),<span class="pp"> </span>(b),<span class="pp"> </span><span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-17" title="17"><span class="pp">#define lson </span>lef,<span class="pp"> </span>mid,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="pp">#define rson </span>mid<span class="pp"> </span>+<span class="pp"> </span><span class="dv">1</span>,<span class="pp"> </span>rig,<span class="pp"> </span>rt<span class="pp"> </span>&lt;&lt;<span class="pp"> </span><span class="dv">1</span><span class="pp"> </span>|<span class="pp"> </span><span class="dv">1</span></a>
<a class="sourceLine" id="cb2-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn = <span class="fl">2e5</span> + <span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-23" title="23"><span class="dt">char</span> s[maxn];</a>
<a class="sourceLine" id="cb2-24" title="24"><span class="dt">int</span> cnt[<span class="dv">10</span>] = { <span class="dv">0</span> };</a>
<a class="sourceLine" id="cb2-25" title="25"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-26" title="26">{</a>
<a class="sourceLine" id="cb2-27" title="27">    <span class="dt">int</span> T;</a>
<a class="sourceLine" id="cb2-28" title="28">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>, &amp;T);</a>
<a class="sourceLine" id="cb2-29" title="29">    <span class="cf">while</span> (T--) {</a>
<a class="sourceLine" id="cb2-30" title="30">        mst(cnt, <span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-31" title="31">        scanf(<span class="st">"</span><span class="sc">%s</span><span class="st">"</span>, s + <span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-32" title="32">        <span class="dt">int</span> len = strlen(s + <span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-33" title="33">        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">1</span>; i &lt;= len; i++) {</a>
<a class="sourceLine" id="cb2-34" title="34">            cnt[s[i] - <span class="ch">'0'</span>]++;</a>
<a class="sourceLine" id="cb2-35" title="35">        }</a>
<a class="sourceLine" id="cb2-36" title="36">        <span class="dt">int</span> maxi = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-37" title="37">        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt;= <span class="dv">9</span>; i++) {</a>
<a class="sourceLine" id="cb2-38" title="38">            maxi = max(maxi, cnt[i]);</a>
<a class="sourceLine" id="cb2-39" title="39">        }</a>
<a class="sourceLine" id="cb2-40" title="40">        <span class="dt">int</span> ans2 = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-41" title="41">        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt;= <span class="dv">9</span>; i++) {</a>
<a class="sourceLine" id="cb2-42" title="42">            <span class="cf">for</span> (<span class="dt">int</span> j = <span class="dv">0</span>; j &lt;= <span class="dv">9</span>; j++) {</a>
<a class="sourceLine" id="cb2-43" title="43">                <span class="dt">int</span> l=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-44" title="44">                <span class="cf">for</span>(<span class="dt">int</span> k=<span class="dv">1</span>;k&lt;=len;k++){</a>
<a class="sourceLine" id="cb2-45" title="45">                    <span class="cf">if</span>(l%<span class="dv">2</span>==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-46" title="46">                        <span class="cf">if</span>(s[k]==i+<span class="ch">'0'</span>) l++;</a>
<a class="sourceLine" id="cb2-47" title="47">                    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-48" title="48">                        <span class="cf">if</span>(s[k]==j+<span class="ch">'0'</span>) l++;</a>
<a class="sourceLine" id="cb2-49" title="49">                    }</a>
<a class="sourceLine" id="cb2-50" title="50">                }</a>
<a class="sourceLine" id="cb2-51" title="51">                <span class="cf">if</span>(l&amp;<span class="dv">1</span>) l--;</a>
<a class="sourceLine" id="cb2-52" title="52">                ans2=max(ans2,l);</a>
<a class="sourceLine" id="cb2-53" title="53">            }</a>
<a class="sourceLine" id="cb2-54" title="54">        }</a>
<a class="sourceLine" id="cb2-55" title="55">        <span class="co">//printf("ans2 = %d\n", ans2);</span></a>
<a class="sourceLine" id="cb2-56" title="56">        ans2 = len - ans2;</a>
<a class="sourceLine" id="cb2-57" title="57">        <span class="dt">int</span> ans1 = len - maxi;</a>
<a class="sourceLine" id="cb2-58" title="58">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>, min(ans2, ans1));</a>
<a class="sourceLine" id="cb2-59" title="59">    }</a>
<a class="sourceLine" id="cb2-60" title="60">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-61" title="61">}</a></code></pre></div>
]]></content>
  </entry>
  <entry>
    <title>Codeforces Round #544 (Div. 3)</title>
    <url>/2019/03/23/Codeforces-Round-544-Div-3/</url>
    <content><![CDATA[<p><a href="http://codeforces.com/problemset/problem/1133/A">A - Middle of the Contest</a><br> 这没什么好说的了吧...... <span id="more"></span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">505</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-21" title="21">{</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="dt">int</span> h1,m1;</a>
<a class="sourceLine" id="cb1-23" title="23">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">:</span><span class="sc">%d</span><span class="st">"</span>,&amp;h1,&amp;m1);</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> h2,m2;</a>
<a class="sourceLine" id="cb1-25" title="25">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">:</span><span class="sc">%d</span><span class="st">"</span>,&amp;h2,&amp;m2);</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> tot1=h1*<span class="dv">60</span>+m1;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="dt">int</span> tot2=h2*<span class="dv">60</span>+m2;</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="cf">if</span>(tot1&gt;tot2)</a>
<a class="sourceLine" id="cb1-29" title="29">        swap(tot1,tot2);</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="dt">int</span> sub=(tot2-tot1)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="dt">int</span> ans=tot1+sub;</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="dt">int</span> h_ans=ans/<span class="dv">60</span>;</a>
<a class="sourceLine" id="cb1-33" title="33">    <span class="dt">int</span> <span class="va">m_ans</span>=ans%<span class="dv">60</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">    printf(<span class="st">"%02d:%02d</span><span class="sc">\n</span><span class="st">"</span>,h_ans,<span class="va">m_ans</span>);</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-36" title="36">}</a></code></pre></div>
<p><a href="http://codeforces.com/problemset/problem/1133/B">B - Preparation for International Women's Day</a><br> 这题有必要说一下。首先对于两个数a,b，若要它们的和可以整除k，则有以下两种情况: * 1.a%k == 0且b%k == 0 * 2.(a%k+b%k)%k == 0</p>
<p>做法是，首先用一个arr数组把输入的所有数%k的结果存起来，数组里面存的是余数所出现的次数。对于第一种情况，只需要用arr[0]去处理。而对于0以外的余数，则将arr[i]和arr[k-i]进行比较。若arr[i]！=arr[k-i],则ans+=min(arr[i],arr[k-i]);若arr[i]==arr[k-i],则ans+=arr[i](或者ans+=arr[k-i])。还需要考虑一种情况，如果i==k-i，则ans+=arr[i]。另外，还需要注意，如果arr[i]==arr[k-i]与i==k-i同时成立，很明显应该ans+=arr[i]。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-15" title="15"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">105</span>;</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="dt">int</span> arr[maxn];</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-21" title="21">{</a>
<a class="sourceLine" id="cb2-22" title="22">    <span class="dt">int</span> n,k;</a>
<a class="sourceLine" id="cb2-23" title="23">    mst(arr,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-24" title="24">    cin&gt;&gt;n&gt;&gt;k;</a>
<a class="sourceLine" id="cb2-25" title="25">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb2-26" title="26">        <span class="dt">int</span> tmp;</a>
<a class="sourceLine" id="cb2-27" title="27">        cin&gt;&gt;tmp;</a>
<a class="sourceLine" id="cb2-28" title="28">        arr[tmp%k]++;</a>
<a class="sourceLine" id="cb2-29" title="29">    }</a>
<a class="sourceLine" id="cb2-30" title="30">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-31" title="31">    ans+=arr[<span class="dv">0</span>]/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb2-32" title="32">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=k/<span class="dv">2</span>;i++){</a>
<a class="sourceLine" id="cb2-33" title="33">        <span class="cf">if</span>(arr[i]!=arr[k-i]){</a>
<a class="sourceLine" id="cb2-34" title="34">            ans+=min(arr[i],arr[k-i]);</a>
<a class="sourceLine" id="cb2-35" title="35">        }<span class="cf">else</span> <span class="cf">if</span>(i==k-i){        <span class="co">//&lt;-1</span></a>
<a class="sourceLine" id="cb2-36" title="36">            ans+=arr[i]/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb2-37" title="37">        }<span class="cf">else</span> <span class="cf">if</span>(arr[i]==arr[k-i]){        <span class="co">//&lt;-2</span></a>
<a class="sourceLine" id="cb2-38" title="38">            ans+=arr[i];</a>
<a class="sourceLine" id="cb2-39" title="39">        }</a>
<a class="sourceLine" id="cb2-40" title="40">      <span class="co">//1和2不能颠倒，因为如果两者都成立，则应该执行1</span></a>
<a class="sourceLine" id="cb2-41" title="41">    }</a>
<a class="sourceLine" id="cb2-42" title="42">    printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans*<span class="dv">2</span>);</a>
<a class="sourceLine" id="cb2-43" title="43">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-44" title="44">}</a></code></pre></div>
<p><a href="http://codeforces.com/problemset/problem/1133/C">C - Balanced Team</a><br></p>
<p>先排个序，然后对于学生i，二分找出第一个比a[i]+5大的数的下标，然后以此维护最大值</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-20" title="20"><span class="dt">int</span> a[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-22" title="22">{</a>
<a class="sourceLine" id="cb3-23" title="23">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb3-24" title="24">    cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb3-25" title="25">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb3-26" title="26">        cin&gt;&gt;a[i];</a>
<a class="sourceLine" id="cb3-27" title="27">    }</a>
<a class="sourceLine" id="cb3-28" title="28">    <span class="dt">int</span> pos;</a>
<a class="sourceLine" id="cb3-29" title="29">    sort(a,a+n);</a>
<a class="sourceLine" id="cb3-30" title="30">    <span class="dt">int</span> ans=-<span class="dv">1</span>;<span class="dt">int</span> t1;</a>
<a class="sourceLine" id="cb3-31" title="31">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb3-32" title="32">        <span class="dt">int</span> tmp=a[i]+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-33" title="33">        pos=upper_bound(a,a+n,tmp)-a;</a>
<a class="sourceLine" id="cb3-34" title="34">        ans=max(ans,pos-i);</a>
<a class="sourceLine" id="cb3-35" title="35">    }</a>
<a class="sourceLine" id="cb3-36" title="36">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-37" title="37">}</a></code></pre></div>
<p><a href="http://codeforces.com/problemset/problem/1133/D">D - Zero Quantity Maximization</a><br></p>
<p>用map记录每一个d出现的次数，然后再找出value值最大的d。要注意的是,当a==0&amp;&amp;b==0时，d一定存在且为任意实数，故ans++；当a==0&amp;&amp;b!=0时，无解，直接跳过。<del>昨晚TLE了好几发居然是因为数组开小了OTZ</del></p>
<p>代码如下:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb4-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb4-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb4-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb4-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb4-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb4-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb4-20" title="20"><span class="dt">double</span> a[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb4-21" title="21">map&lt;<span class="dt">long</span> <span class="dt">double</span>,<span class="dt">int</span>&gt; mp;</a>
<a class="sourceLine" id="cb4-22" title="22"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb4-23" title="23">{</a>
<a class="sourceLine" id="cb4-24" title="24">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb4-25" title="25">    cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb4-26" title="26">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-27" title="27">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb4-28" title="28">        cin&gt;&gt;a[i];</a>
<a class="sourceLine" id="cb4-29" title="29">    <span class="dt">int</span> ok=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-30" title="30">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb4-31" title="31">        <span class="dt">long</span> <span class="dt">double</span> b;</a>
<a class="sourceLine" id="cb4-32" title="32">        cin&gt;&gt;b;</a>
<a class="sourceLine" id="cb4-33" title="33">        <span class="cf">if</span>(b==<span class="dv">0</span>&amp;&amp;a[i]==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb4-34" title="34">            ok++;</a>
<a class="sourceLine" id="cb4-35" title="35">            <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb4-36" title="36">        }</a>
<a class="sourceLine" id="cb4-37" title="37">        <span class="cf">if</span>(b!=<span class="dv">0</span>&amp;&amp;a[i]==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb4-38" title="38">            <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb4-39" title="39">        }</a>
<a class="sourceLine" id="cb4-40" title="40">        <span class="dt">long</span> <span class="dt">double</span> tmp=(-b)/a[i];</a>
<a class="sourceLine" id="cb4-41" title="41">        mp[tmp]++;</a>
<a class="sourceLine" id="cb4-42" title="42">    }</a>
<a class="sourceLine" id="cb4-43" title="43">    map&lt;<span class="dt">long</span> <span class="dt">double</span>,<span class="dt">int</span>&gt;::iterator it;</a>
<a class="sourceLine" id="cb4-44" title="44">    <span class="cf">for</span>(it=mp.begin();it!=mp.end();it++)</a>
<a class="sourceLine" id="cb4-45" title="45">        ans=max(ans,it-&gt;second);</a>
<a class="sourceLine" id="cb4-46" title="46">    printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans+ok);</a>
<a class="sourceLine" id="cb4-47" title="47">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-48" title="48">}</a></code></pre></div>
<p><a href="http://codeforces.com/problemset/problem/1133/E">E - K Balanced Teams</a><br></p>
<p>C题的升级版。一开始是用的贪心，然后就wa了......正确方法是dp，但我不会OTZ......<del>遂看题解</del>。</p>
<p>首先当然是排个序</p>
<p>然后，状态转移方程是这个👇</p>
<center>
<b>dp[i][j]=max(dp[i-1][j],dp[pos-1][j-1]+i-pos+1)</b>
</center>
<p>dp[i][j]指的是前i个人组成j个队伍最多可以挑选多少人；pos是i左侧第一个满足 arr[i]-arr[pos]的点的下标。</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb5-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb5-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb5-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb5-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb5-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb5-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb5-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb5-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb5-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb5-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb5-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb5-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb5-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">5005</span>;</a>
<a class="sourceLine" id="cb5-20" title="20"><span class="dt">int</span> arr[maxn];</a>
<a class="sourceLine" id="cb5-21" title="21"><span class="dt">int</span> dp[maxn][maxn];</a>
<a class="sourceLine" id="cb5-22" title="22"><span class="dt">bool</span> cmp(<span class="dt">int</span> a,<span class="dt">int</span> b)</a>
<a class="sourceLine" id="cb5-23" title="23">{</a>
<a class="sourceLine" id="cb5-24" title="24">    <span class="cf">return</span> a&gt;b;</a>
<a class="sourceLine" id="cb5-25" title="25">}</a>
<a class="sourceLine" id="cb5-26" title="26"><span class="co">//dp[i][j]=max(dp[i-1][j],dp[pos-1][j-1]+i-pos+1)</span></a>
<a class="sourceLine" id="cb5-27" title="27"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb5-28" title="28">{</a>
<a class="sourceLine" id="cb5-29" title="29">    <span class="dt">int</span> n,k;</a>
<a class="sourceLine" id="cb5-30" title="30">    cin&gt;&gt;n&gt;&gt;k;</a>
<a class="sourceLine" id="cb5-31" title="31">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb5-32" title="32">        cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb5-33" title="33">    sort(arr+<span class="dv">1</span>,arr+<span class="dv">1</span>+n);</a>
<a class="sourceLine" id="cb5-34" title="34">    mst(dp,<span class="dv">0</span>);dp[<span class="dv">0</span>][<span class="dv">0</span>]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-35" title="35">    <span class="dt">int</span> pos=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb5-36" title="36">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb5-37" title="37">        pos=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb5-38" title="38">        <span class="cf">while</span>(arr[i]-arr[pos]&gt;<span class="dv">5</span>&amp;&amp;pos&lt;=n)        pos++;</a>
<a class="sourceLine" id="cb5-39" title="39">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=min(k,i);j++)</a>
<a class="sourceLine" id="cb5-40" title="40">            dp[i][j]=max(dp[i-<span class="dv">1</span>][j],dp[pos-<span class="dv">1</span>][j-<span class="dv">1</span>]+i-pos+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb5-41" title="41">    }</a>
<a class="sourceLine" id="cb5-42" title="42">    <span class="dt">int</span> ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb5-43" title="43">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=k;i++)</a>
<a class="sourceLine" id="cb5-44" title="44">        ans=max(ans,dp[n][i]); </a>
<a class="sourceLine" id="cb5-45" title="45">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb5-46" title="46">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces1131B - Draw!</title>
    <url>/2019/04/25/Codeforces1131B-Draw/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/HTB1X.IlSNTpK1RjSZFMq6zG_VXaS.jpg"></p>
<p>Photo by Angela Huang from Pexels</p>
<span id="more"></span>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1131B">Draw!</a></p>
<p>emmmmm一道不知道怎么归类的题目，大概应该归类为思维题？</p>
<p>题目大意是说给出一场球赛中两个队伍几个时间点的比分情况，要你根据这几个比分情况来计算整个比赛过程中最多可能有多少次平局。</p>
<p>大致分析一下样例即可得到思路：对于一支队伍，依次取两个相邻时间点上的得分，将这两个得分分别看作是一个区间的左端点和右端点，那么对于两个相邻的时间点，我们就可以得到两个区间（分别属于两支队伍），然后求一下两个区间的交集的长度，答案即为所有符合要求的交集的长度。要注意的是，需要设一个rightest变量来表示当前当前已经计算到的“最右端的数”，从而避免重复计算。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e4</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> a[maxn],b[maxn];</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="dt">int</span> vis[maxn];</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-23" title="23">{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-25" title="25">    cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> a1,b1;</a>
<a class="sourceLine" id="cb1-27" title="27">    cin&gt;&gt;a1&gt;&gt;b1;</a>
<a class="sourceLine" id="cb1-28" title="28">    n--;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> pos=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">if</span>(!(a==<span class="dv">0</span>&amp;&amp;b==<span class="dv">0</span>)){</a>
<a class="sourceLine" id="cb1-31" title="31">        a[<span class="dv">0</span>]=b[<span class="dv">0</span>]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-32" title="32">        a[<span class="dv">1</span>]=a1;b[<span class="dv">1</span>]=b1;</a>
<a class="sourceLine" id="cb1-33" title="33">        pos=<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-35" title="35">        a[<span class="dv">0</span>]=b[<span class="dv">0</span>]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-36" title="36">        pos=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-37" title="37">    }</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++,pos++)</a>
<a class="sourceLine" id="cb1-39" title="39">        cin&gt;&gt;a[pos]&gt;&gt;b[pos];</a>
<a class="sourceLine" id="cb1-40" title="40">    ll ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="dt">int</span> rightest=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n+<span class="dv">1</span>;i++){</a>
<a class="sourceLine" id="cb1-43" title="43">        <span class="dt">int</span> lef1=a[i-<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-44" title="44">        <span class="dt">int</span> lef2=b[i-<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-45" title="45">        <span class="dt">int</span> rig1=a[i];</a>
<a class="sourceLine" id="cb1-46" title="46">        <span class="dt">int</span> rig2=b[i];</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="dt">int</span> lef=max(lef1,lef2);</a>
<a class="sourceLine" id="cb1-48" title="48">        <span class="dt">int</span> rig=min(rig1,rig2);</a>
<a class="sourceLine" id="cb1-49" title="49">        <span class="cf">while</span>(lef&lt;=rightest)</a>
<a class="sourceLine" id="cb1-50" title="50">            lef++;</a>
<a class="sourceLine" id="cb1-51" title="51">        <span class="cf">if</span>(rig-lef&gt;=<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-52" title="52">            rightest=rig;</a>
<a class="sourceLine" id="cb1-53" title="53">            ans+=rig-lef+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-54" title="54">        }</a>
<a class="sourceLine" id="cb1-55" title="55">    }</a>
<a class="sourceLine" id="cb1-56" title="56">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-57" title="57">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-58" title="58">} </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>思维</tag>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces1136D - Nastya Is Buying Lunch</title>
    <url>/2019/04/28/Codeforces1136D-Nastya-Is-Buying-Lunch/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/CodeForces-1136D">Nastya Is Buying Lunch</a></p>
<p><img src="https://ae01.alicdn.com/kf/HTB1lkBjXfxj_uVjSZFqq6yboFXao.jpg">Photo from Pexels</p>
<span id="more"></span>
<p>题目大意是说有n个数1到n，它们按照一定的顺序排列。然后现在有m个数对<span class="math inline">\((u,v)\)</span>，意思是说，如果数字u排在数字v的前面(左边)，且两个数字相邻，那么两个数字就可以交换位置。问，对于排在最后的数字，通过这样的交换位置的操作，这个数字最多可以前进多少个位置(向左移动多少次)。</p>
<p>emmmmmmm比赛时真的没想出来......<del>后期补题的时候也没想出来OTZ</del>，于是不得不去看题解hhhhh</p>
<p>先说说我的想法:首先这题第一感觉是一道贪心题，那我们是否可以通过找到一个最长的“连续交换序列”来实现最后一个数尽可能多地向前移动呢？所谓的连续交换序列就是说，在这个序列里，前后两个交换操作是连续的，执行完前一个操作后恰好可以执行下一个操作.......emmmmmm事实证明这是个非常错误的想法，而且也不好实现</p>
<p>所以正确的做法应该是，记录每一个数后面有多少个可以与他交换的数，用一个cnt数组来记录。对于一个数，如果最后一个数<span class="math inline">\(x=que[i]\)</span>与这个数的距离，即<span class="math inline">\(n-ans-i\)</span>(<span class="math inline">\(ans\)</span>是最后一个数目前所移动了的距离)刚好和<span class="math inline">\(cnt[x]\)</span>相等，那就说明一定有一种操作可以将x换到这个数当前所在的位置,这是就ans++;如果不相等，那么更新以下cnt数组。非常巧妙的做法呢。</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> que[<span class="dv">3</span>*maxn];</a>
<a class="sourceLine" id="cb1-21" title="21">vector&lt;<span class="dt">int</span>&gt; vec[<span class="dv">3</span>*maxn];</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> cnt[<span class="dv">3</span>*maxn];</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-24" title="24">{</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-26" title="26">    cin&gt;&gt;n&gt;&gt;m;mst(cnt,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-28" title="28">        cin&gt;&gt;que[i];</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="dt">int</span> u,v;</a>
<a class="sourceLine" id="cb1-31" title="31">        cin&gt;&gt;u&gt;&gt;v;</a>
<a class="sourceLine" id="cb1-32" title="32">        vec[v].push_back(u);</a>
<a class="sourceLine" id="cb1-33" title="33">    }</a>
<a class="sourceLine" id="cb1-34" title="34">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;vec[que[n]].size();i++)</a>
<a class="sourceLine" id="cb1-35" title="35">        cnt[vec[que[n]][i]]++;</a>
<a class="sourceLine" id="cb1-36" title="36">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-37" title="37">    <span class="cf">for</span>(<span class="dt">int</span> i=n-<span class="dv">1</span>;i&gt;=<span class="dv">1</span>;i--){</a>
<a class="sourceLine" id="cb1-38" title="38">        <span class="cf">if</span>(cnt[que[i]]==n-ans-i){</a>
<a class="sourceLine" id="cb1-39" title="39">            ans++;</a>
<a class="sourceLine" id="cb1-40" title="40">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-41" title="41">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;vec[que[i]].size();j++)</a>
<a class="sourceLine" id="cb1-42" title="42">                cnt[vec[que[i]][j]]++;</a>
<a class="sourceLine" id="cb1-43" title="43">        }</a>
<a class="sourceLine" id="cb1-44" title="44">    }</a>
<a class="sourceLine" id="cb1-45" title="45">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-46" title="46">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>思维</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>思维</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU-2612-Find A Way(BFS)</title>
    <url>/2019/01/26/HDOJ-2612-Find-A-Way-BFS/</url>
    <content><![CDATA[<p>   这是一道稍微有点特殊的题，特殊之处在于它需要使用2次广搜。刚开始做的时候思路是把所有肯德基的位置记录下来，然后以每一个肯德基的位置为终点来bfs。。。。。。然后就TLE了OTZ。。。。。。后来发现只需要只需要用两次bfs，把整个地图走遍，如果走到的地方是肯德基，就记录此时的步数，然后两个最小值相加乘以11就行了。 代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;climits&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#pragma GCC optimize(2)</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">205</span>;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="dt">char</span> nbo[maxn][maxn];</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="dt">int</span> kfc_dis1[maxn][maxn],kfc_dis2[maxn][maxn];</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="dt">int</span> yif[<span class="dv">1</span>][<span class="dv">2</span>],mer[<span class="dv">1</span>][<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">int</span> dir[<span class="dv">4</span>][<span class="dv">2</span>]=&lt;!--swig￼<span class="dv">0</span>--&gt;;</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">int</span> vis[maxn][maxn];</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="kw">typedef</span> <span class="kw">struct</span>{</a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="dt">int</span> row;</a>
<a class="sourceLine" id="cb1-18" title="18">    <span class="dt">int</span> col;</a>
<a class="sourceLine" id="cb1-19" title="19">    <span class="dt">int</span> stp;</a>
<a class="sourceLine" id="cb1-20" title="20">}pos;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="dt">bool</span> check(pos xxx)</a>
<a class="sourceLine" id="cb1-22" title="22">{</a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="cf">if</span>((nbo[xxx.row][xxx.col]==<span class="ch">'M'</span>)||(nbo[xxx.row][xxx.col]==<span class="ch">'Y'</span>)||(nbo[xxx.row][xxx.col]==<span class="ch">'#'</span>)||</a>
<a class="sourceLine" id="cb1-24" title="24">       (xxx.row&gt;=n)||(xxx.row&lt;<span class="dv">0</span>)||(xxx.col&gt;=m)||(xxx.col&lt;<span class="dv">0</span>)||(vis[xxx.row][xxx.col]==<span class="dv">1</span>))        </a>
<a class="sourceLine" id="cb1-25" title="25">        <span class="cf">return</span> <span class="kw">false</span>;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="cf">return</span> <span class="kw">true</span>;</a>
<a class="sourceLine" id="cb1-27" title="27">}</a>
<a class="sourceLine" id="cb1-28" title="28"><span class="dt">int</span> kcnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-29" title="29"><span class="dt">void</span> bfs(<span class="dt">int</span> stx,<span class="dt">int</span> sty)        <span class="co">//x为行,y为列 </span></a>
<a class="sourceLine" id="cb1-30" title="30">{    </a>
<a class="sourceLine" id="cb1-31" title="31">    kcnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-32" title="32">    queue&lt;pos&gt; que;</a>
<a class="sourceLine" id="cb1-33" title="33">    pos now,next,sta;</a>
<a class="sourceLine" id="cb1-34" title="34">    sta.row=stx;sta.col=sty;sta.stp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-35" title="35">    que.push(sta);</a>
<a class="sourceLine" id="cb1-36" title="36">    vis[stx][sty]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-37" title="37">    memset(vis,<span class="dv">0</span>,<span class="kw">sizeof</span>(vis));</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="cf">while</span>(!que.empty())</a>
<a class="sourceLine" id="cb1-39" title="39">    {    </a>
<a class="sourceLine" id="cb1-40" title="40">        now=que.front();</a>
<a class="sourceLine" id="cb1-41" title="41">        <span class="cf">if</span>(nbo[now.row][now.col]==<span class="ch">'@'</span>)    </a>
<a class="sourceLine" id="cb1-42" title="42">            kfc_dis2[now.row][now.col]=now.stp;</a>
<a class="sourceLine" id="cb1-43" title="43">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">4</span>;i++)</a>
<a class="sourceLine" id="cb1-44" title="44">        {    </a>
<a class="sourceLine" id="cb1-45" title="45">            next.row=now.row+dir[i][<span class="dv">0</span>];</a>
<a class="sourceLine" id="cb1-46" title="46">            next.col=now.col+dir[i][<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-47" title="47">            <span class="cf">if</span>(check(next))</a>
<a class="sourceLine" id="cb1-48" title="48">            {    </a>
<a class="sourceLine" id="cb1-49" title="49">                vis[next.row][next.col]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-50" title="50">                next.stp=now.stp+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-51" title="51">                que.push(next);</a>
<a class="sourceLine" id="cb1-52" title="52">            }</a>
<a class="sourceLine" id="cb1-53" title="53">        }</a>
<a class="sourceLine" id="cb1-54" title="54">        que.pop();</a>
<a class="sourceLine" id="cb1-55" title="55">    }</a>
<a class="sourceLine" id="cb1-56" title="56">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-57" title="57">}</a>
<a class="sourceLine" id="cb1-58" title="58"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-59" title="59">{</a>
<a class="sourceLine" id="cb1-60" title="60">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m)!=EOF)</a>
<a class="sourceLine" id="cb1-61" title="61">    {    </a>
<a class="sourceLine" id="cb1-62" title="62">        memset(nbo,<span class="dv">0</span>,<span class="kw">sizeof</span>(nbo));memset(vis,<span class="dv">0</span>,<span class="kw">sizeof</span>(vis));</a>
<a class="sourceLine" id="cb1-63" title="63">        memset(kfc_dis1,<span class="dv">0</span>,<span class="kw">sizeof</span>(kfc_dis1));memset(kfc_dis2,<span class="dv">0</span>,<span class="kw">sizeof</span>(kfc_dis2));</a>
<a class="sourceLine" id="cb1-64" title="64">        <span class="dt">int</span> cnt=<span class="dv">0</span>,step;</a>
<a class="sourceLine" id="cb1-65" title="65">        <span class="dt">int</span> i,j;</a>
<a class="sourceLine" id="cb1-66" title="66">        getchar(); </a>
<a class="sourceLine" id="cb1-67" title="67">        <span class="cf">for</span>(i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-68" title="68">        {</a>
<a class="sourceLine" id="cb1-69" title="69">            <span class="cf">for</span>(j=<span class="dv">0</span>;j&lt;m;j++)</a>
<a class="sourceLine" id="cb1-70" title="70">            {</a>
<a class="sourceLine" id="cb1-71" title="71">                scanf(<span class="st">"</span><span class="sc">%c</span><span class="st">"</span>,&amp;nbo[i][j]);</a>
<a class="sourceLine" id="cb1-72" title="72">                <span class="cf">if</span>(nbo[i][j]==<span class="ch">'M'</span>)        {mer[<span class="dv">0</span>][<span class="dv">0</span>]=i;mer[<span class="dv">0</span>][<span class="dv">1</span>]=j;}</a>
<a class="sourceLine" id="cb1-73" title="73">                <span class="cf">if</span>(nbo[i][j]==<span class="ch">'Y'</span>)        {yif[<span class="dv">0</span>][<span class="dv">0</span>]=i;yif[<span class="dv">0</span>][<span class="dv">1</span>]=j;}</a>
<a class="sourceLine" id="cb1-74" title="74">            }</a>
<a class="sourceLine" id="cb1-75" title="75">            getchar();</a>
<a class="sourceLine" id="cb1-76" title="76">        }</a>
<a class="sourceLine" id="cb1-77" title="77">        <span class="dt">int</span> ans=INT_MAX;</a>
<a class="sourceLine" id="cb1-78" title="78">        bfs(mer[<span class="dv">0</span>][<span class="dv">0</span>],mer[<span class="dv">0</span>][<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb1-79" title="79">        memcpy(kfc_dis1,kfc_dis2,<span class="kw">sizeof</span>(kfc_dis2));            <span class="co">//kfc_cnt1:mer到各个肯德基距离,kfc_cnt2:yif到各个肯德基距离 </span></a>
<a class="sourceLine" id="cb1-80" title="80">        memset(kfc_dis2,<span class="dv">0</span>,<span class="kw">sizeof</span>(kfc_dis2));</a>
<a class="sourceLine" id="cb1-81" title="81">        bfs(yif[<span class="dv">0</span>][<span class="dv">0</span>],yif[<span class="dv">0</span>][<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb1-82" title="82">        <span class="cf">for</span>(i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-83" title="83">            <span class="cf">for</span>(j=<span class="dv">0</span>;j&lt;m;j++)</a>
<a class="sourceLine" id="cb1-84" title="84">                <span class="cf">if</span>(ans&gt;kfc_dis1[i][j]+kfc_dis2[i][j]&amp;&amp;kfc_dis1[i][j]&amp;&amp;kfc_dis2[i][j])</a>
<a class="sourceLine" id="cb1-85" title="85">                    ans=kfc_dis1[i][j]+kfc_dis2[i][j];</a>
<a class="sourceLine" id="cb1-86" title="86">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans*<span class="dv">11</span>); </a>
<a class="sourceLine" id="cb1-87" title="87">    }</a>
<a class="sourceLine" id="cb1-88" title="88">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-89" title="89">}</a></code></pre></div>
<p>  另外，在hdoj的讨论版里有人说Y和M不能走，但经过尝试，"Y和M可以走"以及“Y和M不可以走”这两种写法都是可以AC的。</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>BFS&amp;DFS</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ1002-A+B Problem</title>
    <url>/2019/01/26/HDOJ1002-A+B-Problem/</url>
    <content><![CDATA[<p>大数相加，方法就是用字符串存数字，然后模拟手算的方法计算。虽是水题，但有些细节还是要注意。 <span id="more"></span> 代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5">using namespace std;</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="dt">char</span> a[<span class="dv">1010</span>],b[<span class="dv">1010</span>];</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="dt">char</span> rsl[<span class="dv">2000</span>];</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">void</span> rev(<span class="dt">char</span> str[])</a>
<a class="sourceLine" id="cb1-9" title="9">{    </a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="dt">int</span> len=strlen(str);</a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;len/<span class="dv">2</span>;i++){</a>
<a class="sourceLine" id="cb1-12" title="12">        <span class="dt">int</span> tmp=str[i];</a>
<a class="sourceLine" id="cb1-13" title="13">        str[i]=str[len-i-<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-14" title="14">        str[len-i-<span class="dv">1</span>]=tmp;</a>
<a class="sourceLine" id="cb1-15" title="15">    }</a>
<a class="sourceLine" id="cb1-16" title="16">}</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="dt">void</span> add(<span class="dt">char</span> a[],<span class="dt">char</span> b[])</a>
<a class="sourceLine" id="cb1-18" title="18">{</a>
<a class="sourceLine" id="cb1-19" title="19">    <span class="dt">int</span> i;</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="dt">int</span> stop=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-21" title="21">    memset(rsl,<span class="ch">'0'</span>,<span class="kw">sizeof</span>(rsl));</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="dt">int</span> len=max(strlen(a),strlen(b));</a>
<a class="sourceLine" id="cb1-23" title="23">    a[strlen(a)]=b[strlen(b)]=<span class="ch">'0'</span>;</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="cf">for</span>(i=<span class="dv">0</span>;i&lt;len;i++){</a>
<a class="sourceLine" id="cb1-25" title="25">        <span class="cf">if</span>((a[i]-<span class="ch">'0'</span>)+(b[i]-<span class="ch">'0'</span>)+(rsl[i]-<span class="ch">'0'</span>)&gt;<span class="dv">9</span>){</a>
<a class="sourceLine" id="cb1-26" title="26">            rsl[i]=(((a[i]-<span class="ch">'0'</span>)+(b[i]-<span class="ch">'0'</span>)+(rsl[i]-<span class="ch">'0'</span>))%<span class="dv">10</span>)+<span class="ch">'0'</span>;</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="co">//            printf("ans[i]=%c\n",rsl[i]);</span></a>
<a class="sourceLine" id="cb1-28" title="28">            rsl[i+<span class="dv">1</span>]+=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-29" title="29">            stop=i+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-30" title="30"><span class="co">//            printf("ans[i+1]=%c\n",rsl[i+1]);</span></a>
<a class="sourceLine" id="cb1-31" title="31">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-32" title="32">            rsl[i]=(a[i]-<span class="ch">'0'</span>+b[i]-<span class="ch">'0'</span>+rsl[i]-<span class="ch">'0'</span>)+<span class="ch">'0'</span>;</a>
<a class="sourceLine" id="cb1-33" title="33">            stop=i;</a>
<a class="sourceLine" id="cb1-34" title="34">        }</a>
<a class="sourceLine" id="cb1-35" title="35">    }</a>
<a class="sourceLine" id="cb1-36" title="36">    rsl[stop+<span class="dv">1</span>]='\<span class="dv">0</span><span class="er">'</span>;</a>
<a class="sourceLine" id="cb1-37" title="37">}</a>
<a class="sourceLine" id="cb1-38" title="38"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-39" title="39">{    </a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="dt">int</span> la,lb;</a>
<a class="sourceLine" id="cb1-42" title="42">    scanf(<span class="st">"%d"</span>,&amp;t);</a>
<a class="sourceLine" id="cb1-43" title="43">    <span class="cf">for</span>(<span class="dt">int</span> test=<span class="dv">0</span>;test&lt;t;test++){</a>
<a class="sourceLine" id="cb1-44" title="44">        memset(a,<span class="ch">'0'</span>,<span class="kw">sizeof</span>(a));</a>
<a class="sourceLine" id="cb1-45" title="45">        memset(b,<span class="ch">'0'</span>,<span class="kw">sizeof</span>(b));</a>
<a class="sourceLine" id="cb1-46" title="46">        scanf(<span class="st">"%s"</span>,a);</a>
<a class="sourceLine" id="cb1-47" title="47">        scanf(<span class="st">"%s"</span>,b);</a>
<a class="sourceLine" id="cb1-48" title="48">        la=strlen(a);lb=strlen(b);</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="co">//    int len=max(strlen(a),strlen(b));</span></a>
<a class="sourceLine" id="cb1-50" title="50">        rev(a);rev(b);</a>
<a class="sourceLine" id="cb1-51" title="51">        add(a,b);</a>
<a class="sourceLine" id="cb1-52" title="52">        rev(rsl);</a>
<a class="sourceLine" id="cb1-53" title="53">        printf(<span class="st">"Case %d:</span><span class="sc">\n</span><span class="st">"</span>,test+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-54" title="54">        <span class="cf">for</span>(<span class="dt">int</span> i=la-<span class="dv">1</span>;i&gt;=<span class="dv">0</span>;i--){</a>
<a class="sourceLine" id="cb1-55" title="55">            printf(<span class="st">"%c"</span>,a[i]);</a>
<a class="sourceLine" id="cb1-56" title="56">        }</a>
<a class="sourceLine" id="cb1-57" title="57">        printf(<span class="st">" + "</span>);</a>
<a class="sourceLine" id="cb1-58" title="58">        <span class="cf">for</span>(<span class="dt">int</span> i=lb-<span class="dv">1</span>;i&gt;=<span class="dv">0</span>;i--){</a>
<a class="sourceLine" id="cb1-59" title="59">            printf(<span class="st">"%c"</span>,b[i]);</a>
<a class="sourceLine" id="cb1-60" title="60">        }</a>
<a class="sourceLine" id="cb1-61" title="61">        printf(<span class="st">" = "</span>);</a>
<a class="sourceLine" id="cb1-62" title="62">        puts(rsl);</a>
<a class="sourceLine" id="cb1-63" title="63">        <span class="cf">if</span>(test!=t-<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-64" title="64">            printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>); </a>
<a class="sourceLine" id="cb1-65" title="65">    }</a>
<a class="sourceLine" id="cb1-66" title="66">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-67" title="67">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU1171-Big Event in HDU（多重背包做法）</title>
    <url>/2019/02/13/HDOJ1171-Big-Event-in-HDU/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1171">HDOJ1171</a> 这道题之前是用01背包做的，现在用多重背包的做法解决。这其实更符合题意（个人认为）</p>
<span id="more"></span>
<p>代码如下：</p>
<p>版本三(二进制优化的多重背包，93ms)</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;climits&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">1000000</span>+<span class="dv">5</span>; </a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="dt">int</span> v[<span class="dv">5005</span>],m[<span class="dv">5005</span>];</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="dt">int</span> dp[maxn];</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="dt">void</span> zero_one(<span class="dt">int</span> cost,<span class="dt">int</span> val,<span class="dt">int</span> vtot)</a>
<a class="sourceLine" id="cb1-14" title="14">{</a>
<a class="sourceLine" id="cb1-15" title="15">    <span class="cf">for</span>(<span class="dt">int</span> j=vtot;j&gt;=cost;j--)</a>
<a class="sourceLine" id="cb1-16" title="16">        dp[j]=max(dp[j],dp[j-cost]+val);</a>
<a class="sourceLine" id="cb1-17" title="17">}</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="dt">void</span> complete(<span class="dt">int</span> cost,<span class="dt">int</span> val,<span class="dt">int</span> vtot)</a>
<a class="sourceLine" id="cb1-19" title="19">{</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">for</span>(<span class="dt">int</span> j=cost;j&lt;=vtot;j++)</a>
<a class="sourceLine" id="cb1-21" title="21">        dp[j]=max(dp[j],dp[j-cost]+val);</a>
<a class="sourceLine" id="cb1-22" title="22">}</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">void</span> multiple(<span class="dt">int</span> cost,<span class="dt">int</span> val,<span class="dt">int</span> num,<span class="dt">int</span> vtot)</a>
<a class="sourceLine" id="cb1-24" title="24">{</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> k;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="cf">if</span>(cost*num&gt;=vtot)</a>
<a class="sourceLine" id="cb1-27" title="27">    {</a>
<a class="sourceLine" id="cb1-28" title="28">        complete(cost,val,vtot);</a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-30" title="30">    }</a>
<a class="sourceLine" id="cb1-31" title="31">    k=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="cf">while</span>(k&lt;num)</a>
<a class="sourceLine" id="cb1-33" title="33">    {</a>
<a class="sourceLine" id="cb1-34" title="34">        zero_one(k*cost,k*val,vtot);</a>
<a class="sourceLine" id="cb1-35" title="35">        num-=k;</a>
<a class="sourceLine" id="cb1-36" title="36">        k&lt;&lt;=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-37" title="37">    }</a>
<a class="sourceLine" id="cb1-38" title="38">    zero_one(num*cost,num*val,vtot);</a>
<a class="sourceLine" id="cb1-39" title="39">}</a>
<a class="sourceLine" id="cb1-40" title="40"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-41" title="41">{</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF&amp;&amp;n&gt;<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-43" title="43">    {    </a>
<a class="sourceLine" id="cb1-44" title="44">        mst(v,<span class="dv">0</span>);mst(m,<span class="dv">0</span>);mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-45" title="45">        <span class="dt">int</span> sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-46" title="46">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-47" title="47">        {</a>
<a class="sourceLine" id="cb1-48" title="48">            <span class="dt">int</span> val,num;</a>
<a class="sourceLine" id="cb1-49" title="49">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;val,&amp;num);</a>
<a class="sourceLine" id="cb1-50" title="50">            sum+=val*num;</a>
<a class="sourceLine" id="cb1-51" title="51">            v[i]=val;m[i]=num;</a>
<a class="sourceLine" id="cb1-52" title="52">        }</a>
<a class="sourceLine" id="cb1-53" title="53">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-54" title="54">            multiple(v[i],v[i],m[i],sum/<span class="dv">2</span>);</a>
<a class="sourceLine" id="cb1-55" title="55">        <span class="dt">int</span> a=sum-dp[sum/<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb1-56" title="56">        <span class="dt">int</span> b=dp[sum/<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb1-57" title="57">        cout&lt;&lt;a&lt;&lt;<span class="st">" "</span>&lt;&lt;b&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-58" title="58">    }</a>
<a class="sourceLine" id="cb1-59" title="59">}</a></code></pre></div>
<p>二进制优化的模板→<a href="https://blog.csdn.net/mystery_guest/article/details/51878140">多重背包二进制优化模板分析</a></p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>多重背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2602 - Bone Collector</title>
    <url>/2019/02/17/HDOJ2602-Bone-Collector/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2602">Bone Collector</a></p>
<p>  一道01背包模板题，套模板即可 <span id="more"></span> 代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">1005</span>; </a>
<a class="sourceLine" id="cb1-7" title="7"><span class="dt">int</span> value[maxn],w[maxn];</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">int</span> dp[maxn];</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-10" title="10">{</a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-12" title="12">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-14" title="14">    {</a>
<a class="sourceLine" id="cb1-15" title="15">        <span class="dt">int</span> n,vtot;</a>
<a class="sourceLine" id="cb1-16" title="16">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;vtot);</a>
<a class="sourceLine" id="cb1-17" title="17">        memset(value,<span class="dv">0</span>,<span class="kw">sizeof</span>(value));memset(w,<span class="dv">0</span>,<span class="kw">sizeof</span>(w));</a>
<a class="sourceLine" id="cb1-18" title="18">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;value[i]);</a>
<a class="sourceLine" id="cb1-19" title="19">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;w[i]);</a>
<a class="sourceLine" id="cb1-20" title="20">        memset(dp,<span class="dv">0</span>,<span class="kw">sizeof</span>(dp));</a>
<a class="sourceLine" id="cb1-21" title="21">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-22" title="22">            <span class="cf">for</span>(<span class="dt">int</span> j=vtot;j&gt;=w[i];j--)</a>
<a class="sourceLine" id="cb1-23" title="23">                dp[j]=max(dp[j],dp[j-w[i]]+value[i]);</a>
<a class="sourceLine" id="cb1-24" title="24">        <span class="dt">int</span> ans=dp[vtot];</a>
<a class="sourceLine" id="cb1-25" title="25">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-26" title="26">    }</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-28" title="28">} </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU3037-Saving Beans(卢卡斯定理，组合数)</title>
    <url>/2019/01/27/HDOJ3037-Saving-Beans-%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86%EF%BC%8C%E7%BB%84%E5%90%88%E6%95%B0/</url>
    <content><![CDATA[<p>  题目链接：<a href="https://cn.vjudge.net/problem/HDU-3037">HDOJ-3037</a></p>
<p>  这道题关键之处在于式子的推导，只要把式子推导出来了，就可以直接套用Lucas的模板，从而求出答案。那么，公式要怎么求呢？</p>
<p>  首先，问题要求的是从n棵树中收集不超过m个果实(原本以为是将不多于m个果实放到n棵树中......这题目表达有问题啊！)。也就是说，问题其实是求方程x1+x2+x3+···+xn=m的非负整数解的个数。那么我们要怎求呢？   首先，如果是求正整数解的个数，那我们可以直接用最简单的隔板法，即C(m-1,n-1);但这里求的是非负整数解，也就是说x1，x2，···,xn中的一个或多个可以为0。这种情况下，我们仍可以用隔板法来计算。方法是，将求非负整数解这一个问题转化为求正整数解，也就是将每一个x(x1,x2,···,xm)都加上1，构造一个新的方程y1+y2+···+yn=m(yi=xi+1)。显然，由于方程是线性的，故新方程的正整数解的个数等于原方程的非负整数解的个数。而新方程的解的个数为C((m+n)-1,n-1)=C((m+n)-1,m)。</p>
<p>  而我们要求的实际上是(∑(i=0,m)C(m+n-1,i))%p，根据公式C(n,k)=C(n-1,k-1)+C(n-1,k)(上取大，下加一),可得到(∑(i=0,m)C(m+n-1,i))%p=C(m+n,m)%p。又因为p为质数，故用Lucas即可。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-7" title="7">ll powq(ll a,ll b,ll p)</a>
<a class="sourceLine" id="cb1-8" title="8">{</a>
<a class="sourceLine" id="cb1-9" title="9">    ll ans=<span class="dv">1</span>;a%=p;</a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="cf">while</span>(b)</a>
<a class="sourceLine" id="cb1-11" title="11">    {</a>
<a class="sourceLine" id="cb1-12" title="12">        <span class="cf">if</span>(b&amp;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-13" title="13">            ans=(ans*a)%p;</a>
<a class="sourceLine" id="cb1-14" title="14">        a=(a*a)%p;</a>
<a class="sourceLine" id="cb1-15" title="15">        b&gt;&gt;=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-16" title="16">    }</a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-18" title="18">}</a>
<a class="sourceLine" id="cb1-19" title="19">ll inv(ll a,ll p)</a>
<a class="sourceLine" id="cb1-20" title="20">{</a>
<a class="sourceLine" id="cb1-21" title="21">    <span class="cf">return</span> powq(a,p-<span class="dv">2</span>,p);</a>
<a class="sourceLine" id="cb1-22" title="22">}</a>
<a class="sourceLine" id="cb1-23" title="23">ll comb(ll n,ll m,ll p)</a>
<a class="sourceLine" id="cb1-24" title="24">{</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="cf">if</span>(n&lt;m)        <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-26" title="26">    ll up=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-27" title="27">    ll down=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="cf">for</span>(<span class="dt">int</span> i=n-m+<span class="dv">1</span>;i&lt;=n;i++)        up=(up*i)%p;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++)        down=(down*i)%p;</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">return</span> up*inv(down,p)%p;</a>
<a class="sourceLine" id="cb1-31" title="31">}</a>
<a class="sourceLine" id="cb1-32" title="32">ll lucas(ll n,ll m,ll p)</a>
<a class="sourceLine" id="cb1-33" title="33">{</a>
<a class="sourceLine" id="cb1-34" title="34">    <span class="cf">return</span> !n?<span class="dv">1</span>:lucas(n/p,m/p,p)*comb(n%p,m%p,p)%p;</a>
<a class="sourceLine" id="cb1-35" title="35">}</a>
<a class="sourceLine" id="cb1-36" title="36"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-37" title="37">{</a>
<a class="sourceLine" id="cb1-38" title="38">    ll m,n,p;</a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-40" title="40">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-42" title="42">    {</a>
<a class="sourceLine" id="cb1-43" title="43">        scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st">"</span>,&amp;n,&amp;m,&amp;p);     </a>
<a class="sourceLine" id="cb1-44" title="44">        ll ans=lucas(n+m,n,p);</a>
<a class="sourceLine" id="cb1-45" title="45">        printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-46" title="46">    }</a>
<a class="sourceLine" id="cb1-47" title="47">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-48" title="48">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU5446-Unknown Treasure(卢卡斯定理，中国剩余定理)</title>
    <url>/2019/01/28/HDOJ5446-Unknown-Treasure/</url>
    <content><![CDATA[<p>题目链接:<a href="https://cn.vjudge.net/problem/HDU-5446">Unknown Treasure</a></p>
<p><img src="https://pic.superbed.cn/item/5c4e95c85f3e509ed97caf5f"></p>
<p>这道题求得实际上是C(n,m)%M,M=p1·p2·p3···pk。又因为pi都是素数，故可用卢卡斯定理。但这里不可以直接用Lucas，因为Lucas的使用条件是“C(n,m)很大，但p不太大，同时p为素数”，而这里的M可能会很大。故我们可以先求C(n,m)%p1,C(n,m)%p2,C(n,m)%pk，然后再利用中国剩余定理得到最终答案。</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> LL;</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="co">//从n个苹果中挑出m个相互不同的苹果</span></a>
<a class="sourceLine" id="cb1-8" title="8">LL mulq(LL a,LL b,LL m)        <span class="co">//(a*b)%m</span></a>
<a class="sourceLine" id="cb1-9" title="9">{    </a>
<a class="sourceLine" id="cb1-10" title="10">    LL ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="cf">while</span>(b)</a>
<a class="sourceLine" id="cb1-12" title="12">    {</a>
<a class="sourceLine" id="cb1-13" title="13">        <span class="cf">if</span>(b&amp;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-14" title="14">            ans=(ans+a)%m;</a>
<a class="sourceLine" id="cb1-15" title="15">        a=(a+a)%m;</a>
<a class="sourceLine" id="cb1-16" title="16">        b&gt;&gt;=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-17" title="17">    }</a>
<a class="sourceLine" id="cb1-18" title="18">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-19" title="19">}</a>
<a class="sourceLine" id="cb1-20" title="20">LL powq(LL a,LL b,LL mod)</a>
<a class="sourceLine" id="cb1-21" title="21">{</a>
<a class="sourceLine" id="cb1-22" title="22">    LL ans=<span class="dv">1</span>;a%=mod;</a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="cf">while</span>(b)</a>
<a class="sourceLine" id="cb1-24" title="24">    {</a>
<a class="sourceLine" id="cb1-25" title="25">        <span class="cf">if</span>(b&amp;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-26" title="26">            ans=(ans*a)%mod;</a>
<a class="sourceLine" id="cb1-27" title="27">        a=(a*a)%mod;</a>
<a class="sourceLine" id="cb1-28" title="28">        b&gt;&gt;=<span class="dv">1</span>; </a>
<a class="sourceLine" id="cb1-29" title="29">    }</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-31" title="31">} </a>
<a class="sourceLine" id="cb1-32" title="32">LL inv(LL x,LL p)</a>
<a class="sourceLine" id="cb1-33" title="33">{</a>
<a class="sourceLine" id="cb1-34" title="34">    <span class="cf">return</span> powq(x,p-<span class="dv">2</span>,p);</a>
<a class="sourceLine" id="cb1-35" title="35">}</a>
<a class="sourceLine" id="cb1-36" title="36">LL comb(LL n,LL m,LL p)</a>
<a class="sourceLine" id="cb1-37" title="37">{</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="cf">if</span>(n&lt;m||m&lt;<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-40" title="40">    LL up=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">    LL down=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">for</span>(LL i=n-m+<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-43" title="43">        up=(up*i)%p;</a>
<a class="sourceLine" id="cb1-44" title="44">    <span class="cf">for</span>(LL i=<span class="dv">1</span>;i&lt;=m;i++)</a>
<a class="sourceLine" id="cb1-45" title="45">        down=(down*i)%p;</a>
<a class="sourceLine" id="cb1-46" title="46">    <span class="cf">return</span> up*inv(down,p)%p;</a>
<a class="sourceLine" id="cb1-47" title="47">}</a>
<a class="sourceLine" id="cb1-48" title="48">LL lucas(LL a,LL b,LL p)</a>
<a class="sourceLine" id="cb1-49" title="49">{</a>
<a class="sourceLine" id="cb1-50" title="50">    <span class="cf">return</span> !b?<span class="dv">1</span>:lucas(a/p,b/p,p)*comb(a%p,b%p,p)%p;</a>
<a class="sourceLine" id="cb1-51" title="51">}</a>
<a class="sourceLine" id="cb1-52" title="52">LL china(<span class="dt">int</span> k,LL a[],LL m[])</a>
<a class="sourceLine" id="cb1-53" title="53">{</a>
<a class="sourceLine" id="cb1-54" title="54">    LL M=<span class="dv">1</span>;LL ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-55" title="55">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;k;i++)</a>
<a class="sourceLine" id="cb1-56" title="56">        M*=m[i];</a>
<a class="sourceLine" id="cb1-57" title="57">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;k;i++)</a>
<a class="sourceLine" id="cb1-58" title="58">    {</a>
<a class="sourceLine" id="cb1-59" title="59">        LL tmp=M/m[i];        <span class="co">//tmp==&gt;mi        </span></a>
<a class="sourceLine" id="cb1-60" title="60">        ans=(ans+mulq(tmp*inv(tmp,m[i]),a[i],M))%M;        <span class="co">//ti==&gt;ti*mi=1 (mod mi)</span></a>
<a class="sourceLine" id="cb1-61" title="61">    }</a>
<a class="sourceLine" id="cb1-62" title="62">    <span class="cf">return</span> (ans+M)%M;            <span class="co">//通解为kM+∑(i=0,k)(ai*ti*Mi) </span></a>
<a class="sourceLine" id="cb1-63" title="63">}</a>
<a class="sourceLine" id="cb1-64" title="64"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-65" title="65">{</a>
<a class="sourceLine" id="cb1-66" title="66">    LL t,k;</a>
<a class="sourceLine" id="cb1-67" title="67">    LL n,m;</a>
<a class="sourceLine" id="cb1-68" title="68">    <span class="dt">int</span> cnt;</a>
<a class="sourceLine" id="cb1-69" title="69">    LL r[<span class="dv">15</span>],md[<span class="dv">15</span>];</a>
<a class="sourceLine" id="cb1-70" title="70">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb1-71" title="71">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-72" title="72">    {    </a>
<a class="sourceLine" id="cb1-73" title="73">        cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-74" title="74">        memset(r,<span class="dv">0</span>,<span class="kw">sizeof</span>(r));</a>
<a class="sourceLine" id="cb1-75" title="75">        memset(md,<span class="dv">0</span>,<span class="kw">sizeof</span>(md));</a>
<a class="sourceLine" id="cb1-76" title="76">        scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st">"</span>,&amp;n,&amp;m,&amp;k);</a>
<a class="sourceLine" id="cb1-77" title="77">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;k;i++)</a>
<a class="sourceLine" id="cb1-78" title="78">        {</a>
<a class="sourceLine" id="cb1-79" title="79">            LL tmp=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-80" title="80">            scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,&amp;tmp);</a>
<a class="sourceLine" id="cb1-81" title="81">            md[cnt]=tmp;</a>
<a class="sourceLine" id="cb1-82" title="82">            r[cnt++]=lucas(n,m,tmp);</a>
<a class="sourceLine" id="cb1-83" title="83">        }</a>
<a class="sourceLine" id="cb1-84" title="84">        LL pro=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-85" title="85">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;k;i++)    </a>
<a class="sourceLine" id="cb1-86" title="86">            pro*=md[i];</a>
<a class="sourceLine" id="cb1-87" title="87">        LL ans=china(k,r,md);        <span class="co">//为什么答案就是中国剩余定理求出的值？不应该再模上乘积吗? </span></a>
<a class="sourceLine" id="cb1-88" title="88">        printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>,ans%pro);    <span class="co">//因为中国剩余定理在计算时已经算了这个模;中国剩余定理求出的是解集中的最小解，即c(m,m)%M;</span></a>
<a class="sourceLine" id="cb1-89" title="89">                                    <span class="co">//当然，如果在main中再模一次M,也是可以AC的    </span></a>
<a class="sourceLine" id="cb1-90" title="90">    }</a>
<a class="sourceLine" id="cb1-91" title="91">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-92" title="92">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU1018 - Big Number</title>
    <url>/2019/02/24/HDU1018-Big-Number/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-1018">Big Number</a></p>
<p>  直接套用stirling数的公式即可。关于strling数，可参考下图</p>
<p><img src="https://pic.superbed.cn/item/5c72a85b3a213b0417767d95"> <span id="more"></span> 代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define INF </span><span class="bn">0x7fffffff</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#define pi </span>acos(-<span class="fl">1.0</span>)</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="at">const</span> <span class="dt">double</span> e=<span class="fl">2.718281828459</span>;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-16" title="16">{</a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="co">//    cout&lt;&lt;log10(103)&lt;&lt;endl;</span></a>
<a class="sourceLine" id="cb1-19" title="19">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-21" title="21">    {</a>
<a class="sourceLine" id="cb1-22" title="22">        <span class="dt">double</span> n;</a>
<a class="sourceLine" id="cb1-23" title="23">        cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-24" title="24">        ll ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-25" title="25">        ans=(<span class="dt">int</span>)(floor((log10((<span class="dv">2</span>*pi*n)))/<span class="dv">2</span>+n*log10(n/e))+<span class="dv">1</span>);        <span class="co">//stirling公式 </span></a>
<a class="sourceLine" id="cb1-26" title="26">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-27" title="27">    }</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-29" title="29">}</a>
<a class="sourceLine" id="cb1-30" title="30"><span class="co">/**/</span></a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU1171 - Big Event in HDU</title>
    <url>/2019/02/17/HDU1171-Big-Event-in-HDU/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-1171">Big Event in HDU</a></p>
<p>  这道题是让我们将设备根据价值尽可能地平均分成两半，其实就是把设备的价值总和平分成两个部分，然后以此为背包，将这个背包尽可能填满。因为这里的“体积”和“价值”都是设备的价值，所以其实就是求价值的最大值。题目还要求输出时，大的在前面，小的在后面，这可以利用整除的特性做到，因为一个整数a整除2得到的结果一定是小于或等于a/2(非整除)的。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;climits&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">int</span> v[<span class="dv">5005</span>];</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> dp[<span class="dv">1000000</span>];</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-11" title="11">{</a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF&amp;&amp;n&gt;<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-14" title="14">    {    </a>
<a class="sourceLine" id="cb1-15" title="15">        memset(dp,<span class="dv">0</span>,<span class="kw">sizeof</span>(dp));</a>
<a class="sourceLine" id="cb1-16" title="16">        memset(v,<span class="dv">0</span>,<span class="kw">sizeof</span>(v));</a>
<a class="sourceLine" id="cb1-17" title="17">        <span class="dt">int</span> half=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-18" title="18">        <span class="dt">int</span> idx=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-19" title="19">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-20" title="20">        {    </a>
<a class="sourceLine" id="cb1-21" title="21">            <span class="dt">int</span> val,temp;</a>
<a class="sourceLine" id="cb1-22" title="22">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;val,&amp;temp);</a>
<a class="sourceLine" id="cb1-23" title="23">            <span class="cf">while</span>(temp--)</a>
<a class="sourceLine" id="cb1-24" title="24">            {</a>
<a class="sourceLine" id="cb1-25" title="25">                v[idx++]=val;</a>
<a class="sourceLine" id="cb1-26" title="26">                half+=val;</a>
<a class="sourceLine" id="cb1-27" title="27">            }</a>
<a class="sourceLine" id="cb1-28" title="28">        }</a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="dt">int</span> tmp=half;</a>
<a class="sourceLine" id="cb1-30" title="30">        half/=<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;idx;i++)</a>
<a class="sourceLine" id="cb1-32" title="32">            <span class="cf">for</span>(<span class="dt">int</span> j=half;j&gt;=v[i];j--)</a>
<a class="sourceLine" id="cb1-33" title="33">                dp[j]=max(dp[j],dp[j-v[i]]+v[i]);</a>
<a class="sourceLine" id="cb1-34" title="34">        <span class="dt">int</span> a,b;</a>
<a class="sourceLine" id="cb1-35" title="35">        a=tmp-dp[half];</a>
<a class="sourceLine" id="cb1-36" title="36">        b=dp[half];</a>
<a class="sourceLine" id="cb1-37" title="37">      <span class="co">//cout&lt;&lt;max(a,b)&lt;&lt;" "&lt;&lt;min(a,b)&lt;&lt;endl;</span></a>
<a class="sourceLine" id="cb1-38" title="38">        cout&lt;&lt;a&lt;&lt;<span class="st">" "</span>&lt;&lt;b&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-39" title="39">    }</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU1248 - 寒冰王座</title>
    <url>/2019/02/22/HDU1248-%E5%AF%92%E5%86%B0%E7%8E%8B%E5%BA%A7/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-1248">寒冰王座</a></p>
<span id="more"></span>
<p>  套用模板即可</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e4</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="dt">int</span> money[<span class="dv">5</span>]={<span class="dv">150</span>,<span class="dv">200</span>,<span class="dv">350</span>};</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="dt">int</span> dp[maxn];</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-14" title="14">{</a>
<a class="sourceLine" id="cb1-15" title="15">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-16" title="16">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-18" title="18">    {    </a>
<a class="sourceLine" id="cb1-19" title="19">        mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-20" title="20">        <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-21" title="21">        cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-22" title="22">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">3</span>;i++)</a>
<a class="sourceLine" id="cb1-23" title="23">            <span class="cf">for</span>(<span class="dt">int</span> j=money[i];j&lt;=n;j++)</a>
<a class="sourceLine" id="cb1-24" title="24">                dp[j]=max(dp[j],dp[j-money[i]]+money[i]);</a>
<a class="sourceLine" id="cb1-25" title="25">        cout&lt;&lt;n-dp[n]&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-26" title="26">    }</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-28" title="28">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>完全背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>完全背包</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU1301 - Jungle Roads</title>
    <url>/2019/02/27/HDU1301-Jungle-Roads/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-1301">Jungle Roads</a></p>
<p>套用Kruskal或Prim的模板即可。这里我用的时Kruskal。</p>
<span id="more"></span>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">typedef</span> <span class="kw">struct</span>{</a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="dt">int</span> from,to,cost; </a>
<a class="sourceLine" id="cb1-13" title="13">}edge;</a>
<a class="sourceLine" id="cb1-14" title="14">edge arr[<span class="dv">100</span>];</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">int</span> pre[<span class="dv">100</span>];</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="dt">int</span> cnt;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="dt">bool</span> cmp(edge e1,edge e2)</a>
<a class="sourceLine" id="cb1-19" title="19">{</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">return</span> e1.cost&lt;e2.cost;</a>
<a class="sourceLine" id="cb1-21" title="21">}</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb1-23" title="23">{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-25" title="25">        pre[i]=i;</a>
<a class="sourceLine" id="cb1-26" title="26">}</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">int</span> findr(<span class="dt">int</span> x)</a>
<a class="sourceLine" id="cb1-28" title="28">{</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="cf">if</span>(x==pre[x])</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="cf">return</span> x;</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="cf">return</span> pre[x]=findr(pre[x]);</a>
<a class="sourceLine" id="cb1-32" title="32">}</a>
<a class="sourceLine" id="cb1-33" title="33"><span class="dt">int</span> kruskal()</a>
<a class="sourceLine" id="cb1-34" title="34">{</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="dt">int</span> rsl=<span class="dv">0</span>;<span class="dt">int</span> num=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-36" title="36">    init();</a>
<a class="sourceLine" id="cb1-37" title="37">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;cnt;i++)</a>
<a class="sourceLine" id="cb1-38" title="38">    {</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="dt">int</span> fx=findr(arr[i].from);</a>
<a class="sourceLine" id="cb1-40" title="40">        <span class="dt">int</span> fy=findr(arr[i].to);</a>
<a class="sourceLine" id="cb1-41" title="41">        <span class="cf">if</span>(fx!=fy)</a>
<a class="sourceLine" id="cb1-42" title="42">        {</a>
<a class="sourceLine" id="cb1-43" title="43">            pre[fx]=fy;</a>
<a class="sourceLine" id="cb1-44" title="44">            rsl+=arr[i].cost;</a>
<a class="sourceLine" id="cb1-45" title="45">        }</a>
<a class="sourceLine" id="cb1-46" title="46">    }</a>
<a class="sourceLine" id="cb1-47" title="47">    <span class="cf">return</span> rsl;</a>
<a class="sourceLine" id="cb1-48" title="48">}</a>
<a class="sourceLine" id="cb1-49" title="49"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-50" title="50">{</a>
<a class="sourceLine" id="cb1-51" title="51">    <span class="cf">while</span>(cin&gt;&gt;n&amp;&amp;n)</a>
<a class="sourceLine" id="cb1-52" title="52">    {    </a>
<a class="sourceLine" id="cb1-53" title="53">        cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-54" title="54">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n-<span class="dv">1</span>;i++)</a>
<a class="sourceLine" id="cb1-55" title="55">        {        </a>
<a class="sourceLine" id="cb1-56" title="56">            <span class="dt">char</span> ch,ch1;</a>
<a class="sourceLine" id="cb1-57" title="57">            <span class="dt">int</span> k,aacm;</a>
<a class="sourceLine" id="cb1-58" title="58">            cin&gt;&gt;ch&gt;&gt;k;</a>
<a class="sourceLine" id="cb1-59" title="59">            getchar();</a>
<a class="sourceLine" id="cb1-60" title="60">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=k;j++)</a>
<a class="sourceLine" id="cb1-61" title="61">            {    </a>
<a class="sourceLine" id="cb1-62" title="62">                edge tmp;</a>
<a class="sourceLine" id="cb1-63" title="63">                cin&gt;&gt;ch1&gt;&gt;aacm;</a>
<a class="sourceLine" id="cb1-64" title="64">                getchar();</a>
<a class="sourceLine" id="cb1-65" title="65">                tmp.from=ch-<span class="ch">'A'</span>+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-66" title="66">                tmp.to=ch1-<span class="ch">'A'</span>+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-67" title="67">                tmp.cost=aacm;</a>
<a class="sourceLine" id="cb1-68" title="68">                arr[cnt++]=tmp;</a>
<a class="sourceLine" id="cb1-69" title="69">            }</a>
<a class="sourceLine" id="cb1-70" title="70">        }</a>
<a class="sourceLine" id="cb1-71" title="71">        sort(arr,arr+cnt,cmp);</a>
<a class="sourceLine" id="cb1-72" title="72">        <span class="dt">int</span> ans=kruskal();</a>
<a class="sourceLine" id="cb1-73" title="73">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-74" title="74">    }</a>
<a class="sourceLine" id="cb1-75" title="75">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-76" title="76">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>最小生成树</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Kruskal</tag>
        <tag>图论</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU1811 - Rank of Tetris</title>
    <url>/2019/03/21/HDU1811-Rank-of-Tetris/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-1811">Rank of Tetris</a> <br></p>
<p>  根据题单的提示，这是一道拓补排序+并查集的题目，然而我并不会拓补排序......所以这里先写一下拓补排序相关的东西吧......</p>
<p>  首先，拓补排序是对一系列有先后顺序的“活动”的排序。何为“有先后顺序的‘活动’”？举个例子，假如现在某人要穿衣服，那他必须要先穿内衣再穿中间的毛衣，最后再穿外套。拓补排序就是使用有向无环图(DAG)来对这些有先后顺序的活动进行排序，得到一个可行的顺序。对于同一系列的活动，可能有多于一种顺序可以使他们满足拓补排序。这跟穿衣服时可以先穿裤子再穿毛衣然后再穿外套，也可以先穿毛衣再穿裤子然后穿外套是一样的。</p>
<p>  拓补排序的实现：先找出入度为0的点，然后将这个点以及与这个点相连的边删除，并将与这个点直接相连的点的入度都减一。再找出当前入度为0的点，重复上述过程.......当所有点的入度都为0时，说明所有的点都已经被安排了一个拓补序，拓补排序完成。如果不能使所有点的入度都为0，则可以判断当前这个图不是DAG。因此，拓补排序还可以用来判断一个有向图是否有环</p>
<p>  具体到这道题。思路是，对于rating相等的两个点，比如说a和b，因为它们之间的序号一定不一样，所以两者之间一定能够连接一条有向边。可是如果接下来又出现了一个b = c呢？那b和c之间也要连一条有向边。不仅如此，a和c之间也要连一条有向边。所以如果出现了a = b = c = d = e = ...的情况，这个图就会很复杂。所以我们可以用并查集将那些rating相等的点都连接起来，然后将他们的根节点作为他们的代表元素，即将这些点看成是一个点。然后再用拓补排序判一下环即可。</p>
<p>  需要注意的细节是，如果之前已经出现了a = b，往后可能会出现a &gt; b或者a &lt; b，这是要判断为CONFLICT</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e4</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="co">//n个点，m条边</span></a>
<a class="sourceLine" id="cb1-22" title="22"><span class="co">//将'='的点用并查集聚合为一个点</span></a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> pre[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">int</span> head[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">int</span> deg[<span class="dv">2</span>*maxn];        <span class="co">//记录每个点的入度</span></a>
<a class="sourceLine" id="cb1-26" title="26"><span class="dt">int</span> tot;</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="kw">struct</span> edge{</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="dt">int</span> to;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> next;</a>
<a class="sourceLine" id="cb1-30" title="30">};</a>
<a class="sourceLine" id="cb1-31" title="31">edge edges[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb1-32" title="32"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb1-33" title="33">{</a>
<a class="sourceLine" id="cb1-34" title="34">    tot=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-36" title="36">        pre[i]=i;</a>
<a class="sourceLine" id="cb1-37" title="37">    mst(head,-<span class="dv">1</span>);mst(deg,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-38" title="38">}</a>
<a class="sourceLine" id="cb1-39" title="39"><span class="dt">void</span> add_edge(<span class="dt">int</span> u,<span class="dt">int</span> v)</a>
<a class="sourceLine" id="cb1-40" title="40">{</a>
<a class="sourceLine" id="cb1-41" title="41">    edges[tot].to=v;</a>
<a class="sourceLine" id="cb1-42" title="42">    edges[tot].next=head[u];</a>
<a class="sourceLine" id="cb1-43" title="43">    head[u]=tot++;</a>
<a class="sourceLine" id="cb1-44" title="44">    deg[v]++;</a>
<a class="sourceLine" id="cb1-45" title="45">}</a>
<a class="sourceLine" id="cb1-46" title="46"><span class="dt">int</span> findr(<span class="dt">int</span> x)</a>
<a class="sourceLine" id="cb1-47" title="47">{</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="cf">if</span>(x==pre[x])</a>
<a class="sourceLine" id="cb1-49" title="49">        <span class="cf">return</span> x;</a>
<a class="sourceLine" id="cb1-50" title="50">    <span class="cf">return</span> pre[x]=findr(pre[x]);</a>
<a class="sourceLine" id="cb1-51" title="51">}</a>
<a class="sourceLine" id="cb1-52" title="52"><span class="dt">int</span> topo()</a>
<a class="sourceLine" id="cb1-53" title="53">{</a>
<a class="sourceLine" id="cb1-54" title="54">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb1-55" title="55">    <span class="dt">int</span> root_cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-56" title="56">    <span class="dt">int</span> in_que_cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-57" title="57">    <span class="dt">bool</span> flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-58" title="58">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-59" title="59">    {</a>
<a class="sourceLine" id="cb1-60" title="60">        <span class="cf">if</span>(pre[i]==i){</a>
<a class="sourceLine" id="cb1-61" title="61">            root_cnt++;</a>
<a class="sourceLine" id="cb1-62" title="62">            <span class="cf">if</span>(deg[i]==<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-63" title="63">                que.push(i);</a>
<a class="sourceLine" id="cb1-64" title="64">        }</a>
<a class="sourceLine" id="cb1-65" title="65">    }</a>
<a class="sourceLine" id="cb1-66" title="66">    <span class="cf">while</span>(!que.empty())</a>
<a class="sourceLine" id="cb1-67" title="67">    {</a>
<a class="sourceLine" id="cb1-68" title="68">        <span class="cf">if</span>(que.size()&gt;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-69" title="69">            flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-70" title="70">        in_que_cnt++;</a>
<a class="sourceLine" id="cb1-71" title="71">        <span class="dt">int</span> fro=que.front();</a>
<a class="sourceLine" id="cb1-72" title="72">        que.pop();</a>
<a class="sourceLine" id="cb1-73" title="73">        <span class="cf">for</span>(<span class="dt">int</span> i=head[fro];i!=-<span class="dv">1</span>;i=edges[i].next)</a>
<a class="sourceLine" id="cb1-74" title="74">        {</a>
<a class="sourceLine" id="cb1-75" title="75">            <span class="dt">int</span> tmp=findr(edges[i].to);</a>
<a class="sourceLine" id="cb1-76" title="76">            deg[tmp]--;</a>
<a class="sourceLine" id="cb1-77" title="77">            <span class="cf">if</span>(deg[tmp]==<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-78" title="78">                que.push(tmp);        <span class="co">//为什么这里不需要将入队次数++?</span></a>
<a class="sourceLine" id="cb1-79" title="79">        }</a>
<a class="sourceLine" id="cb1-80" title="80">    }</a>
<a class="sourceLine" id="cb1-81" title="81">    <span class="cf">if</span>(in_que_cnt&lt;root_cnt)</a>
<a class="sourceLine" id="cb1-82" title="82">        <span class="cf">return</span> <span class="dv">1</span>;        <span class="co">//冲突(有环)</span></a>
<a class="sourceLine" id="cb1-83" title="83">    <span class="cf">else</span> <span class="cf">if</span>(!flag)</a>
<a class="sourceLine" id="cb1-84" title="84">        <span class="cf">return</span> -<span class="dv">1</span>;        <span class="co">//不可确定关系</span></a>
<a class="sourceLine" id="cb1-85" title="85">    <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-86" title="86">        <span class="cf">return</span> <span class="dv">0</span>;        <span class="co">//ok</span></a>
<a class="sourceLine" id="cb1-87" title="87">}</a>
<a class="sourceLine" id="cb1-88" title="88"><span class="dt">int</span> a[maxn],b[maxn],ch[maxn];</a>
<a class="sourceLine" id="cb1-89" title="89"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-90" title="90">{</a>
<a class="sourceLine" id="cb1-91" title="91">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m)!=EOF)</a>
<a class="sourceLine" id="cb1-92" title="92">    {</a>
<a class="sourceLine" id="cb1-93" title="93">        init();</a>
<a class="sourceLine" id="cb1-94" title="94">        getchar();</a>
<a class="sourceLine" id="cb1-95" title="95">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++)</a>
<a class="sourceLine" id="cb1-96" title="96">        {</a>
<a class="sourceLine" id="cb1-97" title="97">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%c</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;a[i],&amp;ch[i],&amp;b[i]);</a>
<a class="sourceLine" id="cb1-98" title="98">            getchar();</a>
<a class="sourceLine" id="cb1-99" title="99">            <span class="cf">if</span>(ch[i]==<span class="ch">'='</span>){</a>
<a class="sourceLine" id="cb1-100" title="100">                <span class="dt">int</span> fa=findr(a[i]);</a>
<a class="sourceLine" id="cb1-101" title="101">                <span class="dt">int</span> fb=findr(b[i]);</a>
<a class="sourceLine" id="cb1-102" title="102">                <span class="cf">if</span>(fa!=fb)        <span class="co">//若rating相等，则合并，因为a和b的序号</span></a>
<a class="sourceLine" id="cb1-103" title="103">                                <span class="co">//一定不一致，绝对可以比出大小</span></a>
<a class="sourceLine" id="cb1-104" title="104">                    pre[fa]=fb;</a>
<a class="sourceLine" id="cb1-105" title="105">            }</a>
<a class="sourceLine" id="cb1-106" title="106">        }</a>
<a class="sourceLine" id="cb1-107" title="107">        <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-108" title="108">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++)</a>
<a class="sourceLine" id="cb1-109" title="109">        {</a>
<a class="sourceLine" id="cb1-110" title="110">            <span class="dt">int</span> fa=findr(a[i]);</a>
<a class="sourceLine" id="cb1-111" title="111">            <span class="dt">int</span> fb=findr(b[i]);</a>
<a class="sourceLine" id="cb1-112" title="112">            <span class="cf">if</span>(ch[i]!=<span class="ch">'='</span>&amp;&amp;fa==fb){</a>
<a class="sourceLine" id="cb1-113" title="113">                ans=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-114" title="114">                <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-115" title="115">            }</a>
<a class="sourceLine" id="cb1-116" title="116">            <span class="cf">if</span>(ch[i]==<span class="ch">'&lt;'</span>){        <span class="co">//a &lt; b</span></a>
<a class="sourceLine" id="cb1-117" title="117">                add_edge(findr(b[i]),findr(a[i]));</a>
<a class="sourceLine" id="cb1-118" title="118">            }<span class="cf">else</span> <span class="cf">if</span>(ch[i]==<span class="ch">'&gt;'</span>){</a>
<a class="sourceLine" id="cb1-119" title="119">                add_edge(findr(a[i]),findr(b[i]));</a>
<a class="sourceLine" id="cb1-120" title="120">            }</a>
<a class="sourceLine" id="cb1-121" title="121">        }</a>
<a class="sourceLine" id="cb1-122" title="122">        <span class="cf">if</span>(ans==<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-123" title="123">            ans=topo();</a>
<a class="sourceLine" id="cb1-124" title="124">        <span class="cf">if</span>(ans==<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-125" title="125">            cout&lt;&lt;<span class="st">"CONFLICT"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-126" title="126">        <span class="cf">else</span> <span class="cf">if</span>(ans==-<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-127" title="127">            cout&lt;&lt;<span class="st">"UNCERTAIN"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-128" title="128">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-129" title="129">            cout&lt;&lt;<span class="st">"OK"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-130" title="130">    }</a>
<a class="sourceLine" id="cb1-131" title="131">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-132" title="132">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>拓补排序</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>图论</tag>
        <tag>并查集</tag>
        <tag>拓补排序</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU1864 - 最大报销额</title>
    <url>/2019/02/18/HDU1864-%E6%9C%80%E5%A4%A7%E6%8A%A5%E9%94%80%E9%A2%9D/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-1864">最大报销额</a></p>
<p>  这道题有两个需要注意的地方：一是题目说的“每项”其实是“每类”，也就是A类,B类和C类，而不是每个物品......(这题目表述有问题啊！)；二是在计算时要将所有的数据扩大100倍然后再转为int，计算出最后结果后再缩小为原来的倍率，否则无法用钱数来做背包(浮点数无法作为数组下标)。</p>
<span id="more"></span>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="dt">double</span> dp[<span class="dv">3000005</span>];</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="dt">int</span> m[<span class="dv">35</span>];</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-9" title="9">{</a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="dt">double</span> q;<span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="cf">while</span>(cin&gt;&gt;q&gt;&gt;n)</a>
<a class="sourceLine" id="cb1-12" title="12">    {    </a>
<a class="sourceLine" id="cb1-13" title="13">        <span class="cf">if</span>(n==<span class="dv">0</span>)        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-14" title="14">        q*=<span class="dv">100</span>;</a>
<a class="sourceLine" id="cb1-15" title="15">        <span class="dt">int</span> qtmp=(<span class="dt">int</span>)q;</a>
<a class="sourceLine" id="cb1-16" title="16">        memset(dp,<span class="dv">0</span>,<span class="kw">sizeof</span>(dp));memset(m,<span class="dv">0</span>,<span class="kw">sizeof</span>(m));</a>
<a class="sourceLine" id="cb1-17" title="17">        <span class="dt">bool</span> flag;<span class="dt">int</span> idx=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-18" title="18">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-19" title="19">        {    </a>
<a class="sourceLine" id="cb1-20" title="20">            <span class="dt">double</span> sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-21" title="21">            <span class="dt">char</span> ch;<span class="dt">double</span> a,b,c,tmp;</a>
<a class="sourceLine" id="cb1-22" title="22">            <span class="dt">int</span> num;</a>
<a class="sourceLine" id="cb1-23" title="23">            flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-24" title="24">            cin&gt;&gt;num;getchar();</a>
<a class="sourceLine" id="cb1-25" title="25">            a=b=c=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-26" title="26">            <span class="cf">while</span>(num--)</a>
<a class="sourceLine" id="cb1-27" title="27">            {    </a>
<a class="sourceLine" id="cb1-28" title="28">                tmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-29" title="29">                scanf(<span class="st">"</span><span class="sc">%c</span><span class="st">:</span><span class="sc">%lf</span><span class="st">"</span>,&amp;ch,&amp;tmp);<span class="dt">char</span> c=getchar();</a>
<a class="sourceLine" id="cb1-30" title="30">                tmp*=<span class="dv">100</span>;</a>
<a class="sourceLine" id="cb1-31" title="31">                <span class="cf">if</span>(ch==<span class="ch">'A'</span>)</a>
<a class="sourceLine" id="cb1-32" title="32">                    a+=tmp;</a>
<a class="sourceLine" id="cb1-33" title="33">                <span class="cf">else</span> <span class="cf">if</span>(ch==<span class="ch">'B'</span>)</a>
<a class="sourceLine" id="cb1-34" title="34">                    b+=tmp;</a>
<a class="sourceLine" id="cb1-35" title="35">                <span class="cf">else</span> <span class="cf">if</span>(ch==<span class="ch">'C'</span>)</a>
<a class="sourceLine" id="cb1-36" title="36">                    c+=tmp;</a>
<a class="sourceLine" id="cb1-37" title="37">                <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-38" title="38">                    flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-39" title="39">                <span class="cf">if</span>(flag)</a>
<a class="sourceLine" id="cb1-40" title="40">                    sum+=tmp;</a>
<a class="sourceLine" id="cb1-41" title="41">            }</a>
<a class="sourceLine" id="cb1-42" title="42">            <span class="cf">if</span>(sum&gt;<span class="dv">100000</span>||a&gt;<span class="dv">60000</span>||b&gt;<span class="dv">60000</span>||c&gt;<span class="dv">60000</span>)</a>
<a class="sourceLine" id="cb1-43" title="43">                flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-44" title="44">            <span class="cf">if</span>(flag)</a>
<a class="sourceLine" id="cb1-45" title="45">                m[idx++]=(<span class="dt">int</span>)sum;</a>
<a class="sourceLine" id="cb1-46" title="46">        }</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;=idx;i++)</a>
<a class="sourceLine" id="cb1-48" title="48">            <span class="cf">for</span>(<span class="dt">int</span> j=qtmp;j&gt;=m[i];j--)</a>
<a class="sourceLine" id="cb1-49" title="49">                dp[j]=max(dp[j],dp[j-m[i]]+m[i]);</a>
<a class="sourceLine" id="cb1-50" title="50">        printf(<span class="st">"%.2lf</span><span class="sc">\n</span><span class="st">"</span>,dp[qtmp]/<span class="fl">100.0</span>);</a>
<a class="sourceLine" id="cb1-51" title="51">    }</a>
<a class="sourceLine" id="cb1-52" title="52">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-53" title="53">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU1969 - Pie</title>
    <url>/2019/02/22/HDU1969-Pie/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-1969">Pie</a></p>
<p>  二分答案的经典题。所谓二分答案，即在整个可能的答案空间内进行二分操作，每次都检验一下mid，并根据检验结果调整lef和rig的值。</p>
<span id="more"></span>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#define pi </span>acos(-<span class="fl">1.0</span>)<span class="pp">        </span><span class="co">//用反三角函数计算Pi</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">double</span> arr[<span class="dv">10005</span>];</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> f,n;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">bool</span> cmp(<span class="dt">double</span> a,<span class="dt">double</span> b)</a>
<a class="sourceLine" id="cb1-11" title="11">{</a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="cf">return</span> a&lt;b;</a>
<a class="sourceLine" id="cb1-13" title="13">}</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">bool</span> check(<span class="dt">double</span> todo)</a>
<a class="sourceLine" id="cb1-15" title="15">{</a>
<a class="sourceLine" id="cb1-16" title="16">    <span class="dt">int</span> sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-18" title="18">        sum+=(<span class="dt">int</span>)(arr[i]/todo);        <span class="co">//计算当前体积下能分出多少份派</span></a>
<a class="sourceLine" id="cb1-19" title="19">    <span class="cf">if</span>(sum&gt;=f)    <span class="co">//如果可以分出不少于f(f在main中修改过，f=f+1)块，则当前体积可行</span></a>
<a class="sourceLine" id="cb1-20" title="20">        <span class="cf">return</span> <span class="kw">true</span>;</a>
<a class="sourceLine" id="cb1-21" title="21">    <span class="cf">return</span> <span class="kw">false</span>;</a>
<a class="sourceLine" id="cb1-22" title="22">}</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-24" title="24">{</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-26" title="26">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-28" title="28">    {</a>
<a class="sourceLine" id="cb1-29" title="29">        cin&gt;&gt;n&gt;&gt;f;</a>
<a class="sourceLine" id="cb1-30" title="30">        f+=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-32" title="32">        {</a>
<a class="sourceLine" id="cb1-33" title="33">            cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb1-34" title="34">            arr[i]=arr[i]*arr[i]*pi;</a>
<a class="sourceLine" id="cb1-35" title="35">        }</a>
<a class="sourceLine" id="cb1-36" title="36">        sort(arr,arr+n,cmp);</a>
<a class="sourceLine" id="cb1-37" title="37">        <span class="dt">double</span> l=<span class="dv">0</span>;<span class="dt">double</span> r=arr[n-<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-38" title="38">        <span class="dt">double</span> mid=l+((r-l)/<span class="dv">2</span>);</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">while</span>(r-l&gt;<span class="fl">1e-6</span>)                <span class="co">//注意精度</span></a>
<a class="sourceLine" id="cb1-40" title="40">        {</a>
<a class="sourceLine" id="cb1-41" title="41">            mid=l+((r-l)/<span class="dv">2</span>);</a>
<a class="sourceLine" id="cb1-42" title="42">            <span class="cf">if</span>(check(mid))    <span class="co">//有些时候不一定是l=mid或r=mid，有可能是l=mid+1或</span></a>
<a class="sourceLine" id="cb1-43" title="43">                l=mid;       <span class="co">//r=mid-1，这要根据情况而定。但一般而言，如果是浮点数，              </span></a>
<a class="sourceLine" id="cb1-44" title="44">            <span class="cf">else</span>             <span class="co">//只需l=mid或r=mid</span></a>
<a class="sourceLine" id="cb1-45" title="45">                r=mid;</a>
<a class="sourceLine" id="cb1-46" title="46">        }</a>
<a class="sourceLine" id="cb1-47" title="47">        printf(<span class="st">"%.4lf</span><span class="sc">\n</span><span class="st">"</span>,mid);</a>
<a class="sourceLine" id="cb1-48" title="48">    }</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-50" title="50">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>二分</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2049 - 不容易系列之(4)——考新郎</title>
    <url>/2019/02/24/HDU2049-%E4%B8%8D%E5%AE%B9%E6%98%93%E7%B3%BB%E5%88%97%E4%B9%8B-4-%E2%80%94%E2%80%94%E8%80%83%E6%96%B0%E9%83%8E/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2049">不容易系列之(4)——考新郎</a></p>
<p>  错排公式的应用。因为n个新郎中有m个“错排”了，所以先用C(n,m)求出从n个新郎中挑m个出来的方案数，再乘以错排数即可。</p>
<p>  关于错排公式，可看这里：</p>
<p><img src="https://pic.superbed.cn/item/5c72aa803a213b0417769896"></p>
<p><img src="https://pic.superbed.cn/item/5c72aaa23a213b0417769b58"> <span id="more"></span></p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define INF </span><span class="bn">0x7fffffff</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-13" title="13">ll combi[<span class="dv">25</span>];</a>
<a class="sourceLine" id="cb1-14" title="14">ll d[<span class="dv">25</span>];</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">void</span> make_com(<span class="dt">int</span> n)</a>
<a class="sourceLine" id="cb1-16" title="16">{</a>
<a class="sourceLine" id="cb1-17" title="17">    combi[<span class="dv">0</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-18" title="18">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-19" title="19">        combi[i]=combi[i-<span class="dv">1</span>]*(n-i+<span class="dv">1</span>)/i;</a>
<a class="sourceLine" id="cb1-20" title="20">}</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="dt">void</span> make_mistake(<span class="dt">int</span> m)</a>
<a class="sourceLine" id="cb1-22" title="22">{</a>
<a class="sourceLine" id="cb1-23" title="23">    d[<span class="dv">1</span>]=<span class="dv">0</span>,d[<span class="dv">2</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">3</span>;i&lt;=m;i++)</a>
<a class="sourceLine" id="cb1-25" title="25">        d[i]=(i-<span class="dv">1</span>)*(d[i-<span class="dv">1</span>]+d[i-<span class="dv">2</span>]);</a>
<a class="sourceLine" id="cb1-26" title="26">}</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-28" title="28">{</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-30" title="30">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-32" title="32">    {    </a>
<a class="sourceLine" id="cb1-33" title="33">        mst(combi,<span class="dv">0</span>);mst(d,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-34" title="34">        <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-35" title="35">        cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb1-36" title="36">        make_com(n);make_mistake(m);</a>
<a class="sourceLine" id="cb1-37" title="37">        ll ans=combi[m]*d[m];</a>
<a class="sourceLine" id="cb1-38" title="38">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-39" title="39">    }</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2067 - 小兔的棋盘 </title>
    <url>/2019/02/24/HDU2067-%E5%B0%8F%E5%85%94%E7%9A%84%E6%A3%8B%E7%9B%98/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2067">小兔的棋盘</a></p>
<p>  这道题有两种方法，一是dp，二是用卡特兰数(事实上我觉得dp是很自然的想法)</p>
<p>  先说dp。对于棋盘的第0行(从下往上、从左往右数),除了(0,0)外，所有的点都只能由左边走来；对于棋盘的第0列，除了(0,0)外，所有的点都只能由左边走来。而对于对角线上的点，因为不能跨越对角线，所以这些点都只能由下边走来。而以上三种情况都不符合的点，则可以由左边或下边的点走来。故有一下dp代码： <span id="more"></span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=<span class="dv">35</span>;i++)</a>
<a class="sourceLine" id="cb1-2" title="2">    {</a>
<a class="sourceLine" id="cb1-3" title="3">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=<span class="dv">35</span>;j++)</a>
<a class="sourceLine" id="cb1-4" title="4">        {</a>
<a class="sourceLine" id="cb1-5" title="5">            <span class="cf">if</span>(i==j)</a>
<a class="sourceLine" id="cb1-6" title="6">                d[i][j]+=d[i-<span class="dv">1</span>][j];</a>
<a class="sourceLine" id="cb1-7" title="7">            <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-8" title="8">                d[i][j]+=d[i-<span class="dv">1</span>][j]+d[i][j-<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-9" title="9">        }</a>
<a class="sourceLine" id="cb1-10" title="10">    }</a></code></pre></div>
<p>完整版的代码：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#define INF </span><span class="bn">0x7fffffff</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-9" title="9"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-10" title="10"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-11" title="11"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-12" title="12"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-13" title="13">ll d[<span class="dv">40</span>][<span class="dv">40</span>];</a>
<a class="sourceLine" id="cb2-14" title="14"><span class="dt">void</span> dp()</a>
<a class="sourceLine" id="cb2-15" title="15">{    </a>
<a class="sourceLine" id="cb2-16" title="16">    freopen(<span class="st">"rabbit.txt"</span>,<span class="st">"w"</span>,stdout);</a>
<a class="sourceLine" id="cb2-17" title="17">    d[<span class="dv">0</span>][<span class="dv">0</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-18" title="18">    mst(d,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-19" title="19">    <span class="cf">for</span>(<span class="dt">int</span> col=<span class="dv">0</span>;col&lt;=<span class="dv">35</span>;col++)</a>
<a class="sourceLine" id="cb2-20" title="20">        d[<span class="dv">0</span>][col]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-21" title="21">    <span class="cf">for</span>(<span class="dt">int</span> row=<span class="dv">0</span>;row&lt;=<span class="dv">35</span>;row++)</a>
<a class="sourceLine" id="cb2-22" title="22">        d[row][<span class="dv">0</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-23" title="23">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=<span class="dv">35</span>;i++)</a>
<a class="sourceLine" id="cb2-24" title="24">    {</a>
<a class="sourceLine" id="cb2-25" title="25">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=<span class="dv">35</span>;j++)</a>
<a class="sourceLine" id="cb2-26" title="26">        {</a>
<a class="sourceLine" id="cb2-27" title="27">            <span class="cf">if</span>(i==j)</a>
<a class="sourceLine" id="cb2-28" title="28">                d[i][j]+=d[i-<span class="dv">1</span>][j];</a>
<a class="sourceLine" id="cb2-29" title="29">            <span class="cf">else</span></a>
<a class="sourceLine" id="cb2-30" title="30">                d[i][j]+=d[i-<span class="dv">1</span>][j]+d[i][j-<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb2-31" title="31">        }</a>
<a class="sourceLine" id="cb2-32" title="32">    }</a>
<a class="sourceLine" id="cb2-33" title="33">}</a>
<a class="sourceLine" id="cb2-34" title="34"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-35" title="35">{</a>
<a class="sourceLine" id="cb2-36" title="36">    dp();</a>
<a class="sourceLine" id="cb2-37" title="37">    ll n;</a>
<a class="sourceLine" id="cb2-38" title="38">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-39" title="39">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=<span class="dv">35</span>;i++)</a>
<a class="sourceLine" id="cb2-40" title="40">        printf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld\n</span><span class="st">"</span>,++kase,i,d[i][i]*<span class="dv">2</span>);</a>
<a class="sourceLine" id="cb2-41" title="41">}</a></code></pre></div>
<p>  第二种方法，卡特兰数。事实上我完全不知道为什么这题可以用卡特兰数来解，网上的题解说的是“细心观察，我们可以发现这道题恰好符合卡特兰数”(......)。那我们就用一下吧......</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#define INF </span><span class="bn">0x7fffffff</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-9" title="9"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-10" title="10"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-11" title="11"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-12" title="12"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-13" title="13">ll cata[<span class="dv">40</span>];</a>
<a class="sourceLine" id="cb3-14" title="14"><span class="dt">void</span> get_catalan()</a>
<a class="sourceLine" id="cb3-15" title="15">{</a>
<a class="sourceLine" id="cb3-16" title="16">    cata[<span class="dv">0</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-17" title="17">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=<span class="dv">35</span>;i++)</a>
<a class="sourceLine" id="cb3-18" title="18">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;=i-<span class="dv">1</span>;j++)</a>
<a class="sourceLine" id="cb3-19" title="19">            cata[i]+=cata[j]*cata[i-j-<span class="dv">1</span>];            <span class="co">//抄公式。。。 </span></a>
<a class="sourceLine" id="cb3-20" title="20">}</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-22" title="22">{</a>
<a class="sourceLine" id="cb3-23" title="23">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb3-24" title="24">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-25" title="25">    mst(cata,<span class="dv">0</span>);get_catalan();</a>
<a class="sourceLine" id="cb3-26" title="26">    <span class="cf">while</span>(cin&gt;&gt;n&amp;&amp;n!=-<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-27" title="27">    {    </a>
<a class="sourceLine" id="cb3-28" title="28">        kase++;</a>
<a class="sourceLine" id="cb3-29" title="29">        cout&lt;&lt;kase&lt;&lt;<span class="st">" "</span>&lt;&lt;n&lt;&lt;<span class="st">" "</span>&lt;&lt;<span class="dv">2</span>*cata[n]&lt;&lt;endl;         </a>
<a class="sourceLine" id="cb3-30" title="30">    }</a>
<a class="sourceLine" id="cb3-31" title="31">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-32" title="32">}</a></code></pre></div>
<p>  关于卡特兰数，可以看这个：</p>
<p><img src="https://pic.superbed.cn/item/5c72ad323a213b041776b839"></p>
<p><img src="https://pic.superbed.cn/item/5c72ad563a213b041776b9f8"></p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2191 - 悼念512汶川大地震遇难同胞——珍惜现在，感恩生活</title>
    <url>/2019/02/22/HDU2191-%E6%82%BC%E5%BF%B5512%E6%B1%B6%E5%B7%9D%E5%A4%A7%E5%9C%B0%E9%9C%87%E9%81%87%E9%9A%BE%E5%90%8C%E8%83%9E%E2%80%94%E2%80%94%E7%8F%8D%E6%83%9C%E7%8E%B0%E5%9C%A8%EF%BC%8C%E6%84%9F%E6%81%A9%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2191">悼念512汶川大地震遇难同胞——珍惜现在，感恩生活</a></p>
<p>  直接套用多重背包模板即可</p>
<span id="more"></span>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e4</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="dt">int</span> v[<span class="dv">105</span>],val[<span class="dv">105</span>],k[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="dt">int</span> dp[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="dt">void</span> zero_one(<span class="dt">int</span> cost,<span class="dt">int</span> val,<span class="dt">int</span> vtot)</a>
<a class="sourceLine" id="cb1-14" title="14">{</a>
<a class="sourceLine" id="cb1-15" title="15">    <span class="cf">for</span>(<span class="dt">int</span> j=vtot;j&gt;=cost;j--)</a>
<a class="sourceLine" id="cb1-16" title="16">        dp[j]=max(dp[j],dp[j-cost]+val);</a>
<a class="sourceLine" id="cb1-17" title="17">}</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="dt">void</span> complete(<span class="dt">int</span> cost,<span class="dt">int</span> val,<span class="dt">int</span> vtot)</a>
<a class="sourceLine" id="cb1-19" title="19">{</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">for</span>(<span class="dt">int</span> j=cost;j&lt;=vtot;j++)</a>
<a class="sourceLine" id="cb1-21" title="21">        dp[j]=max(dp[j],dp[j-cost]+val);</a>
<a class="sourceLine" id="cb1-22" title="22">}</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">void</span> multiple(<span class="dt">int</span> cost,<span class="dt">int</span> val,<span class="dt">int</span> num,<span class="dt">int</span> vtot)</a>
<a class="sourceLine" id="cb1-24" title="24">{</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> k=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="cf">if</span>(cost*num&gt;=vtot)</a>
<a class="sourceLine" id="cb1-27" title="27">    {</a>
<a class="sourceLine" id="cb1-28" title="28">        complete(cost,val,vtot);</a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-30" title="30">    }</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="cf">while</span>(k&lt;num)</a>
<a class="sourceLine" id="cb1-32" title="32">    {</a>
<a class="sourceLine" id="cb1-33" title="33">        zero_one(k*cost,k*val,vtot);</a>
<a class="sourceLine" id="cb1-34" title="34">        num-=k;</a>
<a class="sourceLine" id="cb1-35" title="35">        k&lt;&lt;=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-36" title="36">    }</a>
<a class="sourceLine" id="cb1-37" title="37">    zero_one(num*cost,num*val,vtot);</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-39" title="39">}</a>
<a class="sourceLine" id="cb1-40" title="40"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-41" title="41">{</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-43" title="43">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-44" title="44">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-45" title="45">    {    </a>
<a class="sourceLine" id="cb1-46" title="46">        mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-48" title="48">        cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb1-49" title="49">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++)</a>
<a class="sourceLine" id="cb1-50" title="50">            cin&gt;&gt;v[i]&gt;&gt;val[i]&gt;&gt;k[i];</a>
<a class="sourceLine" id="cb1-51" title="51">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++)</a>
<a class="sourceLine" id="cb1-52" title="52">            multiple(v[i],val[i],k[i],n);</a>
<a class="sourceLine" id="cb1-53" title="53">        cout&lt;&lt;dp[n]&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-54" title="54">    }</a>
<a class="sourceLine" id="cb1-55" title="55">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-56" title="56">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>多重背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>多重背包</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2222 &amp; HDU2896 - AC自动机模板</title>
    <url>/2019/08/31/HDU2222-HDU2896-AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H65722373b7674099b56790ec509eb5a8B.jpg"></p>
<span id="more"></span>
<p>屯板子屯板子......</p>
<p><a href="https://cn.vjudge.net/problem/HDU-2222">HDU2222 - Keywords Search</a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">struct</span> Trie{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> next[<span class="dv">500005</span>][<span class="dv">26</span>];</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> fail[<span class="dv">500005</span>];</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> ed[<span class="dv">500005</span>];</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="dt">int</span> rt,L;</a>
<a class="sourceLine" id="cb1-28" title="28">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> newnode(){</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">26</span>;i++){</a>
<a class="sourceLine" id="cb1-31" title="31">            next[L][i]=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-32" title="32">        }</a>
<a class="sourceLine" id="cb1-33" title="33">        ed[L]=<span class="dv">0</span>;<span class="dt">int</span> tmpL=L;L++;</a>
<a class="sourceLine" id="cb1-34" title="34">        <span class="cf">return</span> tmpL;</a>
<a class="sourceLine" id="cb1-35" title="35">    }</a>
<a class="sourceLine" id="cb1-36" title="36">    <span class="dt">void</span> init(){</a>
<a class="sourceLine" id="cb1-37" title="37">        L=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-38" title="38">        rt=newnode();</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">while</span>(!que.empty())    que.pop();</a>
<a class="sourceLine" id="cb1-40" title="40">    }</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="dt">void</span> <span class="va">insert_</span>(string str){</a>
<a class="sourceLine" id="cb1-42" title="42">        <span class="dt">int</span> len=str.size();</a>
<a class="sourceLine" id="cb1-43" title="43">        <span class="dt">int</span> cur=rt;</a>
<a class="sourceLine" id="cb1-44" title="44">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;len;i++){</a>
<a class="sourceLine" id="cb1-45" title="45">            <span class="dt">char</span> ch=str[i];</a>
<a class="sourceLine" id="cb1-46" title="46">            <span class="cf">if</span>(next[cur][ch-<span class="ch">'a'</span>]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-47" title="47">                next[cur][ch-<span class="ch">'a'</span>]=newnode();</a>
<a class="sourceLine" id="cb1-48" title="48">            }</a>
<a class="sourceLine" id="cb1-49" title="49">            cur=next[cur][ch-<span class="ch">'a'</span>];</a>
<a class="sourceLine" id="cb1-50" title="50">        }</a>
<a class="sourceLine" id="cb1-51" title="51">        ed[cur]++;</a>
<a class="sourceLine" id="cb1-52" title="52">    } </a>
<a class="sourceLine" id="cb1-53" title="53">    <span class="dt">void</span> build(){</a>
<a class="sourceLine" id="cb1-54" title="54">        fail[rt]=rt;</a>
<a class="sourceLine" id="cb1-55" title="55">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">26</span>;i++){</a>
<a class="sourceLine" id="cb1-56" title="56">            <span class="cf">if</span>(next[rt][i]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-57" title="57">                next[rt][i]=rt;</a>
<a class="sourceLine" id="cb1-58" title="58">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-59" title="59">                fail[next[rt][i]]=rt;</a>
<a class="sourceLine" id="cb1-60" title="60">                que.push(next[rt][i]);</a>
<a class="sourceLine" id="cb1-61" title="61">            }</a>
<a class="sourceLine" id="cb1-62" title="62">        }</a>
<a class="sourceLine" id="cb1-63" title="63">        <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb1-64" title="64">            <span class="dt">int</span> u=que.front();</a>
<a class="sourceLine" id="cb1-65" title="65">            que.pop();</a>
<a class="sourceLine" id="cb1-66" title="66">            <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">26</span>;i++){</a>
<a class="sourceLine" id="cb1-67" title="67">                <span class="cf">if</span>(next[u][i]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-68" title="68">                    next[u][i]=next[fail[u]][i];</a>
<a class="sourceLine" id="cb1-69" title="69">                }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-70" title="70">                    fail[next[u][i]]=next[fail[u]][i];</a>
<a class="sourceLine" id="cb1-71" title="71">                    que.push(next[u][i]);</a>
<a class="sourceLine" id="cb1-72" title="72">                }</a>
<a class="sourceLine" id="cb1-73" title="73">            }</a>
<a class="sourceLine" id="cb1-74" title="74">        }</a>
<a class="sourceLine" id="cb1-75" title="75">    }</a>
<a class="sourceLine" id="cb1-76" title="76">    <span class="dt">int</span> queue(string str){</a>
<a class="sourceLine" id="cb1-77" title="77">        <span class="dt">int</span> len=str.size();</a>
<a class="sourceLine" id="cb1-78" title="78">        <span class="dt">int</span> now=rt;</a>
<a class="sourceLine" id="cb1-79" title="79">        <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-80" title="80">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;len;i++){</a>
<a class="sourceLine" id="cb1-81" title="81">            now=next[now][str[i]-<span class="ch">'a'</span>];</a>
<a class="sourceLine" id="cb1-82" title="82">            <span class="dt">int</span> tmp=now;</a>
<a class="sourceLine" id="cb1-83" title="83">            <span class="cf">while</span>(tmp!=rt){</a>
<a class="sourceLine" id="cb1-84" title="84">                ans+=ed[tmp];</a>
<a class="sourceLine" id="cb1-85" title="85">                ed[tmp]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-86" title="86">                tmp=fail[tmp];</a>
<a class="sourceLine" id="cb1-87" title="87">            }</a>
<a class="sourceLine" id="cb1-88" title="88">        }</a>
<a class="sourceLine" id="cb1-89" title="89">        <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-90" title="90">    }</a>
<a class="sourceLine" id="cb1-91" title="91">    <span class="dt">void</span> show(){</a>
<a class="sourceLine" id="cb1-92" title="92">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">100</span>;i++){</a>
<a class="sourceLine" id="cb1-93" title="93">            cout&lt;&lt;<span class="st">"i = "</span>&lt;&lt;i&lt;&lt;<span class="st">" "</span>&lt;&lt;ed[i]&lt;&lt;<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>;</a>
<a class="sourceLine" id="cb1-94" title="94">        }</a>
<a class="sourceLine" id="cb1-95" title="95">    }</a>
<a class="sourceLine" id="cb1-96" title="96">};</a>
<a class="sourceLine" id="cb1-97" title="97">Trie acmaton;        <span class="co">//内部有大数组，需要开全局变量 </span></a>
<a class="sourceLine" id="cb1-98" title="98"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-99" title="99">{</a>
<a class="sourceLine" id="cb1-100" title="100">    IOS;</a>
<a class="sourceLine" id="cb1-101" title="101">    <span class="dt">int</span> t;cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-102" title="102">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb1-103" title="103">        <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-104" title="104">        acmaton.init();</a>
<a class="sourceLine" id="cb1-105" title="105">        string tmps;</a>
<a class="sourceLine" id="cb1-106" title="106">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb1-107" title="107">            cin&gt;&gt;tmps;acmaton.<span class="va">insert_</span>(tmps);</a>
<a class="sourceLine" id="cb1-108" title="108">        }</a>
<a class="sourceLine" id="cb1-109" title="109">        acmaton.build();</a>
<a class="sourceLine" id="cb1-110" title="110"><span class="co">//        acmaton.show();</span></a>
<a class="sourceLine" id="cb1-111" title="111">        cin&gt;&gt;tmps;</a>
<a class="sourceLine" id="cb1-112" title="112">        <span class="dt">int</span> ans=acmaton.queue(tmps);</a>
<a class="sourceLine" id="cb1-113" title="113">        cout&lt;&lt;ans&lt;&lt;<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>;</a>
<a class="sourceLine" id="cb1-114" title="114">    }</a>
<a class="sourceLine" id="cb1-115" title="115">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-116" title="116">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/HDU-2896">HDU2896 - 病毒侵袭</a></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-23" title="23">vector&lt;<span class="dt">int</span>&gt; ansvec;</a>
<a class="sourceLine" id="cb2-24" title="24"><span class="kw">struct</span> Trie{</a>
<a class="sourceLine" id="cb2-25" title="25">    <span class="dt">int</span> next[<span class="dv">100005</span>][<span class="dv">128</span>];</a>
<a class="sourceLine" id="cb2-26" title="26">    <span class="dt">int</span> fail[<span class="dv">100005</span>];</a>
<a class="sourceLine" id="cb2-27" title="27">    <span class="dt">int</span> edstr[<span class="dv">100005</span>];</a>
<a class="sourceLine" id="cb2-28" title="28">    <span class="dt">int</span> rt,L;</a>
<a class="sourceLine" id="cb2-29" title="29">    <span class="dt">int</span> scnt;    <span class="co">//字符串数量 </span></a>
<a class="sourceLine" id="cb2-30" title="30">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb2-31" title="31">    <span class="dt">int</span> newnode(){</a>
<a class="sourceLine" id="cb2-32" title="32">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">128</span>;i++){</a>
<a class="sourceLine" id="cb2-33" title="33">            next[L][i]=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-34" title="34">        }</a>
<a class="sourceLine" id="cb2-35" title="35">        edstr[L]=<span class="dv">0</span>;<span class="dt">int</span> tmpL=L;L++;</a>
<a class="sourceLine" id="cb2-36" title="36">        <span class="cf">return</span> tmpL;</a>
<a class="sourceLine" id="cb2-37" title="37">    }</a>
<a class="sourceLine" id="cb2-38" title="38">    <span class="dt">void</span> init(){</a>
<a class="sourceLine" id="cb2-39" title="39">        L=<span class="dv">0</span>;scnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-40" title="40">        rt=newnode();</a>
<a class="sourceLine" id="cb2-41" title="41">        <span class="cf">while</span>(!que.empty())    que.pop();</a>
<a class="sourceLine" id="cb2-42" title="42">    }</a>
<a class="sourceLine" id="cb2-43" title="43">    <span class="dt">void</span> <span class="va">insert_</span>(<span class="dt">char</span> str[]){</a>
<a class="sourceLine" id="cb2-44" title="44">        <span class="dt">int</span> len=strlen(str);</a>
<a class="sourceLine" id="cb2-45" title="45">        <span class="dt">int</span> cur=rt;</a>
<a class="sourceLine" id="cb2-46" title="46">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;len;i++){</a>
<a class="sourceLine" id="cb2-47" title="47">            <span class="dt">char</span> ch=str[i];</a>
<a class="sourceLine" id="cb2-48" title="48">            <span class="cf">if</span>(next[cur][ch]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb2-49" title="49">                next[cur][ch]=newnode();</a>
<a class="sourceLine" id="cb2-50" title="50">            }</a>
<a class="sourceLine" id="cb2-51" title="51">            cur=next[cur][ch];</a>
<a class="sourceLine" id="cb2-52" title="52">        }</a>
<a class="sourceLine" id="cb2-53" title="53">        edstr[cur]=++scnt;</a>
<a class="sourceLine" id="cb2-54" title="54">    } </a>
<a class="sourceLine" id="cb2-55" title="55">    <span class="dt">void</span> build(){</a>
<a class="sourceLine" id="cb2-56" title="56">        fail[rt]=rt;</a>
<a class="sourceLine" id="cb2-57" title="57">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">128</span>;i++){</a>
<a class="sourceLine" id="cb2-58" title="58">            <span class="cf">if</span>(next[rt][i]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb2-59" title="59">                next[rt][i]=rt;</a>
<a class="sourceLine" id="cb2-60" title="60">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-61" title="61">                fail[next[rt][i]]=rt;</a>
<a class="sourceLine" id="cb2-62" title="62">                que.push(next[rt][i]);</a>
<a class="sourceLine" id="cb2-63" title="63">            }</a>
<a class="sourceLine" id="cb2-64" title="64">        }</a>
<a class="sourceLine" id="cb2-65" title="65">        <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb2-66" title="66">            <span class="dt">int</span> u=que.front();</a>
<a class="sourceLine" id="cb2-67" title="67">            que.pop();</a>
<a class="sourceLine" id="cb2-68" title="68">            <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">128</span>;i++){</a>
<a class="sourceLine" id="cb2-69" title="69">                <span class="cf">if</span>(next[u][i]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb2-70" title="70">                    next[u][i]=next[fail[u]][i];</a>
<a class="sourceLine" id="cb2-71" title="71">                }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-72" title="72">                    fail[next[u][i]]=next[fail[u]][i];</a>
<a class="sourceLine" id="cb2-73" title="73">                    que.push(next[u][i]);</a>
<a class="sourceLine" id="cb2-74" title="74">                }</a>
<a class="sourceLine" id="cb2-75" title="75">            }</a>
<a class="sourceLine" id="cb2-76" title="76">        }</a>
<a class="sourceLine" id="cb2-77" title="77">    }</a>
<a class="sourceLine" id="cb2-78" title="78">    <span class="dt">void</span> query(<span class="dt">char</span> str[]){</a>
<a class="sourceLine" id="cb2-79" title="79">        <span class="dt">int</span> len=strlen(str);</a>
<a class="sourceLine" id="cb2-80" title="80">        <span class="dt">int</span> now=rt;</a>
<a class="sourceLine" id="cb2-81" title="81">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;len;i++){</a>
<a class="sourceLine" id="cb2-82" title="82">            now=next[now][str[i]];</a>
<a class="sourceLine" id="cb2-83" title="83">            <span class="dt">int</span> tmp=now;</a>
<a class="sourceLine" id="cb2-84" title="84">            <span class="cf">while</span>(tmp!=rt){</a>
<a class="sourceLine" id="cb2-85" title="85">                <span class="cf">if</span>(edstr[tmp]!=<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb2-86" title="86">                    ansvec.push_back(edstr[tmp]);</a>
<a class="sourceLine" id="cb2-87" title="87">                tmp=fail[tmp];</a>
<a class="sourceLine" id="cb2-88" title="88">            }</a>
<a class="sourceLine" id="cb2-89" title="89">        }</a>
<a class="sourceLine" id="cb2-90" title="90">    }</a>
<a class="sourceLine" id="cb2-91" title="91">    <span class="dt">void</span> show(){</a>
<a class="sourceLine" id="cb2-92" title="92">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">100</span>;i++){</a>
<a class="sourceLine" id="cb2-93" title="93">            cout&lt;&lt;<span class="st">"i = "</span>&lt;&lt;i&lt;&lt;<span class="st">" edstr[i] = "</span>&lt;&lt;edstr[i]&lt;&lt;<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>;</a>
<a class="sourceLine" id="cb2-94" title="94">        }</a>
<a class="sourceLine" id="cb2-95" title="95">    }</a>
<a class="sourceLine" id="cb2-96" title="96">};</a>
<a class="sourceLine" id="cb2-97" title="97">Trie acmaton;        <span class="co">//内部有大数组，需要开全局变量 </span></a>
<a class="sourceLine" id="cb2-98" title="98"><span class="dt">char</span> cha[<span class="dv">205</span>];</a>
<a class="sourceLine" id="cb2-99" title="99"><span class="dt">char</span> web[<span class="dv">10005</span>];</a>
<a class="sourceLine" id="cb2-100" title="100"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-101" title="101">{</a>
<a class="sourceLine" id="cb2-102" title="102">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb2-103" title="103">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF){</a>
<a class="sourceLine" id="cb2-104" title="104">        acmaton.init();</a>
<a class="sourceLine" id="cb2-105" title="105">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb2-106" title="106">            scanf(<span class="st">"</span><span class="sc">%s</span><span class="st">"</span>,cha);acmaton.<span class="va">insert_</span>(cha);</a>
<a class="sourceLine" id="cb2-107" title="107">        }</a>
<a class="sourceLine" id="cb2-108" title="108">        acmaton.build();</a>
<a class="sourceLine" id="cb2-109" title="109">        <span class="dt">int</span> m;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;m);</a>
<a class="sourceLine" id="cb2-110" title="110">        <span class="dt">int</span> webtot=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-111" title="111">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb2-112" title="112">            ansvec.clear();</a>
<a class="sourceLine" id="cb2-113" title="113">            scanf(<span class="st">"</span><span class="sc">%s</span><span class="st">"</span>,web);</a>
<a class="sourceLine" id="cb2-114" title="114">    <span class="co">//        printf("web: %s\n",web);</span></a>
<a class="sourceLine" id="cb2-115" title="115">            acmaton.query(web);</a>
<a class="sourceLine" id="cb2-116" title="116">            <span class="dt">int</span> cntt=ansvec.size();</a>
<a class="sourceLine" id="cb2-117" title="117">    <span class="co">//        debug;</span></a>
<a class="sourceLine" id="cb2-118" title="118">            <span class="cf">if</span>(cntt&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-119" title="119">                sort(ansvec.begin(),ansvec.end());</a>
<a class="sourceLine" id="cb2-120" title="120">                webtot++;</a>
<a class="sourceLine" id="cb2-121" title="121">                printf(<span class="st">"web </span><span class="sc">%d</span><span class="st">: "</span>,i+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-122" title="122">                <span class="dt">int</span> sz=ansvec.size();</a>
<a class="sourceLine" id="cb2-123" title="123">                <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;sz;i++){</a>
<a class="sourceLine" id="cb2-124" title="124">                    <span class="cf">if</span>(i==sz-<span class="dv">1</span>)    printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ansvec[i]);</a>
<a class="sourceLine" id="cb2-125" title="125">                    <span class="cf">else</span> printf(<span class="st">"</span><span class="sc">%d</span><span class="st"> "</span>,ansvec[i]);</a>
<a class="sourceLine" id="cb2-126" title="126">                }</a>
<a class="sourceLine" id="cb2-127" title="127">            }</a>
<a class="sourceLine" id="cb2-128" title="128">        }</a>
<a class="sourceLine" id="cb2-129" title="129">    <span class="co">//    cout&lt;&lt;"total: "&lt;&lt;webtot&lt;&lt;"\n";//</span></a>
<a class="sourceLine" id="cb2-130" title="130">        printf(<span class="st">"total: </span><span class="sc">%d\n</span><span class="st">"</span>,webtot);</a>
<a class="sourceLine" id="cb2-131" title="131">    }</a>
<a class="sourceLine" id="cb2-132" title="132">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-133" title="133">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>字符串</category>
        <category>AC自动机</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2376 &amp; HDU5723</title>
    <url>/2019/04/22/HDU2376-HDU5723/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/HTB1l7AwSCzqK1RjSZPxq6A4tVXaO.jpg"></p>
<p><del>(封面图与内容完全无关，只是因为图好看才放上来)</del> <span id="more"></span></p>
<p>这次打算把HDU3276和HDU5723两道题放在一起讲，主要是因为这两道题都涉及到了求树上任意两点的距离的总和；HDU5723除此之外还多了一点就是求最小生成树。不过讲真，个人认为其实HDU5723将对这两者融合得并不好，求最小生成树以及求距离和这两个之间的联系有点牵强......emmmmmm，毕竟只是签到题？</p>
<p>先说<a href="https://cn.vjudge.net/problem/HDU-2376">HDU3276</a></p>
<p>直接枚举每一个点对然后对点对dfs肯定是行不通的，所以我们可以这么考虑：对于一条边而言，它对于距离总和的“贡献”，即为它被走过的次数乘以它的长度。而它被走过的次数，就是它符合这样的条件的点对的个数：一个点在这条边的一侧，另一个点在这条边的另一侧。由此即可求出这条边的贡献。总的距离之和即为所有边的贡献的总和。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e4</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">struct</span> edge{</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="dt">int</span> to;</a>
<a class="sourceLine" id="cb1-21" title="21">    ll wei;</a>
<a class="sourceLine" id="cb1-22" title="22">};</a>
<a class="sourceLine" id="cb1-23" title="23">vector&lt;edge&gt; gra[maxn];</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">double</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-26" title="26">ll sum[maxn];</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">void</span> dfs(<span class="dt">int</span> rt,<span class="dt">int</span> fa)</a>
<a class="sourceLine" id="cb1-28" title="28">{</a>
<a class="sourceLine" id="cb1-29" title="29">    sum[rt]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;gra[rt].size();i++){</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="dt">int</span> son=gra[rt][i].to;</a>
<a class="sourceLine" id="cb1-32" title="32">        <span class="cf">if</span>(son==fa)        <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb1-33" title="33">        edge&amp; e=gra[rt][i];</a>
<a class="sourceLine" id="cb1-34" title="34">        dfs(son,rt);</a>
<a class="sourceLine" id="cb1-35" title="35">        sum[rt]+=sum[son];</a>
<a class="sourceLine" id="cb1-36" title="36">        ans+=sum[son]*((ll)n-sum[son])*e.wei;</a>
<a class="sourceLine" id="cb1-37" title="37">    }</a>
<a class="sourceLine" id="cb1-38" title="38">}</a>
<a class="sourceLine" id="cb1-39" title="39"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-40" title="40">{</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-42" title="42">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-43" title="43">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-44" title="44">    {</a>
<a class="sourceLine" id="cb1-45" title="45">        ans=<span class="dv">0</span>;memset(sum,<span class="dv">0</span>,<span class="kw">sizeof</span>(sum));</a>
<a class="sourceLine" id="cb1-46" title="46">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-48" title="48">            gra[i].clear();        <span class="co">//记得清空，否则可能mle</span></a>
<a class="sourceLine" id="cb1-49" title="49">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb1-50" title="50">            <span class="dt">int</span> a,b;ll d;</a>
<a class="sourceLine" id="cb1-51" title="51">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%lld</span><span class="st">"</span>,&amp;a,&amp;b,&amp;d);</a>
<a class="sourceLine" id="cb1-52" title="52">            gra[a].push_back(edge{b,d});</a>
<a class="sourceLine" id="cb1-53" title="53">            gra[b].push_back(edge{a,d});</a>
<a class="sourceLine" id="cb1-54" title="54">        }</a>
<a class="sourceLine" id="cb1-55" title="55">        dfs(<span class="dv">0</span>,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-56" title="56">        <span class="dt">double</span> tot=ans/(((<span class="dt">double</span>)(n-<span class="dv">1</span>)*(<span class="dt">double</span>)n)/<span class="dv">2</span>);</a>
<a class="sourceLine" id="cb1-57" title="57">        printf(<span class="st">"%.6lf</span><span class="sc">\n</span><span class="st">"</span>,tot);</a>
<a class="sourceLine" id="cb1-58" title="58">    }</a>
<a class="sourceLine" id="cb1-59" title="59">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-60" title="60">}</a></code></pre></div>
<div class="note warning">
<pre><code>&lt;p&gt;注意题目中的精度是10&lt;sup&gt;-6&lt;/sup&gt;!所以要%.6lf!另外因为这题是spj，所以虽然看起来样例没过，其实没关系&lt;/p&gt;</code></pre>
</div>
<p>然后是<a href="https://cn.vjudge.net/problem/HDU-5723">HDU5723</a></p>
<p>其实只是在上面题目的基础上多了个求最小生成树，kruskal求一下即可。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-15" title="15"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-19" title="19"><span class="dt">int</span> n,m; </a>
<a class="sourceLine" id="cb3-20" title="20"><span class="dt">int</span> pre[maxn];</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="kw">struct</span> edge{</a>
<a class="sourceLine" id="cb3-22" title="22">    <span class="dt">int</span> from;</a>
<a class="sourceLine" id="cb3-23" title="23">    <span class="dt">int</span> to;</a>
<a class="sourceLine" id="cb3-24" title="24">    ll wei;</a>
<a class="sourceLine" id="cb3-25" title="25">};</a>
<a class="sourceLine" id="cb3-26" title="26">vector&lt;<span class="dt">int</span>&gt; tree[maxn];</a>
<a class="sourceLine" id="cb3-27" title="27">edge arr[maxn*<span class="dv">10</span>];</a>
<a class="sourceLine" id="cb3-28" title="28">ll sum[maxn];</a>
<a class="sourceLine" id="cb3-29" title="29">ll ans; </a>
<a class="sourceLine" id="cb3-30" title="30"><span class="dt">bool</span> cmp(edge a,edge b)</a>
<a class="sourceLine" id="cb3-31" title="31">{</a>
<a class="sourceLine" id="cb3-32" title="32">    <span class="cf">return</span> a.wei&lt;b.wei;</a>
<a class="sourceLine" id="cb3-33" title="33">}</a>
<a class="sourceLine" id="cb3-34" title="34"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb3-35" title="35">{</a>
<a class="sourceLine" id="cb3-36" title="36">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb3-37" title="37">        pre[i]=i;</a>
<a class="sourceLine" id="cb3-38" title="38">}</a>
<a class="sourceLine" id="cb3-39" title="39"><span class="dt">int</span> findr(<span class="dt">int</span> x)</a>
<a class="sourceLine" id="cb3-40" title="40">{</a>
<a class="sourceLine" id="cb3-41" title="41">    <span class="cf">if</span>(pre[x]==x)</a>
<a class="sourceLine" id="cb3-42" title="42">        <span class="cf">return</span> pre[x];</a>
<a class="sourceLine" id="cb3-43" title="43">    <span class="cf">return</span> pre[x]=findr(pre[x]);</a>
<a class="sourceLine" id="cb3-44" title="44">}</a>
<a class="sourceLine" id="cb3-45" title="45">ll kruskal()</a>
<a class="sourceLine" id="cb3-46" title="46">{</a>
<a class="sourceLine" id="cb3-47" title="47">    ll rsl=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-48" title="48">    <span class="dt">int</span> num=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-49" title="49">    init();</a>
<a class="sourceLine" id="cb3-50" title="50">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++)</a>
<a class="sourceLine" id="cb3-51" title="51">    {</a>
<a class="sourceLine" id="cb3-52" title="52">        <span class="dt">int</span> fx=findr(arr[i].from);</a>
<a class="sourceLine" id="cb3-53" title="53">        <span class="dt">int</span> fy=findr(arr[i].to);</a>
<a class="sourceLine" id="cb3-54" title="54">        <span class="cf">if</span>(fx!=fy)</a>
<a class="sourceLine" id="cb3-55" title="55">        {</a>
<a class="sourceLine" id="cb3-56" title="56">            pre[fx]=fy;</a>
<a class="sourceLine" id="cb3-57" title="57">            rsl+=arr[i].wei;</a>
<a class="sourceLine" id="cb3-58" title="58">            num++;</a>
<a class="sourceLine" id="cb3-59" title="59">            tree[arr[i].from].push_back(i);</a>
<a class="sourceLine" id="cb3-60" title="60">            tree[arr[i].to].push_back(i); </a>
<a class="sourceLine" id="cb3-61" title="61">        }</a>
<a class="sourceLine" id="cb3-62" title="62">    }</a>
<a class="sourceLine" id="cb3-63" title="63">    <span class="cf">if</span>(num==n-<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-64" title="64">        <span class="cf">return</span> rsl;</a>
<a class="sourceLine" id="cb3-65" title="65">    <span class="cf">else</span></a>
<a class="sourceLine" id="cb3-66" title="66">        <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-67" title="67">}</a>
<a class="sourceLine" id="cb3-68" title="68"><span class="co">/*</span></a>
<a class="sourceLine" id="cb3-69" title="69"><span class="co">exp=1/(n*(n-1))*(tot_len*2)</span></a>
<a class="sourceLine" id="cb3-70" title="70"><span class="co">*/</span></a>
<a class="sourceLine" id="cb3-71" title="71"><span class="dt">void</span> dfs(<span class="dt">int</span> rt,<span class="dt">int</span> fa)</a>
<a class="sourceLine" id="cb3-72" title="72">{</a>
<a class="sourceLine" id="cb3-73" title="73">    sum[rt]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-74" title="74">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;tree[rt].size();i++){</a>
<a class="sourceLine" id="cb3-75" title="75">        <span class="dt">int</span>&amp; idx=tree[rt][i];        <span class="co">//tree数组中存的是边的编号 </span></a>
<a class="sourceLine" id="cb3-76" title="76">        <span class="dt">int</span> son;</a>
<a class="sourceLine" id="cb3-77" title="77">        <span class="cf">if</span>(rt==arr[idx].from)</a>
<a class="sourceLine" id="cb3-78" title="78">            son=arr[idx].to;</a>
<a class="sourceLine" id="cb3-79" title="79">        <span class="cf">if</span>(rt==arr[idx].to)</a>
<a class="sourceLine" id="cb3-80" title="80">            son=arr[idx].from;</a>
<a class="sourceLine" id="cb3-81" title="81">        <span class="cf">if</span>(son==fa)        <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb3-82" title="82">        dfs(son,rt);</a>
<a class="sourceLine" id="cb3-83" title="83">        sum[rt]+=sum[son];</a>
<a class="sourceLine" id="cb3-84" title="84">        ans+=(ll)((sum[son]*((ll)n-sum[son]))*(arr[idx].wei));</a>
<a class="sourceLine" id="cb3-85" title="85">    }</a>
<a class="sourceLine" id="cb3-86" title="86">}</a>
<a class="sourceLine" id="cb3-87" title="87"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-88" title="88">{</a>
<a class="sourceLine" id="cb3-89" title="89">    <span class="dt">int</span> t;cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb3-90" title="90">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb3-91" title="91">    {</a>
<a class="sourceLine" id="cb3-92" title="92">        ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-93" title="93">        memset(sum,<span class="dv">0</span>,<span class="kw">sizeof</span>(sum));</a>
<a class="sourceLine" id="cb3-94" title="94">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m);</a>
<a class="sourceLine" id="cb3-95" title="95">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)        tree[i].clear();</a>
<a class="sourceLine" id="cb3-96" title="96">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++){</a>
<a class="sourceLine" id="cb3-97" title="97">            <span class="dt">int</span> x,y;ll w;</a>
<a class="sourceLine" id="cb3-98" title="98">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%lld</span><span class="st">"</span>,&amp;x,&amp;y,&amp;w);</a>
<a class="sourceLine" id="cb3-99" title="99">            arr[i]=edge{x,y,w};</a>
<a class="sourceLine" id="cb3-100" title="100">        }    </a>
<a class="sourceLine" id="cb3-101" title="101">        sort(arr+<span class="dv">1</span>,arr+m+<span class="dv">1</span>,cmp);</a>
<a class="sourceLine" id="cb3-102" title="102">        ll min_cost=kruskal();</a>
<a class="sourceLine" id="cb3-103" title="103">        dfs(<span class="dv">1</span>,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-104" title="104">        <span class="dt">double</span> exp=(<span class="dt">double</span>)ans*(<span class="dv">2</span>/((<span class="dt">double</span>)n*(<span class="dt">double</span>)(n-<span class="dv">1</span>)));</a>
<a class="sourceLine" id="cb3-105" title="105">        printf(<span class="st">"</span><span class="sc">%lld</span><span class="st"> %.2lf</span><span class="sc">\n</span><span class="st">"</span>,min_cost,exp);</a>
<a class="sourceLine" id="cb3-106" title="106">    }</a>
<a class="sourceLine" id="cb3-107" title="107">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-108" title="108">} </a></code></pre></div>
<div class="note info">
<pre><code>&lt;p&gt;tree存的是边在arr中的编号&lt;/p&gt;</code></pre>
</div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>图论</tag>
        <tag>最小生成树</tag>
        <tag>并查集</tag>
        <tag>树上求所有点对的距离的和</tag>
        <tag>dfs</tag>
        <tag>kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2464 - A Pair of Graphs</title>
    <url>/2019/04/10/HDU2464-A-Pair-of-Graphs/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2464">A Pair of Graphs</a></p>
<p>一道同构图的题目。大意就是给出两幅图，同时可以执行两种操作，分别是加边和删边，在A图上加边、删边的代价是Ia，Da；在B图上加边、删边的代价是Ib，Db。现在要通过这两种操作使得两幅图同构，问怎样的操作代价最小，求这个最小代价</p>
<p>因为数据范围很小，N&lt;=8，所以可以直接枚举。具体见代码</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="co">/*在无向图中，关联一对顶点的无向边如果多于1条，则称这些边为平行边，</span></a>
<a class="sourceLine" id="cb1-21" title="21"><span class="co">平行边的条数称为重数。在有向图中，关联一对顶点的有向边如果多于1条，</span></a>
<a class="sourceLine" id="cb1-22" title="22"><span class="co">并且这些边的始点与终点相同(也就是它们的的方向相同)，称这些边为平行边。</span></a>
<a class="sourceLine" id="cb1-23" title="23"><span class="co">含平行边的图称为多重图，既不含平行边也不包含自环的图称为简单图*/</span></a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">bool</span> ga[<span class="dv">10</span>][<span class="dv">10</span>];</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">bool</span> gb[<span class="dv">10</span>][<span class="dv">10</span>];</a>
<a class="sourceLine" id="cb1-26" title="26"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-27" title="27">{</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> es_a,es_bb;</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="cf">while</span>(cin&gt;&gt;n&gt;&gt;es_a&gt;&gt;es_bb)</a>
<a class="sourceLine" id="cb1-32" title="32">    {</a>
<a class="sourceLine" id="cb1-33" title="33">        <span class="cf">if</span>(n==<span class="dv">0</span>&amp;&amp;es_a==<span class="dv">0</span>&amp;&amp;es_bb==<span class="dv">0</span>)        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">        mst(ga,<span class="dv">0</span>);mst(gb,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-35" title="35">        <span class="dt">int</span> ia,ib,da,db;</a>
<a class="sourceLine" id="cb1-36" title="36">        cin&gt;&gt;ia&gt;&gt;ib&gt;&gt;da&gt;&gt;db;</a>
<a class="sourceLine" id="cb1-37" title="37">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;es_a;i++){</a>
<a class="sourceLine" id="cb1-38" title="38">            <span class="dt">int</span> x,y;</a>
<a class="sourceLine" id="cb1-39" title="39">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;x,&amp;y);</a>
<a class="sourceLine" id="cb1-40" title="40">            ga[x][y]=ga[y][x]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">        }</a>
<a class="sourceLine" id="cb1-42" title="42">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;es_bb;i++){</a>
<a class="sourceLine" id="cb1-43" title="43">            <span class="dt">int</span> x,y;</a>
<a class="sourceLine" id="cb1-44" title="44">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;x,&amp;y);</a>
<a class="sourceLine" id="cb1-45" title="45">            gb[x][y]=gb[y][x]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-46" title="46">        }</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="dt">int</span> arr[<span class="dv">10</span>];</a>
<a class="sourceLine" id="cb1-48" title="48">        <span class="dt">int</span> ans=INF;</a>
<a class="sourceLine" id="cb1-49" title="49">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-50" title="50">            arr[i]=i;</a>
<a class="sourceLine" id="cb1-51" title="51">        <span class="dt">int</span> fac=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-52" title="52">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)        fac*=i;</a>
<a class="sourceLine" id="cb1-53" title="53">        <span class="cf">for</span>(<span class="dt">int</span> k=<span class="dv">0</span>;k&lt;fac;k++){</a>
<a class="sourceLine" id="cb1-54" title="54">            <span class="dt">int</span> tmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-55" title="55">            <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb1-56" title="56">                <span class="cf">for</span>(<span class="dt">int</span> j=i+<span class="dv">1</span>;j&lt;n;j++){</a>
<a class="sourceLine" id="cb1-57" title="57">                    <span class="cf">if</span>(ga[i][j]!=gb[arr[i]][arr[j]]){        <span class="co">//如果两个条边之间的关系不一致</span></a>
<a class="sourceLine" id="cb1-58" title="58">                        <span class="cf">if</span>(ga[i][j])</a>
<a class="sourceLine" id="cb1-59" title="59">                            tmp+=min(da,ib);</a>
<a class="sourceLine" id="cb1-60" title="60">                        <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-61" title="61">                            tmp+=min(ia,db);</a>
<a class="sourceLine" id="cb1-62" title="62">                    }</a>
<a class="sourceLine" id="cb1-63" title="63">                }</a>
<a class="sourceLine" id="cb1-64" title="64">            }</a>
<a class="sourceLine" id="cb1-65" title="65">            ans=min(ans,tmp);</a>
<a class="sourceLine" id="cb1-66" title="66">            next_permutation(arr,arr+n);</a>
<a class="sourceLine" id="cb1-67" title="67">        }</a>
<a class="sourceLine" id="cb1-68" title="68">        printf(<span class="st">"Case #</span><span class="sc">%d</span><span class="st">: </span><span class="sc">%d\n</span><span class="st">"</span>,++kase,ans);</a>
<a class="sourceLine" id="cb1-69" title="69">    }</a>
<a class="sourceLine" id="cb1-70" title="70">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-71" title="71">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>同构图</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>图论</tag>
        <tag>同构图</tag>
        <tag>暴力枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2546 - 饭卡</title>
    <url>/2019/02/18/HDU2546-%E9%A5%AD%E5%8D%A1/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2546">饭卡</a></p>
<p>  一道01背包的题目，特殊之处在于要先拿出5元用来买最贵的东西，剩下的钱即为背包，然后就是普通的01背包了。</p>
<span id="more"></span>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">1005</span>;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">int</span> pri[maxn];</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> dp[maxn];</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-11" title="11">{</a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF&amp;&amp;n)</a>
<a class="sourceLine" id="cb1-14" title="14">    {</a>
<a class="sourceLine" id="cb1-15" title="15">        memset(pri,<span class="dv">0</span>,<span class="kw">sizeof</span>(pri));</a>
<a class="sourceLine" id="cb1-16" title="16">        memset(dp,<span class="dv">0</span>,<span class="kw">sizeof</span>(dp));</a>
<a class="sourceLine" id="cb1-17" title="17">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;pri[i]);</a>
<a class="sourceLine" id="cb1-18" title="18">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;m);</a>
<a class="sourceLine" id="cb1-19" title="19">        <span class="cf">if</span>(m&lt;<span class="dv">5</span>)</a>
<a class="sourceLine" id="cb1-20" title="20">        {</a>
<a class="sourceLine" id="cb1-21" title="21">            printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,m);</a>
<a class="sourceLine" id="cb1-22" title="22">            <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb1-23" title="23">        }</a>
<a class="sourceLine" id="cb1-24" title="24">        <span class="dt">int</span> vtot=m-<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-25" title="25">        sort(pri+<span class="dv">1</span>,pri+<span class="dv">1</span>+n);        <span class="co">//要余额最小，则需要先买便宜的，再买贵的 </span></a>
<a class="sourceLine" id="cb1-26" title="26">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-27" title="27">            <span class="cf">for</span>(<span class="dt">int</span> j=vtot;j&gt;=pri[i];j--)</a>
<a class="sourceLine" id="cb1-28" title="28">                dp[j]=max(dp[j],dp[j-pri[i]]+pri[i]);</a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="dt">int</span> ans=m-pri[n]-dp[vtot];</a>
<a class="sourceLine" id="cb1-30" title="30">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-31" title="31">    }</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-33" title="33">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2639 - Bone Collector II</title>
    <url>/2019/02/17/HDU2639-Bone-Collector-II/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2639">Bone Collector II</a></p>
<p>  这道题与Bone Collector的不同之处在于，这道题求的是第k优解，而非最优解。那应该怎么做呢？</p>
<p>  首先，01背包的核心方程式dp[j] = max(dp[j] , dp[j - w[i]] + v[i]) ,也就是说，每一个新状态都是由dp[j]或dp[j - w[i]] + v[i]转移来的。我们首先用一个数组a[]和一个数组b[]将这两个状态存起来，然后再循环求得第k优解。这个过程有点像是，一个年级有两个班，我需要知道全年级的前十名是谁，那我就可以通过得到第一个班的前十是谁和第二个班的前十是谁来求得全年级的前十。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> val[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">int</span> wei[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="dt">int</span> a[<span class="dv">1005</span>],b[<span class="dv">1005</span>]; </a>
<a class="sourceLine" id="cb1-12" title="12"><span class="dt">int</span> dp[<span class="dv">1005</span>][<span class="dv">31</span>];</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-14" title="14">{</a>
<a class="sourceLine" id="cb1-15" title="15">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-16" title="16">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-18" title="18">    {    </a>
<a class="sourceLine" id="cb1-19" title="19">        mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-20" title="20">        <span class="dt">int</span> n,vtot,k;</a>
<a class="sourceLine" id="cb1-21" title="21">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;vtot,&amp;k);</a>
<a class="sourceLine" id="cb1-22" title="22">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)        cin&gt;&gt;val[i];</a>
<a class="sourceLine" id="cb1-23" title="23">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)        cin&gt;&gt;wei[i];</a>
<a class="sourceLine" id="cb1-24" title="24">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-25" title="25">        {</a>
<a class="sourceLine" id="cb1-26" title="26">            <span class="cf">for</span>(<span class="dt">int</span> j=vtot;j&gt;=wei[i];j--)</a>
<a class="sourceLine" id="cb1-27" title="27">            {</a>
<a class="sourceLine" id="cb1-28" title="28">                <span class="cf">for</span>(<span class="dt">int</span> q=<span class="dv">0</span>;q&lt;k;q++)</a>
<a class="sourceLine" id="cb1-29" title="29">                {</a>
<a class="sourceLine" id="cb1-30" title="30">                    a[q]=dp[j][q];</a>
<a class="sourceLine" id="cb1-31" title="31">                    b[q]=dp[j-wei[i]][q]+val[i];</a>
<a class="sourceLine" id="cb1-32" title="32">                }</a>
<a class="sourceLine" id="cb1-33" title="33">                a[k]=-<span class="dv">1</span>;b[k]=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">                <span class="dt">int</span> idx1=<span class="dv">0</span>;<span class="dt">int</span> idx2=<span class="dv">0</span>;<span class="dt">int</span> idx3=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-35" title="35">                <span class="cf">while</span>((idx1&lt;k||idx2&lt;k)&amp;&amp;idx3&lt;k)</a>
<a class="sourceLine" id="cb1-36" title="36">                {</a>
<a class="sourceLine" id="cb1-37" title="37">                    a[idx1]&gt;b[idx2]?dp[j][idx3]=a[idx1++]:dp[j][idx3]=b[idx2++];</a>
<a class="sourceLine" id="cb1-38" title="38">                    <span class="cf">if</span>(idx3==<span class="dv">0</span>||dp[j][idx3-<span class="dv">1</span>]!=dp[j][idx3])        <span class="co">//这个判断是防止有重复数据</span></a>
<a class="sourceLine" id="cb1-39" title="39">                        idx3++; </a>
<a class="sourceLine" id="cb1-40" title="40">                }</a>
<a class="sourceLine" id="cb1-41" title="41">            }</a>
<a class="sourceLine" id="cb1-42" title="42">        }</a>
<a class="sourceLine" id="cb1-43" title="43">        cout&lt;&lt;dp[vtot][k-<span class="dv">1</span>]&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-44" title="44">    }</a>
<a class="sourceLine" id="cb1-45" title="45">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-46" title="46">} </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2647 - Reward</title>
    <url>/2019/03/21/HDU2647-Reward/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2647">Reward</a><br></p>
<p>其实就是用拓补排序判一下环，但需要注意两点：一是反向建图。这主要是为了计算奖金时的方便，因为反向建图就可以从奖金最少的那个人出发，遍历整个图，逐步累加得到答案；如果是正向建图，则需要先找到奖金最少的那个人，将他作为起点......二是这道题其实是根据每个点(人)在图中的深度来确定每个点(人)的奖金的。已下图为例：</p>
<br>
<center>
<img src="https://pic.superbed.cn/item/5c9392d03a213b0417d8b072">
</center>
<p>3和4的深度是一样的，所以两者的奖金也一样。因此，不能简单地认为，如果可以拓补排序了，答案就是888 + (n * (n - 1)) / 2</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e4</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> head[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="dt">int</span> n,m;        <span class="co">//n个点,m条边 </span></a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">struct</span> edge{</a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="dt">int</span> to;</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> next;</a>
<a class="sourceLine" id="cb1-25" title="25">};</a>
<a class="sourceLine" id="cb1-26" title="26"><span class="dt">int</span> tot;</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">int</span> maxi; </a>
<a class="sourceLine" id="cb1-28" title="28">edge edges[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb1-29" title="29"><span class="dt">int</span> deg[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb1-30" title="30"><span class="dt">int</span> dep[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb1-31" title="31"><span class="dt">void</span> add_edge(<span class="dt">int</span> u,<span class="dt">int</span> v)</a>
<a class="sourceLine" id="cb1-32" title="32">{</a>
<a class="sourceLine" id="cb1-33" title="33">    edges[tot].to=v;</a>
<a class="sourceLine" id="cb1-34" title="34">    edges[tot].next=head[u];</a>
<a class="sourceLine" id="cb1-35" title="35">    head[u]=tot++;</a>
<a class="sourceLine" id="cb1-36" title="36">    deg[v]++;</a>
<a class="sourceLine" id="cb1-37" title="37">}</a>
<a class="sourceLine" id="cb1-38" title="38"><span class="dt">int</span> topo()</a>
<a class="sourceLine" id="cb1-39" title="39">{</a>
<a class="sourceLine" id="cb1-40" title="40">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-43" title="43">        <span class="cf">if</span>(deg[i]==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-44" title="44">            que.push(i);</a>
<a class="sourceLine" id="cb1-45" title="45">            deg[i]--;</a>
<a class="sourceLine" id="cb1-46" title="46">        }</a>
<a class="sourceLine" id="cb1-47" title="47">    }</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="cf">while</span>(!que.empty())</a>
<a class="sourceLine" id="cb1-50" title="50">    {    </a>
<a class="sourceLine" id="cb1-51" title="51">        cnt++;</a>
<a class="sourceLine" id="cb1-52" title="52">        <span class="dt">int</span> fro=que.front();</a>
<a class="sourceLine" id="cb1-53" title="53">        ans+=(<span class="dv">888</span>+dep[fro]);</a>
<a class="sourceLine" id="cb1-54" title="54">        que.pop();</a>
<a class="sourceLine" id="cb1-55" title="55">        <span class="cf">for</span>(<span class="dt">int</span> i=head[fro];i!=-<span class="dv">1</span>;i=edges[i].next)</a>
<a class="sourceLine" id="cb1-56" title="56">        {</a>
<a class="sourceLine" id="cb1-57" title="57">            <span class="dt">int</span> ito=edges[i].to;</a>
<a class="sourceLine" id="cb1-58" title="58">            deg[ito]--;</a>
<a class="sourceLine" id="cb1-59" title="59">            <span class="cf">if</span>(deg[ito]==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-60" title="60">                dep[ito]=dep[fro]+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-61" title="61">                que.push(ito);</a>
<a class="sourceLine" id="cb1-62" title="62">            }</a>
<a class="sourceLine" id="cb1-63" title="63">        }</a>
<a class="sourceLine" id="cb1-64" title="64">    }</a>
<a class="sourceLine" id="cb1-65" title="65">    <span class="cf">if</span>(cnt==n)</a>
<a class="sourceLine" id="cb1-66" title="66">        <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-67" title="67">    <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-68" title="68">}</a>
<a class="sourceLine" id="cb1-69" title="69"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-70" title="70">{</a>
<a class="sourceLine" id="cb1-71" title="71">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m)!=EOF)</a>
<a class="sourceLine" id="cb1-72" title="72">    {</a>
<a class="sourceLine" id="cb1-73" title="73">        tot=<span class="dv">0</span>;mst(head,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-74" title="74">        mst(deg,<span class="dv">0</span>);mst(dep,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-75" title="75">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb1-76" title="76">            <span class="dt">int</span> a,b;</a>
<a class="sourceLine" id="cb1-77" title="77">            cin&gt;&gt;a&gt;&gt;b;</a>
<a class="sourceLine" id="cb1-78" title="78">            add_edge(b,a);</a>
<a class="sourceLine" id="cb1-79" title="79">        }</a>
<a class="sourceLine" id="cb1-80" title="80">        <span class="dt">int</span> rsl=topo();</a>
<a class="sourceLine" id="cb1-81" title="81">        cout&lt;&lt;rsl&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-82" title="82">    }</a>
<a class="sourceLine" id="cb1-83" title="83">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-84" title="84">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>拓补排序</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>图论</tag>
        <tag>拓补排序</tag>
        <tag>反向建图</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ2104 - Kth number 主席树or划分树模板</title>
    <url>/2019/09/07/HDU2665-Kth-Number-%E4%B8%BB%E5%B8%AD%E6%A0%91or%E5%88%92%E5%88%86%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/He1712fd2c08f40a985b1ef436e9be051G.jpg"></p>
<span id="more"></span>
<p><a href="http://poj.org/problem?id=2104">Kth number</a></p>
<p>模板题，题意是求区间第k大，套一下主席树模板或者划分树模板即可（屯板子）</p>
<p>代码如下：</p>
<p>主席树：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> rt[maxn&lt;&lt;<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">int</span> sum[maxn&lt;&lt;<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">int</span> ls[maxn&lt;&lt;<span class="dv">5</span>],rs[maxn&lt;&lt;<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb1-26" title="26"><span class="dt">int</span> tot;</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">int</span> p;</a>
<a class="sourceLine" id="cb1-28" title="28"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span>&amp; root)        <span class="co">//其实就是一个为各节点分配id的过程 </span></a>
<a class="sourceLine" id="cb1-29" title="29">{</a>
<a class="sourceLine" id="cb1-30" title="30">    root=++tot;</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="cf">if</span>(lef==rig)    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-33" title="33">    build(lef,mid,ls[root]);</a>
<a class="sourceLine" id="cb1-34" title="34">    build(mid+<span class="dv">1</span>,rig,rs[root]);</a>
<a class="sourceLine" id="cb1-35" title="35">}</a>
<a class="sourceLine" id="cb1-36" title="36"><span class="dt">int</span> update(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> root)        </a>
<a class="sourceLine" id="cb1-37" title="37">{</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="dt">int</span> <span class="va">root_</span>=++tot;        <span class="co">//建一棵新树 </span></a>
<a class="sourceLine" id="cb1-39" title="39">    ls[<span class="va">root_</span>]=ls[root];</a>
<a class="sourceLine" id="cb1-40" title="40">    rs[<span class="va">root_</span>]=rs[root];</a>
<a class="sourceLine" id="cb1-41" title="41">    sum[<span class="va">root_</span>]=sum[root]+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">if</span>(lef==rig)    <span class="cf">return</span> <span class="va">root_</span>;</a>
<a class="sourceLine" id="cb1-43" title="43">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-44" title="44">    <span class="cf">if</span>(p&lt;=mid){</a>
<a class="sourceLine" id="cb1-45" title="45">        ls[<span class="va">root_</span>]=update(lef,mid,ls[<span class="va">root_</span>]);        <span class="co">//如果修改点在左儿子，就新建一个左儿子 </span></a>
<a class="sourceLine" id="cb1-46" title="46">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-47" title="47">        rs[<span class="va">root_</span>]=update(mid+<span class="dv">1</span>,rig,rs[<span class="va">root_</span>]);        <span class="co">//如果修改点在右儿子，就新建一个右儿子 </span></a>
<a class="sourceLine" id="cb1-48" title="48">    }</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="cf">return</span> <span class="va">root_</span>;</a>
<a class="sourceLine" id="cb1-50" title="50">}</a>
<a class="sourceLine" id="cb1-51" title="51"><span class="dt">int</span> query(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> k)</a>
<a class="sourceLine" id="cb1-52" title="52">{</a>
<a class="sourceLine" id="cb1-53" title="53">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-54" title="54">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-55" title="55">    <span class="dt">int</span> x=sum[ls[v]]-sum[ls[u]];</a>
<a class="sourceLine" id="cb1-56" title="56">    <span class="cf">if</span>(lef==rig)    <span class="cf">return</span> lef;</a>
<a class="sourceLine" id="cb1-57" title="57">    <span class="cf">if</span>(x&gt;=k){</a>
<a class="sourceLine" id="cb1-58" title="58">        ans=query(ls[u],ls[v],lef,mid,k);</a>
<a class="sourceLine" id="cb1-59" title="59">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-60" title="60">        ans=query(rs[u],rs[v],mid+<span class="dv">1</span>,rig,k-x);</a>
<a class="sourceLine" id="cb1-61" title="61">    }</a>
<a class="sourceLine" id="cb1-62" title="62">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-63" title="63">}</a>
<a class="sourceLine" id="cb1-64" title="64"><span class="dt">int</span> arr[maxn];</a>
<a class="sourceLine" id="cb1-65" title="65"><span class="dt">int</span> lisan[maxn];</a>
<a class="sourceLine" id="cb1-66" title="66"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-67" title="67">{</a>
<a class="sourceLine" id="cb1-68" title="68">    tot=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-69" title="69">    <span class="dt">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb1-70" title="70">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)    cin&gt;&gt;arr[i],lisan[i]=arr[i];</a>
<a class="sourceLine" id="cb1-71" title="71">    sort(lisan+<span class="dv">1</span>,lisan+<span class="dv">1</span>+n);</a>
<a class="sourceLine" id="cb1-72" title="72">    <span class="dt">int</span> len=unique(lisan+<span class="dv">1</span>,lisan+<span class="dv">1</span>+n)-lisan-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-73" title="73">    build(<span class="dv">1</span>,len,rt[<span class="dv">0</span>]);</a>
<a class="sourceLine" id="cb1-74" title="74">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-75" title="75">        p=lower_bound(lisan+<span class="dv">1</span>,lisan+<span class="dv">1</span>+len,arr[i])-lisan;</a>
<a class="sourceLine" id="cb1-76" title="76">        rt[i]=update(<span class="dv">1</span>,len,rt[i-<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb1-77" title="77">    }</a>
<a class="sourceLine" id="cb1-78" title="78">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-79" title="79">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb1-80" title="80">        <span class="dt">int</span> L,R,k;cin&gt;&gt;L&gt;&gt;R&gt;&gt;k;</a>
<a class="sourceLine" id="cb1-81" title="81">        ans=query(rt[L-<span class="dv">1</span>],rt[R],<span class="dv">1</span>,len,k);</a>
<a class="sourceLine" id="cb1-82" title="82">        cout&lt;&lt;lisan[ans]&lt;&lt;<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>;</a>
<a class="sourceLine" id="cb1-83" title="83">    }</a>
<a class="sourceLine" id="cb1-84" title="84">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-85" title="85">    </a>
<a class="sourceLine" id="cb1-86" title="86">}</a></code></pre></div>
<p>划分树：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">50</span>;</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-23" title="23"><span class="dt">int</span> tree[<span class="dv">20</span>][maxn];</a>
<a class="sourceLine" id="cb2-24" title="24"><span class="dt">int</span> to_lef[<span class="dv">20</span>][maxn]; </a>
<a class="sourceLine" id="cb2-25" title="25"><span class="dt">int</span> sorted[maxn];</a>
<a class="sourceLine" id="cb2-26" title="26"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> lev)</a>
<a class="sourceLine" id="cb2-27" title="27">{</a>
<a class="sourceLine" id="cb2-28" title="28">    <span class="cf">if</span>(lef==rig) <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb2-29" title="29">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>; </a>
<a class="sourceLine" id="cb2-30" title="30">    <span class="dt">int</span> sup=mid-lef+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-31" title="31">    <span class="cf">for</span>(<span class="dt">int</span> i=lef;i&lt;=rig;i++){</a>
<a class="sourceLine" id="cb2-32" title="32">        <span class="cf">if</span>(tree[lev][i]&lt;sorted[mid]){</a>
<a class="sourceLine" id="cb2-33" title="33">            sup--;</a>
<a class="sourceLine" id="cb2-34" title="34">        }</a>
<a class="sourceLine" id="cb2-35" title="35">    }</a>
<a class="sourceLine" id="cb2-36" title="36">    <span class="dt">int</span> sublef=lef;<span class="dt">int</span> subrig=mid+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-37" title="37">    <span class="cf">for</span>(<span class="dt">int</span> i=lef;i&lt;=rig;i++){</a>
<a class="sourceLine" id="cb2-38" title="38">        <span class="cf">if</span>(i==lef){</a>
<a class="sourceLine" id="cb2-39" title="39">            to_lef[lev][i]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-40" title="40">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-41" title="41">            to_lef[lev][i]=to_lef[lev][i-<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb2-42" title="42">        }</a>
<a class="sourceLine" id="cb2-43" title="43">        <span class="cf">if</span>(tree[lev][i]&lt;sorted[mid]||tree[lev][i]==sorted[mid]&amp;&amp;sup&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-44" title="44">            tree[lev+<span class="dv">1</span>][sublef++]=tree[lev][i];</a>
<a class="sourceLine" id="cb2-45" title="45">            to_lef[lev][i]++;</a>
<a class="sourceLine" id="cb2-46" title="46">            <span class="cf">if</span>(tree[lev][i]==sorted[mid])    sup--;</a>
<a class="sourceLine" id="cb2-47" title="47">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-48" title="48">            tree[lev+<span class="dv">1</span>][subrig++]=tree[lev][i]; </a>
<a class="sourceLine" id="cb2-49" title="49">        }</a>
<a class="sourceLine" id="cb2-50" title="50">    }</a>
<a class="sourceLine" id="cb2-51" title="51">    build(lef,mid,lev+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-52" title="52">    build(mid+<span class="dv">1</span>,rig,lev+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-53" title="53">}</a>
<a class="sourceLine" id="cb2-54" title="54"><span class="dt">int</span> query(<span class="dt">int</span> lev,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> L,<span class="dt">int</span> R,<span class="dt">int</span> k)</a>
<a class="sourceLine" id="cb2-55" title="55">{</a>
<a class="sourceLine" id="cb2-56" title="56">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb2-57" title="57">    <span class="cf">if</span>(L==R)    <span class="cf">return</span> tree[lev][L];</a>
<a class="sourceLine" id="cb2-58" title="58">    <span class="dt">int</span> <span class="va">lef_</span>,tolef;</a>
<a class="sourceLine" id="cb2-59" title="59">    <span class="cf">if</span>(L==lef){</a>
<a class="sourceLine" id="cb2-60" title="60">        <span class="va">lef_</span>=<span class="dv">0</span>;tolef=to_lef[lev][R];</a>
<a class="sourceLine" id="cb2-61" title="61">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-62" title="62">        <span class="va">lef_</span>=to_lef[lev][L-<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb2-63" title="63">        tolef=to_lef[lev][R]-<span class="va">lef_</span>;</a>
<a class="sourceLine" id="cb2-64" title="64">    }</a>
<a class="sourceLine" id="cb2-65" title="65">    <span class="cf">if</span>(k&lt;=tolef){</a>
<a class="sourceLine" id="cb2-66" title="66">        <span class="dt">int</span> tmp_lef=lef+<span class="va">lef_</span>;</a>
<a class="sourceLine" id="cb2-67" title="67">        <span class="dt">int</span> tmp_rig=lef+<span class="va">lef_</span>+tolef-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-68" title="68">        <span class="cf">return</span> query(lev+<span class="dv">1</span>,lef,mid,tmp_lef,tmp_rig,k);</a>
<a class="sourceLine" id="cb2-69" title="69">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-70" title="70">        <span class="dt">int</span> tmp_lef=mid+L-lef-<span class="va">lef_</span>+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-71" title="71">        <span class="dt">int</span> tmp_rig=mid+R-lef-<span class="va">lef_</span>-tolef+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-72" title="72">        <span class="cf">return</span> query(lev+<span class="dv">1</span>,mid+<span class="dv">1</span>,rig,tmp_lef,tmp_rig,k-tolef);</a>
<a class="sourceLine" id="cb2-73" title="73">    }</a>
<a class="sourceLine" id="cb2-74" title="74">}</a>
<a class="sourceLine" id="cb2-75" title="75"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-76" title="76">{</a>
<a class="sourceLine" id="cb2-77" title="77">    <span class="dt">int</span> n,m;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m);</a>
<a class="sourceLine" id="cb2-78" title="78">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb2-79" title="79">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;sorted[i]);</a>
<a class="sourceLine" id="cb2-80" title="80">        tree[<span class="dv">0</span>][i]=sorted[i];</a>
<a class="sourceLine" id="cb2-81" title="81">    }</a>
<a class="sourceLine" id="cb2-82" title="82">    sort(sorted+<span class="dv">1</span>,sorted+<span class="dv">1</span>+n);</a>
<a class="sourceLine" id="cb2-83" title="83">    build(<span class="dv">1</span>,n,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-84" title="84">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb2-85" title="85">        <span class="dt">int</span> x,y,k;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;x,&amp;y,&amp;k);</a>
<a class="sourceLine" id="cb2-86" title="86">        <span class="dt">int</span> ans=query(<span class="dv">0</span>,<span class="dv">1</span>,n,x,y,k);</a>
<a class="sourceLine" id="cb2-87" title="87">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb2-88" title="88">    }</a>
<a class="sourceLine" id="cb2-89" title="89">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-90" title="90">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数据结构</category>
        <category>主席树</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>数据结构</tag>
        <tag>主席树</tag>
        <tag>划分树</tag>
        <tag>屯板子</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU2669 - Romantic</title>
    <url>/2019/03/02/HDU2669-Romantic/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2669">Romantic</a></p>
<p>  一道拓展欧几里得的题目，因为是ax + by = 1,所以可以直接用求逆元的方法来求出x,再根据y = (1 - ax) / b求得y。题目要求x是非负的，这在求逆元的过程中已得到了解决。</p>
<span id="more"></span>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;assert.h&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17">ll exgcd(ll a,ll b,ll&amp; x,ll&amp; y)</a>
<a class="sourceLine" id="cb1-18" title="18">{    </a>
<a class="sourceLine" id="cb1-19" title="19">    ll r;</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">if</span>(b==<span class="dv">0</span>){    </a>
<a class="sourceLine" id="cb1-21" title="21">        x=<span class="dv">1</span>;y=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-22" title="22">        <span class="cf">return</span> a;</a>
<a class="sourceLine" id="cb1-23" title="23">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-24" title="24">        r=exgcd(b,a%b,y,x);</a>
<a class="sourceLine" id="cb1-25" title="25">        y-=x*(a/b);</a>
<a class="sourceLine" id="cb1-26" title="26">    }</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">return</span> r; </a>
<a class="sourceLine" id="cb1-28" title="28">}</a>
<a class="sourceLine" id="cb1-29" title="29">ll solve(ll a,ll b)</a>
<a class="sourceLine" id="cb1-30" title="30">{    </a>
<a class="sourceLine" id="cb1-31" title="31">    ll x,y;</a>
<a class="sourceLine" id="cb1-32" title="32">    ll g=exgcd(a,b,x,y);</a>
<a class="sourceLine" id="cb1-33" title="33">    <span class="cf">if</span>(<span class="dv">1</span>%g)</a>
<a class="sourceLine" id="cb1-34" title="34">        <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-35" title="35">    x*=<span class="dv">1</span>/g;</a>
<a class="sourceLine" id="cb1-36" title="36">    <span class="cf">if</span>(b&lt;<span class="dv">0</span>)        b=-b;</a>
<a class="sourceLine" id="cb1-37" title="37">    ll ans=x%b;</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="cf">if</span>(ans&lt;=<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-39" title="39">        ans+=b;</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-41" title="41">}</a>
<a class="sourceLine" id="cb1-42" title="42"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-43" title="43">{</a>
<a class="sourceLine" id="cb1-44" title="44">    ll a,b;</a>
<a class="sourceLine" id="cb1-45" title="45">    <span class="cf">while</span>(cin&gt;&gt;a&gt;&gt;b)</a>
<a class="sourceLine" id="cb1-46" title="46">    {</a>
<a class="sourceLine" id="cb1-47" title="47">        ll ans=solve(a,b);</a>
<a class="sourceLine" id="cb1-48" title="48">        <span class="cf">if</span>(ans==-<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-49" title="49">            cout&lt;&lt;<span class="st">"sorry"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-50" title="50">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-51" title="51">        {</a>
<a class="sourceLine" id="cb1-52" title="52">            ll ansx=ans;</a>
<a class="sourceLine" id="cb1-53" title="53">            ll ansy=(<span class="dv">1</span>-a*ansx)/b;</a>
<a class="sourceLine" id="cb1-54" title="54">            cout&lt;&lt;ansx&lt;&lt;<span class="st">" "</span>&lt;&lt;ansy&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-55" title="55">        }</a>
<a class="sourceLine" id="cb1-56" title="56">    }</a>
<a class="sourceLine" id="cb1-57" title="57">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-58" title="58">}</a></code></pre></div>
]]></content>
  </entry>
  <entry>
    <title>HDU2955 - Robberies</title>
    <url>/2019/02/17/HDU2955-Robberies/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-2955">Robberies</a></p>
<p>  依然是01背包，但这次的有点特殊。特殊之处在于，背包的总体积是可以获得的钱的最大值( 如果是以概率为背包也不能枚举啊23333 )，然后用动态规划求得获得该钱数被抓的最大概率( 如果在最大概率的情况下都不会被抓，那就肯定不会被抓 )。</p>
<span id="more"></span>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="dt">int</span> m[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">double</span> p[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">double</span> dp[<span class="dv">10000</span>];</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-11" title="11">{</a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-13" title="13">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-14" title="14">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-15" title="15">    {    </a>
<a class="sourceLine" id="cb1-16" title="16">        mst(dp,<span class="dv">0</span>);mst(m,<span class="dv">0</span>);mst(p,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-17" title="17">        dp[<span class="dv">0</span>]=<span class="fl">1.0</span>;</a>
<a class="sourceLine" id="cb1-18" title="18">        <span class="dt">int</span> n;<span class="dt">double</span> ptot;</a>
<a class="sourceLine" id="cb1-19" title="19">        cin&gt;&gt;ptot&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-20" title="20">        <span class="dt">int</span> sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-21" title="21">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-22" title="22">        {    </a>
<a class="sourceLine" id="cb1-23" title="23">            cin&gt;&gt;m[i]&gt;&gt;p[i];</a>
<a class="sourceLine" id="cb1-24" title="24">            sum+=m[i];</a>
<a class="sourceLine" id="cb1-25" title="25">        }</a>
<a class="sourceLine" id="cb1-26" title="26">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-27" title="27">            <span class="cf">for</span>(<span class="dt">int</span> j=sum;j&gt;=m[i];j--)</a>
<a class="sourceLine" id="cb1-28" title="28">                dp[j]=max(dp[j],dp[j-m[i]]*(<span class="fl">1.0</span>-p[i]));</a>
<a class="sourceLine" id="cb1-29" title="29">      <span class="co">//这里先求不会被抓的概率然后用1减去这个概率，就是被抓的概率(高中数学)</span></a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="cf">for</span>(<span class="dt">int</span> j=sum;j&gt;=<span class="dv">0</span>;j--)</a>
<a class="sourceLine" id="cb1-31" title="31">        {    </a>
<a class="sourceLine" id="cb1-32" title="32">            <span class="dt">double</span> ans=<span class="fl">1.0</span>-dp[j];</a>
<a class="sourceLine" id="cb1-33" title="33">            <span class="cf">if</span>(ptot-ans&gt;<span class="fl">1e-9</span>){</a>
<a class="sourceLine" id="cb1-34" title="34">                cout&lt;&lt;j&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-35" title="35">                <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-36" title="36">            }        </a>
<a class="sourceLine" id="cb1-37" title="37">        }</a>
<a class="sourceLine" id="cb1-38" title="38">    }</a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-40" title="40">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU3466 - Proud Merchant</title>
    <url>/2019/02/18/HDU3466-Proud-Merchant/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-3466">Proud Merchant</a></p>
<p>  这道题最难搞的地方在于如何处理“小于qi时不能买”这一要求。苦思冥想许久，依然不知如何解决，于是只好去看题解......</p>
<p>  这道题的做法是首先将“商人”按照q-p排序，然后再进行01背包。为什么是按照q-p排序呢？假设有两件物品A,B,他们对应的p,q分别是p1,q1和p2,q2。如果这两件东西都要买，那么，如果先买A，就至少需要p1 + q2的钱才能把两件东西都买到；如果先买B，就至少需要p2 + q1的钱才能把两件东西都买到。为了买到尽可能多的东西，获得尽可能大的价值，就应该按照代价小的方式来买。也就是说，假如先买A比先买B所需的代价更小，就有p1 + q2 &lt; p2 + q1，即q1 - p1 &lt; q2 - p2。</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">typedef</span> <span class="kw">struct</span>{</a>
<a class="sourceLine" id="cb1-7" title="7">    <span class="dt">int</span> p,q,v;</a>
<a class="sourceLine" id="cb1-8" title="8">}mer;</a>
<a class="sourceLine" id="cb1-9" title="9">mer arr[<span class="dv">505</span>];</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">int</span> dp[<span class="dv">100000</span>];</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="dt">bool</span> cmp(mer a,mer b)</a>
<a class="sourceLine" id="cb1-12" title="12">{</a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="cf">return</span> (a.q-a.p)&lt;(b.q-b.p);</a>
<a class="sourceLine" id="cb1-14" title="14">}</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-16" title="16">{</a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-18" title="18">    <span class="cf">while</span>(cin&gt;&gt;n&gt;&gt;m)</a>
<a class="sourceLine" id="cb1-19" title="19">    {    </a>
<a class="sourceLine" id="cb1-20" title="20">        memset(dp,<span class="dv">0</span>,<span class="kw">sizeof</span>(dp));</a>
<a class="sourceLine" id="cb1-21" title="21">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-22" title="22">            cin&gt;&gt;arr[i].p&gt;&gt;arr[i].q&gt;&gt;arr[i].v;</a>
<a class="sourceLine" id="cb1-23" title="23">        sort(arr,arr+n,cmp);</a>
<a class="sourceLine" id="cb1-24" title="24">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-25" title="25">            <span class="cf">for</span>(<span class="dt">int</span> j=m;j&gt;=arr[i].q;j--)</a>
<a class="sourceLine" id="cb1-26" title="26">                dp[j]=max(dp[j],dp[j-arr[i].p]+arr[i].v);</a>
<a class="sourceLine" id="cb1-27" title="27">        cout&lt;&lt;dp[m]&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-28" title="28">    }</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-30" title="30">} </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU3926 - Hand in Hand</title>
    <url>/2019/04/06/HDU3926-Hand-in-Hand/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-3926">Hand in Hand</a></p>
<p>题目大意是给你两张图，让你判断这两张图是否同构，条件是两张图上的点最多都只有两个度数，可以看作是一个简单的同构图问题。</p>
<p>首先说一下什么是同构图</p>
<p>按字面意思理解，同构图即为"相同结构的图"，用图论中的术语描述就是 &gt;图论当中的术语，假设G=(V,E)和G1=(V1，E1)是两个图，如果存在一个双射(即一一映射)m：V→V1，使得对所有的x,y∈V均有xy∈E等价于m(x)m(y)∈E1，则称G和G1是同构的,这样的一个映射m称之为一个同构</p>
<p>而我对于同构图的理解是，一个同构图，应具有相同的连通性，链/环的个数以及链上/环上的点的个数应相同，点与点、边与边之间的对应关系应相同</p>
<p>比方说，下面的就是一对同构图</p>
<p><img src="https://ae01.alicdn.com/kf/HTB12WwabSWD3KVjSZSgq6ACxVXaa.jpg"></p>
<p>左图是一个只由五元环组成的图，而右图看起来和左图很不一样，但实际上也是一个五元环，边、点一一对应，故两者同构</p>
<p>回到这道题目上。要判断两个图是否同构，实际上是一个比较复杂的问题。一个比较简单粗暴的方法是比较两个图的邻接矩阵，若经过有限次的行变换和列变换后两个矩阵相同，则两图同构。也有用搜索的方法做的......具体的就不说了。但因为这道题每个点最多只有两个度，所以问题大大简化，故可以使用并查集来做，即用并查集检查两张图上链与环的数量，同时检查链/环上点的数目，比较一下，如果都相等则为同构，否则不同构。</p>
<p>代码如下</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e4</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> n1,n2,m;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="dt">int</span> pre[maxn];</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> cnt[maxn];</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">struct</span> kid{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> rcnt;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> ccnt;</a>
<a class="sourceLine" id="cb1-26" title="26">    kid():rcnt(<span class="dv">0</span>),ccnt(<span class="dv">1</span>){}</a>
<a class="sourceLine" id="cb1-27" title="27">};</a>
<a class="sourceLine" id="cb1-28" title="28"><span class="dt">bool</span> cmp(kid node1,kid node2)</a>
<a class="sourceLine" id="cb1-29" title="29">{</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">if</span>(node1.ccnt==node2.ccnt)</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="cf">return</span> node1.rcnt&lt;node2.rcnt;</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="cf">return</span> node1.ccnt&lt;node2.ccnt;</a>
<a class="sourceLine" id="cb1-33" title="33">}</a>
<a class="sourceLine" id="cb1-34" title="34"><span class="dt">void</span> init(<span class="dt">int</span> n)</a>
<a class="sourceLine" id="cb1-35" title="35">{</a>
<a class="sourceLine" id="cb1-36" title="36">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-37" title="37">        pre[i]=i;</a>
<a class="sourceLine" id="cb1-38" title="38">}</a>
<a class="sourceLine" id="cb1-39" title="39"><span class="dt">int</span> findr(<span class="dt">int</span> x)</a>
<a class="sourceLine" id="cb1-40" title="40">{</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="cf">if</span>(x==pre[x])        <span class="cf">return</span> pre[x];</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">return</span> pre[x]=findr(pre[x]);</a>
<a class="sourceLine" id="cb1-43" title="43">}</a>
<a class="sourceLine" id="cb1-44" title="44"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-45" title="45">{</a>
<a class="sourceLine" id="cb1-46" title="46">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-47" title="47">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-50" title="50">    {    </a>
<a class="sourceLine" id="cb1-51" title="51">        kid k1[maxn];</a>
<a class="sourceLine" id="cb1-52" title="52">        kid k2[maxn];</a>
<a class="sourceLine" id="cb1-53" title="53">        cin&gt;&gt;n1&gt;&gt;m;init(n1);</a>
<a class="sourceLine" id="cb1-54" title="54">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb1-55" title="55">            <span class="dt">int</span> u,v;</a>
<a class="sourceLine" id="cb1-56" title="56">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;u,&amp;v);</a>
<a class="sourceLine" id="cb1-57" title="57">            <span class="dt">int</span> fu=findr(u);</a>
<a class="sourceLine" id="cb1-58" title="58">            <span class="dt">int</span> fv=findr(v);</a>
<a class="sourceLine" id="cb1-59" title="59">            <span class="cf">if</span>(fu!=fv){</a>
<a class="sourceLine" id="cb1-60" title="60">                pre[fu]=fv;        <span class="co">//将fu接到fv上</span></a>
<a class="sourceLine" id="cb1-61" title="61">                k1[fv].ccnt+=k1[fu].ccnt;</a>
<a class="sourceLine" id="cb1-62" title="62">                k1[fu].ccnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-63" title="63">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-64" title="64">                k1[fv].rcnt++;        <span class="co">//以fv为代表元素的环有多少个元素</span></a>
<a class="sourceLine" id="cb1-65" title="65">            }</a>
<a class="sourceLine" id="cb1-66" title="66">        }</a>
<a class="sourceLine" id="cb1-67" title="67">        cin&gt;&gt;n2&gt;&gt;m;init(n2);</a>
<a class="sourceLine" id="cb1-68" title="68">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb1-69" title="69">            <span class="dt">int</span> u,v;</a>
<a class="sourceLine" id="cb1-70" title="70">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;u,&amp;v);</a>
<a class="sourceLine" id="cb1-71" title="71">            <span class="dt">int</span> fu=findr(u);</a>
<a class="sourceLine" id="cb1-72" title="72">            <span class="dt">int</span> fv=findr(v);</a>
<a class="sourceLine" id="cb1-73" title="73">            <span class="cf">if</span>(fu!=fv){</a>
<a class="sourceLine" id="cb1-74" title="74">                pre[fu]=fv;</a>
<a class="sourceLine" id="cb1-75" title="75">                k2[fv].ccnt+=k2[fu].ccnt;</a>
<a class="sourceLine" id="cb1-76" title="76">                k2[fu].ccnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-77" title="77">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-78" title="78">                k2[fv].rcnt++;</a>
<a class="sourceLine" id="cb1-79" title="79">            }</a>
<a class="sourceLine" id="cb1-80" title="80">        }</a>
<a class="sourceLine" id="cb1-81" title="81">        <span class="dt">bool</span> flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-82" title="82">        <span class="cf">if</span>(n1!=n2){</a>
<a class="sourceLine" id="cb1-83" title="83">            flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-84" title="84">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-85" title="85">            sort(k1+<span class="dv">1</span>,k1+n1+<span class="dv">1</span>,cmp);</a>
<a class="sourceLine" id="cb1-86" title="86">            sort(k2+<span class="dv">1</span>,k2+n2+<span class="dv">1</span>,cmp);</a>
<a class="sourceLine" id="cb1-87" title="87">            <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n1;i++){</a>
<a class="sourceLine" id="cb1-88" title="88">                <span class="cf">if</span>(k1[i].ccnt!=k2[i].ccnt||k1[i].rcnt!=k2[i].rcnt){</a>
<a class="sourceLine" id="cb1-89" title="89">                    flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-90" title="90">                    <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-91" title="91">                }</a>
<a class="sourceLine" id="cb1-92" title="92">            }</a>
<a class="sourceLine" id="cb1-93" title="93">        }</a>
<a class="sourceLine" id="cb1-94" title="94">        <span class="cf">if</span>(flag)</a>
<a class="sourceLine" id="cb1-95" title="95">            printf(<span class="st">"Case #</span><span class="sc">%d</span><span class="st">: YES</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-96" title="96">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-97" title="97">            printf(<span class="st">"Case #</span><span class="sc">%d</span><span class="st">: NO</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-98" title="98">    }</a>
<a class="sourceLine" id="cb1-99" title="99">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-100" title="100">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>同构图</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>图论</tag>
        <tag>同构图</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU4015 - Mario and Mushrooms( The 36th ACM/ICPC Asia Regional Shanghai Site —— Warmup E题)</title>
    <url>/2019/03/24/HDU4015-Mario-and-Mushrooms-The-36th-ACM-ICPC-Asia-Regional-Shanghai-Site-%E2%80%94%E2%80%94-Warmup-E%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-4015">Mario and Mushrooms</a></p>
<p>一道数学题，和pzc推了差不多一小时的式子，结果还是错了OTZ，<del>遂看题解</del> 然后发现这题其实就是直接把Raney引理套一套就行了<del>(Raney引理又是什么神仙？？？)</del></p>
<p>Raney引理:</p>
<blockquote>
<p>设整数序列A={Ai,i=1,2,…,N}，且部分和为Sk=A1+,…,+Ak，序列中的所有的数字之和为Sn=1；则在A的N个循环表示中，有且仅有一个序列B，满足B的任意部分和Si均大于零。</p>
</blockquote>
<p>一篇文章: <a href="https://blog.csdn.net/a363514083/article/details/6760409?locationNum=15">HDOJ4105和raney引理</a></p>
<p><del>所以当时为什么不直接打表</del></p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-21" title="21">{</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-23" title="23">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-26" title="26">    {</a>
<a class="sourceLine" id="cb1-27" title="27">        <span class="dt">double</span> m,k;</a>
<a class="sourceLine" id="cb1-28" title="28">        cin&gt;&gt;m&gt;&gt;k;</a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="dt">double</span> ans=<span class="dv">1</span>/(m*k+k+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-30" title="30">        printf(<span class="st">"Case #</span><span class="sc">%d</span><span class="st">: %.8lf</span><span class="sc">\n</span><span class="st">"</span>,++kase,ans);</a>
<a class="sourceLine" id="cb1-31" title="31">    }</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-33" title="33">}</a></code></pre></div>
<p>附:自己推出来的错误式子，留个纪念</p>
<p><span class="math display">\[\begin{equation}
\frac{\frac{k(k+1)m}{2}}{C_{km+1+k}^{k}}
\end{equation}\]</span></p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU4020 - Ads Proposal(The 36th ACM/ICPC Asia Regional Shanghai Site —— Warmup J题)</title>
    <url>/2019/03/24/HDU4020-Ads-Proposal-The-36th-ACM-ICPC-Asia-Regional-Shanghai-Site-%E2%80%94%E2%80%94-Warmup-J%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-4020">Ads Proposal</a></p>
<p>网上有用树状数组做的，但我对树状数组非常不熟......所以只能用比较暴力的做法，set+前缀和OTZ<del>(其实也写了一个树状数组的，只不过基本就是在抄题解hhhhhhh)</del></p>
<span id="more"></span>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">struct</span> ad{</a>
<a class="sourceLine" id="cb1-21" title="21">    ll cli;</a>
<a class="sourceLine" id="cb1-22" title="22">    ll len;</a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> ad&amp; a) <span class="at">const</span>{</a>
<a class="sourceLine" id="cb1-24" title="24">        <span class="cf">return</span> cli&gt;a.cli;</a>
<a class="sourceLine" id="cb1-25" title="25">    }</a>
<a class="sourceLine" id="cb1-26" title="26">};</a>
<a class="sourceLine" id="cb1-27" title="27">ll sum[maxn*<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb1-28" title="28">set&lt;ad&gt; cus[maxn];</a>
<a class="sourceLine" id="cb1-29" title="29"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-30" title="30">{</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-32" title="32">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb1-33" title="33">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-35" title="35">    {</a>
<a class="sourceLine" id="cb1-36" title="36">        <span class="dt">int</span> n,m,q;</a>
<a class="sourceLine" id="cb1-37" title="37">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m,&amp;q);</a>
<a class="sourceLine" id="cb1-38" title="38">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-39" title="39">            cus[i].clear();</a>
<a class="sourceLine" id="cb1-40" title="40">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb1-41" title="41">            ad tmp;<span class="dt">int</span> u;</a>
<a class="sourceLine" id="cb1-42" title="42">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st">"</span>,&amp;u,&amp;tmp.cli,&amp;tmp.len);</a>
<a class="sourceLine" id="cb1-43" title="43">            cus[u].insert(tmp);</a>
<a class="sourceLine" id="cb1-44" title="44">        }</a>
<a class="sourceLine" id="cb1-45" title="45">        mst(sum,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-46" title="46">        set&lt;ad&gt;::iterator it;</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-48" title="48">            <span class="dt">int</span> idx=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-49" title="49">            <span class="cf">for</span>(it=cus[i].begin();it!=cus[i].end();it++){</a>
<a class="sourceLine" id="cb1-50" title="50">                sum[idx++]+=(*it).len;</a>
<a class="sourceLine" id="cb1-51" title="51">            }</a>
<a class="sourceLine" id="cb1-52" title="52">        }</a>
<a class="sourceLine" id="cb1-53" title="53">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++)</a>
<a class="sourceLine" id="cb1-54" title="54">            sum[i]=sum[i]+sum[i-<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-55" title="55">        printf(<span class="st">"Case #</span><span class="sc">%d</span><span class="st">:</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-56" title="56">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;q;i++){</a>
<a class="sourceLine" id="cb1-57" title="57">            <span class="dt">int</span> k;</a>
<a class="sourceLine" id="cb1-58" title="58">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;k);</a>
<a class="sourceLine" id="cb1-59" title="59">            k=min(k,m); </a>
<a class="sourceLine" id="cb1-60" title="60">            printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>,sum[k]);</a>
<a class="sourceLine" id="cb1-61" title="61">        }</a>
<a class="sourceLine" id="cb1-62" title="62">    }</a>
<a class="sourceLine" id="cb1-63" title="63">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-64" title="64">}</a></code></pre></div>
<p>比较有意思的是计算前缀和的部分，这里解释一下。其实就是对于每一个customer，把他每一个广告的长度加到对应的第i个广告长度和上，然后将这个过程循环起来。最后再在这个基础上求个前缀和即可</p>
]]></content>
  </entry>
  <entry>
    <title>HDU4054-Hexadecimal View</title>
    <url>/2019/02/11/HDU4054-Hexadecimal-View/</url>
    <content><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4054">Hexadecimal View</a></p>
<p><img src="https://pic.superbed.cn/item/5c6147a15f3e509ed92f7690"></p>
<p>此题没有考查任何一个算法知识点，只是一道用来练代码熟悉度的题目 <span id="more"></span> 代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="dt">bool</span> vis[<span class="dv">4100</span>];</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">int</span> addr=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> pos=<span class="dv">0</span>;<span class="dt">int</span> postmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">void</span> conv(string&amp; s)</a>
<a class="sourceLine" id="cb1-11" title="11">{    </a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="dt">int</span> len=s.size();</a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="cf">for</span>(<span class="dt">int</span> i=postmp;i&lt;postmp+<span class="dv">16</span>&amp;&amp;i!=len;i++)</a>
<a class="sourceLine" id="cb1-14" title="14">    {    </a>
<a class="sourceLine" id="cb1-15" title="15">        <span class="cf">if</span>(islower(s[i]))</a>
<a class="sourceLine" id="cb1-16" title="16">            printf(<span class="st">"</span><span class="sc">%c</span><span class="st">"</span>,s[i]-(<span class="ch">'a'</span>-<span class="ch">'A'</span>));</a>
<a class="sourceLine" id="cb1-17" title="17">        <span class="cf">else</span> <span class="cf">if</span>(isupper(s[i]))</a>
<a class="sourceLine" id="cb1-18" title="18">            printf(<span class="st">"</span><span class="sc">%c</span><span class="st">"</span>,s[i]+(<span class="ch">'a'</span>-<span class="ch">'A'</span>));</a>
<a class="sourceLine" id="cb1-19" title="19">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-20" title="20">            printf(<span class="st">"</span><span class="sc">%c</span><span class="st">"</span>,s[i]);</a>
<a class="sourceLine" id="cb1-21" title="21">    }</a>
<a class="sourceLine" id="cb1-22" title="22">    printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-23" title="23">}</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">void</span> row(string&amp; s)</a>
<a class="sourceLine" id="cb1-25" title="25">{    </a>
<a class="sourceLine" id="cb1-26" title="26">    printf(<span class="st">"%04x: "</span>,addr);</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="dt">int</span> idx=pos;<span class="dt">int</span> cnt=<span class="dv">0</span>;<span class="dt">int</span> cnt2=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="dt">int</span> len=s.size();</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> col=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-30" title="30">    postmp=pos; </a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="cf">for</span>(;cnt&lt;<span class="dv">16</span>&amp;&amp;!vis[len-<span class="dv">1</span>];idx++)</a>
<a class="sourceLine" id="cb1-32" title="32">    {    </a>
<a class="sourceLine" id="cb1-33" title="33">        printf(<span class="st">"%02x"</span>,s[idx]);col+=<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">        vis[idx]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-35" title="35">        cnt2++;cnt++;</a>
<a class="sourceLine" id="cb1-36" title="36">        <span class="cf">if</span>(cnt2==<span class="dv">2</span>)</a>
<a class="sourceLine" id="cb1-37" title="37">        {</a>
<a class="sourceLine" id="cb1-38" title="38">            printf(<span class="st">" "</span>);col++;</a>
<a class="sourceLine" id="cb1-39" title="39">            cnt2=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-40" title="40">        }</a>
<a class="sourceLine" id="cb1-41" title="41">    }</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;=<span class="dv">39</span>-col;i++)</a>
<a class="sourceLine" id="cb1-43" title="43">        printf(<span class="st">" "</span>);</a>
<a class="sourceLine" id="cb1-44" title="44">    pos=idx;</a>
<a class="sourceLine" id="cb1-45" title="45">}</a>
<a class="sourceLine" id="cb1-46" title="46"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-47" title="47">{</a>
<a class="sourceLine" id="cb1-48" title="48">    string str;</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="cf">while</span>(getline(cin,str))</a>
<a class="sourceLine" id="cb1-50" title="50">    {    </a>
<a class="sourceLine" id="cb1-51" title="51">        addr=<span class="dv">0</span>;pos=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-52" title="52">        memset(vis,<span class="dv">0</span>,<span class="kw">sizeof</span>(vis));</a>
<a class="sourceLine" id="cb1-53" title="53">        <span class="dt">int</span> len=str.size();</a>
<a class="sourceLine" id="cb1-54" title="54">        <span class="cf">for</span>(;!vis[len-<span class="dv">1</span>];addr+=<span class="dv">16</span>)</a>
<a class="sourceLine" id="cb1-55" title="55">        {</a>
<a class="sourceLine" id="cb1-56" title="56">            row(str);</a>
<a class="sourceLine" id="cb1-57" title="57">            conv(str);</a>
<a class="sourceLine" id="cb1-58" title="58">        }</a>
<a class="sourceLine" id="cb1-59" title="59">        str=<span class="st">""</span>;</a>
<a class="sourceLine" id="cb1-60" title="60">    }</a>
<a class="sourceLine" id="cb1-61" title="61">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-62" title="62">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU4133 - StrangeStandard</title>
    <url>/2019/03/02/HDU4133-StrangeStandard/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-4133">StrangeStandard</a></p>
<p>  一道反素数的题目，求的是区间内的最大反素数。一开始做我是打表的<del>(而且这表还不是自己打出来的)</del>,代码如下:</p>
<span id="more"></span>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;assert.h&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="dt">int</span> ans[<span class="dv">200</span>]={<span class="dv">2000000001</span>,<span class="dv">1396755360</span>,<span class="dv">1102701600</span>,<span class="dv">735134400</span>,<span class="dv">698377680</span>,</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="dv">551350800</span>,<span class="dv">367567200</span>,<span class="dv">294053760</span>,<span class="dv">245044800</span>,</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="dv">183783600</span>,<span class="dv">147026880</span>,<span class="dv">122522400</span>,<span class="dv">110270160</span>,</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="dv">73513440</span>,<span class="dv">61261200</span>,<span class="dv">43243200</span>,<span class="dv">36756720</span>,</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dv">32432400</span>,<span class="dv">21621600</span>,<span class="dv">17297280</span>,<span class="dv">14414400</span>,<span class="dv">10810800</span>,</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="dv">8648640</span>,<span class="dv">7207200</span>,<span class="dv">6486480</span>,<span class="dv">4324320</span>,<span class="dv">3603600</span>,<span class="dv">2882880</span>,</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dv">2162160</span>,<span class="dv">1441440</span>,<span class="dv">1081080</span>,<span class="dv">720720</span>,<span class="dv">665280</span>,<span class="dv">554400</span>,<span class="dv">498960</span>,</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dv">332640</span>,<span class="dv">277200</span>,<span class="dv">221760</span>,<span class="dv">166320</span>,<span class="dv">110880</span>,<span class="dv">83160</span>,<span class="dv">55440</span>,<span class="dv">50400</span>,</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dv">45360</span>,<span class="dv">27720</span>,<span class="dv">25200</span>,<span class="dv">20160</span>,<span class="dv">15120</span>,<span class="dv">10080</span>,<span class="dv">7560</span>,<span class="dv">5040</span>,<span class="dv">2520</span>,<span class="dv">1680</span>,</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dv">1260</span>,<span class="dv">840</span>,<span class="dv">720</span>,<span class="dv">360</span>,<span class="dv">240</span>,<span class="dv">180</span>,<span class="dv">120</span>,<span class="dv">60</span>,<span class="dv">48</span>,<span class="dv">36</span>,<span class="dv">24</span>,<span class="dv">12</span>,<span class="dv">6</span>,<span class="dv">4</span>,<span class="dv">2</span>,<span class="dv">1</span>,<span class="dv">0</span>};</a>
<a class="sourceLine" id="cb1-26" title="26"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-27" title="27">{</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> t;cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-32" title="32">    {</a>
<a class="sourceLine" id="cb1-33" title="33">        cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-34" title="34">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;;i++)</a>
<a class="sourceLine" id="cb1-35" title="35">            <span class="cf">if</span>(ans[i]&lt;=n)</a>
<a class="sourceLine" id="cb1-36" title="36">            {</a>
<a class="sourceLine" id="cb1-37" title="37">                printf(<span class="st">"Case #</span><span class="sc">%d</span><span class="st">: </span><span class="sc">%d\n</span><span class="st">"</span>,++kase,ans[i]);</a>
<a class="sourceLine" id="cb1-38" title="38">                <span class="cf">break</span>; </a>
<a class="sourceLine" id="cb1-39" title="39">            }</a>
<a class="sourceLine" id="cb1-40" title="40">    }</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-42" title="42">}</a></code></pre></div>
<p>  这题非打表的方法是用dfs。具体代码如下:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-13" title="13"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-14" title="14"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">500005</span>;</a>
<a class="sourceLine" id="cb2-16" title="16">ll n,ans;</a>
<a class="sourceLine" id="cb2-17" title="17">ll maxi=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-18" title="18">ll prime[<span class="dv">20</span>]={<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>,<span class="dv">11</span>,<span class="dv">13</span>,<span class="dv">17</span>,<span class="dv">19</span>,<span class="dv">23</span>,<span class="dv">29</span>,<span class="dv">31</span>,<span class="dv">37</span>,<span class="dv">41</span>,<span class="dv">43</span>,<span class="dv">47</span>,<span class="dv">53</span>};</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="dt">void</span> dfs(<span class="dt">int</span> dep,<span class="dt">int</span> now,<span class="dt">int</span> cnt)</a>
<a class="sourceLine" id="cb2-20" title="20">{    </a>
<a class="sourceLine" id="cb2-21" title="21">    <span class="cf">if</span>(dep&gt;=<span class="dv">16</span>)</a>
<a class="sourceLine" id="cb2-22" title="22">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb2-23" title="23">    <span class="cf">if</span>(cnt==maxi&amp;&amp;ans&gt;now)</a>
<a class="sourceLine" id="cb2-24" title="24">        ans=now;</a>
<a class="sourceLine" id="cb2-25" title="25">    <span class="cf">if</span>(cnt&gt;maxi)</a>
<a class="sourceLine" id="cb2-26" title="26">    {</a>
<a class="sourceLine" id="cb2-27" title="27">        maxi=cnt;</a>
<a class="sourceLine" id="cb2-28" title="28">        ans=now;</a>
<a class="sourceLine" id="cb2-29" title="29">    }</a>
<a class="sourceLine" id="cb2-30" title="30">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=<span class="dv">100</span>;i++)</a>
<a class="sourceLine" id="cb2-31" title="31">    {    </a>
<a class="sourceLine" id="cb2-32" title="32">        <span class="cf">if</span>(now*prime[dep]&gt;n)        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb2-33" title="33">        now*=prime[dep];</a>
<a class="sourceLine" id="cb2-34" title="34">        dfs(dep+<span class="dv">1</span>,now,cnt*(i+<span class="dv">1</span>));</a>
<a class="sourceLine" id="cb2-35" title="35">    }</a>
<a class="sourceLine" id="cb2-36" title="36">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb2-37" title="37">}</a>
<a class="sourceLine" id="cb2-38" title="38"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-39" title="39">{    </a>
<a class="sourceLine" id="cb2-40" title="40">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb2-41" title="41">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb2-42" title="42">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-43" title="43">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb2-44" title="44">    {    </a>
<a class="sourceLine" id="cb2-45" title="45">        ans=<span class="dv">0</span>;maxi=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-46" title="46">        cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb2-47" title="47">        dfs(<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-48" title="48">        printf(<span class="st">"Case #</span><span class="sc">%d</span><span class="st">: </span><span class="sc">%lld\n</span><span class="st">"</span>,++kase,ans);</a>
<a class="sourceLine" id="cb2-49" title="49">    }</a>
<a class="sourceLine" id="cb2-50" title="50">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-51" title="51">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>数论</tag>
        <tag>反素数</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU5922 - Minimum’s Revenge(2016CCPC东北地区大学生程序设计竞赛A题)</title>
    <url>/2019/03/23/HDU5922-Minimum%E2%80%99s-Revenge-2016CCPC%E4%B8%9C%E5%8C%97%E5%9C%B0%E5%8C%BA%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9BA%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/HDU-5922">Minimum’s Revenge</a></p>
<p>因为边权是两个数之间的lcm，而对于所有的数，1和任意数的lcm都是最小的，故只需要求2 + 3 + 4 + 5 + ...... + n即可 <span id="more"></span></p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-21" title="21">{</a>
<a class="sourceLine" id="cb1-22" title="22">    ll t;</a>
<a class="sourceLine" id="cb1-23" title="23">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-24" title="24">    ll n;</a>
<a class="sourceLine" id="cb1-25" title="25">    ll kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-27" title="27">    {</a>
<a class="sourceLine" id="cb1-28" title="28">        cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-29" title="29">        ll ans=((n+<span class="dv">2</span>)*(n-<span class="dv">1</span>))/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-30" title="30">        printf(<span class="st">"Case #</span><span class="sc">%lld</span><span class="st">: </span><span class="sc">%lld\n</span><span class="st">"</span>,++kase,ans);</a>
<a class="sourceLine" id="cb1-31" title="31">    }</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-33" title="33">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU5924 - Mr. Frog’s Problem( 2016CCPC东北地区大学生程序设计竞赛C题)</title>
    <url>/2019/03/23/HDU5924-Mr-Frog%E2%80%99s-Problem-2016CCPC%E4%B8%9C%E5%8C%97%E5%9C%B0%E5%8C%BA%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9BC%E9%A2%98/</url>
    <content><![CDATA[<p>打表可知，答案就是输入的那两个数，只要按照题目要求的顺序输出即可。 <span id="more"></span> 代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-21" title="21">{</a>
<a class="sourceLine" id="cb1-22" title="22">    ll t;</a>
<a class="sourceLine" id="cb1-23" title="23">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-24" title="24">    ll kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-26" title="26">    {</a>
<a class="sourceLine" id="cb1-27" title="27">        ll a,b;</a>
<a class="sourceLine" id="cb1-28" title="28">        cin&gt;&gt;a&gt;&gt;b;</a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="cf">if</span>(a==b){</a>
<a class="sourceLine" id="cb1-30" title="30">            printf(<span class="st">"Case #</span><span class="sc">%lld</span><span class="st">:</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-31" title="31">            cout&lt;&lt;<span class="dv">1</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-32" title="32">            cout&lt;&lt;a&lt;&lt;<span class="st">" "</span>&lt;&lt;b&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-33" title="33">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-34" title="34">            printf(<span class="st">"Case #</span><span class="sc">%lld</span><span class="st">:</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-35" title="35">            cout&lt;&lt;<span class="dv">2</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-36" title="36">            cout&lt;&lt;a&lt;&lt;<span class="st">" "</span>&lt;&lt;b&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-37" title="37">            cout&lt;&lt;b&lt;&lt;<span class="st">" "</span>&lt;&lt;a&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-38" title="38">        }</a>
<a class="sourceLine" id="cb1-39" title="39">    }</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU5926 - Mr. Frog’s Game( 2016CCPC东北地区大学生程序设计竞赛E题)</title>
    <url>/2019/03/23/HDU5926-Mr-Frog%E2%80%99s-Game-2016CCPC%E4%B8%9C%E5%8C%97%E5%9C%B0%E5%8C%BA%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9BE%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/contest/290420#problem/E">Mr. Frog’s Game</a></p>
<p>因为数据量很小，所以直接暴力即可。先检查一下有没有相邻的可以消除，再检查一下同一条边界上可以消除的(根据游戏规则，如果两个方块可以消除且不相邻，只有可能在同一条边界上) <span id="more"></span> 代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20">ll gra[<span class="dv">35</span>][<span class="dv">35</span>];</a>
<a class="sourceLine" id="cb1-21" title="21">ll kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">void</span> solve(ll n,ll m)</a>
<a class="sourceLine" id="cb1-23" title="23">{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="cf">for</span>(ll i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-25" title="25">        <span class="cf">for</span>(ll j=<span class="dv">1</span>;j&lt;=m;j++)</a>
<a class="sourceLine" id="cb1-26" title="26">            <span class="cf">if</span>(gra[i][j]==gra[i-<span class="dv">1</span>][j]||gra[i][j]==gra[i+<span class="dv">1</span>][j]||gra[i][j]==gra[i][j-<span class="dv">1</span>]||gra[i][j]==gra[i][j+<span class="dv">1</span>]){</a>
<a class="sourceLine" id="cb1-27" title="27">                printf(<span class="st">"Case #</span><span class="sc">%lld</span><span class="st">: Yes</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-28" title="28">                <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-29" title="29">            }</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">for</span>(ll j=<span class="dv">1</span>;j&lt;=m;j++){</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="cf">for</span>(ll k=j+<span class="dv">1</span>;k&lt;=m;k++){</a>
<a class="sourceLine" id="cb1-32" title="32">            <span class="cf">if</span>(gra[<span class="dv">1</span>][j]==gra[<span class="dv">1</span>][k]){</a>
<a class="sourceLine" id="cb1-33" title="33">                printf(<span class="st">"Case #</span><span class="sc">%lld</span><span class="st">: Yes</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-34" title="34">                <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-35" title="35">            }</a>
<a class="sourceLine" id="cb1-36" title="36">        }</a>
<a class="sourceLine" id="cb1-37" title="37">    }</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="cf">for</span>(ll j=<span class="dv">1</span>;j&lt;=m;j++){</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">for</span>(ll k=j+<span class="dv">1</span>;k&lt;=m;k++){</a>
<a class="sourceLine" id="cb1-40" title="40">            <span class="cf">if</span>(gra[n][j]==gra[n][k]){</a>
<a class="sourceLine" id="cb1-41" title="41">                printf(<span class="st">"Case #</span><span class="sc">%lld</span><span class="st">: Yes</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-42" title="42">                <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-43" title="43">            }</a>
<a class="sourceLine" id="cb1-44" title="44">        }</a>
<a class="sourceLine" id="cb1-45" title="45">    }</a>
<a class="sourceLine" id="cb1-46" title="46">    <span class="cf">for</span>(ll i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="cf">for</span>(ll k=i+<span class="dv">1</span>;k&lt;=n;k++){</a>
<a class="sourceLine" id="cb1-48" title="48">            <span class="cf">if</span>(gra[i][<span class="dv">1</span>]==gra[k][<span class="dv">1</span>]){</a>
<a class="sourceLine" id="cb1-49" title="49">                printf(<span class="st">"Case #</span><span class="sc">%lld</span><span class="st">: Yes</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-50" title="50">                <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-51" title="51">            }</a>
<a class="sourceLine" id="cb1-52" title="52">        }</a>
<a class="sourceLine" id="cb1-53" title="53">    }</a>
<a class="sourceLine" id="cb1-54" title="54">    <span class="cf">for</span>(ll i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-55" title="55">        <span class="cf">for</span>(ll k=i+<span class="dv">1</span>;k&lt;=n;k++){</a>
<a class="sourceLine" id="cb1-56" title="56">            <span class="cf">if</span>(gra[i][m]==gra[k][m]){</a>
<a class="sourceLine" id="cb1-57" title="57">                printf(<span class="st">"Case #</span><span class="sc">%lld</span><span class="st">: Yes</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-58" title="58">                <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-59" title="59">            }</a>
<a class="sourceLine" id="cb1-60" title="60">        }</a>
<a class="sourceLine" id="cb1-61" title="61">    }</a>
<a class="sourceLine" id="cb1-62" title="62">    printf(<span class="st">"Case #</span><span class="sc">%lld</span><span class="st">: No</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-63" title="63">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-64" title="64">}</a>
<a class="sourceLine" id="cb1-65" title="65"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-66" title="66">{</a>
<a class="sourceLine" id="cb1-67" title="67">    ll t;</a>
<a class="sourceLine" id="cb1-68" title="68">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-69" title="69">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-70" title="70">    {</a>
<a class="sourceLine" id="cb1-71" title="71">        mst(gra,<span class="bn">0x3f</span>);</a>
<a class="sourceLine" id="cb1-72" title="72">        ll n,m;</a>
<a class="sourceLine" id="cb1-73" title="73">        cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb1-74" title="74">        <span class="cf">for</span>(ll i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-75" title="75">            <span class="cf">for</span>(ll j=<span class="dv">1</span>;j&lt;=m;j++)</a>
<a class="sourceLine" id="cb1-76" title="76">                cin&gt;&gt;gra[i][j];</a>
<a class="sourceLine" id="cb1-77" title="77">        solve(n,m);</a>
<a class="sourceLine" id="cb1-78" title="78">    }</a>
<a class="sourceLine" id="cb1-79" title="79">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-80" title="80">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU6608 - Fansblog</title>
    <url>/2019/08/22/HDU6608-Fansblog/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H527f9558b59e43299d761e5671297f57k.jpg"></p>
<span id="more"></span>
<h3 id="正文">正文</h3>
<p><a href="https://cn.vjudge.net/problem/HDU-6608">Fanblog</a></p>
<p>题意就是给你一个素数<span class="math inline">\(P\)</span>，让你找出一个最大的且小于<span class="math inline">\(P\)</span>的素数<span class="math inline">\(Q\)</span>，求<span class="math inline">\(Q!\ mod\ P\)</span>。</p>
<p>emmm数论题一向是弱势，这道题能做出来也是查了大佬博客上的一个结论（链接见附录），简单来说，若要求 <span class="math display">\[
Q!\ mod\ P
\]</span> 只需要求 <span class="math display">\[
(-1)^{Q+1}\times inv((P-1-Q)!,P)
\]</span> <span class="math inline">\(inv(a,p)\)</span>表示的是<span class="math inline">\(a\)</span>对<span class="math inline">\(p\)</span>的逆元</p>
<p><del>又根据瞎猜结论</del>，<span class="math inline">\(P\)</span>和<span class="math inline">\(Q\)</span>之间的距离一定不会很大，所以可以直接暴力求<span class="math inline">\(Q\)</span>以及<span class="math inline">\((P-1-Q)!\)</span>。套个拓展欧几里得就搞定了。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-20" title="20"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">20005</span>;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-25" title="25">ll p,q;</a>
<a class="sourceLine" id="cb1-26" title="26">ll exgcd(ll a,ll b,ll&amp; x,ll&amp; y)</a>
<a class="sourceLine" id="cb1-27" title="27">{</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="cf">if</span>(a==<span class="dv">0</span>&amp;&amp;b==<span class="dv">0</span>)  <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="cf">if</span>(b==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-30" title="30">        x=<span class="dv">1</span>;y=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="cf">return</span> a;</a>
<a class="sourceLine" id="cb1-32" title="32">    }</a>
<a class="sourceLine" id="cb1-33" title="33">    ll d=exgcd(b,a%b,y,x);</a>
<a class="sourceLine" id="cb1-34" title="34">    y-=a/b*x;</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="cf">return</span> d;</a>
<a class="sourceLine" id="cb1-36" title="36">}</a>
<a class="sourceLine" id="cb1-37" title="37">ll inv(ll a,ll pp)</a>
<a class="sourceLine" id="cb1-38" title="38">{</a>
<a class="sourceLine" id="cb1-39" title="39">    ll x,y;</a>
<a class="sourceLine" id="cb1-40" title="40">    ll d=exgcd(a,pp,x,y);</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="cf">if</span>(d==<span class="dv">1</span>)    <span class="cf">return</span> (x%pp+pp)%pp;</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">else</span>    <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-43" title="43">}</a>
<a class="sourceLine" id="cb1-44" title="44"><span class="dt">bool</span> chk(ll todo)</a>
<a class="sourceLine" id="cb1-45" title="45">{</a>
<a class="sourceLine" id="cb1-46" title="46">    <span class="cf">for</span>(ll i=<span class="dv">2</span>;i*i&lt;=todo;i++){</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="cf">if</span>(todo%i==<span class="dv">0</span>)   <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-48" title="48">    }</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="cf">return</span> <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-50" title="50">}</a>
<a class="sourceLine" id="cb1-51" title="51">ll solve(ll todo)</a>
<a class="sourceLine" id="cb1-52" title="52">{</a>
<a class="sourceLine" id="cb1-53" title="53">    <span class="cf">for</span>(ll i=todo-<span class="dv">1</span>;i&gt;=<span class="dv">2</span>;i--){</a>
<a class="sourceLine" id="cb1-54" title="54">        <span class="cf">if</span>(chk(i))  <span class="cf">return</span> i;</a>
<a class="sourceLine" id="cb1-55" title="55">    }</a>
<a class="sourceLine" id="cb1-56" title="56">}</a>
<a class="sourceLine" id="cb1-57" title="57">ll frac(ll todo)</a>
<a class="sourceLine" id="cb1-58" title="58">{</a>
<a class="sourceLine" id="cb1-59" title="59">    ll ans=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-60" title="60">    <span class="cf">for</span>(ll i=<span class="dv">2</span>;i&lt;=todo;i++)</a>
<a class="sourceLine" id="cb1-61" title="61">        ans=ans%p*i%p;</a>
<a class="sourceLine" id="cb1-62" title="62">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-63" title="63">}</a>
<a class="sourceLine" id="cb1-64" title="64"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-65" title="65">{</a>
<a class="sourceLine" id="cb1-66" title="66">    IOS;</a>
<a class="sourceLine" id="cb1-67" title="67">    <span class="dt">int</span> t;cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-68" title="68">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb1-69" title="69">        cin&gt;&gt;p;</a>
<a class="sourceLine" id="cb1-70" title="70">        q=solve(p);</a>
<a class="sourceLine" id="cb1-71" title="71">        ll ans=((q+<span class="dv">1</span>)&amp;<span class="dv">1</span>?-<span class="dv">1</span>:<span class="dv">1</span>)*inv(frac(p-<span class="dv">1</span>-q),p);</a>
<a class="sourceLine" id="cb1-72" title="72">        ans%p;</a>
<a class="sourceLine" id="cb1-73" title="73">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-74" title="74">    }</a>
<a class="sourceLine" id="cb1-75" title="75">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-76" title="76">}</a></code></pre></div>
<h3 id="附录">附录</h3>
<ul>
<li><p>正文所提到的结论在此处</p>
<p><a href="https://www.cnblogs.com/Judge/p/10755703.html#_label2">[威尔逊定理小讲解](https://www.cnblogs.com/Judge/p/10755703.html)</a></p></li>
<li><p>对于相邻两个素数的距离，最大可能为无穷大，但在题目数据范围内，这个距离不会很大。可参考以下文章：<a href="https://wenku.baidu.com/view/e5a209acdd3383c4bb4cd2c6.html">任意相邻两个素数之间的最大距离公式</a></p></li>
</ul>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
        <category>威尔逊定理</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C++</tag>
        <tag>数论</tag>
        <tag>威尔逊定理</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU6609 - Find the answer</title>
    <url>/2019/08/23/HDU6609-Find-the-answer/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H113a5f2732fe4bb3bd03c7a0516eeb26n.jpg"></p>
<span id="more"></span>
<p><a href="https://cn.vjudge.net/problem/HDU-6609">Find the answer</a></p>
<p>题意是说，有一个给定的序列<span class="math inline">\(W\)</span>与整数<span class="math inline">\(m\)</span>，对于<span class="math inline">\(W\)</span>的前<span class="math inline">\(k\)</span>项，删掉<span class="math inline">\(d_k\)</span>项就可以该子序列的前缀和不大于<span class="math inline">\(m\)</span>。问对于<span class="math inline">\(W\)</span>的所有前缀子序列，其最小的<span class="math inline">\(d\)</span>分别是多少。</p>
<p>思路就是通过线段树维护区间和以及区间中数字个数，查询时二分找到符合要求的区间，查询其数字个数，此时的数字个数是需要保留下来的数字的个数，因此答案应该是<span class="math inline">\(i-1-tmp\)</span>（<span class="math inline">\(tmp\)</span>为查询结果）。另外，该题数据范围比较大，需要做离散化。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-20" title="20"><span class="pp">#define int </span><span class="dt">long</span><span class="pp"> </span><span class="dt">long</span></a>
<a class="sourceLine" id="cb1-21" title="21"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">200005</span>;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-26" title="26"><span class="dt">int</span> sum[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">int</span> cnt[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb1-28" title="28">ll arr[maxn],lisan[maxn];</a>
<a class="sourceLine" id="cb1-29" title="29"><span class="dt">void</span> pushup(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-30" title="30">{</a>
<a class="sourceLine" id="cb1-31" title="31">    sum[rt]=sum[rt&lt;&lt;<span class="dv">1</span>]+sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-32" title="32">    cnt[rt]=cnt[rt&lt;&lt;<span class="dv">1</span>]+cnt[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-33" title="33">}</a>
<a class="sourceLine" id="cb1-34" title="34"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-35" title="35">{</a>
<a class="sourceLine" id="cb1-36" title="36">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb1-37" title="37">        sum[rt]=cnt[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-38" title="38">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-39" title="39">    }</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">    build(lson);</a>
<a class="sourceLine" id="cb1-42" title="42">    build(rson);</a>
<a class="sourceLine" id="cb1-43" title="43">    pushup(rt);</a>
<a class="sourceLine" id="cb1-44" title="44">}</a>
<a class="sourceLine" id="cb1-45" title="45"><span class="dt">void</span> update(<span class="dt">int</span> pos,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-46" title="46">{</a>
<a class="sourceLine" id="cb1-47" title="47">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb1-48" title="48">        sum[rt]+=lisan[pos];</a>
<a class="sourceLine" id="cb1-49" title="49">        cnt[rt]++;</a>
<a class="sourceLine" id="cb1-50" title="50">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-51" title="51">    }</a>
<a class="sourceLine" id="cb1-52" title="52">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-53" title="53">    <span class="cf">if</span>(pos&lt;=mid)</a>
<a class="sourceLine" id="cb1-54" title="54">        update(pos,lson);</a>
<a class="sourceLine" id="cb1-55" title="55">    <span class="cf">else</span>    </a>
<a class="sourceLine" id="cb1-56" title="56">        update(pos,rson);</a>
<a class="sourceLine" id="cb1-57" title="57">    pushup(rt);</a>
<a class="sourceLine" id="cb1-58" title="58">}</a>
<a class="sourceLine" id="cb1-59" title="59"><span class="dt">int</span> query(ll val,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-60" title="60">{</a>
<a class="sourceLine" id="cb1-61" title="61">    <span class="cf">if</span>(sum[rt]&lt;=val)</a>
<a class="sourceLine" id="cb1-62" title="62">        <span class="cf">return</span> cnt[rt];    </a>
<a class="sourceLine" id="cb1-63" title="63">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb1-64" title="64">        <span class="cf">if</span>(cnt[rt]==<span class="dv">0</span>)  </a>
<a class="sourceLine" id="cb1-65" title="65">            <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-66" title="66">        <span class="cf">return</span> val/(sum[rt]/cnt[rt]);</a>
<a class="sourceLine" id="cb1-67" title="67">    }</a>
<a class="sourceLine" id="cb1-68" title="68">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-69" title="69">    <span class="cf">if</span>(sum[rt&lt;&lt;<span class="dv">1</span>]&gt;val)</a>
<a class="sourceLine" id="cb1-70" title="70">        <span class="cf">return</span> query(val,lson);</a>
<a class="sourceLine" id="cb1-71" title="71">    <span class="cf">else</span> </a>
<a class="sourceLine" id="cb1-72" title="72">        <span class="cf">return</span> cnt[rt&lt;&lt;<span class="dv">1</span>]+query(val-sum[rt&lt;&lt;<span class="dv">1</span>],rson);</a>
<a class="sourceLine" id="cb1-73" title="73">}</a>
<a class="sourceLine" id="cb1-74" title="74"><span class="dt">int</span> ans[maxn];</a>
<a class="sourceLine" id="cb1-75" title="75"><span class="dt">int32_t</span> main()</a>
<a class="sourceLine" id="cb1-76" title="76">{</a>
<a class="sourceLine" id="cb1-77" title="77">    IOS;</a>
<a class="sourceLine" id="cb1-78" title="78">    <span class="dt">int</span> t;cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-79" title="79">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb1-80" title="80">        <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-81" title="81">        ll m;cin&gt;&gt;m;</a>
<a class="sourceLine" id="cb1-82" title="82">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-83" title="83">            cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb1-84" title="84">            lisan[i]=arr[i];</a>
<a class="sourceLine" id="cb1-85" title="85">        }</a>
<a class="sourceLine" id="cb1-86" title="86">        sort(lisan+<span class="dv">1</span>,lisan+<span class="dv">1</span>+n);</a>
<a class="sourceLine" id="cb1-87" title="87">        <span class="dt">int</span> len=unique(lisan+<span class="dv">1</span>,lisan+<span class="dv">1</span>+n)-lisan-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-88" title="88">        build(<span class="dv">1</span>,len,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-89" title="89">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-90" title="90">            <span class="dt">int</span> idx=lower_bound(lisan+<span class="dv">1</span>,lisan+<span class="dv">1</span>+n,arr[i])-lisan;</a>
<a class="sourceLine" id="cb1-91" title="91">            <span class="dt">int</span> tmp=query(m-arr[i],<span class="dv">1</span>,len,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-92" title="92">            update(idx,<span class="dv">1</span>,len,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-93" title="93">            ans[i]=i-tmp-<span class="dv">1</span>;     <span class="co">//tmp是可以保留下来的数的个数</span></a>
<a class="sourceLine" id="cb1-94" title="94">        }</a>
<a class="sourceLine" id="cb1-95" title="95">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)<span class="co">//</span></a>
<a class="sourceLine" id="cb1-96" title="96">            cout&lt;&lt;ans[i]&lt;&lt;<span class="st">" "</span>;</a>
<a class="sourceLine" id="cb1-97" title="97">        cout&lt;&lt;<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>;</a>
<a class="sourceLine" id="cb1-98" title="98">    }</a>
<a class="sourceLine" id="cb1-99" title="99">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-100" title="100">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数据结构</category>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>数据结构</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>一次Hexo博客个性化记录</title>
    <url>/2019/04/19/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/HTB14aAXbRWD3KVjSZKPq6yp7FXa9.jpg"></p>
<p>  这几天对博客做了一次大更新，换了、添加了挺多东西的，打算做个记录。以下所有更改，都基于NexT主题</p>
<span id="more"></span>
<h5 id="将背景从原本的自动更换的图片背景更改为动态背景">将背景从原本的自动更换的图片背景更改为动态背景。</h5>
<p>方法很简单，只需要在主题配置文件中，找到以下内容，将false改成true即可。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="co"># Canvas-nest</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="fu">canvas_nest:</span><span class="at"> </span><span class="ch">false</span></a>
<a class="sourceLine" id="cb1-3" title="3"></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="co"># three_waves</span></a>
<a class="sourceLine" id="cb1-5" title="5"> <span class="fu">three_waves:</span><span class="at"> </span><span class="ch">false</span></a>
<a class="sourceLine" id="cb1-6" title="6"></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="co"># canvas_lines</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="fu">canvas_lines:</span><span class="at"> true    //false-&gt;true    </span></a>
<a class="sourceLine" id="cb1-9" title="9"></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="co"># canvas_sphere</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="fu">canvas_sphere:</span><span class="at"> </span><span class="ch">false</span></a></code></pre></div>
<p>同时，对于原本的图片背景，只需这样处理:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><a class="sourceLine" id="cb2-1" title="1"><span class="st">- body {</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="st">-     background:url(https://unsplash.it/1600/900?random);</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="st">-     background-repeat: no-repeat;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="st">-     background-attachment:fixed;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="st">-     background-position:50% 50%;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="st">- }</span></a></code></pre></div>
<h5 id="替换顶部加载进度条">替换顶部加载进度条</h5>
<p>将原本的进度条替换为NexT自带的进度条。 在主题的配置文件中找到下面这一段，将pace改为true，并在pace_theme处选择自己喜欢的进度条样式。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb3-1" title="1"><span class="co"># Progress bar in the top during page loading.</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="fu">pace:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="co"># Themes list:</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="co">#pace-theme-big-counter</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="co">#pace-theme-bounce</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="co">#pace-theme-barber-shop</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="co">#pace-theme-center-atom</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="co">#pace-theme-center-circle</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="co">#pace-theme-center-radar</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="co">#pace-theme-center-simple</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="co">#pace-theme-corner-indicator</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="co">#pace-theme-fill-left</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="co">#pace-theme-flash</span></a>
<a class="sourceLine" id="cb3-14" title="14"><span class="co">#pace-theme-loading-bar</span></a>
<a class="sourceLine" id="cb3-15" title="15"><span class="co">#pace-theme-mac-osx</span></a>
<a class="sourceLine" id="cb3-16" title="16"><span class="co">#pace-theme-minimal</span></a>
<a class="sourceLine" id="cb3-17" title="17"><span class="co"># For example</span></a>
<a class="sourceLine" id="cb3-18" title="18"><span class="co"># pace_theme: pace-theme-center-simple</span></a>
<a class="sourceLine" id="cb3-19" title="19"><span class="fu">pace_theme:</span><span class="at"> pace-theme-minimal</span></a></code></pre></div>
<h5 id="加入fork-me-on-github的标签">加入"fork me on github"的标签</h5>
<p>到<a href="http://tholman.com/github-corners/">这个网站</a>上找到自己喜欢的样式，然后 粘贴到themes/next/layout/_layout.swig中。具体来说就是</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><a class="sourceLine" id="cb4-1" title="1"><span class="st">&lt;div class="{{ container_class }} {% block page_class %}{% endblock %}"&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2">    &lt;div class="headband"&gt;&lt;/div&gt;</a>
<a class="sourceLine" id="cb4-3" title="3"><span class="va">+    &lt;a href="your_github_url" class="github-corner" ...</span></a></code></pre></div>
<h5 id="修改鼠标指针样式">修改鼠标指针样式</h5>
<p>在custom.styl中加入以下代码</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode css"><code class="sourceCode css"><a class="sourceLine" id="cb5-1" title="1"><span class="er">// 鼠标样式</span></a>
<a class="sourceLine" id="cb5-2" title="2">  <span class="op">*</span> {</a>
<a class="sourceLine" id="cb5-3" title="3">      <span class="kw">cursor</span>: <span class="fu">url(</span><span class="st">"https://0d077ef9e74d8.cdn.sohucs.com/rgaNVxD_png"</span><span class="fu">)</span><span class="op">,</span><span class="bu">auto</span><span class="at">!important</span></a>
<a class="sourceLine" id="cb5-4" title="4">  }</a></code></pre></div>
<h5 id="添加关于页面并使用居中引用来引用句子">添加“关于”页面，并使用居中引用来引用句子</h5>
<p>居中引用的HTML使用方法：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">&lt;blockquote</span><span class="ot"> class=</span><span class="st">"blockquote-center"</span><span class="kw">&gt;</span></a>
<a class="sourceLine" id="cb6-2" title="2">    弱小和无知不是生存的障碍，傲慢才是<span class="kw">&lt;br&gt;</span></a>
<a class="sourceLine" id="cb6-3" title="3">    <span class="kw">&lt;b&gt;</span>《三体》<span class="kw">&lt;/b&gt;</span></a>
<a class="sourceLine" id="cb6-4" title="4"><span class="kw">&lt;/blockquote&gt;</span></a></code></pre></div>
<p>效果： <img src="https://pic.superbed.cn/item/5cb9d2f03a213b04177eb09a"></p>
<h5 id="在回到顶部按钮上加入显示当前阅读进度的功能同时对该按钮的样式进行修改">在回到顶部按钮上加入显示当前阅读进度的功能,同时对该按钮的样式进行修改</h5>
<p>在主题配置文件中做如下修改：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb7-1" title="1"><span class="co"># Scroll percent label in b2t button.</span></a>
<a class="sourceLine" id="cb7-2" title="2">  <span class="fu">scrollpercent:</span><span class="at"> true        //false-&gt;true</span></a></code></pre></div>
<p>这个按钮原本的形状是方形的，同时里面的三条线是白色的，我将它的形状改成了圆角方形，线的颜色改成了淡蓝色,另外还增加了阴影效果。这也只需要在custom.styl中修改</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode css"><code class="sourceCode css"><a class="sourceLine" id="cb8-1" title="1"><span class="fu">.back-to-top</span> {</a>
<a class="sourceLine" id="cb8-2" title="2">    <span class="kw">line-height</span>: <span class="dv">1.5</span><span class="op">;</span></a>
<a class="sourceLine" id="cb8-3" title="3">    <span class="kw">right</span>: <span class="dv">29</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb8-4" title="4">    <span class="kw">color</span>: <span class="fu">rgb(</span><span class="dv">255</span><span class="op">,</span><span class="dv">255</span><span class="op">,</span><span class="dv">255</span><span class="fu">)</span><span class="op">;</span></a>
<a class="sourceLine" id="cb8-5" title="5">    <span class="kw">padding-right</span>: <span class="dv">5</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb8-6" title="6">    <span class="kw">padding-left</span>: <span class="dv">5</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb8-7" title="7">    <span class="kw">padding-top</span>: <span class="dv">2.5</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb8-8" title="8">    <span class="kw">padding-bottom</span>: <span class="dv">2.5</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb8-9" title="9">    <span class="kw">background-color</span>: <span class="fu">rgb(</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="fu">)</span><span class="op">;</span></a>
<a class="sourceLine" id="cb8-10" title="10">    <span class="kw">border-radius</span>: <span class="dv">3</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb8-11" title="11">    <span class="kw">box-shadow</span>: <span class="dv">0</span><span class="dt">px</span> <span class="dv">0</span><span class="dt">px</span> <span class="dv">10</span><span class="dt">px</span> <span class="dv">0</span><span class="dt">px</span> <span class="fu">rgba(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0.35</span><span class="fu">)</span><span class="op">;</span></a>
<a class="sourceLine" id="cb8-12" title="12">}</a></code></pre></div>
<h5 id="为文章边框加入阴影效果">为文章边框加入阴影效果。</h5>
<p>方法还是修改custom.styl</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode diff"><code class="sourceCode diff"><a class="sourceLine" id="cb9-1" title="1">.main-inner { </a>
<a class="sourceLine" id="cb9-2" title="2">    margin-top: 60px;</a>
<a class="sourceLine" id="cb9-3" title="3">    padding: 60px 60px 60px 60px;</a>
<a class="sourceLine" id="cb9-4" title="4">    background: #fff;</a>
<a class="sourceLine" id="cb9-5" title="5"><span class="va">+    box-shadow: 0px 10px 10px 0px rgba(0, 0, 0, 0.35);</span></a>
<a class="sourceLine" id="cb9-6" title="6">    opacity: 0.75;</a>
<a class="sourceLine" id="cb9-7" title="7">    min-height: 500px;</a>
<a class="sourceLine" id="cb9-8" title="8">}</a></code></pre></div>
<h5 id="取消页面上方黑边">取消页面上方黑边</h5>
<p>默认情况下，NexT会在页面的上方加一条黑边<del>到底为什么要做这种没用的事</del>，取消黑边的方法是在custom.styl中加入以下代码：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode css"><code class="sourceCode css"><a class="sourceLine" id="cb10-1" title="1"><span class="er">//取消页面上方的黑条</span></a>
<a class="sourceLine" id="cb10-2" title="2"><span class="fu">.headband</span> { <span class="kw">display</span>: <span class="dv">none</span><span class="op">;</span> }</a></code></pre></div>
<h5 id="修改侧边滚动条">修改侧边滚动条</h5>
<p>在custom.styl中加入以下代码：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode css"><code class="sourceCode css"><a class="sourceLine" id="cb11-1" title="1"><span class="er">//侧边滚动条</span></a>
<a class="sourceLine" id="cb11-2" title="2"><span class="in">::-webkit-scrollbar</span> {</a>
<a class="sourceLine" id="cb11-3" title="3">  <span class="kw">width</span>: <span class="dv">9</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-4" title="4">  <span class="kw">height</span>: <span class="dv">10</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-5" title="5">}</a>
<a class="sourceLine" id="cb11-6" title="6"><span class="in">::-webkit-scrollbar-button</span> {</a>
<a class="sourceLine" id="cb11-7" title="7">  <span class="kw">width</span>: <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-8" title="8">  <span class="kw">height</span>: <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-9" title="9">}</a>
<a class="sourceLine" id="cb11-10" title="10"><span class="in">::-webkit-scrollbar-button:start:increment</span><span class="op">,</span><span class="in">::-webkit-scrollbar-button:end:decrement</span> {</a>
<a class="sourceLine" id="cb11-11" title="11">  <span class="kw">display</span>: <span class="dv">none</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-12" title="12">}</a>
<a class="sourceLine" id="cb11-13" title="13"><span class="in">::-webkit-scrollbar-corner</span> {</a>
<a class="sourceLine" id="cb11-14" title="14">  <span class="kw">display</span>: <span class="dv">block</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-15" title="15">}</a>
<a class="sourceLine" id="cb11-16" title="16"><span class="in">::-webkit-scrollbar-thumb</span> {</a>
<a class="sourceLine" id="cb11-17" title="17">  <span class="kw">border-radius</span>: <span class="dv">8</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-18" title="18">  <span class="kw">background-color</span>: <span class="fu">rgba(</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">.2</span><span class="fu">)</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-19" title="19">}</a>
<a class="sourceLine" id="cb11-20" title="20"><span class="in">::-webkit-scrollbar-thumb:hover</span> {</a>
<a class="sourceLine" id="cb11-21" title="21">  <span class="kw">border-radius</span>: <span class="dv">8</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-22" title="22">  <span class="kw">background-color</span>: <span class="fu">rgba(</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">.5</span><span class="fu">)</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-23" title="23">}</a>
<a class="sourceLine" id="cb11-24" title="24"><span class="in">::-webkit-scrollbar-track</span><span class="op">,</span><span class="in">::-webkit-scrollbar-thumb</span> {</a>
<a class="sourceLine" id="cb11-25" title="25">  <span class="kw">border-right</span>: <span class="dv">1</span><span class="dt">px</span> <span class="dv">solid</span> <span class="dv">transparent</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-26" title="26">  <span class="kw">border-left</span>: <span class="dv">1</span><span class="dt">px</span> <span class="dv">solid</span> <span class="dv">transparent</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-27" title="27">}</a>
<a class="sourceLine" id="cb11-28" title="28"><span class="in">::-webkit-scrollbar-track:hover</span> {</a>
<a class="sourceLine" id="cb11-29" title="29">  <span class="kw">background-color</span>: <span class="fu">rgba(</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="fu">)</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-30" title="30">}</a>
<a class="sourceLine" id="cb11-31" title="31"><span class="in">::-webkit-scrollbar-button:start</span> {</a>
<a class="sourceLine" id="cb11-32" title="32">  <span class="kw">width</span>: <span class="dv">10</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-33" title="33">  <span class="kw">height</span>: <span class="dv">10</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-34" title="34">  <span class="kw">background</span>: <span class="fu">url(</span><span class="st">../images/scrollbar_arrow.png</span><span class="fu">)</span> <span class="dv">no-repeat</span> <span class="dv">0</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-35" title="35">}</a>
<a class="sourceLine" id="cb11-36" title="36"><span class="in">::-webkit-scrollbar-button:start:hover</span> {</a>
<a class="sourceLine" id="cb11-37" title="37">  <span class="kw">background</span>: <span class="fu">url(</span><span class="st">../images/scrollbar_arrow.png</span><span class="fu">)</span> <span class="dv">no-repeat</span> <span class="dv">-15</span><span class="dt">px</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-38" title="38">}</a>
<a class="sourceLine" id="cb11-39" title="39"><span class="in">::-webkit-scrollbar-button:start:active</span> {</a>
<a class="sourceLine" id="cb11-40" title="40">  <span class="kw">background</span>: <span class="fu">url(</span><span class="st">../images/scrollbar_arrow.png</span><span class="fu">)</span> <span class="dv">no-repeat</span> <span class="dv">-30</span><span class="dt">px</span> <span class="dv">0</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-41" title="41">}</a>
<a class="sourceLine" id="cb11-42" title="42"><span class="in">::-webkit-scrollbar-button:end</span> {</a>
<a class="sourceLine" id="cb11-43" title="43">  <span class="kw">width</span>: <span class="dv">10</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-44" title="44">  <span class="kw">height</span>: <span class="dv">10</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-45" title="45">  <span class="kw">background</span>: <span class="fu">url(</span><span class="st">../images/scrollbar_arrow.png</span><span class="fu">)</span> <span class="dv">no-repeat</span> <span class="dv">0</span> <span class="dv">-18</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-46" title="46">}</a>
<a class="sourceLine" id="cb11-47" title="47"><span class="in">::-webkit-scrollbar-button:end:hover</span> {</a>
<a class="sourceLine" id="cb11-48" title="48">  <span class="kw">background</span>: <span class="fu">url(</span><span class="st">../images/scrollbar_arrow.png</span><span class="fu">)</span> <span class="dv">no-repeat</span> <span class="dv">-15</span><span class="dt">px</span> <span class="dv">-18</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-49" title="49">}</a>
<a class="sourceLine" id="cb11-50" title="50"><span class="in">::-webkit-scrollbar-button:end:active</span> {</a>
<a class="sourceLine" id="cb11-51" title="51">  <span class="kw">background</span>: <span class="fu">url(</span><span class="st">../images/scrollbar_arrow.png</span><span class="fu">)</span> <span class="dv">no-repeat</span> <span class="dv">-30</span><span class="dt">px</span> <span class="dv">-18</span><span class="dt">px</span><span class="op">;</span></a>
<a class="sourceLine" id="cb11-52" title="52">}</a></code></pre></div>
<h5 id="修改网站标题为--xgeminix--修改网站副标题为-tayes-blog">修改网站标题为 -xGeminix- ;修改网站副标题为 TayE's Blog</h5>
<p>在blog_config.yml中找到title和subtitle修改即可。</p>
<div class="note warning">
<p>
这两项修改都需要部署后才能看到效果！
</p>
</div>
<h5 id="加入了分享功能">加入了分享功能</h5>
<p>方法是在主题的配置文件中找到下面这一段，然后把enable的false改为true，再根据自己想要的样式将float或postbottom中的enable改为true</p>
<div class="note info">
<p>
因为微信分享有点问题(二维码图片无法加载)，而我又不会修复，所以就删掉了这一功能
</p>
</div>
<h5 id="保存当前阅读进度下次阅读时直接从上次结束阅读的位置开始">保存当前阅读进度，下次阅读时直接从上次结束阅读的位置开始</h5>
<p>方法是将主题配置文件的save_scroll改为true</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb12-1" title="1"><span class="co"># Automatically saving scroll position on each post/page in cookies.</span></a>
<a class="sourceLine" id="cb12-2" title="2"><span class="fu">save_scroll:</span><span class="at"> true    //false-&gt;true</span></a></code></pre></div>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>个性化</tag>
        <tag>美化</tag>
        <tag>不务正业系列</tag>
        <tag>不折腾会死系列</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中的展开语法</title>
    <url>/2020/08/04/JS%E4%B8%AD%E7%9A%84%E5%B1%95%E5%BC%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p><img src="https://pic.downk.cc/item/5f29068a14195aa594529081.jpg"> <span id="more"></span></p>
<p>看代码的时候遇到了下面这样一段：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">function</span> <span class="at">generateSkeleton</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb1-2" title="2">  <span class="co">// 文字节点</span></a>
<a class="sourceLine" id="cb1-3" title="3">  <span class="op">;</span>[...<span class="va">document</span>.<span class="at">querySelectorAll</span>(<span class="st">'*'</span>)]</a>
<a class="sourceLine" id="cb1-4" title="4">    .<span class="at">filter</span>(</a>
<a class="sourceLine" id="cb1-5" title="5">      (node) <span class="kw">=&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6">        <span class="op">!</span>[<span class="st">'script'</span><span class="op">,</span> <span class="st">'style'</span><span class="op">,</span> <span class="st">'html'</span><span class="op">,</span> <span class="st">'body'</span><span class="op">,</span> <span class="st">'head'</span><span class="op">,</span> <span class="st">'title'</span>].<span class="at">includes</span>(</a>
<a class="sourceLine" id="cb1-7" title="7">          <span class="va">node</span>.<span class="va">tagName</span>.<span class="at">toLowerCase</span>()</a>
<a class="sourceLine" id="cb1-8" title="8">        )</a>
<a class="sourceLine" id="cb1-9" title="9">    )</a>
<a class="sourceLine" id="cb1-10" title="10">    .<span class="at">map</span>((node) <span class="kw">=&gt;</span> [...<span class="va">node</span>.<span class="at">childNodes</span>].<span class="at">filter</span>((node) <span class="kw">=&gt;</span> node <span class="kw">instanceof</span> Text))</a>
<a class="sourceLine" id="cb1-11" title="11">    .<span class="at">flat</span>(<span class="kw">Infinity</span>)</a>
<a class="sourceLine" id="cb1-12" title="12">    .<span class="at">forEach</span>((node) <span class="kw">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb1-13" title="13">      <span class="kw">let</span> span <span class="op">=</span> <span class="va">document</span>.<span class="at">createElement</span>(<span class="st">'span'</span>)</a>
<a class="sourceLine" id="cb1-14" title="14">      <span class="va">node</span>.<span class="va">parentNode</span>.<span class="at">insertBefore</span>(span<span class="op">,</span> node)</a>
<a class="sourceLine" id="cb1-15" title="15">      <span class="va">span</span>.<span class="at">appendChild</span>(node)</a>
<a class="sourceLine" id="cb1-16" title="16">      <span class="va">span</span>.<span class="at">style</span> <span class="op">=</span> <span class="vs">`</span></a>
<a class="sourceLine" id="cb1-17" title="17"><span class="vs">        background: #f2f2f2;</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="vs">        color: transparent !important;</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="vs">      `</span></a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="op">}</span>)</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="op">}</span></a></code></pre></div>
<p>(代码链接：https://zhuanlan.zhihu.com/p/166009071)</p>
<p>发现有“...”这样的语法。查了一下文档，原来这是js中的展开语法。MDN上的定义为:</p>
<blockquote>
<p><strong>展开语法(Spread syntax),</strong> 可以在函数调用/数组构造时, 将数组表达式或者string在语法层面展开；还可以在构造字面量对象时, 将对象表达式按key-value的方式展开。</p>
</blockquote>
<p>以上面代码中的</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb2-1" title="1">...<span class="va">document</span>.<span class="at">querySelectorAll</span>(<span class="st">'*'</span>)</a></code></pre></div>
<p>为例，在chrome中的运行结果是：</p>
<p><img src="https://pic.downk.cc/item/5f29032d14195aa59450fba2.jpg"></p>
<p>在这里，...把一个nodelist展开来，作为Array的构造参数。</p>
<p>再看一个在String中应用的一个例子</p>
<p><img src="https://pic.downk.cc/item/5f29040c14195aa5945151b3.jpg"></p>
<p>不难明白，“...“的作用其实就是把nodelist，string等可迭代的东西展开来。</p>
]]></content>
  </entry>
  <entry>
    <title>Knapsack Cryptosystem（2019牛客多校第9场  D题）</title>
    <url>/2019/08/16/Knapsack-Cryptosystem/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H65115833a3a8484fbe57a426ff7b309fM.jpg"></p>
<p>From <strong>Google Earth</strong></p>
<span id="more"></span>
<p><a href="https://ac.nowcoder.com/acm/contest/889/D">Knapsack Cryptosystem</a></p>
<p>题意很简单，是说有一个排好序的升序正整数序列，现在给出总和s，让你从数列中挑出若干个数，使得它们相加后总和为s。</p>
<p>第一反应就是dfs，因为之前做过几乎一模一样的题，且这题数据范围很小，数列最长才36。但事实证明，dfs会T飞......无论怎么剪枝都没用。</p>
<p>正确解法是，将数列折半，对于前一半，状压枚举出每一种选取情况的总和，将它们存入一个map里面。对于后一半，依然是状压枚举每种选取情况的总和，记作<span class="math inline">\(s_i\)</span>，在算出<span class="math inline">\(s_i\)</span>后，二分lower_bound()在map中找<span class="math inline">\(s-s_i\)</span>，如果找到了，就可以输出结果了，答案就是此时后半的选取情况以及<span class="math inline">\(s-s_i\)</span>对应的前半选取情况。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define lowbit</span>(x)<span class="pp"> </span>(x&amp;(-x))</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-24" title="24">ll s,arr[<span class="dv">45</span>];</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">int</span> p,q,n;</a>
<a class="sourceLine" id="cb1-26" title="26">map&lt;ll,<span class="dt">int</span>&gt; mp;</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">int</span> to[(<span class="dv">1</span>&lt;&lt;<span class="dv">18</span>)+<span class="dv">10</span>];</a>
<a class="sourceLine" id="cb1-28" title="28"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb1-29" title="29">{</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="dt">int</span> msk=<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-31" title="31">    to[<span class="dv">1</span>]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=<span class="dv">17</span>;i++){</a>
<a class="sourceLine" id="cb1-33" title="33">        to[msk]=i;</a>
<a class="sourceLine" id="cb1-34" title="34">        msk&lt;&lt;=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-35" title="35">    }</a>
<a class="sourceLine" id="cb1-36" title="36">}</a>
<a class="sourceLine" id="cb1-37" title="37"><span class="dt">void</span> show(<span class="dt">int</span> mskp,<span class="dt">int</span> mskq)</a>
<a class="sourceLine" id="cb1-38" title="38">{</a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;p;i++)</a>
<a class="sourceLine" id="cb1-40" title="40">        printf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,<span class="dv">1</span>&amp;(mskp&gt;&gt;i));</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;q;i++)</a>
<a class="sourceLine" id="cb1-42" title="42">        printf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,<span class="dv">1</span>&amp;(mskq&gt;&gt;i));</a>
<a class="sourceLine" id="cb1-43" title="43">    printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-44" title="44">}</a>
<a class="sourceLine" id="cb1-45" title="45"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-46" title="46">{</a>
<a class="sourceLine" id="cb1-47" title="47">    init();</a>
<a class="sourceLine" id="cb1-48" title="48">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%lld</span><span class="st">"</span>,&amp;n,&amp;s);</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-50" title="50">        scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,&amp;arr[i]);</a>
<a class="sourceLine" id="cb1-51" title="51">    p=(n&gt;&gt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-52" title="52">    q=n-p;</a>
<a class="sourceLine" id="cb1-53" title="53">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;(<span class="dv">1</span>&lt;&lt;p);i++){</a>
<a class="sourceLine" id="cb1-54" title="54">        ll tmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-55" title="55">        <span class="cf">for</span>(<span class="dt">int</span> j=i;j;j-=(lowbit(j)))</a>
<a class="sourceLine" id="cb1-56" title="56">            tmp+=arr[to[lowbit(j)]];        </a>
<a class="sourceLine" id="cb1-57" title="57">            <span class="co">/*</span></a>
<a class="sourceLine" id="cb1-58" title="58"><span class="co">            lowbit(x)返回x最右端的1所表示的数.</span></a>
<a class="sourceLine" id="cb1-59" title="59"><span class="co">            如,9 = 1001 ,则lowbit(9) = 1 = 1;</span></a>
<a class="sourceLine" id="cb1-60" title="60"><span class="co">            8 = 100 ,则lowbit(8) = 100 = 8. </span></a>
<a class="sourceLine" id="cb1-61" title="61"><span class="co">            */</span> </a>
<a class="sourceLine" id="cb1-62" title="62">        mp[tmp]=i;</a>
<a class="sourceLine" id="cb1-63" title="63">    }</a>
<a class="sourceLine" id="cb1-64" title="64">    <span class="dt">bool</span> flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-65" title="65">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;(<span class="dv">1</span>&lt;&lt;q);i++){</a>
<a class="sourceLine" id="cb1-66" title="66">        ll tmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-67" title="67">        <span class="cf">for</span>(<span class="dt">int</span> j=i;j;j-=lowbit(j))</a>
<a class="sourceLine" id="cb1-68" title="68">            tmp+=arr[to[lowbit(j)]+p];</a>
<a class="sourceLine" id="cb1-69" title="69">        <span class="kw">auto</span> it=mp.lower_bound(s-tmp);</a>
<a class="sourceLine" id="cb1-70" title="70">        <span class="cf">if</span>(it-&gt;first+tmp==s){</a>
<a class="sourceLine" id="cb1-71" title="71">            show(it-&gt;second,i);flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-72" title="72">            <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-73" title="73">        }</a>
<a class="sourceLine" id="cb1-74" title="74">    }</a>
<a class="sourceLine" id="cb1-75" title="75">    <span class="cf">if</span>(!flag)    printf(<span class="st">"-1</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-76" title="76">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-77" title="77">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>暴力</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C++</tag>
        <tag>牛客多校</tag>
        <tag>状压+暴力</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ - 1330 Nearest Common Ancestors (Tarjan求LCA模板)</title>
    <url>/2019/08/07/POJ-1330-Nearest-Common-Ancestors-Tarjan%E6%B1%82LCA%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Hefa1fd510a004e5b986687c88e78c004A.jpg"></p>
<p>From <strong>Google Earth</strong></p>
<span id="more"></span>
<p><a href="https://cn.vjudge.net/problem/POJ-1330">Nearest Common Ancestors</a></p>
<p>其实就是LCA的模板题......屯一下板子</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">struct</span> edge{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> to;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> next; </a>
<a class="sourceLine" id="cb1-26" title="26">};</a>
<a class="sourceLine" id="cb1-27" title="27">edge es[maxn];</a>
<a class="sourceLine" id="cb1-28" title="28"><span class="dt">int</span> head[maxn];</a>
<a class="sourceLine" id="cb1-29" title="29"><span class="dt">int</span> cnt;</a>
<a class="sourceLine" id="cb1-30" title="30"><span class="dt">void</span> add(<span class="dt">int</span> u,<span class="dt">int</span> v)</a>
<a class="sourceLine" id="cb1-31" title="31">{</a>
<a class="sourceLine" id="cb1-32" title="32">    es[cnt].to=v;</a>
<a class="sourceLine" id="cb1-33" title="33">    es[cnt].next=head[u];</a>
<a class="sourceLine" id="cb1-34" title="34">    head[u]=cnt++;</a>
<a class="sourceLine" id="cb1-35" title="35">}</a>
<a class="sourceLine" id="cb1-36" title="36"><span class="dt">int</span> in[maxn];</a>
<a class="sourceLine" id="cb1-37" title="37"><span class="dt">int</span> fa[maxn];</a>
<a class="sourceLine" id="cb1-38" title="38"><span class="dt">void</span> init(<span class="dt">int</span> n)</a>
<a class="sourceLine" id="cb1-39" title="39">{</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-41" title="41">        fa[i]=i;</a>
<a class="sourceLine" id="cb1-42" title="42">}</a>
<a class="sourceLine" id="cb1-43" title="43"><span class="dt">int</span> find_fa(<span class="dt">int</span> x)</a>
<a class="sourceLine" id="cb1-44" title="44">{</a>
<a class="sourceLine" id="cb1-45" title="45">    <span class="cf">if</span>(fa[x]!=x)    </a>
<a class="sourceLine" id="cb1-46" title="46">        fa[x]=find_fa(fa[x]);</a>
<a class="sourceLine" id="cb1-47" title="47">    <span class="cf">return</span> fa[x]; </a>
<a class="sourceLine" id="cb1-48" title="48">}</a>
<a class="sourceLine" id="cb1-49" title="49"><span class="dt">bool</span> vis[maxn];</a>
<a class="sourceLine" id="cb1-50" title="50"><span class="dt">void</span> join(<span class="dt">int</span> x,<span class="dt">int</span> y)</a>
<a class="sourceLine" id="cb1-51" title="51">{</a>
<a class="sourceLine" id="cb1-52" title="52">    <span class="dt">int</span> fx=find_fa(x);</a>
<a class="sourceLine" id="cb1-53" title="53">    <span class="dt">int</span> fy=find_fa(y);</a>
<a class="sourceLine" id="cb1-54" title="54">    <span class="cf">if</span>(fx!=fy){</a>
<a class="sourceLine" id="cb1-55" title="55">        fa[fy]=fx;</a>
<a class="sourceLine" id="cb1-56" title="56">    }</a>
<a class="sourceLine" id="cb1-57" title="57">}</a>
<a class="sourceLine" id="cb1-58" title="58"><span class="dt">int</span> ans;</a>
<a class="sourceLine" id="cb1-59" title="59"><span class="dt">int</span> qx,qy;</a>
<a class="sourceLine" id="cb1-60" title="60"><span class="dt">void</span> lca(<span class="dt">int</span> u)</a>
<a class="sourceLine" id="cb1-61" title="61">{</a>
<a class="sourceLine" id="cb1-62" title="62">    <span class="cf">for</span>(<span class="dt">int</span> i=head[u];i!=-<span class="dv">1</span>;i=es[i].next){</a>
<a class="sourceLine" id="cb1-63" title="63">        <span class="dt">int</span> v=es[i].to;</a>
<a class="sourceLine" id="cb1-64" title="64">        lca(v);</a>
<a class="sourceLine" id="cb1-65" title="65">        join(u,v);</a>
<a class="sourceLine" id="cb1-66" title="66">        vis[v]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-67" title="67">    }</a>
<a class="sourceLine" id="cb1-68" title="68">    <span class="cf">if</span>(qx==u&amp;&amp;vis[qy])</a>
<a class="sourceLine" id="cb1-69" title="69">        ans=find_fa(qy);</a>
<a class="sourceLine" id="cb1-70" title="70">    <span class="cf">if</span>(qy==u&amp;&amp;vis[qx])</a>
<a class="sourceLine" id="cb1-71" title="71">        ans=find_fa(qx);</a>
<a class="sourceLine" id="cb1-72" title="72">}</a>
<a class="sourceLine" id="cb1-73" title="73"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-74" title="74">{</a>
<a class="sourceLine" id="cb1-75" title="75">    IOS;</a>
<a class="sourceLine" id="cb1-76" title="76">    <span class="dt">int</span> t;cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-77" title="77">    <span class="cf">while</span>(t--){;</a>
<a class="sourceLine" id="cb1-78" title="78">        mst(vis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-79" title="79">        mst(head,-<span class="dv">1</span>);mst(in,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-80" title="80">        ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-81" title="81">        <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-82" title="82">        init(n);</a>
<a class="sourceLine" id="cb1-83" title="83">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n-<span class="dv">1</span>;i++){</a>
<a class="sourceLine" id="cb1-84" title="84">            <span class="dt">int</span> u,v;</a>
<a class="sourceLine" id="cb1-85" title="85">            cin&gt;&gt;u&gt;&gt;v;</a>
<a class="sourceLine" id="cb1-86" title="86">            add(u,v);in[v]++;</a>
<a class="sourceLine" id="cb1-87" title="87">        }</a>
<a class="sourceLine" id="cb1-88" title="88">        <span class="dt">int</span> rt;</a>
<a class="sourceLine" id="cb1-89" title="89">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-90" title="90">            <span class="cf">if</span>(in[i]==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-91" title="91">                rt=i;<span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-92" title="92">            }</a>
<a class="sourceLine" id="cb1-93" title="93">        }</a>
<a class="sourceLine" id="cb1-94" title="94">        cin&gt;&gt;qx&gt;&gt;qy;</a>
<a class="sourceLine" id="cb1-95" title="95">        lca(rt);</a>
<a class="sourceLine" id="cb1-96" title="96">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-97" title="97">    }</a>
<a class="sourceLine" id="cb1-98" title="98">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-99" title="99">}</a></code></pre></div>
]]></content>
  </entry>
  <entry>
    <title>POJ - 3734 Block</title>
    <url>/2019/02/22/POJ-3734-Block/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/POJ-3734">Block</a></p>
<p>  这是冬训的一道关于矩阵快速幂的题目，但我硬是想不出递推式，于是只好硬推公式(<del>同时部分参考题解</del>)</p>
<span id="more"></span>
<p>推导过程如下图：</p>
<p><img src="https://pic.superbed.cn/item/5c7009045f3e509ed9471ca9"></p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-9" title="9">ll mod=<span class="dv">10007</span>;</a>
<a class="sourceLine" id="cb1-10" title="10">ll fpow(ll a,ll b)</a>
<a class="sourceLine" id="cb1-11" title="11">{</a>
<a class="sourceLine" id="cb1-12" title="12">    ll ans=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="cf">while</span>(b)</a>
<a class="sourceLine" id="cb1-14" title="14">    {</a>
<a class="sourceLine" id="cb1-15" title="15">        <span class="cf">if</span>(b&amp;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-16" title="16">            ans=(ans*a)%mod;</a>
<a class="sourceLine" id="cb1-17" title="17">        a=(a*a)%mod;</a>
<a class="sourceLine" id="cb1-18" title="18">        b&gt;&gt;=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-19" title="19">    }</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-21" title="21">}</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-23" title="23">{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-25" title="25">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-27" title="27">    {</a>
<a class="sourceLine" id="cb1-28" title="28">        <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-29" title="29">        cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-30" title="30">        ll ans=((fpow(<span class="dv">2</span>,n-<span class="dv">1</span>)-<span class="dv">1</span>)*fpow(<span class="dv">2</span>,n-<span class="dv">1</span>)+fpow(<span class="dv">2</span>,n)+mod)%mod;</a>
<a class="sourceLine" id="cb1-31" title="31">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-32" title="32">    }</a>
<a class="sourceLine" id="cb1-33" title="33">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ1015 - Jury Compromise</title>
    <url>/2019/07/22/POJ1015-Jury-Compromise/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/HTB1zWoua1T2gK0jSZFvq6xnFXXaO.jpg"></p>
<p>Photo by Johannes Plenio from Pexels <span id="more"></span> <a href="https://cn.vjudge.net/problem/POJ-1015">Jury Compromise</a></p>
<p>一道dp题，感觉有一定的难度。</p>
<p>一开始的时候发现它很像是01背包，将每个人看作是一件物品，需要取的人数看作是背包的总容量，求要怎样取物品(选人)才能使得<span class="math inline">\(\sum p_i-\sum d_i\)</span>最小；同时，如果存在<span class="math inline">\(\sum p_i-\sum d_i\)</span>相同的情况，则取<span class="math inline">\(\sum p_i+\sum d_i\)</span>较大的那一种方案。</p>
<p>一开始尝试了这样的写法，</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="dt">int</span> last=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-2" title="2"><span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="cf">for</span>(<span class="dt">int</span> j=m;j&gt;=<span class="dv">1</span>;j--){</a>
<a class="sourceLine" id="cb1-4" title="4">        <span class="cf">if</span>((dp1[j-<span class="dv">1</span>]+<span class="va">abs_</span>(d[i]-p[i])&lt;dp1[j])||(dp1[j-<span class="dv">1</span>]+<span class="va">abs_</span>(d[i]-p[i])==dp1[j]&amp;&amp;dp2[j-<span class="dv">1</span>]+d[i]+p[i]&gt;dp2[j])){</a>
<a class="sourceLine" id="cb1-5" title="5">            dp1[j]=dp1[j-<span class="dv">1</span>]+<span class="va">abs_</span>(d[i]-p[i]);</a>
<a class="sourceLine" id="cb1-6" title="6">            dp2[j]=dp2[j-<span class="dv">1</span>]+(d[i]+p[i]);</a>
<a class="sourceLine" id="cb1-7" title="7">            pre[i]=last;</a>
<a class="sourceLine" id="cb1-8" title="8">            last=i;        </a>
<a class="sourceLine" id="cb1-9" title="9">        }</a>
<a class="sourceLine" id="cb1-10" title="10">    }</a>
<a class="sourceLine" id="cb1-11" title="11">}</a></code></pre></div>
<p>emmmmm很明显是不行的OTZ</p>
<p>后来又尝试了另一种写法，即是使用一个二维dp数组，参照<a href="https://www.luogu.org/problemnew/show/P1855">洛谷P1555</a>的做法来写，将<span class="math inline">\(\sum p_i+\sum d_i\)</span>固定并对它进行枚举，代码大致长这样：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="cf">for</span>(<span class="dt">int</span> k=<span class="dv">1</span>;k&lt;=n;k++){</a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">800</span>;i&gt;=<span class="dv">0</span>;i--){</a>
<a class="sourceLine" id="cb2-3" title="3">        <span class="cf">for</span>(<span class="dt">int</span> j=m;j&gt;=<span class="dv">1</span>;j--){</a>
<a class="sourceLine" id="cb2-4" title="4">            <span class="dt">int</span> temp=dp[i][j];</a>
<a class="sourceLine" id="cb2-5" title="5">            dp[i][j]=min(dp[i][j],dp[i-d[k]-p[k]][j-<span class="dv">1</span>]+<span class="va">abs_</span>(d[k]-p[k]));</a>
<a class="sourceLine" id="cb2-6" title="6">            <span class="cf">if</span>(dp[i][j]!=temp){</a>
<a class="sourceLine" id="cb2-7" title="7">                pre[k]=last;</a>
<a class="sourceLine" id="cb2-8" title="8">                last=k;</a>
<a class="sourceLine" id="cb2-9" title="9">            }</a>
<a class="sourceLine" id="cb2-10" title="10">        }</a>
<a class="sourceLine" id="cb2-11" title="11">    }</a>
<a class="sourceLine" id="cb2-12" title="12">}</a></code></pre></div>
<p>但这种做法也不可......但至少固定住一个这一想法是正确的。</p>
<p>正确的做法应该是固定住差，然后求能使和最大的方案。dp[j][k]表示在取j人，差为k的所有方案中，和最大的那个方案的和。对于方案dp[j][k]我们不难发现它是由某个方案dp[j-1][x]递推而来的。我们要找的是这样的一个候选人i：此人在方案dp[j-1][x]中没有被选中，且此人满足<span class="math inline">\(x+p[i]-d[j]=k\)</span>。找出这个人，并在所有满足要求的dp[j-1][x]中，找到和最大的那一个，从而转移的到dp[j][k]。这题还需要输出被选的人，其实就是记录路径。只需要记录下转移得到dp[j][k]时的候选人i即可。另外，由于计算差的时候可能会产生负数从而影响数组操作，所以要做一定的偏移，保证不会产生负数。因为差值的绝对值不会超过20*m，所以将整个差值可能出现的区间向右偏移20*m即可。还有一点，在计算prosecution sum和defence sum时，因为dp求得的时<span class="math inline">\(\sum p_i+\sum d_i\)</span>，所以要做一定的处理得到<span class="math inline">\(\sum p_i\)</span>和<span class="math inline">\(\sum d_i\)</span>。具体做法是： <span class="math display">\[
\sum p_i = \frac{\sum (p_i+d_i) + (\sum p_i - \sum d_i)}{2}\\
\sum d_i = \frac{\sum (p_i+d_i) - (\sum p_i - \sum d_i)}{2}
\]</span></p>
<p>实际操作时还要记得减去偏移把区间移回来</p>
<p>更详细的见注释</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb3-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-23" title="23"><span class="dt">int</span> d[<span class="dv">300</span>],p[<span class="dv">300</span>];</a>
<a class="sourceLine" id="cb3-24" title="24"><span class="dt">int</span> dp[<span class="dv">30</span>][<span class="dv">1000</span>];        </a>
<a class="sourceLine" id="cb3-25" title="25"><span class="dt">int</span> path[<span class="dv">30</span>][<span class="dv">1000</span>];</a>
<a class="sourceLine" id="cb3-26" title="26"><span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb3-27" title="27">vector&lt;<span class="dt">int</span>&gt; ans;</a>
<a class="sourceLine" id="cb3-28" title="28"><span class="co">//dp[j][k]表示在取j人,差为k的所有方案中,和最大的那个方案的和 </span></a>
<a class="sourceLine" id="cb3-29" title="29"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-30" title="30">{</a>
<a class="sourceLine" id="cb3-31" title="31">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-32" title="32">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m)!=EOF&amp;&amp;n&amp;&amp;m){</a>
<a class="sourceLine" id="cb3-33" title="33">        <span class="dt">int</span> sumd=<span class="dv">0</span>;<span class="dt">int</span> sump=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-34" title="34">        mst(dp,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-35" title="35">        mst(path,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb3-36" title="36">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb3-37" title="37">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;p[i],&amp;d[i]);</a>
<a class="sourceLine" id="cb3-38" title="38">        <span class="dt">int</span> offset=<span class="dv">20</span>*m;        <span class="co">//因为差所在的区间为[-20*m,20*m],所以偏移为20*m </span></a>
<a class="sourceLine" id="cb3-39" title="39">        dp[<span class="dv">0</span>][offset]=<span class="dv">0</span>;        <span class="co">//相当于dp[0][0]=0 </span></a>
<a class="sourceLine" id="cb3-40" title="40">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;m;j++){    <span class="co">//从1个人推到m个人 </span></a>
<a class="sourceLine" id="cb3-41" title="41">            <span class="cf">for</span>(<span class="dt">int</span> k=<span class="dv">0</span>;k&lt;=offset*<span class="dv">2</span>;k++){    <span class="co">//偏移后,差出现的区间在[0,20*m] </span></a>
<a class="sourceLine" id="cb3-42" title="42">                <span class="cf">if</span>(dp[j][k]&gt;=<span class="dv">0</span>){        <span class="co">//如果该方案存在 </span></a>
<a class="sourceLine" id="cb3-43" title="43">                    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){    <span class="co">//枚举n个人 </span></a>
<a class="sourceLine" id="cb3-44" title="44">                        <span class="cf">if</span>(dp[j][k]+d[i]+p[i]&gt;dp[j+<span class="dv">1</span>][k+p[i]-d[i]]){</a>
<a class="sourceLine" id="cb3-45" title="45">                            <span class="dt">int</span> tmp1=j;</a>
<a class="sourceLine" id="cb3-46" title="46">                            <span class="dt">int</span> tmp2=k;</a>
<a class="sourceLine" id="cb3-47" title="47">                            <span class="cf">while</span>(tmp1&gt;<span class="dv">0</span>&amp;&amp;path[tmp1][tmp2]!=i){        <span class="co">//检查之前i这个人之前是否出现过 </span></a>
<a class="sourceLine" id="cb3-48" title="48">                                tmp2-=p[path[tmp1][tmp2]]-d[path[tmp1][tmp2]];</a>
<a class="sourceLine" id="cb3-49" title="49">                                tmp1--;</a>
<a class="sourceLine" id="cb3-50" title="50">                            }</a>
<a class="sourceLine" id="cb3-51" title="51">                            <span class="cf">if</span>(tmp1==<span class="dv">0</span>){        <span class="co">//i没有出现过 </span></a>
<a class="sourceLine" id="cb3-52" title="52">                                dp[j+<span class="dv">1</span>][k+p[i]-d[i]]=dp[j][k]+d[i]+p[i];</a>
<a class="sourceLine" id="cb3-53" title="53">                                path[j+<span class="dv">1</span>][k+p[i]-d[i]]=i;</a>
<a class="sourceLine" id="cb3-54" title="54">                            }</a>
<a class="sourceLine" id="cb3-55" title="55">                        }</a>
<a class="sourceLine" id="cb3-56" title="56">                    }</a>
<a class="sourceLine" id="cb3-57" title="57">                }</a>
<a class="sourceLine" id="cb3-58" title="58">            }</a>
<a class="sourceLine" id="cb3-59" title="59">        }</a>
<a class="sourceLine" id="cb3-60" title="60">        <span class="dt">int</span> tmp1,tmp2;</a>
<a class="sourceLine" id="cb3-61" title="61">        tmp1=offset;</a>
<a class="sourceLine" id="cb3-62" title="62">        tmp2=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-63" title="63">        <span class="dt">int</span> maxi=-INF;<span class="dt">int</span> tag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-64" title="64">        <span class="cf">while</span>(dp[m][tmp1+tmp2]&lt;<span class="dv">0</span>&amp;&amp;dp[m][tmp1-tmp2]&lt;<span class="dv">0</span>)        </a>
<a class="sourceLine" id="cb3-65" title="65">            tmp2++;</a>
<a class="sourceLine" id="cb3-66" title="66">        <span class="dt">int</span> sub;</a>
<a class="sourceLine" id="cb3-67" title="67">        <span class="cf">if</span>(dp[m][tmp1+tmp2]&gt;dp[m][tmp1-tmp2])</a>
<a class="sourceLine" id="cb3-68" title="68">            sub=tmp1+tmp2;</a>
<a class="sourceLine" id="cb3-69" title="69">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb3-70" title="70">            sub=tmp1-tmp2;</a>
<a class="sourceLine" id="cb3-71" title="71">        <span class="co">//从中间开始找第一个可用的方案,对应的差值就是所求最小差值</span></a>
<a class="sourceLine" id="cb3-72" title="72">        <span class="co">//然而这是为什么呢...... </span></a>
<a class="sourceLine" id="cb3-73" title="73">        sump=(dp[m][sub]+(sub-offset))/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb3-74" title="74">        sumd=(dp[m][sub]-(sub-offset))/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb3-75" title="75">        printf(<span class="st">"Jury #</span><span class="sc">%d\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb3-76" title="76">        printf(<span class="st">"Best jury has value </span><span class="sc">%d</span><span class="st"> for prosecution and value </span><span class="sc">%d</span><span class="st"> for defence:</span><span class="sc">\n</span><span class="st">"</span>,sump,sumd);</a>
<a class="sourceLine" id="cb3-77" title="77">        ans.clear();</a>
<a class="sourceLine" id="cb3-78" title="78">        <span class="dt">int</span> j;<span class="dt">int</span> i;</a>
<a class="sourceLine" id="cb3-79" title="79">        <span class="cf">for</span>(i=<span class="dv">1</span>,j=m;i&lt;=m;i++,j--){        <span class="co">//根据路径找答案 </span></a>
<a class="sourceLine" id="cb3-80" title="80">            <span class="dt">int</span> now=path[j][sub];</a>
<a class="sourceLine" id="cb3-81" title="81">            ans.push_back(now);</a>
<a class="sourceLine" id="cb3-82" title="82">            sub-=p[now]-d[now];</a>
<a class="sourceLine" id="cb3-83" title="83">        }</a>
<a class="sourceLine" id="cb3-84" title="84">        sort(ans.begin(),ans.end());</a>
<a class="sourceLine" id="cb3-85" title="85">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;ans.size();i++)</a>
<a class="sourceLine" id="cb3-86" title="86">            printf(<span class="st">" </span><span class="sc">%d</span><span class="st">"</span>,ans[i]);</a>
<a class="sourceLine" id="cb3-87" title="87">        printf(<span class="st">"</span><span class="sc">\n\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb3-88" title="88">    }    </a>
<a class="sourceLine" id="cb3-89" title="89">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-90" title="90">}</a></code></pre></div>
]]></content>
      <categories>
        <category>DP</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>有难度的DP</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ1087 A plug for UNIX</title>
    <url>/2019/04/24/POJ1087-A-plug-for-UNIX/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/HTB1Wy3ASBLoK1RjSZFuq6xn0XXab.jpg"></p>
<p>(图文无关)</p>
<span id="more"></span>
<p><a href="https://cn.vjudge.net/problem/POJ-1087">A plug for UNIX</a></p>
<h4 id="正题开始前的吐槽">正题开始前的吐槽</h4>
<ul>
<li>这强行UNIX我给满分......</li>
<li>输入真恶心，建图真麻烦......</li>
</ul>
<h4 id="正题开始">正题开始</h4>
<p>这是一道最大流的问题，题目大意就是说有若干个设备，每个设备都对应一种插头类型；有若干种插座类型，同时还有若干种插头类型转换器，转换器的数量是无限的，问不能成功配对(即插头插到对应类型的插座上)的设备最少是多少。</p>
<p>思路的话其实不难想：可以建立一个超级源点和一个超级汇点，从源点到每种设备之间各连一条容量为1的边；从插座到汇点之间各连一条容量为1的边。对于转换器，很容易想到将所有转换关系转换为一张有向图。我们可以使用floyd求该图上任意两点间的最长路，以此来计算两点之间是否连通，即两种插头之间是否可以转化。如果插头A可以转换为插头B，在网络上将插头类型为A的设备与插座类型为B的插座间连一条边，容量为1(其实只要&gt;=1即可)。最后Dinic求一下最大流，最大流对应的就是最多可以匹配的设备。</p>
<div class="note warning">
<pre><code>&lt;p&gt;floyd求最长路时最好把点数调大一点，500比较合适！否则会WA！&lt;/p&gt;</code></pre>
</div>
<p>代码如下:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span><span class="pp">  </span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-15" title="15"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="dt">int</span> n,m,k;</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="dt">int</span> con[<span class="dv">1005</span>][<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb2-22" title="22">    <span class="dt">int</span> id;</a>
<a class="sourceLine" id="cb2-23" title="23">    string type;</a>
<a class="sourceLine" id="cb2-24" title="24">    node(<span class="dt">int</span> id,string type):id(id),type(type){</a>
<a class="sourceLine" id="cb2-25" title="25">    }</a>
<a class="sourceLine" id="cb2-26" title="26">};</a>
<a class="sourceLine" id="cb2-27" title="27"><span class="kw">struct</span> edge{</a>
<a class="sourceLine" id="cb2-28" title="28">    <span class="dt">int</span> to;</a>
<a class="sourceLine" id="cb2-29" title="29">    <span class="dt">int</span> cap;</a>
<a class="sourceLine" id="cb2-30" title="30">    ull rev;</a>
<a class="sourceLine" id="cb2-31" title="31">    edge(<span class="dt">int</span> to,<span class="dt">int</span> cap,ull rev):to(to),cap(cap),rev(rev){</a>
<a class="sourceLine" id="cb2-32" title="32">    }</a>
<a class="sourceLine" id="cb2-33" title="33">};    </a>
<a class="sourceLine" id="cb2-34" title="34">vector&lt;node&gt; rec;</a>
<a class="sourceLine" id="cb2-35" title="35">vector&lt;node&gt; plug;</a>
<a class="sourceLine" id="cb2-36" title="36">map&lt;string,<span class="dt">int</span>&gt; mp;</a>
<a class="sourceLine" id="cb2-37" title="37">vector&lt;edge&gt; gra[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb2-38" title="38"><span class="dt">int</span> cur[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb2-39" title="39"><span class="dt">void</span> floyd(<span class="dt">int</span> nn)</a>
<a class="sourceLine" id="cb2-40" title="40">{</a>
<a class="sourceLine" id="cb2-41" title="41">    <span class="cf">for</span>(<span class="dt">int</span> k=<span class="dv">1</span>;k&lt;=nn;k++){</a>
<a class="sourceLine" id="cb2-42" title="42">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=nn;i++){</a>
<a class="sourceLine" id="cb2-43" title="43">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=nn;j++){</a>
<a class="sourceLine" id="cb2-44" title="44">                <span class="cf">if</span>(con[i][k]&amp;&amp;con[k][j])</a>
<a class="sourceLine" id="cb2-45" title="45">                    con[i][j]=max(con[i][j],con[i][k]+con[k][j]);</a>
<a class="sourceLine" id="cb2-46" title="46">            }</a>
<a class="sourceLine" id="cb2-47" title="47">        }</a>
<a class="sourceLine" id="cb2-48" title="48">    }</a>
<a class="sourceLine" id="cb2-49" title="49">}</a>
<a class="sourceLine" id="cb2-50" title="50"><span class="co">//mp用于floyd时求连通性</span></a>
<a class="sourceLine" id="cb2-51" title="51"><span class="dt">int</span> dep[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb2-52" title="52"><span class="dt">int</span> bfs(<span class="dt">int</span> s,<span class="dt">int</span> t)</a>
<a class="sourceLine" id="cb2-53" title="53">{</a>
<a class="sourceLine" id="cb2-54" title="54">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb2-55" title="55">    memset(dep,-<span class="dv">1</span>,<span class="kw">sizeof</span>(dep));</a>
<a class="sourceLine" id="cb2-56" title="56">    dep[s]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-57" title="57">    que.push(s);</a>
<a class="sourceLine" id="cb2-58" title="58">    <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb2-59" title="59">        <span class="dt">int</span> now=que.front();</a>
<a class="sourceLine" id="cb2-60" title="60">        que.pop();</a>
<a class="sourceLine" id="cb2-61" title="61">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;gra[now].size();i++){</a>
<a class="sourceLine" id="cb2-62" title="62">            <span class="cf">if</span>(gra[now][i].cap&gt;<span class="dv">0</span>&amp;&amp;dep[gra[now][i].to]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb2-63" title="63">                dep[gra[now][i].to]=dep[now]+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-64" title="64">                que.push(gra[now][i].to);</a>
<a class="sourceLine" id="cb2-65" title="65">            }</a>
<a class="sourceLine" id="cb2-66" title="66">        }</a>
<a class="sourceLine" id="cb2-67" title="67">    }</a>
<a class="sourceLine" id="cb2-68" title="68">    <span class="cf">return</span> dep[t]!=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-69" title="69">}</a>
<a class="sourceLine" id="cb2-70" title="70"><span class="dt">int</span> dfs(<span class="dt">int</span> st,<span class="dt">int</span> t,<span class="dt">int</span> mini)</a>
<a class="sourceLine" id="cb2-71" title="71">{</a>
<a class="sourceLine" id="cb2-72" title="72">    <span class="cf">if</span>(st==t)</a>
<a class="sourceLine" id="cb2-73" title="73">        <span class="cf">return</span> mini;</a>
<a class="sourceLine" id="cb2-74" title="74">    <span class="cf">for</span>(<span class="dt">int</span>&amp; i=cur[st];i&lt;gra[st].size();i++){</a>
<a class="sourceLine" id="cb2-75" title="75">        edge&amp; now=gra[st][i];</a>
<a class="sourceLine" id="cb2-76" title="76">        <span class="cf">if</span>(now.cap&gt;<span class="dv">0</span>&amp;&amp;dep[now.to]==dep[st]+<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb2-77" title="77">            <span class="dt">int</span> d=dfs(now.to,t,min(now.cap,mini));</a>
<a class="sourceLine" id="cb2-78" title="78">            <span class="cf">if</span>(d&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-79" title="79">                now.cap-=d;</a>
<a class="sourceLine" id="cb2-80" title="80">                gra[now.to][now.rev].cap+=d;</a>
<a class="sourceLine" id="cb2-81" title="81">                <span class="cf">return</span> d;</a>
<a class="sourceLine" id="cb2-82" title="82">            }</a>
<a class="sourceLine" id="cb2-83" title="83">        }</a>
<a class="sourceLine" id="cb2-84" title="84">    }</a>
<a class="sourceLine" id="cb2-85" title="85">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-86" title="86">}</a>
<a class="sourceLine" id="cb2-87" title="87"><span class="dt">int</span> Dinic(<span class="dt">int</span> st,<span class="dt">int</span> e)</a>
<a class="sourceLine" id="cb2-88" title="88">{</a>
<a class="sourceLine" id="cb2-89" title="89">    <span class="dt">int</span> ans=<span class="dv">0</span>;<span class="dt">int</span> tmp;</a>
<a class="sourceLine" id="cb2-90" title="90">    <span class="cf">while</span>(bfs(st,e)){</a>
<a class="sourceLine" id="cb2-91" title="91">        memset(cur,<span class="dv">0</span>,<span class="kw">sizeof</span>(cur));</a>
<a class="sourceLine" id="cb2-92" title="92">        <span class="cf">while</span>((tmp=dfs(st,e,INF))&gt;<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb2-93" title="93">            ans+=tmp;</a>
<a class="sourceLine" id="cb2-94" title="94">    }</a>
<a class="sourceLine" id="cb2-95" title="95">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb2-96" title="96">}</a>
<a class="sourceLine" id="cb2-97" title="97"><span class="dt">void</span> add(<span class="dt">int</span> from,<span class="dt">int</span> to,<span class="dt">int</span> wei)</a>
<a class="sourceLine" id="cb2-98" title="98">{</a>
<a class="sourceLine" id="cb2-99" title="99">    gra[from].push_back(edge(to,wei,gra[to].size()));</a>
<a class="sourceLine" id="cb2-100" title="100">    gra[to].push_back(edge(from,<span class="dv">0</span>,gra[from].size()-<span class="dv">1</span>));</a>
<a class="sourceLine" id="cb2-101" title="101">}</a>
<a class="sourceLine" id="cb2-102" title="102"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-103" title="103">{</a>
<a class="sourceLine" id="cb2-104" title="104">    memset(con,<span class="dv">0</span>,<span class="kw">sizeof</span>(con));</a>
<a class="sourceLine" id="cb2-105" title="105">    cin&gt;&gt;n;<span class="dt">int</span> idx=<span class="dv">1</span>;<span class="dt">int</span> idx1=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-106" title="106">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb2-107" title="107">        string str;</a>
<a class="sourceLine" id="cb2-108" title="108">        cin&gt;&gt;str;</a>
<a class="sourceLine" id="cb2-109" title="109">        rec.push_back(node(idx1,str));</a>
<a class="sourceLine" id="cb2-110" title="110">        idx1++;</a>
<a class="sourceLine" id="cb2-111" title="111">        mp[str]=idx++;</a>
<a class="sourceLine" id="cb2-112" title="112">    }</a>
<a class="sourceLine" id="cb2-113" title="113">    cin&gt;&gt;m;</a>
<a class="sourceLine" id="cb2-114" title="114">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++){</a>
<a class="sourceLine" id="cb2-115" title="115">        string str1,str2;</a>
<a class="sourceLine" id="cb2-116" title="116">        cin&gt;&gt;str1&gt;&gt;str2;</a>
<a class="sourceLine" id="cb2-117" title="117">        plug.push_back(node(idx1,str2));</a>
<a class="sourceLine" id="cb2-118" title="118">        idx1++;</a>
<a class="sourceLine" id="cb2-119" title="119">        <span class="cf">if</span>(!mp.count(str2))</a>
<a class="sourceLine" id="cb2-120" title="120">            mp[str2]=idx++;</a>
<a class="sourceLine" id="cb2-121" title="121">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb2-122" title="122">            idx++;</a>
<a class="sourceLine" id="cb2-123" title="123">    }</a>
<a class="sourceLine" id="cb2-124" title="124">    cin&gt;&gt;k;</a>
<a class="sourceLine" id="cb2-125" title="125">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=k;i++){</a>
<a class="sourceLine" id="cb2-126" title="126">        string a,b;</a>
<a class="sourceLine" id="cb2-127" title="127">        cin&gt;&gt;a&gt;&gt;b;</a>
<a class="sourceLine" id="cb2-128" title="128">        <span class="cf">if</span>(!mp.count(a))</a>
<a class="sourceLine" id="cb2-129" title="129">            mp[a]=idx++;</a>
<a class="sourceLine" id="cb2-130" title="130">        <span class="cf">if</span>(!mp.count(b))</a>
<a class="sourceLine" id="cb2-131" title="131">            mp[b]=idx++;</a>
<a class="sourceLine" id="cb2-132" title="132">        con[mp[a]][mp[b]]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-133" title="133">    }</a>
<a class="sourceLine" id="cb2-134" title="134">    floyd(idx);</a>
<a class="sourceLine" id="cb2-135" title="135">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;plug.size();i++){</a>
<a class="sourceLine" id="cb2-136" title="136">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;rec.size();j++){</a>
<a class="sourceLine" id="cb2-137" title="137">            node&amp; n1=plug[i];</a>
<a class="sourceLine" id="cb2-138" title="138">            node&amp; n2=rec[j];</a>
<a class="sourceLine" id="cb2-139" title="139">            <span class="cf">if</span>(con[mp[n1.type]][mp[n2.type]]||n1.type==n2.type){        <span class="co">//转换器之间连边</span></a>
<a class="sourceLine" id="cb2-140" title="140">                add(n1.id,n2.id,<span class="dv">2</span>);</a>
<a class="sourceLine" id="cb2-141" title="141">            }</a>
<a class="sourceLine" id="cb2-142" title="142">        }</a>
<a class="sourceLine" id="cb2-143" title="143">    }</a>
<a class="sourceLine" id="cb2-144" title="144">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;plug.size();i++)</a>
<a class="sourceLine" id="cb2-145" title="145">        add(<span class="dv">0</span>,plug[i].id,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-146" title="146">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;rec.size();i++){</a>
<a class="sourceLine" id="cb2-147" title="147">        add(rec[i].id,<span class="dv">500</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-148" title="148">    }</a>
<a class="sourceLine" id="cb2-149" title="149">    <span class="dt">int</span> maxi_flow=Dinic(<span class="dv">0</span>,<span class="dv">500</span>);</a>
<a class="sourceLine" id="cb2-150" title="150">    cout&lt;&lt;m-maxi_flow&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-151" title="151">}</a></code></pre></div>
<h4 id="附录">附录</h4>
<p>因为这题用到了最短(长)路，所以顺便复习以下最短路常用的三种算法：</p>
<h5 id="dijkstra">dijkstra</h5>
<p>可用于求单个点到图上其他点的最短路；基于贪心思想；不可用于有负权边的图</p>
<h5 id="floyd">floyd</h5>
<p>可用于求图上任意两个点之间的最短路；基于动态规划思想；可以处理有负权边的图，但不能处理有负环的图</p>
<h5 id="spfa">SPFA</h5>
<p>队列优化版的Bellmon-Ford，可用于求单个点到图上其他点的最短路；可以处理有负权边的图；还可以用于判断一个图是否有负环，即判断某个点的入队次数是否大于n(图上点的总数)，如果是就说明存在负环。要注意的是，SPFA可能会被恶意数据卡掉，谨慎使用</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>网络流</category>
        <category>最大流</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>最大流</tag>
        <tag>难建图</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ1182-食物链</title>
    <url>/2019/01/26/POJ1182-%E9%A3%9F%E7%89%A9%E9%93%BE/</url>
    <content><![CDATA[<p>题目链接：<a href="http://poj.org/problem?id=1182">1182-食物链</a> <span id="more"></span> 代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="dt">int</span> pre[<span class="dv">50010</span>];</a>
<a class="sourceLine" id="cb1-5" title="5"><span class="dt">int</span> rankrr[<span class="dv">50010</span>];</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="dt">const</span> <span class="dt">int</span> maxn=<span class="dv">50000</span>;</a>
<a class="sourceLine" id="cb1-7" title="7">using namespace std;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">int</span> findr(<span class="dt">int</span> x){</a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="dt">int</span> r;</a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-11" title="11">    t=pre[x];</a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="cf">if</span>(pre[x]==x)        <span class="cf">return</span> pre[x];</a>
<a class="sourceLine" id="cb1-13" title="13">    r=findr(pre[x]);        <span class="co">//递归查找根节点 </span></a>
<a class="sourceLine" id="cb1-14" title="14">    pre[x]=r;                <span class="co">//路径压缩 </span></a>
<a class="sourceLine" id="cb1-15" title="15">    rankrr[x]=(rankrr[x]+rankrr[t])%<span class="dv">3</span>;        <span class="co">//改变子节点的权值</span></a>
<a class="sourceLine" id="cb1-16" title="16">    printf(<span class="st">"find......done</span><span class="sc">\n</span><span class="st">"</span>); </a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="cf">return</span> r;</a>
<a class="sourceLine" id="cb1-18" title="18">}</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="dt">void</span> merge(<span class="dt">int</span> x,<span class="dt">int</span> y,<span class="dt">int</span> d){</a>
<a class="sourceLine" id="cb1-20" title="20">    printf(<span class="st">"merge......done</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-21" title="21">    <span class="dt">int</span> rx,ry;</a>
<a class="sourceLine" id="cb1-22" title="22">    rx=findr(x);</a>
<a class="sourceLine" id="cb1-23" title="23">    ry=findr(y);</a>
<a class="sourceLine" id="cb1-24" title="24">    pre[rx]=ry;</a>
<a class="sourceLine" id="cb1-25" title="25">    rankrr[rx]=(rankrr[y]-rankrr[x]+<span class="dv">3</span>+d)%<span class="dv">3</span>;</a>
<a class="sourceLine" id="cb1-26" title="26">}</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">int</span> main(){</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="dt">int</span> fake=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> n,k;</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="dt">int</span> x,y,d;</a>
<a class="sourceLine" id="cb1-31" title="31">    scanf(<span class="st">"%d %d"</span>,&amp;n,&amp;k);</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="dt">int</span> i;</a>
<a class="sourceLine" id="cb1-33" title="33">    <span class="cf">for</span>(i=<span class="dv">1</span>;i&lt;=maxn;i++){</a>
<a class="sourceLine" id="cb1-34" title="34">        pre[i]=i;</a>
<a class="sourceLine" id="cb1-35" title="35">        rankrr[i]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-36" title="36">    }</a>
<a class="sourceLine" id="cb1-37" title="37">    <span class="cf">while</span>(k--){</a>
<a class="sourceLine" id="cb1-38" title="38">        scanf(<span class="st">"%d %d %d"</span>,&amp;d,&amp;x,&amp;y);</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">if</span>((x&gt;n||y&gt;n)||(d==<span class="dv">2</span>&amp;&amp;x==y)){</a>
<a class="sourceLine" id="cb1-40" title="40">            fake++;</a>
<a class="sourceLine" id="cb1-41" title="41">            printf(<span class="st">"fake++</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-42" title="42">        }</a>
<a class="sourceLine" id="cb1-43" title="43">        <span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-44" title="44">            <span class="dt">int</span> fx=findr(x);</a>
<a class="sourceLine" id="cb1-45" title="45">            <span class="dt">int</span> fy=findr(y);</a>
<a class="sourceLine" id="cb1-46" title="46">            <span class="cf">if</span>(fx!=fy){</a>
<a class="sourceLine" id="cb1-47" title="47">                merge(x,y,d-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-48" title="48">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-49" title="49">                <span class="cf">if</span>((rankrr[x]-rankrr[y]+<span class="dv">3</span>)%<span class="dv">3</span>!=d-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-50" title="50">                    fake++;</a>
<a class="sourceLine" id="cb1-51" title="51">                    printf(<span class="st">"fake++</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-52" title="52">                }</a>
<a class="sourceLine" id="cb1-53" title="53">            }</a>
<a class="sourceLine" id="cb1-54" title="54">        }</a>
<a class="sourceLine" id="cb1-55" title="55">    }</a>
<a class="sourceLine" id="cb1-56" title="56">    printf(<span class="st">"%d</span><span class="sc">\n</span><span class="st">"</span>,fake);</a>
<a class="sourceLine" id="cb1-57" title="57">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-58" title="58">}</a></code></pre></div>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先这道题要弄明白的是题目中的“当前的话与前面的某些真的话冲突，就是假话”到底是什么意思。事实上，第一句话肯定是真的，因为假如第一句话是假的，那我们就没有可以判断第二句话真假的依据了。接下来要做的其实只是判断当前的话与上面的话是否冲突。要注意的是，如果当前描述下，x与pre[x]无确定的关系，即fx!=fy，则将当前说法看作是正确的来进行merge。如果有确定的关系，再根据(rankr[x]-rankr[y]+3)%3与d-1的关系来判断对错。如果两者不相等，则为错；否则，对。 那么，如何进行集合的划分呢？在这道题里，集合的划分依据不是是否为同类，而是“是否能确定两者之间的关系”。（“ 注意，这里不是根据x与father[x]是否是同类来划分。而是根据“x与father[x]能否确定两者之间的关系”来划分，若能确定x与father[x]的关系，则它们同属一个集合”，摘自题解） &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在判断的时候，如果输入的两只动物不是附属于同一个根节点，及不能确定两者的关系，就进行merge，merge的时候还要更新被并入的那个集合（即新的子树）的根节点的权值（即他与新的根节点的关系）。再合并的时候，我们只需要进行根节点的权值更新，被并入的集合的子节点的权值通过findr（）顺带更新（这也是带权并查集的精髓和难点） &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这道题中，并查集并不是要体现层级关系。同一棵树中的各个节点之间其实只是平等的几何元素关系，而没有上下级关系（或者说上下级关系对这道题而言没用）</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>并查集</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>图论</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ1328-Radar Installation(贪心)</title>
    <url>/2019/01/26/POJ1328-Radar-Installation-%E8%B4%AA%E5%BF%83/</url>
    <content><![CDATA[<p>&nbsp; &nbsp; &nbsp; &nbsp;思路：以岛屿为圆心作半径为d的圆，则每个可以被覆盖的岛屿（即y&lt;=d）都可以在x轴上形成一个或两个交点。也就是说，每个岛屿在画圆后都在x轴上形成一个长度大于或等于0的区间。这些区间即为安装雷达的地方。接下来要做的就是将这些区间的相交区间（即交集）找出来并计数。相交区间的数目即为雷达的数目。 <span id="more"></span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;climits&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7">using namespace std;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">typedef</span> <span class="kw">struct</span>{</a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="dt">double</span> x;</a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="dt">double</span> y;</a>
<a class="sourceLine" id="cb1-11" title="11">}island;</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">typedef</span> <span class="kw">struct</span>{</a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="dt">double</span> L;</a>
<a class="sourceLine" id="cb1-14" title="14">    <span class="dt">double</span> R;</a>
<a class="sourceLine" id="cb1-15" title="15">}interval;</a>
<a class="sourceLine" id="cb1-16" title="16">island a[<span class="dv">1010</span>];</a>
<a class="sourceLine" id="cb1-17" title="17">interval b[<span class="dv">1010</span>];</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="dt">bool</span> cmp(<span class="dt">const</span> interval &amp;a,<span class="dt">const</span> interval &amp;b)</a>
<a class="sourceLine" id="cb1-19" title="19">{</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">return</span> a.L&lt;b.L;</a>
<a class="sourceLine" id="cb1-21" title="21">}</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> num;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-24" title="24">{    </a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">double</span> d;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> n,test;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="dt">int</span> no;</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="dt">int</span> i,j;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> ans;</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">for</span>(test=<span class="dv">1</span>,num=<span class="dv">0</span>;scanf(<span class="st">"%d %lf"</span>,&amp;n,&amp;d)!=EOF;test++)</a>
<a class="sourceLine" id="cb1-31" title="31">    {    </a>
<a class="sourceLine" id="cb1-32" title="32">        ans=<span class="dv">0</span>;no=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-33" title="33">        <span class="dt">int</span> flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">        <span class="cf">if</span>(!n&amp;&amp;!d)</a>
<a class="sourceLine" id="cb1-35" title="35">            <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-36" title="36">        memset(a,<span class="dv">0</span>,<span class="kw">sizeof</span>(a));</a>
<a class="sourceLine" id="cb1-37" title="37">        memset(b,<span class="dv">0</span>,<span class="kw">sizeof</span>(b));</a>
<a class="sourceLine" id="cb1-38" title="38">        <span class="cf">for</span>(i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-39" title="39">            scanf(<span class="st">"%lf %lf"</span>,&amp;a[i].x,&amp;a[i].y);</a>
<a class="sourceLine" id="cb1-40" title="40">            <span class="cf">if</span>(a[i].y&gt;d){</a>
<a class="sourceLine" id="cb1-41" title="41">                flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-42" title="42">            }</a>
<a class="sourceLine" id="cb1-43" title="43">        }</a>
<a class="sourceLine" id="cb1-44" title="44">        <span class="cf">if</span>(flag){</a>
<a class="sourceLine" id="cb1-45" title="45">            printf(<span class="st">"Case %d: -1</span><span class="sc">\n</span><span class="st">"</span>,test);</a>
<a class="sourceLine" id="cb1-46" title="46">            <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb1-47" title="47">        }</a>
<a class="sourceLine" id="cb1-48" title="48">        <span class="cf">for</span>(i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-49" title="49">            b[i].L=a[i].x-sqrt(d*d-((a[i].y)*(a[i].y)));</a>
<a class="sourceLine" id="cb1-50" title="50">            b[i].R=a[i].x+sqrt(d*d-((a[i].y)*(a[i].y)));</a>
<a class="sourceLine" id="cb1-51" title="51">        }</a>
<a class="sourceLine" id="cb1-52" title="52">        sort(b+<span class="dv">1</span>,b+n+<span class="dv">1</span>,cmp);</a>
<a class="sourceLine" id="cb1-53" title="53">        <span class="cf">for</span>(i=<span class="dv">1</span>,ans=<span class="dv">0</span>;i&lt;=n;i++){        <span class="co">//i++：当找到一个相交区间后，查找下一个相交区间的起始左端点值即为上一个相交区间（就是已经被找到了的那个）的左端点值的下一个</span></a>
<a class="sourceLine" id="cb1-54" title="54">            ans++;</a>
<a class="sourceLine" id="cb1-55" title="55">            <span class="dt">double</span> right=b[i].R;</a>
<a class="sourceLine" id="cb1-56" title="56">            <span class="cf">for</span>(j=i+<span class="dv">1</span>;j&lt;=n;j++){</a>
<a class="sourceLine" id="cb1-57" title="57">                <span class="cf">if</span>(b[j].L&lt;=right){</a>
<a class="sourceLine" id="cb1-58" title="58">                    <span class="cf">if</span>(b[j].R&lt;right){</a>
<a class="sourceLine" id="cb1-59" title="59">                        right=b[j].R;        <span class="co">//将右端点左移</span></a>
<a class="sourceLine" id="cb1-60" title="60">                    }</a>
<a class="sourceLine" id="cb1-61" title="61">                    i++;            <span class="co">//将左端点右移</span></a>
<a class="sourceLine" id="cb1-62" title="62">                }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-63" title="63">                    <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-64" title="64">                }</a>
<a class="sourceLine" id="cb1-65" title="65">            }</a>
<a class="sourceLine" id="cb1-66" title="66">        }</a>
<a class="sourceLine" id="cb1-67" title="67">        printf(<span class="st">"Case %d: %d</span><span class="sc">\n</span><span class="st">"</span>,test,ans);</a>
<a class="sourceLine" id="cb1-68" title="68">    }</a>
<a class="sourceLine" id="cb1-69" title="69">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-70" title="70">}</a></code></pre></div>
<p>&nbsp; &nbsp; &nbsp; &nbsp;找相交区间部分的讲解：找相交区间就是要找到尽可能大的左端点和右端点。先将结构数组b[]按每个区间的左端点大小升序排列，这样是为了找到尽可能大的左端点。每次循环中同时将左端点右移、右端点左移直到左端点大于右端点。因为每一轮循环都必定能找到一个相交区间，故每一轮循环都要ans++。</p>
<p>原做法：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;climits&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7">using namespace std;</a>
<a class="sourceLine" id="cb2-8" title="8"><span class="kw">typedef</span> <span class="kw">struct</span>{</a>
<a class="sourceLine" id="cb2-9" title="9">    <span class="dt">double</span> x;</a>
<a class="sourceLine" id="cb2-10" title="10">    <span class="dt">double</span> y;</a>
<a class="sourceLine" id="cb2-11" title="11">}island;</a>
<a class="sourceLine" id="cb2-12" title="12">island a[<span class="dv">1010</span>];</a>
<a class="sourceLine" id="cb2-13" title="13"><span class="dt">bool</span> cmp(<span class="dt">const</span> island &amp;a,<span class="dt">const</span> island &amp;b)</a>
<a class="sourceLine" id="cb2-14" title="14">{</a>
<a class="sourceLine" id="cb2-15" title="15">    <span class="cf">return</span> a.x&lt;b.x;</a>
<a class="sourceLine" id="cb2-16" title="16">}</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="dt">bool</span> tag[<span class="dv">1010</span>];</a>
<a class="sourceLine" id="cb2-18" title="18"><span class="dt">int</span> num;</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-20" title="20">{    </a>
<a class="sourceLine" id="cb2-21" title="21">    <span class="dt">double</span> d;</a>
<a class="sourceLine" id="cb2-22" title="22">    <span class="dt">int</span> n,test;</a>
<a class="sourceLine" id="cb2-23" title="23">    <span class="dt">int</span> no;</a>
<a class="sourceLine" id="cb2-24" title="24">    <span class="dt">int</span> i;</a>
<a class="sourceLine" id="cb2-25" title="25">    <span class="dt">int</span> ans;</a>
<a class="sourceLine" id="cb2-26" title="26">    <span class="cf">for</span>(test=<span class="dv">1</span>,num=<span class="dv">0</span>;scanf(<span class="st">"%d %lf"</span>,&amp;n,&amp;d)!=EOF;test++)</a>
<a class="sourceLine" id="cb2-27" title="27">    {    </a>
<a class="sourceLine" id="cb2-28" title="28">        no=<span class="dv">0</span>,ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-29" title="29">        memset(a,<span class="dv">0</span>,<span class="kw">sizeof</span>(a));</a>
<a class="sourceLine" id="cb2-30" title="30">        <span class="cf">if</span>(!n&amp;&amp;!d)        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb2-31" title="31">        <span class="cf">for</span>(i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb2-32" title="32">        {</a>
<a class="sourceLine" id="cb2-33" title="33">            scanf(<span class="st">"%lf %lf"</span>,&amp;a[i].x,&amp;a[i].y);</a>
<a class="sourceLine" id="cb2-34" title="34">            <span class="cf">if</span>(a[i].y&gt;d)</a>
<a class="sourceLine" id="cb2-35" title="35">                no=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-36" title="36">        }</a>
<a class="sourceLine" id="cb2-37" title="37">        <span class="cf">if</span>(no)</a>
<a class="sourceLine" id="cb2-38" title="38">        {</a>
<a class="sourceLine" id="cb2-39" title="39">            printf(<span class="st">"Case %d: -1</span><span class="sc">\n</span><span class="st">"</span>,test);</a>
<a class="sourceLine" id="cb2-40" title="40">            <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb2-41" title="41">        }</a>
<a class="sourceLine" id="cb2-42" title="42">        getchar();</a>
<a class="sourceLine" id="cb2-43" title="43">        <span class="co">//每次都以最左边的为被圈入圆圈中的岛屿为参考来确定安装点的坐标，直到全部都被覆盖完</span></a>
<a class="sourceLine" id="cb2-44" title="44">        sort(a+<span class="dv">1</span>,a+n+<span class="dv">1</span>,cmp);</a>
<a class="sourceLine" id="cb2-45" title="45">        <span class="dt">int</span> st=<span class="dv">1</span>,cov;</a>
<a class="sourceLine" id="cb2-46" title="46">        <span class="dt">double</span> xtmp;</a>
<a class="sourceLine" id="cb2-47" title="47">        <span class="cf">for</span>(cov=<span class="dv">0</span>;cov!=n;){</a>
<a class="sourceLine" id="cb2-48" title="48">                xtmp=a[st].x+sqrt(d*d-(a[st].y)*(a[st].y));</a>
<a class="sourceLine" id="cb2-49" title="49">                <span class="cf">for</span>(i=st;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb2-50" title="50">                <span class="cf">if</span>(((xtmp-a[i].x)*(xtmp-a[i].x)+(a[i].y)*(a[i].y))&gt;d*d){</a>
<a class="sourceLine" id="cb2-51" title="51">                    st=i;</a>
<a class="sourceLine" id="cb2-52" title="52">                    <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb2-53" title="53">                }</a>
<a class="sourceLine" id="cb2-54" title="54">                tag[i]=true;</a>
<a class="sourceLine" id="cb2-55" title="55">                cov++;</a>
<a class="sourceLine" id="cb2-56" title="56">            }</a>
<a class="sourceLine" id="cb2-57" title="57">            ans++;</a>
<a class="sourceLine" id="cb2-58" title="58">        }</a>
<a class="sourceLine" id="cb2-59" title="59">        printf(<span class="st">"Case %d: %d</span><span class="sc">\n</span><span class="st">"</span>,test,ans);</a>
<a class="sourceLine" id="cb2-60" title="60">    }</a>
<a class="sourceLine" id="cb2-61" title="61">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-62" title="62">}</a></code></pre></div>
<p>&nbsp; &nbsp; &nbsp; &nbsp;这个做法的思路是每次都以最左边的未被覆盖的岛屿来确定雷达的坐标（即刚好能覆盖最左边的这个岛屿），循环地去做，直到所有的岛屿都被覆盖。但这样做的问题在于，并不一定能尽可能多地覆盖岛屿。比如说这组数据：</p>
<p>2 3 0 2 1 3</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;正确输出是1，但用这种方法做出来的答案是2。以最左边的未被覆盖的点(0,2)为基准确定雷达坐标后，雷达并不能把(1,3)覆盖。但实际上，只需要一个在x=1上的雷达就可以将两个岛屿覆盖。</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ1384 - Piggy Bank</title>
    <url>/2019/02/17/POJ1384-Piggy-Bank/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/POJ-1384">Piggy Bank</a></p>
<p>  完全背包的经典问题，只要把状态转移方程的max改为min，同时将dp[0]设为0，其余则设为INF即可( 因为要求是否能装满 )</p>
<span id="more"></span>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;climits&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define INF </span><span class="bn">0x3fffffff</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> val[<span class="dv">510</span>];</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">int</span> w[<span class="dv">510</span>];</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="dt">int</span> dp[<span class="dv">10010</span>];</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb1-13" title="13">{</a>
<a class="sourceLine" id="cb1-14" title="14">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">10010</span>;i++)</a>
<a class="sourceLine" id="cb1-15" title="15">        dp[i]=INF;</a>
<a class="sourceLine" id="cb1-16" title="16">}</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-18" title="18">{</a>
<a class="sourceLine" id="cb1-19" title="19">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-20" title="20">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-21" title="21">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-22" title="22">    {    </a>
<a class="sourceLine" id="cb1-23" title="23">        init();dp[<span class="dv">0</span>]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-24" title="24">        mst(val,<span class="dv">0</span>);mst(w,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-25" title="25">        <span class="dt">int</span> empty,with_coin;</a>
<a class="sourceLine" id="cb1-26" title="26">        cin&gt;&gt;empty&gt;&gt;with_coin;</a>
<a class="sourceLine" id="cb1-27" title="27">        <span class="dt">int</span> vtot=with_coin-empty;</a>
<a class="sourceLine" id="cb1-28" title="28">        <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-29" title="29">        cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-31" title="31">            cin&gt;&gt;val[i]&gt;&gt;w[i];</a>
<a class="sourceLine" id="cb1-32" title="32">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-33" title="33">            <span class="cf">for</span>(<span class="dt">int</span> j=w[i];j&lt;=vtot;j++)</a>
<a class="sourceLine" id="cb1-34" title="34">                dp[j]=min(dp[j],dp[j-w[i]]+val[i]);</a>
<a class="sourceLine" id="cb1-35" title="35">        <span class="cf">if</span>(dp[vtot]==INF)</a>
<a class="sourceLine" id="cb1-36" title="36">            cout&lt;&lt;<span class="st">"This is impossible."</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-37" title="37">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-38" title="38">            cout&lt;&lt;<span class="st">"The minimum amount of money in the piggy-bank is "</span>&lt;&lt;dp[vtot]&lt;&lt;<span class="st">"."</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-39" title="39">    }</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>完全背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>完全背包</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ1833 - 排列</title>
    <url>/2019/02/24/POJ1833-%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/POJ-1833">排列</a></p>
<p>  题意是输出给定排列的后第k个排列。这里用的是<algorithm>里的next_permutation()，比较方便。</algorithm></p>
<span id="more"></span>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define INF </span><span class="bn">0x7fffffff</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="dt">int</span> arr[<span class="dv">1025</span>],tmp[<span class="dv">1025</span>];</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">void</span> output(<span class="dt">int</span>* arr,<span class="dt">int</span> num)</a>
<a class="sourceLine" id="cb1-15" title="15">{</a>
<a class="sourceLine" id="cb1-16" title="16">    <span class="dt">int</span> pr=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;num;i++){</a>
<a class="sourceLine" id="cb1-18" title="18">        <span class="cf">if</span>(pr==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-19" title="19">            pr++; </a>
<a class="sourceLine" id="cb1-20" title="20">            printf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,arr[i]);</a>
<a class="sourceLine" id="cb1-21" title="21">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-22" title="22">            printf(<span class="st">" </span><span class="sc">%d</span><span class="st">"</span>,arr[i]);</a>
<a class="sourceLine" id="cb1-23" title="23">        }</a>
<a class="sourceLine" id="cb1-24" title="24">    }</a>
<a class="sourceLine" id="cb1-25" title="25">    printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-26" title="26">}</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-28" title="28">{</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-30" title="30">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-32" title="32">    {    </a>
<a class="sourceLine" id="cb1-33" title="33">        mst(arr,<span class="dv">0</span>);mst(tmp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-34" title="34">        <span class="dt">int</span> n,k;</a>
<a class="sourceLine" id="cb1-35" title="35">        cin&gt;&gt;n&gt;&gt;k;</a>
<a class="sourceLine" id="cb1-36" title="36">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-37" title="37">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;arr[i]);</a>
<a class="sourceLine" id="cb1-38" title="38">        <span class="dt">bool</span> flag;</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">while</span>(k)</a>
<a class="sourceLine" id="cb1-40" title="40">        {</a>
<a class="sourceLine" id="cb1-41" title="41">            flag=next_permutation(arr,arr+n);</a>
<a class="sourceLine" id="cb1-42" title="42">            <span class="cf">if</span>(flag=<span class="dv">0</span>)        </a>
<a class="sourceLine" id="cb1-43" title="43">            {</a>
<a class="sourceLine" id="cb1-44" title="44">                sort(arr,arr+n);</a>
<a class="sourceLine" id="cb1-45" title="45">                next_permutation(arr,arr+n);</a>
<a class="sourceLine" id="cb1-46" title="46">            }</a>
<a class="sourceLine" id="cb1-47" title="47"><span class="co">/*原本的想法是如果当前序列是字典序最大的序列时，后面不会再有序列，也就是说next_permutation不会再排列，所以要把序列排一下序，使它回到字典序最小的状态，重新开始；可是后来发现这个函数很智能，如果没有下一个排列的话，它会自动倒回到字典序最小的情况。也就是说，这个if其实是可以不要的*/</span></a>
<a class="sourceLine" id="cb1-48" title="48">            k-=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-49" title="49">        }</a>
<a class="sourceLine" id="cb1-50" title="50">        output(arr,n);</a>
<a class="sourceLine" id="cb1-51" title="51">    }</a>
<a class="sourceLine" id="cb1-52" title="52">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-53" title="53">} </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ1985 &amp; HDU2196 求树的直径模板</title>
    <url>/2019/07/31/POJ1985-HDU2196-%E6%B1%82%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H3f36fb9928484479b586fc1764a50805L.jpg"></p>
<p>Photo by <strong>Nick Kwan</strong> from <strong>Pexels</strong></p>
<span id="more"></span>
<p>这篇文章的主要目的是为了屯模板......</p>
<p><a href="https://cn.vjudge.net/problem/POJ-1985">POJ1985 Cow Marathon</a> 裸题，直接两边dfs求出直径即可（输入里面的那个方向是没用的......） 代码如下</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">50000</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> to,next;</a>
<a class="sourceLine" id="cb1-25" title="25">    ll wei;</a>
<a class="sourceLine" id="cb1-26" title="26">};</a>
<a class="sourceLine" id="cb1-27" title="27">node es[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-28" title="28"><span class="dt">int</span> head[maxn+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb1-29" title="29"><span class="dt">int</span> cnt;</a>
<a class="sourceLine" id="cb1-30" title="30">ll dis[maxn];</a>
<a class="sourceLine" id="cb1-31" title="31"><span class="dt">void</span> add(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> wei)</a>
<a class="sourceLine" id="cb1-32" title="32">{</a>
<a class="sourceLine" id="cb1-33" title="33">    es[cnt].to=v;</a>
<a class="sourceLine" id="cb1-34" title="34">    es[cnt].wei=wei;</a>
<a class="sourceLine" id="cb1-35" title="35">    es[cnt].next=head[u];</a>
<a class="sourceLine" id="cb1-36" title="36">    head[u]=cnt++;</a>
<a class="sourceLine" id="cb1-37" title="37">}</a>
<a class="sourceLine" id="cb1-38" title="38"><span class="dt">void</span> dfs(<span class="dt">int</span> st,<span class="dt">int</span> fa)</a>
<a class="sourceLine" id="cb1-39" title="39">{</a>
<a class="sourceLine" id="cb1-40" title="40"><span class="co">//    dis[st]=dis[fa]+es[fa].wei;</span></a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="cf">for</span>(<span class="dt">int</span> i=head[st];i!=-<span class="dv">1</span>;i=es[i].next){</a>
<a class="sourceLine" id="cb1-42" title="42">        <span class="dt">int</span> to=es[i].to;</a>
<a class="sourceLine" id="cb1-43" title="43">        <span class="cf">if</span>(to==fa)    <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb1-44" title="44">        dis[to]=dis[st]+es[i].wei;</a>
<a class="sourceLine" id="cb1-45" title="45">        dfs(to,st);</a>
<a class="sourceLine" id="cb1-46" title="46">    }</a>
<a class="sourceLine" id="cb1-47" title="47">}</a>
<a class="sourceLine" id="cb1-48" title="48"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-49" title="49">{</a>
<a class="sourceLine" id="cb1-50" title="50">    IOS;</a>
<a class="sourceLine" id="cb1-51" title="51">    <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-52" title="52">    <span class="cf">while</span>(cin&gt;&gt;n&gt;&gt;m){</a>
<a class="sourceLine" id="cb1-53" title="53">        mst(head,-<span class="dv">1</span>);cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-54" title="54">        mst(dis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-55" title="55">        <span class="dt">int</span> start;</a>
<a class="sourceLine" id="cb1-56" title="56">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb1-57" title="57">            <span class="dt">int</span> a,b,L;<span class="dt">char</span> dir;</a>
<a class="sourceLine" id="cb1-58" title="58">            cin&gt;&gt;a&gt;&gt;b&gt;&gt;L&gt;&gt;dir;</a>
<a class="sourceLine" id="cb1-59" title="59">            <span class="cf">if</span>(i==<span class="dv">0</span>)    start=a;</a>
<a class="sourceLine" id="cb1-60" title="60">            add(a,b,L);add(b,a,L);</a>
<a class="sourceLine" id="cb1-61" title="61">        }</a>
<a class="sourceLine" id="cb1-62" title="62">        dfs(<span class="dv">1</span>,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-63" title="63">        <span class="dt">int</span> <span class="va">end_</span>;ll ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-64" title="64">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-65" title="65">            <span class="cf">if</span>(dis[i]&gt;ans){</a>
<a class="sourceLine" id="cb1-66" title="66">                ans=dis[i];</a>
<a class="sourceLine" id="cb1-67" title="67">                <span class="va">end_</span>=i;</a>
<a class="sourceLine" id="cb1-68" title="68">            }</a>
<a class="sourceLine" id="cb1-69" title="69">        }</a>
<a class="sourceLine" id="cb1-70" title="70"><span class="co">//        cout&lt;&lt;"end = "&lt;&lt;end_&lt;&lt;endl;</span></a>
<a class="sourceLine" id="cb1-71" title="71">        mst(dis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-72" title="72">        dfs(<span class="va">end_</span>,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-73" title="73">        ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-74" title="74">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-75" title="75">            ans=max(ans,dis[i]);</a>
<a class="sourceLine" id="cb1-76" title="76">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-77" title="77">    }</a>
<a class="sourceLine" id="cb1-78" title="78">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-79" title="79">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/HDU-2196">HDU2196 Computer</a></p>
<p>对于每一个点，其最大距离即为直径的两个端点到该点的距离的较大值。</p>
<p>做法是跑三次bfs。第一次用于求出直径的一个端点；第二次从该端点出发找另一个端点，同时算出从该端点到其他点的距离；第三次从找出来的另一个端点出发算出它到其他点的距离。</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-23" title="23"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb2-24" title="24">    <span class="dt">int</span> to;</a>
<a class="sourceLine" id="cb2-25" title="25">    <span class="dt">int</span> next,wei;</a>
<a class="sourceLine" id="cb2-26" title="26">};</a>
<a class="sourceLine" id="cb2-27" title="27">node es[<span class="dv">80005</span>];</a>
<a class="sourceLine" id="cb2-28" title="28"><span class="dt">int</span> head[<span class="dv">40005</span>];</a>
<a class="sourceLine" id="cb2-29" title="29"><span class="dt">int</span> cnt;</a>
<a class="sourceLine" id="cb2-30" title="30"><span class="dt">void</span> add(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> wei)</a>
<a class="sourceLine" id="cb2-31" title="31">{</a>
<a class="sourceLine" id="cb2-32" title="32">    es[cnt].to=v;</a>
<a class="sourceLine" id="cb2-33" title="33">    es[cnt].wei=wei;</a>
<a class="sourceLine" id="cb2-34" title="34">    es[cnt].next=head[u];</a>
<a class="sourceLine" id="cb2-35" title="35">    head[u]=cnt++;</a>
<a class="sourceLine" id="cb2-36" title="36">}</a>
<a class="sourceLine" id="cb2-37" title="37"><span class="dt">int</span> dis1[<span class="dv">40005</span>];</a>
<a class="sourceLine" id="cb2-38" title="38"><span class="dt">int</span> dis2[<span class="dv">40005</span>];</a>
<a class="sourceLine" id="cb2-39" title="39"><span class="dt">bool</span> vis[<span class="dv">40005</span>];</a>
<a class="sourceLine" id="cb2-40" title="40"><span class="dt">int</span> bfs1(<span class="dt">int</span> st)</a>
<a class="sourceLine" id="cb2-41" title="41">{</a>
<a class="sourceLine" id="cb2-42" title="42">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb2-43" title="43">    que.push(st);</a>
<a class="sourceLine" id="cb2-44" title="44">    mst(vis,<span class="dv">0</span>);mst(dis1,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-45" title="45">    dis1[st]=<span class="dv">0</span>;vis[st]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-46" title="46">    <span class="dt">int</span> maxi_len=dis1[st];</a>
<a class="sourceLine" id="cb2-47" title="47">    <span class="dt">int</span> point=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-48" title="48">    <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb2-49" title="49">        <span class="dt">int</span> now=que.front();</a>
<a class="sourceLine" id="cb2-50" title="50">        que.pop();</a>
<a class="sourceLine" id="cb2-51" title="51">        <span class="cf">for</span>(<span class="dt">int</span> i=head[now];i!=-<span class="dv">1</span>;i=es[i].next){</a>
<a class="sourceLine" id="cb2-52" title="52">            <span class="dt">int</span> to=es[i].to;</a>
<a class="sourceLine" id="cb2-53" title="53">            <span class="cf">if</span>(vis[to]==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-54" title="54">                vis[to]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-55" title="55">                dis1[to]=dis1[now]+es[i].wei;</a>
<a class="sourceLine" id="cb2-56" title="56">                que.push(to);</a>
<a class="sourceLine" id="cb2-57" title="57">                <span class="cf">if</span>(maxi_len&lt;dis1[to]){</a>
<a class="sourceLine" id="cb2-58" title="58">                    maxi_len=dis1[to];</a>
<a class="sourceLine" id="cb2-59" title="59">                    point=to;</a>
<a class="sourceLine" id="cb2-60" title="60">                }</a>
<a class="sourceLine" id="cb2-61" title="61">            }</a>
<a class="sourceLine" id="cb2-62" title="62">        }</a>
<a class="sourceLine" id="cb2-63" title="63">    }</a>
<a class="sourceLine" id="cb2-64" title="64">    <span class="cf">return</span> point;</a>
<a class="sourceLine" id="cb2-65" title="65">}</a>
<a class="sourceLine" id="cb2-66" title="66"><span class="dt">int</span> bfs2(<span class="dt">int</span> st)</a>
<a class="sourceLine" id="cb2-67" title="67">{</a>
<a class="sourceLine" id="cb2-68" title="68">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb2-69" title="69">    que.push(st);</a>
<a class="sourceLine" id="cb2-70" title="70">    mst(vis,<span class="dv">0</span>);mst(dis2,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-71" title="71">    dis2[st]=<span class="dv">0</span>;vis[st]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-72" title="72">    <span class="dt">int</span> maxi_len=dis2[st];</a>
<a class="sourceLine" id="cb2-73" title="73">    <span class="dt">int</span> point=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-74" title="74">    <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb2-75" title="75">        <span class="dt">int</span> now=que.front();</a>
<a class="sourceLine" id="cb2-76" title="76">        que.pop();</a>
<a class="sourceLine" id="cb2-77" title="77">        <span class="cf">for</span>(<span class="dt">int</span> i=head[now];i!=-<span class="dv">1</span>;i=es[i].next){</a>
<a class="sourceLine" id="cb2-78" title="78">            <span class="dt">int</span> to=es[i].to;</a>
<a class="sourceLine" id="cb2-79" title="79">            <span class="cf">if</span>(vis[to]==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-80" title="80">                vis[to]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-81" title="81">                dis2[to]=dis2[now]+es[i].wei;</a>
<a class="sourceLine" id="cb2-82" title="82">                que.push(to);</a>
<a class="sourceLine" id="cb2-83" title="83">                <span class="cf">if</span>(maxi_len&lt;dis2[to]){</a>
<a class="sourceLine" id="cb2-84" title="84">                    maxi_len=dis2[to];</a>
<a class="sourceLine" id="cb2-85" title="85">                    point=to;</a>
<a class="sourceLine" id="cb2-86" title="86">                }</a>
<a class="sourceLine" id="cb2-87" title="87">            }</a>
<a class="sourceLine" id="cb2-88" title="88">        }</a>
<a class="sourceLine" id="cb2-89" title="89">    }</a>
<a class="sourceLine" id="cb2-90" title="90">    <span class="cf">return</span> point;</a>
<a class="sourceLine" id="cb2-91" title="91">}</a>
<a class="sourceLine" id="cb2-92" title="92"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-93" title="93">{</a>
<a class="sourceLine" id="cb2-94" title="94">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb2-95" title="95"><span class="co">//    freopen("data_generator.txt","r",stdin);</span></a>
<a class="sourceLine" id="cb2-96" title="96"><span class="co">//    freopen("computer.txt","w",stdout);</span></a>
<a class="sourceLine" id="cb2-97" title="97">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF){</a>
<a class="sourceLine" id="cb2-98" title="98">        mst(head,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-99" title="99">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">2</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb2-100" title="100">            <span class="dt">int</span> v,wei;</a>
<a class="sourceLine" id="cb2-101" title="101">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;v,&amp;wei);</a>
<a class="sourceLine" id="cb2-102" title="102">            add(i,v,wei);</a>
<a class="sourceLine" id="cb2-103" title="103">            add(v,i,wei);</a>
<a class="sourceLine" id="cb2-104" title="104">        }</a>
<a class="sourceLine" id="cb2-105" title="105">        <span class="dt">int</span> p1=bfs1(<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-106" title="106">        <span class="dt">int</span> p2=bfs2(p1);            <span class="co">//得到端点1到其他点的距离 </span></a>
<a class="sourceLine" id="cb2-107" title="107">        bfs1(p2);                <span class="co">//得到端点2到其他点的距离 </span></a>
<a class="sourceLine" id="cb2-108" title="108">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb2-109" title="109">            printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,max(dis1[i],dis2[i]));</a>
<a class="sourceLine" id="cb2-110" title="110">    }</a>
<a class="sourceLine" id="cb2-111" title="111">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-112" title="112">} </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数据结构</category>
        <category>树</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C++</tag>
        <tag>数据结构</tag>
        <tag>树</tag>
        <tag>树的直径</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ2063 - Investment</title>
    <url>/2019/02/22/POJ2063-Investment/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/POJ-2063">Investment</a></p>
<p>  其实就是做若干次的完全背包，每做一次都更新一下钱的总数。需要注意的是，因为钱的总数可能会很大，所以需要进行缩小，以免MLE。缩小方法是，因为每一种证券的价钱都是1000的倍数，故我们可以将它们的价钱都缩小为原来的1/1000(而利息不变)。</p>
<span id="more"></span>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">struct</span> bond{</a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="dt">int</span> val,inte;</a>
<a class="sourceLine" id="cb1-13" title="13">};</a>
<a class="sourceLine" id="cb1-14" title="14">bond arr[<span class="dv">15</span>];</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">int</span> dp[maxn];</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-17" title="17">{</a>
<a class="sourceLine" id="cb1-18" title="18">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-19" title="19">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-21" title="21">    {</a>
<a class="sourceLine" id="cb1-22" title="22">        <span class="dt">int</span> begin;<span class="dt">int</span> year;</a>
<a class="sourceLine" id="cb1-23" title="23">        cin&gt;&gt;begin&gt;&gt;year;</a>
<a class="sourceLine" id="cb1-24" title="24">        <span class="dt">int</span> vtot=begin/<span class="dv">1000</span>;</a>
<a class="sourceLine" id="cb1-25" title="25">        <span class="dt">int</span> d;</a>
<a class="sourceLine" id="cb1-26" title="26">        cin&gt;&gt;d;</a>
<a class="sourceLine" id="cb1-27" title="27">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=d;i++){</a>
<a class="sourceLine" id="cb1-28" title="28">            cin&gt;&gt;arr[i].val&gt;&gt;arr[i].inte;</a>
<a class="sourceLine" id="cb1-29" title="29">            arr[i].val/=<span class="dv">1000</span>;</a>
<a class="sourceLine" id="cb1-30" title="30">        }</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="dt">int</span> ans=begin;</a>
<a class="sourceLine" id="cb1-32" title="32">        <span class="cf">for</span>(<span class="dt">int</span> y=<span class="dv">0</span>;y&lt;year;y++)</a>
<a class="sourceLine" id="cb1-33" title="33">        {    </a>
<a class="sourceLine" id="cb1-34" title="34">            <span class="dt">int</span> maxi=-<span class="dv">1</span>;mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-35" title="35">            vtot=ans/<span class="dv">1000</span>;</a>
<a class="sourceLine" id="cb1-36" title="36">            <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=d;i++)</a>
<a class="sourceLine" id="cb1-37" title="37">            {</a>
<a class="sourceLine" id="cb1-38" title="38">                <span class="cf">for</span>(<span class="dt">int</span> j=arr[i].val;j&lt;=vtot;j++)</a>
<a class="sourceLine" id="cb1-39" title="39">                {    </a>
<a class="sourceLine" id="cb1-40" title="40">                    <span class="dt">int</span> tmp=arr[i].inte;</a>
<a class="sourceLine" id="cb1-41" title="41">                    dp[j]=max(dp[j],dp[j-arr[i].val]+tmp);</a>
<a class="sourceLine" id="cb1-42" title="42">                    maxi=max(maxi,dp[j]);</a>
<a class="sourceLine" id="cb1-43" title="43">                }</a>
<a class="sourceLine" id="cb1-44" title="44">            }</a>
<a class="sourceLine" id="cb1-45" title="45">            ans+=dp[vtot];</a>
<a class="sourceLine" id="cb1-46" title="46">        }</a>
<a class="sourceLine" id="cb1-47" title="47">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-48" title="48">    }</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-50" title="50">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>完全背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>完全背包</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ2159-Ancient Cipher</title>
    <url>/2019/01/26/POJ2159-Ancient-Cipher/</url>
    <content><![CDATA[<p>题目链接：<a href="http://poj.org/problem?id=2159">Ancient Cipher</a> <span id="more"></span> 代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5">using namespace std;</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="dt">char</span> ori[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="dt">char</span> sec[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">int</span> na[<span class="dv">30</span>],nb[<span class="dv">30</span>];</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-10" title="10">{    </a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="dt">int</span> len1,len2;</a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="dt">int</span> i;</a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="dt">int</span> flag;</a>
<a class="sourceLine" id="cb1-14" title="14">    <span class="cf">while</span>(scanf(<span class="st">"%s %s"</span>,sec,ori)!=EOF)</a>
<a class="sourceLine" id="cb1-15" title="15">    {    </a>
<a class="sourceLine" id="cb1-16" title="16">        flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-17" title="17">        len1=strlen(ori);</a>
<a class="sourceLine" id="cb1-18" title="18">        len2=strlen(sec);</a>
<a class="sourceLine" id="cb1-19" title="19">        <span class="cf">for</span>(i=<span class="dv">0</span>;i&lt;len1;i++)</a>
<a class="sourceLine" id="cb1-20" title="20">            na[ori[i]-<span class="ch">'A'</span>]++;</a>
<a class="sourceLine" id="cb1-21" title="21">        <span class="cf">for</span>(i=<span class="dv">0</span>;i&lt;len2;i++)</a>
<a class="sourceLine" id="cb1-22" title="22">            nb[sec[i]-<span class="ch">'A'</span>]++;</a>
<a class="sourceLine" id="cb1-23" title="23">        sort(na,na+<span class="dv">26</span>);sort(nb,nb+<span class="dv">26</span>);</a>
<a class="sourceLine" id="cb1-24" title="24">        <span class="cf">for</span>(i=<span class="dv">0</span>;i&lt;<span class="dv">30</span>;i++)</a>
<a class="sourceLine" id="cb1-25" title="25">        {</a>
<a class="sourceLine" id="cb1-26" title="26">            <span class="cf">if</span>(na[i]!=nb[i])</a>
<a class="sourceLine" id="cb1-27" title="27">            {</a>
<a class="sourceLine" id="cb1-28" title="28">                flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-29" title="29">                <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-30" title="30">            }</a>
<a class="sourceLine" id="cb1-31" title="31">        }</a>
<a class="sourceLine" id="cb1-32" title="32">        <span class="cf">if</span>(flag==<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-33" title="33">        {</a>
<a class="sourceLine" id="cb1-34" title="34">            printf(<span class="st">"NO</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-35" title="35">        }</a>
<a class="sourceLine" id="cb1-36" title="36">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-37" title="37">        {</a>
<a class="sourceLine" id="cb1-38" title="38">            printf(<span class="st">"YES</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-39" title="39">        }</a>
<a class="sourceLine" id="cb1-40" title="40">    }</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-42" title="42">}</a></code></pre></div>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这题是真的坑！因为题目并没有说置换密码一定就是将某个单词的下一个单词用来置换这一个单词，它完全有可能是乱来的！比如说A-C,B-E,C-D,D-F,E-G,F-H,然后从I开始，后面的字母又按照“用下一个字母置换该字母”的方法来置换当前字母。应该注意到的是，无论是题目中的那种加密方式（置换、排列），都无法改变字母的出现频度。因此，只需要比较输入的两个字符串的字母出现频度即可。这里的所说的“比较字母出现频度”，并不是说比较某一个字母在第一个字符串中的出现频度以及在第二个字符串中的出现频度；而是比较“是不是都有某个字母出现了若干次”，比如说，假如字符串A的字母出现频度列表为</p>
<table>
<thead>
<tr class="header">
<th>字母</th>
<th>频度</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>D</td>
<td>2次</td>
</tr>
<tr class="even">
<td>E</td>
<td>3次</td>
</tr>
<tr class="odd">
<td>R</td>
<td>8次</td>
</tr>
</tbody>
</table>
<p>而另一个字符串B的字母出现频度列表为</p>
<table>
<thead>
<tr class="header">
<th>字母</th>
<th>频度</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Q</td>
<td>2次</td>
</tr>
<tr class="even">
<td>U</td>
<td>3次</td>
</tr>
<tr class="odd">
<td>P</td>
<td>8次</td>
</tr>
</tbody>
</table>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那这两个字符串也是相互匹配的！为什么？因为我不知道置换加密的规则到底是怎样的，但我知道它是一一对应的，也就是说不会改变字母出现频度的。有可能它的规则就是D-Q，E-U，R-P，这样也是可能的！所以说只需要比较两个字符串的字母出现频度即可</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ2236 - Wireless Network</title>
    <url>/2019/02/27/POJ2236-Wireless-Netword/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/POJ-2236">Wireless Network</a></p>
<p>一道并查集模板题。</p>
<span id="more"></span>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="dt">int</span> posx[<span class="dv">1200</span>],posy[<span class="dv">1200</span>];</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">int</span> pre[<span class="dv">1200</span>];</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">int</span> been[<span class="dv">1200</span>];</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="dt">int</span> findr(<span class="dt">int</span> x)</a>
<a class="sourceLine" id="cb1-17" title="17">{</a>
<a class="sourceLine" id="cb1-18" title="18">    <span class="cf">if</span>(x==pre[x])</a>
<a class="sourceLine" id="cb1-19" title="19">        <span class="cf">return</span> x;</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">return</span> pre[x]=findr(pre[x]);</a>
<a class="sourceLine" id="cb1-21" title="21">}</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> dist(<span class="dt">int</span> ax,<span class="dt">int</span> ay,<span class="dt">int</span> bx,<span class="dt">int</span> by)</a>
<a class="sourceLine" id="cb1-23" title="23">{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="cf">return</span> (ax-bx)*(ax-bx)+(ay-by)*(ay-by);</a>
<a class="sourceLine" id="cb1-25" title="25">}</a>
<a class="sourceLine" id="cb1-26" title="26"><span class="dt">void</span> rep(<span class="dt">int</span> i,<span class="dt">int</span> x,<span class="dt">int</span> n,<span class="dt">int</span> d)</a>
<a class="sourceLine" id="cb1-27" title="27">{    </a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="dt">int</span> ri=findr(i);</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="dt">int</span> rx=findr(x);</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">if</span>(dist(posx[x],posy[x],posx[i],posy[i])&lt;=d*d)    </a>
<a class="sourceLine" id="cb1-31" title="31">        pre[rx]=ri;</a>
<a class="sourceLine" id="cb1-32" title="32">}</a>
<a class="sourceLine" id="cb1-33" title="33"><span class="dt">bool</span> check(<span class="dt">int</span> a,<span class="dt">int</span> b)</a>
<a class="sourceLine" id="cb1-34" title="34">{</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="dt">char</span> ch;</a>
<a class="sourceLine" id="cb1-36" title="36">    <span class="dt">int</span> ra=findr(a);</a>
<a class="sourceLine" id="cb1-37" title="37">    <span class="dt">int</span> rb=findr(b);</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="cf">if</span>(ra==rb)</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">return</span> <span class="kw">true</span>;</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">return</span> <span class="kw">false</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">}</a>
<a class="sourceLine" id="cb1-42" title="42"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-43" title="43">{</a>
<a class="sourceLine" id="cb1-44" title="44">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-45" title="45">    <span class="dt">int</span> d;<span class="dt">int</span> p,q;</a>
<a class="sourceLine" id="cb1-46" title="46">    <span class="dt">char</span> ch;</a>
<a class="sourceLine" id="cb1-47" title="47">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;d)!=EOF)</a>
<a class="sourceLine" id="cb1-48" title="48">    {</a>
<a class="sourceLine" id="cb1-49" title="49">        <span class="dt">int</span> i;</a>
<a class="sourceLine" id="cb1-50" title="50">        <span class="cf">for</span>(i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-51" title="51">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;posx[i],&amp;posy[i]);</a>
<a class="sourceLine" id="cb1-52" title="52">        getchar();</a>
<a class="sourceLine" id="cb1-53" title="53">        <span class="cf">for</span>(i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-54" title="54">            pre[i]=i;</a>
<a class="sourceLine" id="cb1-55" title="55">        mst(been,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-56" title="56">        <span class="cf">while</span>(cin&gt;&gt;ch)</a>
<a class="sourceLine" id="cb1-57" title="57">        {</a>
<a class="sourceLine" id="cb1-58" title="58">            <span class="cf">if</span>(ch==<span class="ch">'O'</span>)</a>
<a class="sourceLine" id="cb1-59" title="59">            {</a>
<a class="sourceLine" id="cb1-60" title="60">                scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;p);</a>
<a class="sourceLine" id="cb1-61" title="61">                been[p]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-62" title="62">                <span class="cf">for</span>(i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-63" title="63">                {</a>
<a class="sourceLine" id="cb1-64" title="64">                    <span class="cf">if</span>(been[i])</a>
<a class="sourceLine" id="cb1-65" title="65">                        rep(i,p,n,d);</a>
<a class="sourceLine" id="cb1-66" title="66">                }</a>
<a class="sourceLine" id="cb1-67" title="67">            }</a>
<a class="sourceLine" id="cb1-68" title="68">            <span class="cf">if</span>(ch==<span class="ch">'S'</span>)</a>
<a class="sourceLine" id="cb1-69" title="69">            {</a>
<a class="sourceLine" id="cb1-70" title="70">                scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;p,&amp;q);</a>
<a class="sourceLine" id="cb1-71" title="71">                <span class="cf">if</span>(check(p,q))</a>
<a class="sourceLine" id="cb1-72" title="72">                    printf(<span class="st">"SUCCESS</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-73" title="73">                <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-74" title="74">                    printf(<span class="st">"FAIL</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-75" title="75">            }</a>
<a class="sourceLine" id="cb1-76" title="76">        }</a>
<a class="sourceLine" id="cb1-77" title="77">    }</a>
<a class="sourceLine" id="cb1-78" title="78">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-79" title="79">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>并查集</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>图论</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ2249 - Binomial Showdown </title>
    <url>/2019/02/24/POJ2249-Binomial-Showdown/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/POJ-2249">Binomial Showdown</a></p>
<p>  使用C(n,k)与C(n,k-1)的递推关系来求组合数。</p>
<span id="more"></span>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define INF </span><span class="bn">0x7fffffff</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-13" title="13">ll ans[maxn];</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-15" title="15">{</a>
<a class="sourceLine" id="cb1-16" title="16">    ll n,m;</a>
<a class="sourceLine" id="cb1-17" title="17">    mst(ans,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-18" title="18">    <span class="cf">while</span>(cin&gt;&gt;n&gt;&gt;m&amp;&amp;n){</a>
<a class="sourceLine" id="cb1-19" title="19">        ans[<span class="dv">0</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-20" title="20">        <span class="cf">if</span>(n-m&lt;m)</a>
<a class="sourceLine" id="cb1-21" title="21">            m=n-m;</a>
<a class="sourceLine" id="cb1-22" title="22">        <span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-23" title="23">            <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++)</a>
<a class="sourceLine" id="cb1-24" title="24">                ans[i]=(n-i+<span class="dv">1</span>)*ans[i-<span class="dv">1</span>]/i;</a>
<a class="sourceLine" id="cb1-25" title="25">        }</a>
<a class="sourceLine" id="cb1-26" title="26">        cout&lt;&lt;ans[m]&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-27" title="27">    }</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-29" title="29">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>组合数学</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>组合数学</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ2449 - Remmarguts&#39; Date</title>
    <url>/2019/08/20/POJ2449-Remmarguts-Date/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H9cd98d6e6a1347cfb0327ada94690b69u.jpg"></p>
<span id="more"></span>
<p><a href="https://cn.vjudge.net/problem/POJ-2449">Remmarguts's Date</a></p>
<p>第一场区域赛选拔赛的题目，虽然是板子题，但这个板子我是第一次敲......不仅板子是第一次敲，k短路也是第一次敲......</p>
<p>题意就是让你求一张图上从起点S到终点T的k短路。这里我们使用A*来进行求解。构造一个函数<span class="math inline">\(h[x] = f[x] + g[x]\)</span>，其中f[x]表示当前搜索时的代价,也就是边权；g[x]表示的是从当前点到终点的最短路,这可以通过以T为起点反向dijkstra得到。对于终点T，当它第k次从队首中被拿出来时，说明此时已经找到了k短路。事实上这里的A*只是使用估价函数优化了的BFS，是简化了的A*，真正的A*还需要维护OpenList和CloseList两个集合。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">struct</span> edge{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> u;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> v,c;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> nxt;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="dt">int</span> nxt1;</a>
<a class="sourceLine" id="cb1-28" title="28">    edge(){}</a>
<a class="sourceLine" id="cb1-29" title="29">    edge(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> c)</a>
<a class="sourceLine" id="cb1-30" title="30">        :u(u),v(v),c(c){</a>
<a class="sourceLine" id="cb1-31" title="31">        }</a>
<a class="sourceLine" id="cb1-32" title="32">};</a>
<a class="sourceLine" id="cb1-33" title="33">edge es[<span class="dv">100005</span>];</a>
<a class="sourceLine" id="cb1-34" title="34"><span class="dt">int</span> head[<span class="dv">1010</span>];</a>
<a class="sourceLine" id="cb1-35" title="35"><span class="dt">int</span> head1[<span class="dv">1010</span>];</a>
<a class="sourceLine" id="cb1-36" title="36"><span class="dt">int</span> tot_e;        <span class="co">//总边数 </span></a>
<a class="sourceLine" id="cb1-37" title="37"><span class="dt">int</span> st,ed,k;</a>
<a class="sourceLine" id="cb1-38" title="38"><span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-39" title="39"><span class="dt">int</span> dis[maxn];</a>
<a class="sourceLine" id="cb1-40" title="40"><span class="dt">bool</span> vis[maxn];</a>
<a class="sourceLine" id="cb1-41" title="41"><span class="kw">struct</span> pro{</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="dt">int</span> v,c;</a>
<a class="sourceLine" id="cb1-43" title="43">    pro(){}</a>
<a class="sourceLine" id="cb1-44" title="44">    pro(<span class="dt">int</span> v,<span class="dt">int</span> c)</a>
<a class="sourceLine" id="cb1-45" title="45">        :v(v),c(c){</a>
<a class="sourceLine" id="cb1-46" title="46">        }</a>
<a class="sourceLine" id="cb1-47" title="47">    <span class="co">/*</span></a>
<a class="sourceLine" id="cb1-48" title="48"><span class="co">    h[x] = f[x] + g[x]</span></a>
<a class="sourceLine" id="cb1-49" title="49"><span class="co">    其中f[x]表示当前搜索时的代价,也就是边权</span></a>
<a class="sourceLine" id="cb1-50" title="50"><span class="co">    g[x]表示的是从当前点到终点的最短路,可以</span></a>
<a class="sourceLine" id="cb1-51" title="51"><span class="co">    反向跑一遍dij得到 </span></a>
<a class="sourceLine" id="cb1-52" title="52"><span class="co">    */</span></a>
<a class="sourceLine" id="cb1-53" title="53">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> pro&amp; pa) <span class="at">const</span>{</a>
<a class="sourceLine" id="cb1-54" title="54">        <span class="cf">return</span> c+dis[v]&gt;pa.c+dis[pa.v];        <span class="co">//估价函数 </span></a>
<a class="sourceLine" id="cb1-55" title="55">    }</a>
<a class="sourceLine" id="cb1-56" title="56">};</a>
<a class="sourceLine" id="cb1-57" title="57"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb1-58" title="58">{</a>
<a class="sourceLine" id="cb1-59" title="59">    mst(head,-<span class="dv">1</span>);mst(head1,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-60" title="60">    tot_e=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-61" title="61">}</a>
<a class="sourceLine" id="cb1-62" title="62"><span class="dt">void</span> add(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> c)</a>
<a class="sourceLine" id="cb1-63" title="63">{</a>
<a class="sourceLine" id="cb1-64" title="64">    <span class="co">//链式前向星加边</span></a>
<a class="sourceLine" id="cb1-65" title="65">    es[tot_e]=edge(u,v,c);</a>
<a class="sourceLine" id="cb1-66" title="66">    es[tot_e].nxt=head[u];head[u]=tot_e;</a>
<a class="sourceLine" id="cb1-67" title="67">    es[tot_e].nxt1=head1[v];head1[v]=tot_e++;</a>
<a class="sourceLine" id="cb1-68" title="68">}</a>
<a class="sourceLine" id="cb1-69" title="69">priority_queue&lt;pro&gt; que;</a>
<a class="sourceLine" id="cb1-70" title="70"><span class="dt">void</span> dijkstra(<span class="dt">int</span> start)</a>
<a class="sourceLine" id="cb1-71" title="71">{</a>
<a class="sourceLine" id="cb1-72" title="72">    mst(vis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-73" title="73">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)    dis[i]=INF;</a>
<a class="sourceLine" id="cb1-74" title="74">    dis[start]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-75" title="75">    <span class="cf">while</span>(!que.empty())    que.pop();</a>
<a class="sourceLine" id="cb1-76" title="76">    que.push(pro(start,<span class="dv">0</span>));</a>
<a class="sourceLine" id="cb1-77" title="77">    <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb1-78" title="78">        pro cur=que.top();</a>
<a class="sourceLine" id="cb1-79" title="79">        que.pop();</a>
<a class="sourceLine" id="cb1-80" title="80">        <span class="cf">if</span>(vis[cur.v])    <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb1-81" title="81">        vis[cur.v]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-82" title="82">        <span class="cf">for</span>(<span class="dt">int</span> i=head1[cur.v];i!=-<span class="dv">1</span>;i=es[i].nxt1){</a>
<a class="sourceLine" id="cb1-83" title="83">            <span class="cf">if</span>(dis[es[i].u]&gt;dis[cur.v]+es[i].c){</a>
<a class="sourceLine" id="cb1-84" title="84">                dis[es[i].u]=dis[cur.v]+es[i].c;</a>
<a class="sourceLine" id="cb1-85" title="85">                que.push(pro(es[i].u,<span class="dv">0</span>));</a>
<a class="sourceLine" id="cb1-86" title="86">            }</a>
<a class="sourceLine" id="cb1-87" title="87">        }</a>
<a class="sourceLine" id="cb1-88" title="88">    }</a>
<a class="sourceLine" id="cb1-89" title="89">}</a>
<a class="sourceLine" id="cb1-90" title="90"><span class="dt">int</span> Astar(<span class="dt">int</span> start)        <span class="co">//其实这里只是经过了启发式优化的BFS </span></a>
<a class="sourceLine" id="cb1-91" title="91">{</a>
<a class="sourceLine" id="cb1-92" title="92">    <span class="cf">while</span>(!que.empty())    que.pop();</a>
<a class="sourceLine" id="cb1-93" title="93">    que.push(pro(start,<span class="dv">0</span>));</a>
<a class="sourceLine" id="cb1-94" title="94">    <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb1-95" title="95">        pro cur=que.top();</a>
<a class="sourceLine" id="cb1-96" title="96">        que.pop();</a>
<a class="sourceLine" id="cb1-97" title="97">        <span class="cf">if</span>(cur.v==ed){</a>
<a class="sourceLine" id="cb1-98" title="98">            <span class="cf">if</span>(k&gt;<span class="dv">1</span>)    k--;        <span class="co">//终点第k次入队时,说明找到了k短路 </span></a>
<a class="sourceLine" id="cb1-99" title="99">            <span class="cf">else</span>    <span class="cf">return</span> cur.c;</a>
<a class="sourceLine" id="cb1-100" title="100">        }</a>
<a class="sourceLine" id="cb1-101" title="101">        <span class="cf">for</span>(<span class="dt">int</span> i=head[cur.v];i!=-<span class="dv">1</span>;i=es[i].nxt)</a>
<a class="sourceLine" id="cb1-102" title="102">            que.push(pro(es[i].v,cur.c+es[i].c));</a>
<a class="sourceLine" id="cb1-103" title="103">    }</a>
<a class="sourceLine" id="cb1-104" title="104">    <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-105" title="105">}</a>
<a class="sourceLine" id="cb1-106" title="106"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-107" title="107">{</a>
<a class="sourceLine" id="cb1-108" title="108">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m)!=EOF){</a>
<a class="sourceLine" id="cb1-109" title="109">        init();</a>
<a class="sourceLine" id="cb1-110" title="110">        <span class="dt">int</span> u,v,c;</a>
<a class="sourceLine" id="cb1-111" title="111">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb1-112" title="112">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;u,&amp;v,&amp;c);</a>
<a class="sourceLine" id="cb1-113" title="113">            add(u,v,c);</a>
<a class="sourceLine" id="cb1-114" title="114">        }</a>
<a class="sourceLine" id="cb1-115" title="115">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;st,&amp;ed,&amp;k);</a>
<a class="sourceLine" id="cb1-116" title="116">        dijkstra(ed);</a>
<a class="sourceLine" id="cb1-117" title="117">        <span class="cf">if</span>(dis[st]==INF){</a>
<a class="sourceLine" id="cb1-118" title="118">            printf(<span class="st">"-1</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-119" title="119">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-120" title="120">            <span class="cf">if</span>(st==ed)    k++;</a>
<a class="sourceLine" id="cb1-121" title="121">            <span class="dt">int</span> ans=Astar(st);</a>
<a class="sourceLine" id="cb1-122" title="122">            printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-123" title="123">        }</a>
<a class="sourceLine" id="cb1-124" title="124">    }</a>
<a class="sourceLine" id="cb1-125" title="125">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-126" title="126">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>A*</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C++</tag>
        <tag>图论</tag>
        <tag>k短路</tag>
        <tag>A*</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ2528 - Mayor&#39;s poster</title>
    <url>/2019/05/18/POJ2528-Mayor-s-poster/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/HTB1HHj9bLWG3KVjSZFgq6zTspXaO.jpg"></p>
<p>Photo by Kellie Churchman from Pexels <span id="more"></span></p>
<p><a href="https://cn.vjudge.net/problem/POJ-2528">Mayor's poster</a></p>
<p>题意说的是，有一面非常非常长的墙，现在要向这面墙上贴上若干张宽度不等的海报，问贴完后有多少张海报能看得到(也就是有多少张海报没有被完全覆盖)。</p>
<p>抽象一下问题就是，有一段无限长的线段，现在要对线段上的某一段染色，问经过若干次染色后，线段上一共有多少种颜色。</p>
<p>因为涉及到了区间修改(贴海报),所以很自然想到用线段树去维护。一开始我的想法是写个线段树去维护墙壁上的海报，“贴海报”对应将某个区间上的值设置为当前要贴的海报对应的id，然后再搞个查询区间和的操作，通过区间和来判断当前要贴的海报的状态(一共三种状态：1.完全不会覆盖当前区间已经存在的海报，此时对应区间和为0；2.会部分覆盖当前区间已经存在的海报；3.会完全覆盖当前区间已经存在的海报)......但这样做其实很不好实现，最明显的问题就是要怎么判断会完全覆盖这种情况？还有就是如果当前区间存在不止一张海报，那又怎么搞？</p>
<p>然后后来发现完全不用这么麻烦OTZ，直接搞个set操作(将当前区间的值设为某一个特定的id)，然后query的时候看一下当前区间有没有被贴海报，同时如果有被贴海报的话，海报对应的id是否已经被访问过了(这里要另外用个vis数组维护一下)，同时满足上面这两个条件的话，就说明有一张海报能被看见，所以ans++......</p>
<p>然后还有就是要做一下离散化，因为本题数据范围很大，直接搞的话感觉是要MLE的。这里再简单说一下离散化，毕竟这是蒟蒻第二次做有关离散化的题OTZ，就当作是一个笔记。</p>
<p>所谓的离散化，就是将一个范围很大的数，转化为数据范围更小的数，从而大大减少内存使用。使用离散化的其中一个场景是，有时候序列中的数的范围很大，且不是连续的，但我们只关心这些数字之间的相对大小，不关心它们的具体数值。这时就可以使用离散化处理，将它们映射到一组连续且数据范围小得多的数字上。离散化的大致步骤是</p>
<ul>
<li>排序，这是为了后面的去重和二分</li>
<li>去重，这里使用的是C++的unique()函数。这个函数的功能是对于一段连续的数，只保留它们中的第一个，比方说2，2，2，4，5，6，2，使用unique()后，会变成2，4，5，6，2，最后一个2因为不是连续的，所以不会被删除。因此，在使用unique()去重时，必须要保证序列是有序的，这个用sort()处理一下即可</li>
<li>去重完毕后，使用lower_bound将原序列中的数映射到一个更小的数字上。</li>
</ul>
<p>以这道题的样例为例子： 1 4 2 6 8 10 3 4 7 10 这是五张海报的左右端点。我们首先对它们进行排序和去重。处理后可以得到这样的一个序列：</p>
<center>
1,2,3,4,6,7,8,10
</center>
<p>我们现在将这些只进行映射，具体来说就是：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">原数值</th>
<th style="text-align: center;">映射值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">3</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: center;">5</td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: center;">6</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">7</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">8</td>
</tr>
</tbody>
</table>
<p>关于映射，再举一个例子：对于序列1、1000、100000000，我们可以将他们映射到1、2、3上，这样一来，就能将数据范围大大减小。</p>
<div class="note info">
<p>
看了下题解，发现这道题不能这么简单的离散化，但这题的数据比较弱，所以依然能AC...emmmm，蒟蒻不懂OTZ
</p>
</div>
<p>具体AC代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">10005</span>;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> vis[<span class="dv">10000</span>+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> lazy[maxn&lt;&lt;<span class="dv">3</span>];        <span class="co">//这里最好开大一点，仅仅是四倍空间的话会WA</span></a>
<a class="sourceLine" id="cb1-24" title="24"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> lef;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> rig;</a>
<a class="sourceLine" id="cb1-27" title="27">};</a>
<a class="sourceLine" id="cb1-28" title="28">node ps[<span class="dv">20000</span>+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb1-29" title="29"><span class="dt">void</span> pushdown(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-30" title="30">{</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="cf">if</span>(lazy[rt]!=<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-32" title="32">        lazy[rt&lt;&lt;<span class="dv">1</span>]=lazy[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=lazy[rt];</a>
<a class="sourceLine" id="cb1-33" title="33">        lazy[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">    }</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-36" title="36">}</a>
<a class="sourceLine" id="cb1-37" title="37"><span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-38" title="38"><span class="dt">void</span> update(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-39" title="39">{</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig){</a>
<a class="sourceLine" id="cb1-41" title="41">        lazy[rt]=todo;</a>
<a class="sourceLine" id="cb1-42" title="42">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-43" title="43">    }</a>
<a class="sourceLine" id="cb1-44" title="44">    pushdown(rt);</a>
<a class="sourceLine" id="cb1-45" title="45">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-46" title="46">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb1-47" title="47">        update(toL,toR,todo,lson);</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb1-49" title="49">        update(toL,toR,todo,rson);</a>
<a class="sourceLine" id="cb1-50" title="50">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-51" title="51">}</a>
<a class="sourceLine" id="cb1-52" title="52"><span class="dt">void</span> query(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-53" title="53">{</a>
<a class="sourceLine" id="cb1-54" title="54">    <span class="cf">if</span>(lazy[rt]){</a>
<a class="sourceLine" id="cb1-55" title="55">        <span class="cf">if</span>(!vis[lazy[rt]]){</a>
<a class="sourceLine" id="cb1-56" title="56">            ans++;</a>
<a class="sourceLine" id="cb1-57" title="57">            vis[lazy[rt]]=<span class="dv">1</span>;    <span class="co">//防止同一张海报重复统计</span></a>
<a class="sourceLine" id="cb1-58" title="58">        }</a>
<a class="sourceLine" id="cb1-59" title="59">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-60" title="60">    }</a>
<a class="sourceLine" id="cb1-61" title="61">    <span class="cf">if</span>(lef==rig)</a>
<a class="sourceLine" id="cb1-62" title="62">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-63" title="63">    pushdown(rt);</a>
<a class="sourceLine" id="cb1-64" title="64">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-65" title="65">    <span class="cf">if</span>(lef&lt;=mid)</a>
<a class="sourceLine" id="cb1-66" title="66">        query(lson);</a>
<a class="sourceLine" id="cb1-67" title="67">    <span class="cf">if</span>(rig&gt;mid)</a>
<a class="sourceLine" id="cb1-68" title="68">        query(rson);</a>
<a class="sourceLine" id="cb1-69" title="69">}</a>
<a class="sourceLine" id="cb1-70" title="70"><span class="dt">int</span> lsh[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb1-71" title="71"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-72" title="72">{</a>
<a class="sourceLine" id="cb1-73" title="73">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-74" title="74">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-75" title="75">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb1-76" title="76">        <span class="dt">int</span> idx=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-77" title="77">        mst(lsh,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-78" title="78">        mst(lazy,<span class="dv">0</span>);mst(vis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-79" title="79">        ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-80" title="80">        <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-81" title="81">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb1-82" title="82">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;ps[i].lef,&amp;ps[i].rig);</a>
<a class="sourceLine" id="cb1-83" title="83">            lsh[idx++]=ps[i].lef;lsh[idx++]=ps[i].rig;</a>
<a class="sourceLine" id="cb1-84" title="84">        }</a>
<a class="sourceLine" id="cb1-85" title="85">        sort(lsh,lsh+idx);</a>
<a class="sourceLine" id="cb1-86" title="86">        <span class="dt">int</span> cnt=unique(lsh,lsh+idx)-lsh;</a>
<a class="sourceLine" id="cb1-87" title="87">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb1-88" title="88">            <span class="dt">int</span> L=lower_bound(lsh,lsh+cnt,ps[i].lef)-lsh+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-89" title="89">            <span class="dt">int</span> R=lower_bound(lsh,lsh+cnt,ps[i].rig)-lsh+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-90" title="90">            update(L,R,i+<span class="dv">1</span>,<span class="dv">1</span>,cnt+<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-91" title="91">        }</a>
<a class="sourceLine" id="cb1-92" title="92">        query(<span class="dv">1</span>,cnt+<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-93" title="93">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-94" title="94">    }</a>
<a class="sourceLine" id="cb1-95" title="95">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-96" title="96">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数据结构</category>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>数据结构</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ2891 - Strange Way to Express Integers</title>
    <url>/2019/03/02/POJ2891-Strange-Way-to-Express-Integers/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/POJ-2891">Strange Way to Express Integers</a></p>
<p>  拓展中国剩余定理的模板题，但我并看不懂模板OTZ(过段时间会补上个人理解，先把代码放这)</p>
<span id="more"></span>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-16" title="16">ll exgcd(ll a,ll b,ll&amp; x,ll&amp; y)</a>
<a class="sourceLine" id="cb1-17" title="17">{</a>
<a class="sourceLine" id="cb1-18" title="18">    <span class="cf">if</span>(!b)</a>
<a class="sourceLine" id="cb1-19" title="19">    {</a>
<a class="sourceLine" id="cb1-20" title="20">        x=<span class="dv">1</span>;y=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-21" title="21">        <span class="cf">return</span> a;</a>
<a class="sourceLine" id="cb1-22" title="22">    }</a>
<a class="sourceLine" id="cb1-23" title="23">    ll r=exgcd(b,a%b,x,y);</a>
<a class="sourceLine" id="cb1-24" title="24">    ll tmp=x;</a>
<a class="sourceLine" id="cb1-25" title="25">    x=y;</a>
<a class="sourceLine" id="cb1-26" title="26">    y=tmp-(a/b)*y;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">return</span> r;</a>
<a class="sourceLine" id="cb1-28" title="28">}</a>
<a class="sourceLine" id="cb1-29" title="29">ll a[maxn],m[maxn];</a>
<a class="sourceLine" id="cb1-30" title="30">ll solve(ll n)</a>
<a class="sourceLine" id="cb1-31" title="31">{</a>
<a class="sourceLine" id="cb1-32" title="32">    ll M=m[<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-33" title="33">    ll ans=a[<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-34" title="34">    ll x,y;ll r;ll tmp;</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">2</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-36" title="36">    {</a>
<a class="sourceLine" id="cb1-37" title="37">        r=exgcd(M,m[i],x,y);</a>
<a class="sourceLine" id="cb1-38" title="38">        <span class="cf">if</span>((a[i]-ans)%r)</a>
<a class="sourceLine" id="cb1-39" title="39">            <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-40" title="40">        x*=(a[i]-ans)/r;</a>
<a class="sourceLine" id="cb1-41" title="41">        tmp=m[i]/r;</a>
<a class="sourceLine" id="cb1-42" title="42">        x=(x%tmp+tmp)%tmp;</a>
<a class="sourceLine" id="cb1-43" title="43">        ans=M*x+ans;</a>
<a class="sourceLine" id="cb1-44" title="44">        M=M/r*m[i];</a>
<a class="sourceLine" id="cb1-45" title="45">        ans%=M;</a>
<a class="sourceLine" id="cb1-46" title="46">    }</a>
<a class="sourceLine" id="cb1-47" title="47">    ans=(ans%M+M)%M;</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-49" title="49">}</a>
<a class="sourceLine" id="cb1-50" title="50"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-51" title="51">{    </a>
<a class="sourceLine" id="cb1-52" title="52">    ll k;</a>
<a class="sourceLine" id="cb1-53" title="53">    <span class="cf">while</span>(cin&gt;&gt;k)</a>
<a class="sourceLine" id="cb1-54" title="54">    {</a>
<a class="sourceLine" id="cb1-55" title="55">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=k;i++)</a>
<a class="sourceLine" id="cb1-56" title="56">        cin&gt;&gt;m[i]&gt;&gt;a[i];</a>
<a class="sourceLine" id="cb1-57" title="57">        ll ans=solve(k);</a>
<a class="sourceLine" id="cb1-58" title="58">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-59" title="59">    }</a>
<a class="sourceLine" id="cb1-60" title="60">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-61" title="61">} </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>数论</tag>
        <tag>拓展中国剩余定理</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ2955 - Brackets</title>
    <url>/2019/07/30/POJ2955-Brackets/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/Ha88250073cd84aa58e53c0aa2f48effdV.jpg"></p>
<p>From <strong>Google Earth</strong> <span id="more"></span></p>
<p><a href="POJ%20-%202955">Brackets</a></p>
<p>题目大意是说，对于一个给定的括号序列<span class="math inline">\(S\)</span>，找出其最长的子序列，该子序列应该是括号匹配的，输出其长度。</p>
<p>大概是最基础的区间dp了。</p>
<p><span class="math inline">\(dp[i][j]\)</span>表示的是在区间<span class="math inline">\([i,j]\)</span>内，最长的满足要求的子序列的长度。如果<span class="math inline">\(S_i\)</span>与<span class="math inline">\(S_j\)</span>配对，则有 <span class="math display">\[
dp[i][j]=max(dp[i][j],dp[i+1][j-1]+2)
\]</span> 但这样得到的<span class="math inline">\(dp[i][j]\)</span>并不一定是最大的。以第二个样例为例：</p>
<p>对于区间<span class="math inline">\([1,6]\)</span>，<span class="math inline">\(S_1\)</span>和<span class="math inline">\(S_6\)</span>是配对的，所以有<span class="math inline">\(dp[1][6]=max(dp[1][6],dp[2][5]+2)\)</span>，而<span class="math inline">\(dp[2][5]\)</span>为2，如果只是从<span class="math inline">\(dp[2][5]+2\)</span>转移过来，就会忽略掉<span class="math inline">\(S_1S_2\)</span>以及<span class="math inline">\(S_5S_6\)</span>这两对配对括号。故我们还需要枚举区间<span class="math inline">\([i,j]\)</span>内的断点<span class="math inline">\(k\)</span>，从<span class="math inline">\(dp[i][k]+dp[k+1][j]\)</span>转移得到<span class="math inline">\(dp[i][j]\)</span>。</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#include </span><span class="im">&lt;assert.h&gt;</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">int</span> dp[<span class="dv">105</span>][<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">char</span> str[<span class="dv">105</span>]; </a>
<a class="sourceLine" id="cb1-26" title="26"><span class="dt">bool</span> check(<span class="dt">char</span> ca,<span class="dt">char</span> cb)</a>
<a class="sourceLine" id="cb1-27" title="27">{</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="cf">if</span>((ca==<span class="ch">'('</span>&amp;&amp;cb==<span class="ch">')'</span>)||(ca==<span class="ch">'['</span>&amp;&amp;cb==<span class="ch">']'</span>))    <span class="cf">return</span> <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-30" title="30">}</a>
<a class="sourceLine" id="cb1-31" title="31"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-32" title="32">{</a>
<a class="sourceLine" id="cb1-33" title="33">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%s</span><span class="st">"</span>,str+<span class="dv">1</span>)!=EOF){</a>
<a class="sourceLine" id="cb1-34" title="34">        <span class="cf">if</span>(str[<span class="dv">1</span>]==<span class="ch">'e'</span>)    <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-35" title="35">        mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-36" title="36">        <span class="dt">int</span> len=strlen(str+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-37" title="37">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=len;i++)</a>
<a class="sourceLine" id="cb1-38" title="38">            dp[i][i]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">for</span>(<span class="dt">int</span> i=len-<span class="dv">1</span>;i&gt;=<span class="dv">1</span>;i--){</a>
<a class="sourceLine" id="cb1-40" title="40">            <span class="cf">for</span>(<span class="dt">int</span> j=i+<span class="dv">1</span>;j&lt;=len;j++){</a>
<a class="sourceLine" id="cb1-41" title="41">                <span class="cf">if</span>(check(str[i],str[j])){</a>
<a class="sourceLine" id="cb1-42" title="42">                    dp[i][j]=max(dp[i][j],dp[i+<span class="dv">1</span>][j-<span class="dv">1</span>]+<span class="dv">2</span>);</a>
<a class="sourceLine" id="cb1-43" title="43">                }</a>
<a class="sourceLine" id="cb1-44" title="44">                <span class="cf">for</span>(<span class="dt">int</span> k=i;k&lt;j;k++)</a>
<a class="sourceLine" id="cb1-45" title="45">                    dp[i][j]=max(dp[i][j],dp[i][k]+dp[k+<span class="dv">1</span>][j]);</a>
<a class="sourceLine" id="cb1-46" title="46">            }</a>
<a class="sourceLine" id="cb1-47" title="47">        }</a>
<a class="sourceLine" id="cb1-48" title="48">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,dp[<span class="dv">1</span>][len]);</a>
<a class="sourceLine" id="cb1-49" title="49">    }</a>
<a class="sourceLine" id="cb1-50" title="50">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-51" title="51">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>区间DP</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>区间DP</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ3624 - Charm Bracelet</title>
    <url>/2019/02/17/POJ3624-Charm-Bracelet/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/POJ-3624">Charm Bracelet</a></p>
<p>  一道01背包模板题，套模板即可。</p>
<span id="more"></span>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="dt">int</span> w[<span class="dv">3500</span>],d[<span class="dv">3500</span>];</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="dt">int</span> dp[<span class="dv">20000</span>];</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-9" title="9">{    </a>
<a class="sourceLine" id="cb1-10" title="10">    memset(w,<span class="dv">0</span>,<span class="kw">sizeof</span>(w));memset(d,<span class="dv">0</span>,<span class="kw">sizeof</span>(d));memset(dp,<span class="dv">0</span>,<span class="kw">sizeof</span>(dp));</a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-12" title="12">    cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-14" title="14">        cin&gt;&gt;w[i]&gt;&gt;d[i];</a>
<a class="sourceLine" id="cb1-15" title="15">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-16" title="16">        <span class="cf">for</span>(<span class="dt">int</span> j=m;j&gt;=w[i];j--)</a>
<a class="sourceLine" id="cb1-17" title="17">            dp[j]=max(dp[j],dp[j-w[i]]+d[i]);</a>
<a class="sourceLine" id="cb1-18" title="18">    cout&lt;&lt;dp[m]&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-19" title="19">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-20" title="20">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>POJ3687 - Labelling Balls</title>
    <url>/2019/03/27/POJ3687-Labelling-Balls/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/POJ-3687">Labeling Balls</a></p>
<p>一道拓补排序的题，虽然a了但是是看题解过的......存在的疑问已在注释中标明 <span id="more"></span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> gra[<span class="dv">205</span>][<span class="dv">205</span>];</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="dt">int</span> deg[<span class="dv">40005</span>];        <span class="co">//记录入度 </span></a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> ans[<span class="dv">40005</span>];</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">bool</span> topo()</a>
<a class="sourceLine" id="cb1-25" title="25">{</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> tag;<span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">for</span>(<span class="dt">int</span> i=n;i&gt;=<span class="dv">1</span>;i--){        <span class="co">//这样反向循环的原理到底是什么？</span></a>
<a class="sourceLine" id="cb1-28" title="28">        <span class="cf">for</span>(<span class="dt">int</span> j=n;j&gt;=<span class="dv">1</span>;j--){</a>
<a class="sourceLine" id="cb1-29" title="29">            <span class="cf">if</span>(deg[j]==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-30" title="30">                tag=j;</a>
<a class="sourceLine" id="cb1-31" title="31">                deg[j]--;</a>
<a class="sourceLine" id="cb1-32" title="32">                ans[j]=i;        <span class="co">//???</span></a>
<a class="sourceLine" id="cb1-33" title="33">                cnt++;</a>
<a class="sourceLine" id="cb1-34" title="34">                <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-35" title="35">            }</a>
<a class="sourceLine" id="cb1-36" title="36">        }</a>
<a class="sourceLine" id="cb1-37" title="37">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=n;j++){</a>
<a class="sourceLine" id="cb1-38" title="38">            <span class="cf">if</span>(gra[tag][j]&gt;<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-39" title="39">                deg[j]--;</a>
<a class="sourceLine" id="cb1-40" title="40">        }</a>
<a class="sourceLine" id="cb1-41" title="41">    }</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">if</span>(cnt&lt;n)</a>
<a class="sourceLine" id="cb1-43" title="43">        <span class="cf">return</span> <span class="kw">false</span>;</a>
<a class="sourceLine" id="cb1-44" title="44">    <span class="cf">return</span> <span class="kw">true</span>;</a>
<a class="sourceLine" id="cb1-45" title="45">}</a>
<a class="sourceLine" id="cb1-46" title="46"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-47" title="47">{</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-49" title="49">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-50" title="50">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-51" title="51">    {</a>
<a class="sourceLine" id="cb1-52" title="52">        cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb1-53" title="53">        mst(deg,<span class="dv">0</span>);mst(gra,<span class="dv">0</span>);mst(ans,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-54" title="54">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb1-55" title="55">            <span class="dt">int</span> a,b;</a>
<a class="sourceLine" id="cb1-56" title="56">            cin&gt;&gt;a&gt;&gt;b;</a>
<a class="sourceLine" id="cb1-57" title="57">            <span class="cf">if</span>(!gra[b][a])        <span class="co">//???这里删去以后就会RE</span></a>
<a class="sourceLine" id="cb1-58" title="58">                deg[a]++;</a>
<a class="sourceLine" id="cb1-59" title="59">            gra[b][a]=<span class="dv">1</span>;        <span class="co">//为什么要反向建图？？？</span></a>
<a class="sourceLine" id="cb1-60" title="60">        }</a>
<a class="sourceLine" id="cb1-61" title="61">        <span class="cf">if</span>(!topo())</a>
<a class="sourceLine" id="cb1-62" title="62">            cout&lt;&lt;-<span class="dv">1</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-63" title="63">        <span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-64" title="64">            <span class="dt">int</span> pr=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-65" title="65">            <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-66" title="66">                <span class="cf">if</span>(!pr)</a>
<a class="sourceLine" id="cb1-67" title="67">                    printf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,ans[i]);</a>
<a class="sourceLine" id="cb1-68" title="68">                <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-69" title="69">                    printf(<span class="st">" </span><span class="sc">%d</span><span class="st">"</span>,ans[i]);</a>
<a class="sourceLine" id="cb1-70" title="70">                pr++;</a>
<a class="sourceLine" id="cb1-71" title="71">            }</a>
<a class="sourceLine" id="cb1-72" title="72">            printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-73" title="73">        }</a>
<a class="sourceLine" id="cb1-74" title="74">    }</a>
<a class="sourceLine" id="cb1-75" title="75">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-76" title="76">} </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>存疑</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>图论</tag>
        <tag>拓补排序</tag>
        <tag>存疑</tag>
      </tags>
  </entry>
  <entry>
    <title>TayE &#39; s Collection</title>
    <url>/2019/04/11/TayE&#39;s-Collection/</url>
    <content><![CDATA[<p>  因为本人在看到一些有意思或者有用的东西时总喜欢加入到APP的收藏夹里，<del>但一旦收藏了就意味着以后很有可能再也不会看了</del>,所以抱着“换个收藏的地方大概就会看了吧”的侥幸想法，同时也是为了对自己的收藏夹做个整理，写下这篇文章。目前打算只放链接和相应的标题(图大概是不会有的，<del>因为我懒</del>).</p>
<h4 id="知乎">知乎</h4>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/24362823">2016年不可错过的21个深度学习视频、教程和课程</a></li>
<li><a href="https://www.zhihu.com/question/267330211">高中生进入大学，有哪些必须知道的东西或常见错误？</a></li>
<li><a href="https://www.zhihu.com/question/263525664">有哪些「985 学生知道了会流泪，211 学生知道了会沉默」 的残酷现实？</a></li>
<li><a href="https://www.zhihu.com/question/281438440">进入大学的你想对准大一说什么？</a></li>
<li><a href="https://www.zhihu.com/question/52157612">最良心的软件可以良心到什么程度？</a></li>
<li><a href="https://www.zhihu.com/question/36546814">有哪些堪称「神器」，却鲜为人知的软件/网站/互联网服务？</a></li>
<li><a href="https://www.zhihu.com/question/275251667">国内哪些大学宿舍条件差？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36829236">20 种最奇怪的编程语言</a></li>
<li><a href="https://www.zhihu.com/question/64244262">计算机专业学生在大学四年内可以做些什么来丰富简历？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/29558221">浙大北大上交复旦保研经历与心得</a></li>
<li><a href="https://www.zhihu.com/question/50343728">你有什么值得分享的高效学习方法？</a></li>
<li><a href="https://www.zhihu.com/question/51134718">为了考研，我们能努力到什么程度？</a></li>
<li><a href="https://www.zhihu.com/question/24363994">在上海交通大学就读是怎样一番体验？</a></li>
<li><a href="https://www.zhihu.com/question/24399025">在清华大学就读是什么体验？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37858020">科学家使用 Reddit 上最恐怖的图片训练了一个反人类魔鬼 AI</a></li>
<li><a href="https://www.zhihu.com/question/68788879">淘气包马小跳里面的桃子宴，真的可以做出来吗？</a></li>
<li><a href="https://www.zhihu.com/question/287421003">大家都见过哪些让你虎躯一震的代码？</a></li>
<li><a href="https://www.zhihu.com/question/36766890">如何不虚度大学的时光？</a></li>
<li><a href="https://www.zhihu.com/question/57767264">为什么现在有很多人，甚至大学授课还在坚持 VC 6？</a></li>
<li><a href="https://www.zhihu.com/question/30196513">C++ 有多难？</a></li>
<li><a href="https://www.zhihu.com/question/302772589">大一为acm准备，感觉学习过程中很吃力？</a></li>
<li><a href="https://www.zhihu.com/question/61624754">正在工作的程序员，生活状态什么样？</a></li>
<li><a href="https://www.zhihu.com/question/25715002">清华大学计算机系与普通大学计算机系有什么区别？</a></li>
<li><a href="https://www.zhihu.com/question/38452044">清华大学计算机系组成结构课三星期造台计算机究竟是怎么造的？</a></li>
<li><a href="https://www.zhihu.com/question/302440083">free()函数如何知道要释放的空间大小？</a></li>
<li><a href="https://www.zhihu.com/question/27837191">如何评价 《欢迎加入NHK》?</a></li>
<li><a href="https://www.zhihu.com/question/304844787">如果让你重新上一次大学，你会怎么度过？为什么？</a></li>
<li><a href="https://www.zhihu.com/question/51727516">ACM 的正确入门方式是什么？</a></li>
<li><a href="https://www.zhihu.com/question/19719698">ACM 中常用的算法有哪些？</a></li>
<li><a href="https://www.zhihu.com/question/31034164">什么才算是真正的编程能力？</a></li>
<li><a href="https://www.zhihu.com/question/57532048">美国计算机名校例如MIT ，CMU ，有哪些公认的好课并且有课程讲义的，适合国内学生自学的？</a></li>
<li><a href="https://www.zhihu.com/question/51560126">如何高效的学习C++？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/54783053">漫画：什么是Bitmap算法？</a></li>
<li><a href="https://www.zhihu.com/question/20402534">如何阅读《深入理解计算机系统》这本书？</a></li>
<li><a href="https://www.zhihu.com/question/51134387">你工作中最推荐的 C/C++ 程序库有哪些，为什么？</a></li>
<li><a href="https://www.zhihu.com/question/23498424">你在 GitHub 上看到过的最有意思的项目是什么？</a></li>
<li><a href="https://www.zhihu.com/question/266995763">为什么 C 语言没有被 C++ 取代？</a></li>
<li><a href="https://www.zhihu.com/question/310052411">你有过哪些被 C++ 摧残的经历？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/58567627">可以说是70%的 C++ 程序员成长经历</a></li>
<li><a href="https://www.zhihu.com/question/60911582">你遇到过哪些高质量的 C++ 面试？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/56253982">Linux玩家必备：Ubuntu完全配置指南</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/57512786">为何程序员喜欢将INF设置为0x3f3f3f3f (转载)</a></li>
<li><a href="https://www.zhihu.com/question/22913650">人这一生为什么要努力？</a></li>
<li><a href="https://www.zhihu.com/question/28543312">如何用 C++ 在 10 行内写出八皇后？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/61036249">AI“复活”张国荣，逝去16年哥哥又重生</a></li>
<li><a href="https://www.zhihu.com/question/316844185">有什么在线的编程游戏？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27692913">ACM算法分类、推荐学习资料和配套习题（转）</a></li>
<li><a href="https://www.zhihu.com/question/27940474">有什么理论复杂但是实现简单的算法？</a></li>
<li><a href="https://www.zhihu.com/question/56297876">有哪些「高级感」的中文/英文/日文字体 ？</a></li>
<li><a href="https://www.zhihu.com/question/51920544/answer/618254238">有没有简单一点的Python小例子小项目？</a></li>
<li><a href="https://www.zhihu.com/question/28661987/answer/619341354">你用 Python 写过哪些有趣的脚本？</a></li>
<li><a href="https://www.zhihu.com/question/27386361/answer/560891895">Python 学习完基础语法知识后，如何进一步提高？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/57382703">【攻略】量身定做自己的保研方案</a></li>
<li><a href="https://zhuanlan.zhihu.com/c_176544314">一亩三分(一个保研相关的知乎专栏)</a></li>
</ul>
<h4 id="b站">B站</h4>
<ul>
<li><a href="https://www.bilibili.com/video/av10813947">【全程】ACM ICPC World Finals 2017 国际大学生程序设计竞赛全球总决赛 以及相关视频全程】ACM ICPC World Finals 2017 国际大学生程序设计竞赛全球总决赛以及相关视频</a></li>
<li><a href="https://www.bilibili.com/video/av45038361">【计算机科学 | 人物 | 陈丹琦】清华姚班，斯坦福博士毕业，高中时发明插头DP</a></li>
<li><a href="https://www.bilibili.com/video/av42286396">每年700本+笔记700份，10年读书经验大公开</a></li>
<li><a href="https://space.bilibili.com/611212?spm_id_from=333.788.b_765f7570696e666f.2">卿学姐的b站空间(算法讲座)</a></li>
<li><a href="https://www.bilibili.com/video/av48420057">【AI自动绘画黑科技？】最新 PI-REC 论文解读+代码实战 图像翻译课程 手残党福音 深度学习教程</a></li>
<li><a href="https://space.bilibili.com/88461692?spm_id_from=333.788.b_765f7570696e666f.1">3Blue1Brown的B站空间(各种数学视频)</a></li>
</ul>
<h4 id="github">Github</h4>
<ul>
<li><a href="https://github.com/QSCTech/zju-icicles">浙江大学课程攻略共享计划</a></li>
<li><a href="https://github.com/PKUanonym/REKCARC-TSC-UHT">清华大学计算机系课程攻略</a></li>
<li><a href="https://github.com/lib-pku/libpku">pku课程资料</a></li>
<li><a href="https://github.com/CoolPhilChen/SJTU-Courses">上海交大课程资料</a></li>
</ul>
<h4 id="简书">简书</h4>
<ul>
<li><a href="https://www.jianshu.com/p/f7434bb2ce09?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">汇编入门（长文多图，流量慎入！！！）(超多干货)</a></li>
<li><a href="https://kb.cnblogs.com/page/179578/">CPU流水线的探秘之旅</a><br></li>
</ul>
<h4 id="其他">其他</h4>
<ul>
<li><a href="https://lib-pku.github.io/">libpku - 贵校课程资料民间整理(还是pku的资料)</a></li>
<li><a href="http://www.mdtr2pdf.com/index_en.html">一个将Markdown转为PDF的Web应用</a></li>
<li><a href="https://pymlovelyq.github.io/">极客侠栈(一个专业书资源网站)</a></li>
</ul>
<h4 id="更新日志">更新日志</h4>
<ul>
<li>2019/4/11 创建文章</li>
<li>2019/4/11 创建分类：知乎、B站、Github、其他</li>
<li>2019/4/11 添加内容</li>
<li>2019/4/12 添加分类：简书</li>
<li>2019/4/12 添加内容</li>
<li>2019/5/1 添加内容</li>
<li>2019/5/8 添加内容</li>
<li>2019/7/2 删除部分不恰当的内容</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>杂</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>URAL - 1244 Gentlemen(01背包+记录路径)</title>
    <url>/2019/02/17/URAL-1244-Gentlemen/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/contest/43653#problem/C">URAL - 1244 Gentlemen</a></p>
<p>  一道01背包的题目，只不过这一次不是用01背包来求最大值或最小值，而是将背包填满。这只需要将数组dp[]的dp[0]设为0，将其他设为 -∞即可（原因：这是为什么呢？可以这样理解：初始化的 F 数组事实上就是在没有任何物品可以放 入背包时的合法状态。如果要求背包恰好装满，那么此时只有容量为 0 的背包可以在什 么也不装且价值为 0 的情况下被“恰好装满”，其它容量的背包均没有合法的解，属于 未定义的状态，应该被赋值为 -∞ 了。如果背包并非必须被装满，那么任何容量的背包 都有一个合法解“什么都不装”，这个解的价值为 0，所以初始时状态的值也就全部为 0 了。）</p>
<p>  难点在于记录路径，同时处理多个解的情况。一开始我也想不到要怎么处理多个解的情况(总不能做两次dp吧)，无奈去看题解，恍然大悟。具体见代码中的注释。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#define INF </span>-<span class="bn">0x3fffffff</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="dt">int</span> w[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="dt">bool</span> rec[<span class="dv">105</span>][<span class="dv">100005</span>];</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> dp[<span class="dv">100005</span>];</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">int</span> ans[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb1-12" title="12">{</a>
<a class="sourceLine" id="cb1-13" title="13">    dp[<span class="dv">0</span>]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-14" title="14">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;<span class="dv">100005</span>;i++)        dp[i]=INF;</a>
<a class="sourceLine" id="cb1-15" title="15">}</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-17" title="17">{    </a>
<a class="sourceLine" id="cb1-18" title="18">    memset(ans,<span class="dv">0</span>,<span class="kw">sizeof</span>(ans));memset(dp,<span class="dv">0</span>,<span class="kw">sizeof</span>(dp));dp[<span class="dv">0</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-19" title="19">    memset(rec,<span class="dv">0</span>,<span class="kw">sizeof</span>(rec));memset(w,<span class="dv">0</span>,<span class="kw">sizeof</span>(w));</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="dt">int</span> wei;</a>
<a class="sourceLine" id="cb1-21" title="21">    cin&gt;&gt;wei;</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-23" title="23">    cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> vtot=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-26" title="26">        cin&gt;&gt;w[i];</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-28" title="28">        <span class="cf">for</span>(<span class="dt">int</span> j=wei;j&gt;=w[i];j--)</a>
<a class="sourceLine" id="cb1-29" title="29">            dp[j]+=dp[j-w[i]];        <span class="co">//用动态规划求解解的个数，因为状态是从</span></a>
<a class="sourceLine" id="cb1-30" title="30">                                     <span class="co">//dp[j-w[i]]转移过来的，故每出现一个解                                        </span></a>
<a class="sourceLine" id="cb1-31" title="31">                                    <span class="co">//都会+1，若dp[wei]&gt;1，则说明在wei时有两个解，</span></a>
<a class="sourceLine" id="cb1-32" title="32">                                    <span class="co">//即问题有两个解</span></a>
<a class="sourceLine" id="cb1-33" title="33">    <span class="cf">if</span>(dp[wei]&gt;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-34" title="34">        cout&lt;&lt;<span class="st">"-1"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="cf">else</span> <span class="cf">if</span>(dp[wei]==<span class="dv">0</span>)            <span class="co">//如果仍然为0，则说明无解</span></a>
<a class="sourceLine" id="cb1-36" title="36">        cout&lt;&lt;<span class="st">"0"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-37" title="37">    <span class="cf">else</span>                          <span class="co">//从这里开始，就是普通的01背包了</span></a>
<a class="sourceLine" id="cb1-38" title="38">    {    </a>
<a class="sourceLine" id="cb1-39" title="39">        init();</a>
<a class="sourceLine" id="cb1-40" title="40">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-41" title="41">            <span class="cf">for</span>(<span class="dt">int</span> j=wei;j&gt;=w[i];j--){</a>
<a class="sourceLine" id="cb1-42" title="42">                <span class="dt">int</span> tmp=dp[j-w[i]]+w[i];</a>
<a class="sourceLine" id="cb1-43" title="43">                dp[j]=max(dp[j],dp[j-w[i]]+w[i]);</a>
<a class="sourceLine" id="cb1-44" title="44">                <span class="cf">if</span>(dp[j]==tmp)</a>
<a class="sourceLine" id="cb1-45" title="45">                    rec[i][j]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-46" title="46">            }</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="dt">int</span> sum=<span class="dv">0</span>;<span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-48" title="48">        <span class="dt">int</span> i=n-<span class="dv">1</span>;<span class="dt">int</span> j=wei;</a>
<a class="sourceLine" id="cb1-49" title="49">        <span class="cf">while</span>(i&gt;=<span class="dv">0</span>&amp;&amp;j&gt;<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb1-50" title="50">        {</a>
<a class="sourceLine" id="cb1-51" title="51">            <span class="cf">if</span>(rec[i][j])</a>
<a class="sourceLine" id="cb1-52" title="52">            {</a>
<a class="sourceLine" id="cb1-53" title="53">                ans[i+<span class="dv">1</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-54" title="54">                j-=w[i];</a>
<a class="sourceLine" id="cb1-55" title="55">            }</a>
<a class="sourceLine" id="cb1-56" title="56">            i--;</a>
<a class="sourceLine" id="cb1-57" title="57">        }</a>
<a class="sourceLine" id="cb1-58" title="58">        <span class="dt">int</span> pr=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-59" title="59">        <span class="cf">for</span>(<span class="dt">int</span> k=<span class="dv">1</span>;k&lt;=n;k++)</a>
<a class="sourceLine" id="cb1-60" title="60">        {</a>
<a class="sourceLine" id="cb1-61" title="61">            <span class="cf">if</span>(!ans[k]){</a>
<a class="sourceLine" id="cb1-62" title="62">                <span class="cf">if</span>(pr)</a>
<a class="sourceLine" id="cb1-63" title="63">                    cout&lt;&lt;<span class="st">" "</span>&lt;&lt;k;</a>
<a class="sourceLine" id="cb1-64" title="64">                <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-65" title="65">                    cout&lt;&lt;k;</a>
<a class="sourceLine" id="cb1-66" title="66">                pr=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-67" title="67">            }</a>
<a class="sourceLine" id="cb1-68" title="68">        }</a>
<a class="sourceLine" id="cb1-69" title="69">    } </a>
<a class="sourceLine" id="cb1-70" title="70">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-71" title="71">} </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA - 12563 Jin Ge Jin Qu hao</title>
    <url>/2019/02/24/UVA-12563-Jin-Ge-Jin-Qu-hao/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/UVA-12563">Jin Ge Jin Qu hao</a></p>
<p>  一道01背包，虽然t&lt;=1e9，但实际上t不会超过180 * n + 678。</p>
<span id="more"></span>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#define INF </span><span class="bn">0x3fffffff</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define JIN </span><span class="dv">678</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="dt">int</span> <span class="va">time_</span>[<span class="dv">1000</span>];</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">int</span> dp[maxn];</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb1-16" title="16">{    </a>
<a class="sourceLine" id="cb1-17" title="17">    memset(dp,<span class="bn">0x8f</span>,<span class="kw">sizeof</span>(dp));</a>
<a class="sourceLine" id="cb1-18" title="18">    dp[<span class="dv">0</span>]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-19" title="19">}</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-21" title="21">{</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="dt">int</span> T;</a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-24" title="24">    cin&gt;&gt;T;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="cf">while</span>(T--)</a>
<a class="sourceLine" id="cb1-26" title="26">    {    </a>
<a class="sourceLine" id="cb1-27" title="27">        mst(<span class="va">time_</span>,<span class="dv">0</span>);init();</a>
<a class="sourceLine" id="cb1-28" title="28">        <span class="dt">int</span> n,t_lef;</a>
<a class="sourceLine" id="cb1-29" title="29">        cin&gt;&gt;n&gt;&gt;t_lef;</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)        cin&gt;&gt;<span class="va">time_</span>[i];</a>
<a class="sourceLine" id="cb1-32" title="32">        <span class="dt">int</span> vtot=t_lef-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-33" title="33">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-34" title="34">            <span class="cf">for</span>(<span class="dt">int</span> j=vtot;j&gt;=<span class="va">time_</span>[i];j--){</a>
<a class="sourceLine" id="cb1-35" title="35">                dp[j]=max(dp[j],dp[j-<span class="va">time_</span>[i]]+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-36" title="36">            }</a>
<a class="sourceLine" id="cb1-37" title="37">        }</a>
<a class="sourceLine" id="cb1-38" title="38">        <span class="dt">int</span> len=t_lef-<span class="dv">1</span>;        <span class="co">//留一秒来唱劲歌金曲</span></a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">for</span>(<span class="dt">int</span> i=vtot;i&gt;=<span class="dv">0</span>;i--){</a>
<a class="sourceLine" id="cb1-40" title="40">            <span class="dt">int</span> tmp=cnt;</a>
<a class="sourceLine" id="cb1-41" title="41">            cnt=max(cnt,dp[i]);</a>
<a class="sourceLine" id="cb1-42" title="42">            <span class="cf">if</span>(cnt!=tmp)</a>
<a class="sourceLine" id="cb1-43" title="43">                len=i;</a>
<a class="sourceLine" id="cb1-44" title="44">        }</a>
<a class="sourceLine" id="cb1-45" title="45">        printf(<span class="st">"Case </span><span class="sc">%d</span><span class="st">: </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d\n</span><span class="st">"</span>,++kase,cnt+<span class="dv">1</span>,len+JIN);        </a>
<a class="sourceLine" id="cb1-46" title="46">        <span class="co">//加上劲歌金曲         </span></a>
<a class="sourceLine" id="cb1-47" title="47">    }</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-49" title="49">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>UVA294 - Divisors</title>
    <url>/2019/03/02/UVA294-Divisors/</url>
    <content><![CDATA[<p><a href="https://cn.vjudge.net/problem/UVA-294">Divisors</a></p>
<p>  题意是说算一个区间内的因子数最大的数。网上题解大都是用的dfs，但我又不想写dfs······然后看了一下，区间长度最长才1e4，用质因数分解求出区间内每一个数的因子数然后用最朴素的方法找出答案应该也能过吧······事实证明真的可以，而且只用了40ms 2333333。</p>
<p>  这里做个笔记，所谓质因数分解求因子数，指的是，对于一个数x,必定存在以下式子:</p>
<pre><code>        x = (a1^p1)*(a2^p2)*(a3^p3)*(a4^p4)*···*(an^pn)(其中,a1,a2,···，an均为质数)
        </code></pre>
<p>  那么,x的因子个数则为:</p>
<pre><code>                    sum(x) = (1+p1)*(1+p2)*(1+p3)*(1+p4)*···*(1+pn)
                    </code></pre>
<p>  比如说，对于12，有12 = (2^2) * (3^1) , 所以sum(12) = (1+2) * (1+1) = 6</p>
<p>此题的代码如下:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-13" title="13"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-14" title="14"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-15" title="15"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-16" title="16"><span class="dt">int</span> get_cnt(<span class="dt">int</span> x)</a>
<a class="sourceLine" id="cb3-17" title="17">{</a>
<a class="sourceLine" id="cb3-18" title="18">    <span class="cf">if</span>(x==<span class="dv">1</span>)        <span class="cf">return</span> <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-19" title="19">    <span class="cf">if</span>(x==<span class="dv">2</span>)        <span class="cf">return</span> <span class="dv">2</span>;</a>
<a class="sourceLine" id="cb3-20" title="20">    ll ans=<span class="dv">1</span>;ll cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-21" title="21">    <span class="cf">for</span>(ll i=<span class="dv">2</span>;i*i&lt;=x;i++)</a>
<a class="sourceLine" id="cb3-22" title="22">    {</a>
<a class="sourceLine" id="cb3-23" title="23">        cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-24" title="24">        <span class="cf">while</span>(x%i==<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb3-25" title="25">        {</a>
<a class="sourceLine" id="cb3-26" title="26">            cnt++;</a>
<a class="sourceLine" id="cb3-27" title="27">            x/=i;</a>
<a class="sourceLine" id="cb3-28" title="28">        }</a>
<a class="sourceLine" id="cb3-29" title="29">        ans*=(<span class="dv">1</span>+cnt);</a>
<a class="sourceLine" id="cb3-30" title="30">    }</a>
<a class="sourceLine" id="cb3-31" title="31">    <span class="cf">return</span> x&gt;<span class="dv">1</span>?<span class="dv">2</span>*ans:ans;</a>
<a class="sourceLine" id="cb3-32" title="32">}</a>
<a class="sourceLine" id="cb3-33" title="33">ll maxi,pos;</a>
<a class="sourceLine" id="cb3-34" title="34"><span class="dt">void</span> get_ans(ll lef,ll rig)</a>
<a class="sourceLine" id="cb3-35" title="35">{    </a>
<a class="sourceLine" id="cb3-36" title="36">    maxi=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-37" title="37">    <span class="cf">for</span>(ll i=lef;i&lt;=rig;i++)</a>
<a class="sourceLine" id="cb3-38" title="38">    {    </a>
<a class="sourceLine" id="cb3-39" title="39">        ll tmp=get_cnt(i);</a>
<a class="sourceLine" id="cb3-40" title="40">        <span class="cf">if</span>(tmp&gt;maxi){</a>
<a class="sourceLine" id="cb3-41" title="41">            maxi=tmp;</a>
<a class="sourceLine" id="cb3-42" title="42">            pos=i;</a>
<a class="sourceLine" id="cb3-43" title="43">        }</a>
<a class="sourceLine" id="cb3-44" title="44">    }</a>
<a class="sourceLine" id="cb3-45" title="45">}</a>
<a class="sourceLine" id="cb3-46" title="46"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-47" title="47">{    </a>
<a class="sourceLine" id="cb3-48" title="48">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb3-49" title="49">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb3-50" title="50">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb3-51" title="51">    {</a>
<a class="sourceLine" id="cb3-52" title="52">        ll lef,rig;</a>
<a class="sourceLine" id="cb3-53" title="53">        cin&gt;&gt;lef&gt;&gt;rig;</a>
<a class="sourceLine" id="cb3-54" title="54">        get_ans(lef,rig);</a>
<a class="sourceLine" id="cb3-55" title="55">        printf(<span class="st">"Between </span><span class="sc">%lld</span><span class="st"> and </span><span class="sc">%lld</span><span class="st">, </span><span class="sc">%lld</span><span class="st"> has a maximum of </span><span class="sc">%lld</span><span class="st"> divisors.</span><span class="sc">\n</span><span class="st">"</span>,lef,rig,pos,maxi);</a>
<a class="sourceLine" id="cb3-56" title="56">    }</a>
<a class="sourceLine" id="cb3-57" title="57">}</a>
<a class="sourceLine" id="cb3-58" title="58"><span class="co">//Between 1 and 10, 6 has a maximum of 4 divisors.</span></a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>数论</tag>
        <tag>求因子个数</tag>
      </tags>
  </entry>
  <entry>
    <title>UVa101-The Blocks Problem</title>
    <url>/2019/01/26/UVa101-The-Blocks-Problem/</url>
    <content><![CDATA[<p>题目链接：<a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=37">Uva101</a> 也可以在这看：<a href="https://cn.vjudge.net/problem/UVA-101">Vjudge</a> <span id="more"></span> 先上代码：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6">using namespace std;</a>
<a class="sourceLine" id="cb1-7" title="7">vector&lt;<span class="dt">int</span>&gt; pile[<span class="dv">30</span>];</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">typedef</span> pair&lt;<span class="dt">int</span>, <span class="dt">int</span>&gt; P;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-10" title="10">P find_block(<span class="dt">int</span> num)</a>
<a class="sourceLine" id="cb1-11" title="11">{</a>
<a class="sourceLine" id="cb1-12" title="12">    P pos;</a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="cf">for</span> (<span class="dt">int</span> i=<span class="dv">0</span>; i &lt; n; i++) {</a>
<a class="sourceLine" id="cb1-14" title="14">        <span class="cf">for</span> (<span class="dt">int</span> j=<span class="dv">0</span>; j &lt; pile[i].size(); j++) {</a>
<a class="sourceLine" id="cb1-15" title="15">            <span class="cf">if</span> (pile[i][j] == num) {</a>
<a class="sourceLine" id="cb1-16" title="16">                pos.first = i;</a>
<a class="sourceLine" id="cb1-17" title="17">                pos.second = j;</a>
<a class="sourceLine" id="cb1-18" title="18">            }</a>
<a class="sourceLine" id="cb1-19" title="19">        }</a>
<a class="sourceLine" id="cb1-20" title="20">    }</a>
<a class="sourceLine" id="cb1-21" title="21">    <span class="cf">return</span> pos;</a>
<a class="sourceLine" id="cb1-22" title="22">}</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">void</span> clear_pile(<span class="dt">int</span> num)        <span class="co">//p表示哪一堆，h表示高度</span></a>
<a class="sourceLine" id="cb1-24" title="24">{</a>
<a class="sourceLine" id="cb1-25" title="25">    P pos = find_block(num);</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> p = pos.first; <span class="dt">int</span> h = pos.second;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">for</span> (<span class="dt">int</span> i = h + <span class="dv">1</span>; i &lt; pile[p].size(); i++) {</a>
<a class="sourceLine" id="cb1-28" title="28">        <span class="dt">int</span> b = pile[p][i];</a>
<a class="sourceLine" id="cb1-29" title="29">        pile[b].push_back(b);</a>
<a class="sourceLine" id="cb1-30" title="30">    }</a>
<a class="sourceLine" id="cb1-31" title="31">    pile[p].resize(h + <span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-32" title="32">}</a>
<a class="sourceLine" id="cb1-33" title="33"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-34" title="34">{</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="dt">int</span> a, b;</a>
<a class="sourceLine" id="cb1-36" title="36">    string com1, com2;</a>
<a class="sourceLine" id="cb1-37" title="37">    P des;</a>
<a class="sourceLine" id="cb1-38" title="38">    scanf(<span class="st">"%d"</span>, &amp;n);</a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; n; i++) {</a>
<a class="sourceLine" id="cb1-40" title="40">        pile[i].push_back(i);</a>
<a class="sourceLine" id="cb1-41" title="41">    }</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">while</span> (<span class="dv">1</span>) {</a>
<a class="sourceLine" id="cb1-43" title="43">        cin &gt;&gt; com1;</a>
<a class="sourceLine" id="cb1-44" title="44">        <span class="cf">if</span> (com1 == <span class="st">"quit"</span>)        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-45" title="45">        cin &gt;&gt; a &gt;&gt; com2 &gt;&gt; b;</a>
<a class="sourceLine" id="cb1-46" title="46">        <span class="cf">if</span> (find_block(a).first == find_block(b).first)        <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb1-47" title="47">        <span class="cf">if</span> (com1 == <span class="st">"move"</span>&amp;&amp;com2 == <span class="st">"onto"</span>) {</a>
<a class="sourceLine" id="cb1-48" title="48">            clear_pile(a);</a>
<a class="sourceLine" id="cb1-49" title="49">            clear_pile(b);</a>
<a class="sourceLine" id="cb1-50" title="50">            <span class="dt">int</span> bpile = find_block(b).first;</a>
<a class="sourceLine" id="cb1-51" title="51">            <span class="dt">int</span> apile = find_block(a).first;</a>
<a class="sourceLine" id="cb1-52" title="52">            pile[bpile].push_back(a);</a>
<a class="sourceLine" id="cb1-53" title="53">            <span class="dt">int</span> si = pile[apile].size();</a>
<a class="sourceLine" id="cb1-54" title="54">            pile[apile].resize(si - <span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-55" title="55">        }</a>
<a class="sourceLine" id="cb1-56" title="56">        <span class="cf">else</span> <span class="cf">if</span> (com1 == <span class="st">"move"</span>&amp;&amp;com2 == <span class="st">"over"</span>) {                <span class="co">//这段有问题 </span></a>
<a class="sourceLine" id="cb1-57" title="57">            clear_pile(a);</a>
<a class="sourceLine" id="cb1-58" title="58">            <span class="dt">int</span> apile = find_block(a).first;</a>
<a class="sourceLine" id="cb1-59" title="59">            <span class="dt">int</span> bpile = find_block(b).first;</a>
<a class="sourceLine" id="cb1-60" title="60">            <span class="dt">int</span> si = pile[apile].size();</a>
<a class="sourceLine" id="cb1-61" title="61">            pile[bpile].push_back(a);</a>
<a class="sourceLine" id="cb1-62" title="62">            pile[apile].resize(si - <span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-63" title="63">        }</a>
<a class="sourceLine" id="cb1-64" title="64">        <span class="cf">else</span> <span class="cf">if</span> (com1 == <span class="st">"pile"</span>&amp;&amp;com2 == <span class="st">"onto"</span>) {        <span class="co">//这个操作是先将b上方的方块归位，然后将a以及a上方的方块整体移动到b的上方</span></a>
<a class="sourceLine" id="cb1-65" title="65">            <span class="dt">int</span> apile = find_block(a).first;</a>
<a class="sourceLine" id="cb1-66" title="66">            <span class="dt">int</span> bpile = find_block(b).first;</a>
<a class="sourceLine" id="cb1-67" title="67">            <span class="dt">int</span> h = find_block(a).second;</a>
<a class="sourceLine" id="cb1-68" title="68">            <span class="dt">int</span> ori_a_size = pile[apile].size();</a>
<a class="sourceLine" id="cb1-69" title="69">            clear_pile(b);                                <span class="co">//将b上方的方块归位</span></a>
<a class="sourceLine" id="cb1-70" title="70">            <span class="cf">for</span> (<span class="dt">int</span> i = find_block(a).second; i &lt; ori_a_size; i++) {        <span class="co">//循环从b的高度开始（这里是否要+1？）</span></a>
<a class="sourceLine" id="cb1-71" title="71">                pile[bpile].push_back(pile[apile][i]);</a>
<a class="sourceLine" id="cb1-72" title="72">            }</a>
<a class="sourceLine" id="cb1-73" title="73">            pile[apile].resize(h);</a>
<a class="sourceLine" id="cb1-74" title="74">        }</a>
<a class="sourceLine" id="cb1-75" title="75">        <span class="cf">else</span> <span class="cf">if</span> (com1 == <span class="st">"pile"</span>&amp;&amp;com2 == <span class="st">"over"</span>) {                <span class="co">//这段有问题</span></a>
<a class="sourceLine" id="cb1-76" title="76">            <span class="dt">int</span> bpile = find_block(b).first;</a>
<a class="sourceLine" id="cb1-77" title="77">            <span class="dt">int</span> apile = find_block(a).first;</a>
<a class="sourceLine" id="cb1-78" title="78">            <span class="dt">int</span> ori_a_si = pile[apile].size();</a>
<a class="sourceLine" id="cb1-79" title="79">            <span class="dt">int</span> h = find_block(a).second;</a>
<a class="sourceLine" id="cb1-80" title="80">            <span class="cf">for</span> (<span class="dt">int</span> i = find_block(a).second; i &lt; ori_a_si; i++) {</a>
<a class="sourceLine" id="cb1-81" title="81">                pile[bpile].push_back(pile[apile][i]);</a>
<a class="sourceLine" id="cb1-82" title="82">            }</a>
<a class="sourceLine" id="cb1-83" title="83">            pile[apile].resize(h);</a>
<a class="sourceLine" id="cb1-84" title="84">        }</a>
<a class="sourceLine" id="cb1-85" title="85">    }</a>
<a class="sourceLine" id="cb1-86" title="86">    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; n; i++) {</a>
<a class="sourceLine" id="cb1-87" title="87">        printf(<span class="st">"%d:"</span>, i);</a>
<a class="sourceLine" id="cb1-88" title="88">        <span class="cf">for</span> (<span class="dt">int</span> j = <span class="dv">0</span>; j &lt; pile[i].size(); j++) {</a>
<a class="sourceLine" id="cb1-89" title="89">            printf(<span class="st">" %d"</span>, pile[i][j]);</a>
<a class="sourceLine" id="cb1-90" title="90">        }</a>
<a class="sourceLine" id="cb1-91" title="91">        printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-92" title="92">    }</a>
<a class="sourceLine" id="cb1-93" title="93">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-94" title="94">}</a></code></pre></div>
<p>思路上其实很直接，就是用vector来模拟方块堆，然后用一个数组将这些vector存起来。放方块的操作用push_back即可。原本是写了一个move函数用来进行放方块的操作的，但后来发现这样做容易出错而且自己也写得不好........ 下面是我写的超丑move函数qwq：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb2-1" title="1"><span class="dt">void</span> move(<span class="dt">int</span> obj, <span class="dt">int</span> des, <span class="dt">int</span> h)        <span class="co">//obj表示要移动的方块，des表示目的地方块，h表示要移动的方块在移动前所处的高度</span></a>
<a class="sourceLine" id="cb2-2" title="2">{</a>
<a class="sourceLine" id="cb2-3" title="3">    <span class="dt">int</span> desp = find_block(des).first;        <span class="co">//找到目的地方块处于哪一堆</span></a>
<a class="sourceLine" id="cb2-4" title="4">    <span class="dt">int</span> objp = find_block(obj).first;        <span class="co">//找到要移动的方块处于哪一堆</span></a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="dt">int</span> ori_hei=pile[find_block(obj).first].size();</a>
<a class="sourceLine" id="cb2-6" title="6">    <span class="cf">for</span> (<span class="dt">int</span> i = h; i &lt; pile[objp].size(); i++) {</a>
<a class="sourceLine" id="cb2-7" title="7">        pile[desp].push_back(pile[objp][i]);        <span class="co">//将要移动的方块以及要移动的方块上面的方块（如果有的话）移动到目的地方块的上面</span></a>
<a class="sourceLine" id="cb2-8" title="8">    }</a>
<a class="sourceLine" id="cb2-9" title="9">    pile[objp].resize(h);</a>
<a class="sourceLine" id="cb2-10" title="10">}</a></code></pre></div>
<p>实际使用的时候很不好用，主要是参数设计的不好。</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>STL</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10下安装C++ linear algebra library Armadillo</title>
    <url>/2019/08/03/Windows10%E4%B8%8B%E5%AE%89%E8%A3%85C-linear-algebra-library-Armadillo/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H628e81e21f2f4cd6994afcb0bc0d008ap.jpg"></p>
<span id="more"></span>
<h4 id="前言">前言</h4>
<p>装这个库的原因是因为昨天写题写得有点自闭，所以就去复习一下很久之前学过的numpy，打算调整一下思维。复习着复习着，就想C++下有没有像numpy这种这么好用的矩阵库呢？上某乎找了一下，果然有，便打算配一个玩玩<del>（一句话概括，原因就是想要找个合适的理由划水）</del></p>
<h4 id="armadill简介">Armadill简介</h4>
<p>以下摘自官网</p>
<blockquote>
<ul>
<li><p>Armadillo is a high quality linear algebra library (matrix maths) for the C++ language, aiming towards a good balance between speed and ease of use</p></li>
<li><p>Provides high-level syntax and <a href="http://arma.sourceforge.net/docs.html">functionality</a> deliberately similar to Matlab</p></li>
<li><p>Useful for algorithm development directly in C++, or quick conversion of research code into production environments (eg. software &amp; hardware products)</p></li>
<li><p>Provides efficient classes for vectors, matrices and cubes (1st, 2nd and 3rd order tensors); dense and sparse matrices are supported</p></li>
<li><p>Integer, floating point and complex numbers are supported</p></li>
<li><p>Various matrix decompositions are provided through integration with <a href="http://www.netlib.org/lapack/">LAPACK</a>, or one of its high performance drop-in replacements (eg. multi-threaded <a href="http://software.intel.com/en-us/intel-mkl/">Intel MKL</a>, or <a href="https://github.com/xianyi/OpenBLAS/releases">OpenBLAS</a>)</p></li>
<li><p>A sophisticated expression evaluator (based on template meta-programming) automatically combines several operations to increase speed and efficiency</p></li>
<li><p>Can automatically use OpenMP multi-threading (parallelisation) to speed up computationally expensive operations</p></li>
<li><p>Available under a <a href="http://arma.sourceforge.net/license.html">permissive license</a>, useful for both open-source and proprietary (closed-source) software</p></li>
<li><p>Can be used for machine learning, pattern recognition, computer vision, signal processing, bioinformatics, statistics, finance, etc</p></li>
</ul>
</blockquote>
<p>翻译一下就是</p>
<ul>
<li>Armadillo是一个高质量的C++线性代数库，目的是实现速度与易用性的良好平衡。</li>
<li>提供与Matlab相似的高阶语法及功能。</li>
<li>对于C++算法开发或代码在生产环境中的快速转换很有帮助。</li>
<li>提供高效的vectors，matrices与cubes（一阶、二阶和三阶张量）的类实现；同时支持密集矩阵和稀疏矩阵</li>
<li>支持整数、浮点数和复数。</li>
<li>通过与LAPACK或其高性能替换（如多线程的 Intel MKL，或OpenBLAS），提供多种矩阵分解。</li>
<li>复杂表达式评估程序（基于模板元编程）会自动地将多个操作组合以提高速度和效率</li>
<li>可以自动使用OpenMP的多线程来加速计算耗时较大的操作</li>
<li>在许可下可用，对于开源与闭源软件都是可用的。</li>
<li>可用于机器学习、模式识别、计算机视觉、信号处理、生物信息学、统计学、金融学等等。</li>
</ul>
<p><del>辣鸡英语水平，有些地方翻译得很生硬</del></p>
<p><del>一句话概括就是这个库很nb</del></p>
<h4 id="安装">安装</h4>
<h5 id="首先当然是去下载这个库">首先当然是去下载这个库</h5>
<p>点击下面👇这个链接即可</p>
<p><a href="http://arma.sourceforge.net/download.html">Armadillo Download</a></p>
<p>进去之后是这样的</p>
<p><img src="https://ae01.alicdn.com/kf/H65ff87aeecba45f98168ccb69b43be582.jpg"></p>
<p>推荐下载Stable Version</p>
<p>下载之后，将文件解压到任意目录。比方说我就把它解压到了D盘根目录下的Armadillo目录。</p>
<p>打开文件夹，其中内容如下。</p>
<p><img src="https://ae01.alicdn.com/kf/H2dfea56dc4234694a8fe40ae51bc7d3dx.jpg"></p>
<h5 id="配置目录">配置目录</h5>
<p>打开Visual Studio，我这里用的是2017的版本。新建一个项目，配置如下图</p>
<p><img src="https://ae01.alicdn.com/kf/Hdf2647655d364e549a34f68f4f272312l.jpg"></p>
<p>进入项目后，在“调试”一栏找到项目属性，然后进行目录配置。具体配置过程如下：</p>
<ul>
<li><p>修改“配置”与“平台”</p>
<p>在我这是要这样配置</p>
<p><img src="https://ae01.alicdn.com/kf/H0c0177cf0f9143ceaa8daa4a82ca6bdcW.jpg"></p></li>
</ul>
<div class="note warning">
<p>
注意！“平台”处不一定是像我这样选，网上有很多文章选的是x64，但由于我这里是建立了一个Win32项目，所以要选择Win32。
</p>
</div>
<p>此处的设置很重要，错误的话可能会导致找不到头文件</p>
<ul>
<li><p>配置包含目录</p>
<p>所谓包含目录就是头文件的目录。在“配置属性”中选择“VC++目录”，然后在“包含目录”一栏选择你的Armadillo的include目录。如下图。</p>
<p><img src="https://ae01.alicdn.com/kf/Hb9c8bdce83b248b6b01db5caa1255144w.jpg"></p></li>
<li><p>配置附加依赖项</p>
<p>选择“链接器”的“输入”，在“附加依赖项”一栏，添加Armadillo中example_win64目录下的lapack_win64_MT.lib和blas_win64_MT.lib。</p></li>
</ul>
<div class="note warning">
<p>
注意！实际需要的并不一定是这两个lib，这两个都是win64的，如果你是win32的项目，请使用win32的lib文件！下载地址见附录
</p>
</div>
<h5 id="配置完成开始使用吧">配置完成，开始使用吧！</h5>
<p>运行一下附带的example1.cpp</p>
<p><img src="https://ae01.alicdn.com/kf/H5ef973a92ae94889938ff2ad18d34a95S.jpg"></p>
<p>另外，还需要将labpack和blas对应的.dll文件放到编译生成的.exe所在目录处。否则.exe会无法运行。</p>
<h4 id="附录">附录</h4>
<ul>
<li><p>labpack和blas的下载地址，内含32位版和64位版</p>
<p><a href="https://icl.cs.utk.edu/lapack-for-windows/lapack/">Download labpack and blas</a></p></li>
<li><p><del>不要尝试用Devcpp配置任何第三方库</del></p></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>第三方库</category>
        <category>Armadillo</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>第三方库</tag>
        <tag>Armadillo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客中加入B站视频与网易云歌单</title>
    <url>/2019/08/01/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5B%E7%AB%99%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p>没有封面图，懒得找了......</p>
<span id="more"></span>
<h3 id="添加b站视频">添加B站视频</h3>
<p>在文章中添加如下代码:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb1-1" title="1"><span class="co">

<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=57933879&amp;cid=101052438&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe>
</div>

</span></a></code></pre></div>
<p>在b站视频分享处可以得到视频对应&lt; iframe &gt;标签</p>
<p>效果如下:</p>


<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=57933879&amp;cid=101052438&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe>
</div>


<h3 id="添加网易云歌单">添加网易云歌单</h3>
<h4 id="获取外链">获取外链</h4>
<p>首先打开网易云音乐网页版，找到要生成外链的歌单。然后点击“分享”。</p>
<p><img src="https://ae01.alicdn.com/kf/Ha0f6cd7fae4e4b1e8fade6891b755091r.jpg"></p>
<p>分享成功后，返回首页，进入个人动态，可以看到之前的分享。</p>
<p><img src="https://ae01.alicdn.com/kf/Hbb20fa711df74bc480e5f97a249ed77d7.jpg"></p>
<p>点击分享链接，就可以看到生成外链播放器的选项</p>
<p><img src="https://ae01.alicdn.com/kf/H47884c7176254ed8be7cfb2b1c11d7ddD.jpg"></p>
<h4 id="插入播放器">插入播放器</h4>
<p>获取外链后，直接在文章中将其插入即可。最好加上</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Bilibili</tag>
      </tags>
  </entry>
  <entry>
    <title>succeed!</title>
    <url>/2018/12/10/succeed-1/</url>
    <content><![CDATA[<div class="note success">
<p>
success
</p>
</div>
]]></content>
      <categories>
        <category>hexo-test</category>
      </categories>
  </entry>
  <entry>
    <title>【C++学习笔记】关于继承，基类与派生类</title>
    <url>/2019/03/11/%E3%80%90C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%85%B3%E4%BA%8E%E5%9F%BA%E7%B1%BB%E4%B8%8E%E6%B4%BE%E7%94%9F%E7%B1%BB/</url>
    <content><![CDATA[<h4 id="一概念">一、概念</h4>
<p>  继承：继承是C++中的一种机制，通过这种机制，我们可以基于已有的旧的数据类型创建出新的数据类型。在C++中，继承分三种:公有继承(public)，私有继承(private)，保护继承(protected)。不同的继承类型在在访问权限上会有区别。</p>
<p>  基类：即被继承的类。</p>
<p>  派生类：即由一个已有的类派生过来的新的类。</p>
<h4 id="二继承">二、继承</h4>
<h5 id="公有继承public">1)公有继承(public)</h5>
<p>  公有继承指的是基类的公有成员和保护成员保持不变，但派生类无法直接访问私有成员，需要通过基类的公有成员函数或友元函数访问。</p>
<h5 id="私有继承private">2)私有继承(private)</h5>
<p>  私有继承指的是，在派生类中，基类的公有成员和保护成员都成为了派生类的私有成员，且这个派生类的派生类(子类)无法访问。</p>
<h5 id="保护继承protected">3)保护继承(protected)</h5>
<p>  保护继承是指基类的公有成员和保护成员都成为了派生类的保护成员，并且只能被它的派生类成员函数或友元访问，基类的私有成员仍然是私有的。</p>
<h5 id="用表格汇总一下就是......">4)用表格汇总一下就是......</h5>
<p><img src="https://ae01.alicdn.com/kf/HTB1Ap.ESwHqK1RjSZFgq6y7JXXaP.jpg"></p>
<p>(图片来自→<a href="https://www.cnblogs.com/ktao/p/8579115.html">C++ 中私有继承、保护继承与公有继承</a>)</p>
<h5 id="三代码">三、代码</h5>
<p>(一段继承的入门辣鸡代码OTZ)</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="co">//2019.3.11</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e3</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">class</span> Point{</a>
<a class="sourceLine" id="cb1-19" title="19">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb1-20" title="20">        Point(){};</a>
<a class="sourceLine" id="cb1-21" title="21">        Point(<span class="dt">double</span> xx,<span class="dt">double</span> yy);</a>
<a class="sourceLine" id="cb1-22" title="22">        ~Point(){};</a>
<a class="sourceLine" id="cb1-23" title="23">        <span class="dt">void</span> show(){</a>
<a class="sourceLine" id="cb1-24" title="24">            cout&lt;&lt;x&lt;&lt;<span class="st">" "</span>&lt;&lt;y&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-25" title="25">        };</a>
<a class="sourceLine" id="cb1-26" title="26">        <span class="dt">double</span> get_x();</a>
<a class="sourceLine" id="cb1-27" title="27">        <span class="dt">double</span> get_y(); </a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="dt">double</span> x;</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="dt">double</span> y;</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="dt">double</span> len;</a>
<a class="sourceLine" id="cb1-32" title="32">};</a>
<a class="sourceLine" id="cb1-33" title="33"><span class="dt">double</span> Point::get_x()</a>
<a class="sourceLine" id="cb1-34" title="34">{</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="cf">return</span> x;</a>
<a class="sourceLine" id="cb1-36" title="36">}</a>
<a class="sourceLine" id="cb1-37" title="37"><span class="dt">double</span> Point::get_y()</a>
<a class="sourceLine" id="cb1-38" title="38">{</a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="cf">return</span> y;</a>
<a class="sourceLine" id="cb1-40" title="40">}</a>
<a class="sourceLine" id="cb1-41" title="41">Point::Point(<span class="dt">double</span> xx,<span class="dt">double</span> yy)</a>
<a class="sourceLine" id="cb1-42" title="42">{</a>
<a class="sourceLine" id="cb1-43" title="43">    x=xx;y=yy;</a>
<a class="sourceLine" id="cb1-44" title="44">    len=sqrt(x*x+y*y);</a>
<a class="sourceLine" id="cb1-45" title="45">}</a>
<a class="sourceLine" id="cb1-46" title="46"></a>
<a class="sourceLine" id="cb1-47" title="47"><span class="kw">class</span> GoodPoint:<span class="kw">public</span> Point{</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb1-49" title="49">        GoodPoint(){};</a>
<a class="sourceLine" id="cb1-50" title="50">        GoodPoint(<span class="dt">double</span> xx,<span class="dt">double</span> yy);</a>
<a class="sourceLine" id="cb1-51" title="51">        ~GoodPoint(){};</a>
<a class="sourceLine" id="cb1-52" title="52">        <span class="dt">bool</span> isGoodPoint();</a>
<a class="sourceLine" id="cb1-53" title="53">        <span class="dt">void</span> set_point();</a>
<a class="sourceLine" id="cb1-54" title="54">        <span class="dt">void</span> set_point(<span class="dt">bool</span> todo);</a>
<a class="sourceLine" id="cb1-55" title="55">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb1-56" title="56">        <span class="dt">bool</span> flag;</a>
<a class="sourceLine" id="cb1-57" title="57">};</a>
<a class="sourceLine" id="cb1-58" title="58"><span class="dt">bool</span> GoodPoint::isGoodPoint()</a>
<a class="sourceLine" id="cb1-59" title="59">{    </a>
<a class="sourceLine" id="cb1-60" title="60">    <span class="dt">double</span> x_get=<span class="kw">this</span>-&gt;get_x();</a>
<a class="sourceLine" id="cb1-61" title="61">    <span class="dt">double</span> y_get=<span class="kw">this</span>-&gt;get_y();</a>
<a class="sourceLine" id="cb1-62" title="62">    <span class="cf">if</span>((x_get==<span class="dv">0</span>&amp;&amp;y_get==<span class="dv">0</span>)||flag)</a>
<a class="sourceLine" id="cb1-63" title="63">        <span class="cf">return</span> <span class="kw">true</span>;</a>
<a class="sourceLine" id="cb1-64" title="64">    <span class="cf">return</span> <span class="kw">false</span>;</a>
<a class="sourceLine" id="cb1-65" title="65">} </a>
<a class="sourceLine" id="cb1-66" title="66"><span class="dt">void</span> GoodPoint::set_point(<span class="dt">bool</span> todo)</a>
<a class="sourceLine" id="cb1-67" title="67">{</a>
<a class="sourceLine" id="cb1-68" title="68">    flag=todo;</a>
<a class="sourceLine" id="cb1-69" title="69">}</a>
<a class="sourceLine" id="cb1-70" title="70"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-71" title="71">{    </a>
<a class="sourceLine" id="cb1-72" title="72">    GoodPoint gp;</a>
<a class="sourceLine" id="cb1-73" title="73">    printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,gp.isGoodPoint());</a>
<a class="sourceLine" id="cb1-74" title="74">    gp.set_point(<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-75" title="75">    printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,gp.isGoodPoint());</a>
<a class="sourceLine" id="cb1-76" title="76">    Point poi(<span class="dv">1</span>,<span class="fl">23.2</span>);</a>
<a class="sourceLine" id="cb1-77" title="77">    poi.show();</a>
<a class="sourceLine" id="cb1-78" title="78">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-79" title="79">} </a></code></pre></div>
<p>  未完待续......</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>继承</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++学习笔记】虚函数(虚方法)</title>
    <url>/2019/03/17/%E3%80%90C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E8%99%9A%E5%87%BD%E6%95%B0-%E8%99%9A%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="介绍">介绍</h3>
<ul>
<li>对于一个派生类以及他的基类，若两者都有一个相同名字的方法，但这两个方法的实际行为并不相同，那应将这个方法声明为虚方法(virtual)。原因在于，如果方法是通过引用或指针调用的，在不声明位虚方法的情况下，程序将根据引用类型或指针类型确定使用的是具体哪个方法。而声明为虚方法，程序将根据引用或指针具体所指向的对象的类型来调用方法</li>
<li>e.g.</li>
</ul>
<p>  使用引用来调用方法</p>
<p>  首先是不使用虚函数的情况</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">class</span> Human{</a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb1-9" title="9">        <span class="dt">double</span> show_hei();</a>
<a class="sourceLine" id="cb1-10" title="10">        <span class="dt">double</span> show_wei();</a>
<a class="sourceLine" id="cb1-11" title="11">        <span class="dt">void</span> set_hei(<span class="dt">double</span> thei);</a>
<a class="sourceLine" id="cb1-12" title="12">        <span class="dt">void</span> set_wei(<span class="dt">double</span> twei);</a>
<a class="sourceLine" id="cb1-13" title="13">        <span class="dt">void</span> say();</a>
<a class="sourceLine" id="cb1-14" title="14">        Human(<span class="dt">int</span> hei,<span class="dt">int</span> wei):hei(hei),wei(wei){}</a>
<a class="sourceLine" id="cb1-15" title="15">        <span class="kw">virtual</span> ~Human(){};</a>
<a class="sourceLine" id="cb1-16" title="16">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb1-17" title="17">        <span class="dt">int</span> hei;</a>
<a class="sourceLine" id="cb1-18" title="18">        <span class="dt">int</span> wei;</a>
<a class="sourceLine" id="cb1-19" title="19">};</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">double</span> Human::show_hei()</a>
<a class="sourceLine" id="cb1-21" title="21">{</a>
<a class="sourceLine" id="cb1-22" title="22">    cout&lt;&lt;<span class="st">"hei="</span>&lt;&lt;hei&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="cf">return</span> hei;</a>
<a class="sourceLine" id="cb1-24" title="24">}</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">double</span> Human::show_wei()</a>
<a class="sourceLine" id="cb1-26" title="26">{</a>
<a class="sourceLine" id="cb1-27" title="27">    cout&lt;&lt;<span class="st">"wei"</span>&lt;&lt;wei&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="cf">return</span> wei;</a>
<a class="sourceLine" id="cb1-29" title="29">}</a>
<a class="sourceLine" id="cb1-30" title="30"><span class="dt">void</span> Human::set_hei(<span class="dt">double</span> thei)</a>
<a class="sourceLine" id="cb1-31" title="31">{</a>
<a class="sourceLine" id="cb1-32" title="32">    hei=thei;</a>
<a class="sourceLine" id="cb1-33" title="33">}</a>
<a class="sourceLine" id="cb1-34" title="34"><span class="dt">void</span> Human::set_wei(<span class="dt">double</span> twei)</a>
<a class="sourceLine" id="cb1-35" title="35">{</a>
<a class="sourceLine" id="cb1-36" title="36">    wei=twei;</a>
<a class="sourceLine" id="cb1-37" title="37">}</a>
<a class="sourceLine" id="cb1-38" title="38"><span class="dt">void</span> Human::say()</a>
<a class="sourceLine" id="cb1-39" title="39">{</a>
<a class="sourceLine" id="cb1-40" title="40">    cout&lt;&lt;<span class="st">"I am a Human object"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-41" title="41">}</a>
<a class="sourceLine" id="cb1-42" title="42"></a>
<a class="sourceLine" id="cb1-43" title="43"><span class="kw">class</span> Teen:<span class="kw">public</span> Human{</a>
<a class="sourceLine" id="cb1-44" title="44">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb1-45" title="45">        Teen(<span class="dt">int</span> hei,<span class="dt">int</span> wei,<span class="dt">bool</span> good):Human(hei,wei),isgood(good){};</a>
<a class="sourceLine" id="cb1-46" title="46">        <span class="dt">void</span> say();</a>
<a class="sourceLine" id="cb1-47" title="47">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb1-48" title="48">        <span class="dt">bool</span> isgood;</a>
<a class="sourceLine" id="cb1-49" title="49">};</a>
<a class="sourceLine" id="cb1-50" title="50"><span class="dt">void</span> Teen::say()</a>
<a class="sourceLine" id="cb1-51" title="51">{</a>
<a class="sourceLine" id="cb1-52" title="52">    cout&lt;&lt;<span class="st">"I am a Teen object"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-53" title="53">}</a>
<a class="sourceLine" id="cb1-54" title="54"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-55" title="55">{</a>
<a class="sourceLine" id="cb1-56" title="56">    Teen teen(<span class="fl">12.33</span>,<span class="fl">123.5</span>,<span class="kw">true</span>);</a>
<a class="sourceLine" id="cb1-57" title="57">    Human human(<span class="fl">23.12</span>,<span class="fl">234.3</span>);</a>
<a class="sourceLine" id="cb1-58" title="58">    Human&amp; teen_r=teen;</a>
<a class="sourceLine" id="cb1-59" title="59">    Human&amp; human_r=human;</a>
<a class="sourceLine" id="cb1-60" title="60">    teen_r.say();</a>
<a class="sourceLine" id="cb1-61" title="61">    human_r.say();</a>
<a class="sourceLine" id="cb1-62" title="62">}</a></code></pre></div>
<p>  结果如下：</p>
<center>
<p><img src="https://ae01.alicdn.com/kf/HTB1tNIFSpzqK1RjSZFoq6zfcXXaB.jpg"></p>
</center>
<p>  然后是使用了虚函数的情况:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-7" title="7"><span class="kw">class</span> Human{</a>
<a class="sourceLine" id="cb2-8" title="8">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb2-9" title="9">        <span class="dt">double</span> show_hei();</a>
<a class="sourceLine" id="cb2-10" title="10">        <span class="dt">double</span> show_wei();</a>
<a class="sourceLine" id="cb2-11" title="11">        <span class="dt">void</span> set_hei(<span class="dt">double</span> thei);</a>
<a class="sourceLine" id="cb2-12" title="12">        <span class="dt">void</span> set_wei(<span class="dt">double</span> twei);</a>
<a class="sourceLine" id="cb2-13" title="13">        <span class="kw">virtual</span> <span class="dt">void</span> say();</a>
<a class="sourceLine" id="cb2-14" title="14">        Human(<span class="dt">int</span> hei,<span class="dt">int</span> wei):hei(hei),wei(wei){}</a>
<a class="sourceLine" id="cb2-15" title="15">        <span class="kw">virtual</span> ~Human(){};</a>
<a class="sourceLine" id="cb2-16" title="16">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb2-17" title="17">        <span class="dt">int</span> hei;</a>
<a class="sourceLine" id="cb2-18" title="18">        <span class="dt">int</span> wei;</a>
<a class="sourceLine" id="cb2-19" title="19">};</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="dt">double</span> Human::show_hei()</a>
<a class="sourceLine" id="cb2-21" title="21">{</a>
<a class="sourceLine" id="cb2-22" title="22">    cout&lt;&lt;<span class="st">"hei="</span>&lt;&lt;hei&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-23" title="23">    <span class="cf">return</span> hei;</a>
<a class="sourceLine" id="cb2-24" title="24">}</a>
<a class="sourceLine" id="cb2-25" title="25"><span class="dt">double</span> Human::show_wei()</a>
<a class="sourceLine" id="cb2-26" title="26">{</a>
<a class="sourceLine" id="cb2-27" title="27">    cout&lt;&lt;<span class="st">"wei"</span>&lt;&lt;wei&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-28" title="28">    <span class="cf">return</span> wei;</a>
<a class="sourceLine" id="cb2-29" title="29">}</a>
<a class="sourceLine" id="cb2-30" title="30"><span class="dt">void</span> Human::set_hei(<span class="dt">double</span> thei)</a>
<a class="sourceLine" id="cb2-31" title="31">{</a>
<a class="sourceLine" id="cb2-32" title="32">    hei=thei;</a>
<a class="sourceLine" id="cb2-33" title="33">}</a>
<a class="sourceLine" id="cb2-34" title="34"><span class="dt">void</span> Human::set_wei(<span class="dt">double</span> twei)</a>
<a class="sourceLine" id="cb2-35" title="35">{</a>
<a class="sourceLine" id="cb2-36" title="36">    wei=twei;</a>
<a class="sourceLine" id="cb2-37" title="37">}</a>
<a class="sourceLine" id="cb2-38" title="38"><span class="dt">void</span> Human::say()</a>
<a class="sourceLine" id="cb2-39" title="39">{</a>
<a class="sourceLine" id="cb2-40" title="40">    cout&lt;&lt;<span class="st">"I am a Human object"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-41" title="41">}</a>
<a class="sourceLine" id="cb2-42" title="42"></a>
<a class="sourceLine" id="cb2-43" title="43"><span class="kw">class</span> Teen:<span class="kw">public</span> Human{</a>
<a class="sourceLine" id="cb2-44" title="44">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb2-45" title="45">        Teen(<span class="dt">int</span> hei,<span class="dt">int</span> wei,<span class="dt">bool</span> good):Human(hei,wei),isgood(good){};        <span class="co">//派生类构造函数在初始化基类私有函数时，通过初始化列表的语法使用基类构造函数</span></a>
<a class="sourceLine" id="cb2-46" title="46">        <span class="kw">virtual</span> <span class="dt">void</span> say();</a>
<a class="sourceLine" id="cb2-47" title="47">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb2-48" title="48">        <span class="dt">bool</span> isgood;</a>
<a class="sourceLine" id="cb2-49" title="49">};</a>
<a class="sourceLine" id="cb2-50" title="50"><span class="dt">void</span> Teen::say()</a>
<a class="sourceLine" id="cb2-51" title="51">{</a>
<a class="sourceLine" id="cb2-52" title="52">    cout&lt;&lt;<span class="st">"I am a Teen object"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-53" title="53">}</a>
<a class="sourceLine" id="cb2-54" title="54"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-55" title="55">{</a>
<a class="sourceLine" id="cb2-56" title="56">    Teen teen(<span class="fl">12.33</span>,<span class="fl">123.5</span>,<span class="kw">true</span>);</a>
<a class="sourceLine" id="cb2-57" title="57">    Human human(<span class="fl">23.12</span>,<span class="fl">234.3</span>);</a>
<a class="sourceLine" id="cb2-58" title="58">    Human&amp; teen_r=teen;</a>
<a class="sourceLine" id="cb2-59" title="59">    Human&amp; human_r=human;</a>
<a class="sourceLine" id="cb2-60" title="60">    teen_r.say();</a>
<a class="sourceLine" id="cb2-61" title="61">    human_r.say();</a>
<a class="sourceLine" id="cb2-62" title="62">}</a></code></pre></div>
<p>  结果如下：</p>
<center>
<p><img src="https://ae01.alicdn.com/kf/HTB1WbFCfK3tHKVjSZSgq6x4QFXaG.jpg"></p>
</center>
<ul>
<li>另外，在一个具有派生类的基类中，惯例是将析构函数声明为虚函数，这可以保证释放派生类对象时按照正确的顺序释放。</li>
</ul>
<h3 id="与派生类有关的的指针和引用类型的兼容性">与派生类有关的的指针和引用类型的兼容性</h3>
<ul>
<li>一个基类指针或引用可以引用派生类对象，而不必进行显式类型转换。其内部逻辑是，公有继承建立的是is-a关系，即派生类也是基类，派生类只不过是基类的一个特例而已(比如说，基类"人"和派生类"中国人"，中国人也是人，所以一个指向"人"的指针或引用也可以指向"中国人"对象)。</li>
</ul>
<h3 id="静态联编与动态联编">静态联编与动态联编</h3>
<ul>
<li>联编：通常来说联编就是将模块或者函数合并在一起生成可执行代码的处理过程，同时对每个模块或者函数调用分配内存地址，并且对外部访问也分配正确的内存地址，它是计算机程序彼此关联的过程。</li>
<li>静态联编：静态联编是指在编译阶段就将函数实现和函数调用关联起来，因此静态联编也叫早绑定，在编译阶段就必须了解所有的函数或模块执行所需要检测的信息</li>
<li><p>动态联编：动态联编是指在程序执行的时候才将函数实现和函数调用关联，因此也叫运行时绑定或者晚绑定。</p></li>
<li>C中的联编都是静态联编</li>
<li><p>C++中的联编一般是静态联编，在涉及模板、虚函数时则是动态联编</p></li>
</ul>
<h4 id="动态联编静态联编与继承有何关系">动态联编、静态联编与继承有何关系？</h4>
<ul>
<li>这主要与上面说到的虚函数(虚方法)有关。虚函数使得在编译过程中并不知道哪一个函数会被调用，这就要求在程序执行时才将函数实现和函数调用关联，即动态联编。</li>
</ul>
<h4 id="一些关于动态联编的问题">一些关于动态联编的问题</h4>
<ul>
<li><p>Q：静态联编能解决的问题，动态联编也能解决，为什么不摒弃静态联编或将动态联编设为默认？</p>
<p>A：动态联编虽好，但它需要在程序运行时采取一些方法跟踪基类指针或引用指向的对象类型，这导致了额外的处理开销。</p></li>
<li><p>Q：动态联编是怎么实现的？</p>
A：在C++中，动态联编的体现就是虚函数。故这个问题可以看作是:"虚函数是怎么实现的"。通常，编译器是这么处理虚函数的：对于一个具有虚函数的对象，为其添加一个隐藏成员。 该成员是一个指针变量，指向一个函数地址数组。数组中的内容是为类对象声明的虚函数的地址。这个数组被称为虚函数表(vtbl)。一个基类对象中的该指针指向基类中的所有虚函数的地址表。 而一个派生类对象的该指针则指向另一个独立的虚函数表。对于一个在基类与派生类中都存在的虚函数(指同名)，若派生类中该函数没有被重新定义，则派生类虚函数表中，该函数的地址 与基类中该函数的地址相同。若重新定义了，则派生类的虚函数表将保存该函数的新地址。另外，如果在派生类中生命了一个基类中没有的虚函数，其地址也会被加入派生类的虚函数表中。 <br><br> 贴一张C++ Primer Plus上的图 <br><br>
<center>
<p><img src="https://ae01.alicdn.com/kf/HTB18EkCSxTpK1RjSZFKq6y2wXXav.jpg"></p></center></li>
</ul>

<p><br></p>
<p>在调用虚函数的时候，程序首先查看引用或指针指向的对象的虚函数表的地址，然后再访问相应的虚函数表，再根据实际调用的函数，访问虚函数表中相应的函数的地址。</p>
<p>正是因为这种实现机制，虚函数会带来更大的空间与时间消耗，因为:<br><br> 1.对于每一个具有虚函数的对象，都要增加一个指针变量<br> 2.对于每一个具有虚函数的类，都要生成一个虚函数表<br> 3.执行过程中还要进行到虚函数表中查找虚函数地址的操作<br></p>
<h4 id="有关虚函数的注意事项">有关虚函数的注意事项</h4>
<ul>
<li>构造函数不可以是虚函数</li>
<li>析构函数最好是虚函数，除非该类没有派生类</li>
<li>友元函数不能是虚函数，因为友元不是成员函数，而只有成员函数才能成为虚函数</li>
<li>在派生类中重新定义虚函数时，应保持函数原型与基类中的相同(至少参数列表要相同)<br> 这是因为,在派生类中重新定义虚函数时，并不会生成该函数的两个重载版本，而是在派生类中隐藏掉基类中所有同名的虚函数。 以下代码是一个错误示范。</li>
</ul>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-7" title="7"><span class="kw">class</span> Human{</a>
<a class="sourceLine" id="cb3-8" title="8">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb3-9" title="9">        <span class="dt">double</span> show_hei();</a>
<a class="sourceLine" id="cb3-10" title="10">        <span class="dt">double</span> show_wei();</a>
<a class="sourceLine" id="cb3-11" title="11">        <span class="dt">void</span> set_hei(<span class="dt">double</span> thei);</a>
<a class="sourceLine" id="cb3-12" title="12">        <span class="dt">void</span> set_wei(<span class="dt">double</span> twei);</a>
<a class="sourceLine" id="cb3-13" title="13">        <span class="kw">virtual</span> <span class="dt">void</span> say();</a>
<a class="sourceLine" id="cb3-14" title="14">        Human(<span class="dt">int</span> hei,<span class="dt">int</span> wei):hei(hei),wei(wei){}</a>
<a class="sourceLine" id="cb3-15" title="15">        <span class="kw">virtual</span> ~Human(){};</a>
<a class="sourceLine" id="cb3-16" title="16">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb3-17" title="17">        <span class="dt">int</span> hei;</a>
<a class="sourceLine" id="cb3-18" title="18">        <span class="dt">int</span> wei;</a>
<a class="sourceLine" id="cb3-19" title="19">};</a>
<a class="sourceLine" id="cb3-20" title="20"><span class="dt">double</span> Human::show_hei()</a>
<a class="sourceLine" id="cb3-21" title="21">{</a>
<a class="sourceLine" id="cb3-22" title="22">    cout&lt;&lt;<span class="st">"hei="</span>&lt;&lt;hei&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-23" title="23">    <span class="cf">return</span> hei;</a>
<a class="sourceLine" id="cb3-24" title="24">}</a>
<a class="sourceLine" id="cb3-25" title="25"><span class="dt">double</span> Human::show_wei()</a>
<a class="sourceLine" id="cb3-26" title="26">{</a>
<a class="sourceLine" id="cb3-27" title="27">    cout&lt;&lt;<span class="st">"wei"</span>&lt;&lt;wei&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-28" title="28">    <span class="cf">return</span> wei;</a>
<a class="sourceLine" id="cb3-29" title="29">}</a>
<a class="sourceLine" id="cb3-30" title="30"><span class="dt">void</span> Human::set_hei(<span class="dt">double</span> thei)</a>
<a class="sourceLine" id="cb3-31" title="31">{</a>
<a class="sourceLine" id="cb3-32" title="32">    hei=thei;</a>
<a class="sourceLine" id="cb3-33" title="33">}</a>
<a class="sourceLine" id="cb3-34" title="34"><span class="dt">void</span> Human::set_wei(<span class="dt">double</span> twei)</a>
<a class="sourceLine" id="cb3-35" title="35">{</a>
<a class="sourceLine" id="cb3-36" title="36">    wei=twei;</a>
<a class="sourceLine" id="cb3-37" title="37">}</a>
<a class="sourceLine" id="cb3-38" title="38"><span class="dt">void</span> Human::say()</a>
<a class="sourceLine" id="cb3-39" title="39">{</a>
<a class="sourceLine" id="cb3-40" title="40">    cout&lt;&lt;<span class="st">"I am a Human object"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-41" title="41">}</a>
<a class="sourceLine" id="cb3-42" title="42"></a>
<a class="sourceLine" id="cb3-43" title="43"><span class="kw">class</span> Teen:<span class="kw">public</span> Human{</a>
<a class="sourceLine" id="cb3-44" title="44">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb3-45" title="45">        Teen(<span class="dt">int</span> hei,<span class="dt">int</span> wei,<span class="dt">bool</span> good):Human(hei,wei),isgood(good){};</a>
<a class="sourceLine" id="cb3-46" title="46">        <span class="kw">virtual</span> <span class="dt">void</span> say(<span class="dt">int</span> a);</a>
<a class="sourceLine" id="cb3-47" title="47">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb3-48" title="48">        <span class="dt">bool</span> isgood;</a>
<a class="sourceLine" id="cb3-49" title="49">};</a>
<a class="sourceLine" id="cb3-50" title="50"><span class="dt">void</span> Teen::say(<span class="dt">int</span> a)</a>
<a class="sourceLine" id="cb3-51" title="51">{</a>
<a class="sourceLine" id="cb3-52" title="52">    cout&lt;&lt;<span class="st">"I am a Teen object"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-53" title="53">    cout&lt;&lt;<span class="st">"I am "</span>&lt;&lt;a&lt;&lt;<span class="st">" year(s) old."</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-54" title="54">}</a>
<a class="sourceLine" id="cb3-55" title="55"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-56" title="56">{</a>
<a class="sourceLine" id="cb3-57" title="57">    Teen teen(<span class="fl">12.33</span>,<span class="fl">123.5</span>,<span class="kw">true</span>);</a>
<a class="sourceLine" id="cb3-58" title="58">    Human human(<span class="fl">23.12</span>,<span class="fl">234.3</span>);</a>
<a class="sourceLine" id="cb3-59" title="59">    teen.say();        <span class="co">//这里会报错，因为基类的say()在派生类中被隐藏了</span></a>
<a class="sourceLine" id="cb3-60" title="60">    teen.say(<span class="dv">3</span>);</a>
<a class="sourceLine" id="cb3-61" title="61">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-62" title="62">}</a></code></pre></div>
<h3 id="纯虚函数与抽象基类">纯虚函数与抽象基类</h3>
<ul>
<li><p>使用抽象基类来进行类的设计是一种更系统化、更有序的类设计方法。抽象基类指的是对于要创建的多个类，提取其公有特征，将这些特征整合成一个基类。抽象基类与普通的类的区别在于，抽象基类中包含有至少一个纯虚函数，而纯虚函数只提供接口不提供实现，也就是只需要声明，不需要实现，具体的实现在派生类中进行。要申明一个纯虚函数，只需要在虚函数的声明后面加上一个=0即可。另一个不同在于，抽象基类无法实例化。对于一个继承自抽象基类的派生类，若在这个类中给出了纯虚函数的实现，则这个派生类将转化为具体类，可以实例化。如果没有实现，则仍是抽象类，不能实例化。</p></li>
<li><p>抽象基类的意义是什么？</p></li>
</ul>
<blockquote>
<p>1.最重要的原因是，可以将接口与实现分离。接口是软件产品最有价值的资源，设计接口比实现接口需要耗费更昂贵的成本。因此，要将接口保护起来，以免在针对客户需求修改实现的时候，程序员不小心把接口破坏掉。<br> 2.引入抽象基类和纯虚函数方便实现C++的多态特性。可以用抽象基类的指针去调用子类对象的方法。<br> 3.很多时候，许多基类被实例化是不合理的。例如“形状”这个基类，被实例化之后反而会让人相当费解，所以干脆将“形状”这个类定义为抽象类，由它派生出正方形，三角形等子类。</p>
</blockquote>
<p>(引用自<a href="https://blog.csdn.net/zz56z56/article/details/84177250">C++为什么要定义抽象基类</a>)</p>
<p>来一段代码:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb4-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb4-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb4-16" title="16"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb4-17" title="17"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb4-18" title="18"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb4-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb4-20" title="20"><span class="kw">class</span> Human{</a>
<a class="sourceLine" id="cb4-21" title="21">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb4-22" title="22">        Human(){}</a>
<a class="sourceLine" id="cb4-23" title="23">        Human(<span class="dt">int</span> age,<span class="dt">int</span> sex):age(age),sex(sex){}</a>
<a class="sourceLine" id="cb4-24" title="24">        <span class="kw">virtual</span> <span class="dt">void</span> show()=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-25" title="25">        <span class="kw">virtual</span> ~Human(){};</a>
<a class="sourceLine" id="cb4-26" title="26">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb4-27" title="27">        <span class="dt">int</span> age;</a>
<a class="sourceLine" id="cb4-28" title="28">        <span class="dt">int</span> sex;</a>
<a class="sourceLine" id="cb4-29" title="29">};</a>
<a class="sourceLine" id="cb4-30" title="30"><span class="kw">class</span> Adult:<span class="kw">public</span> Human{</a>
<a class="sourceLine" id="cb4-31" title="31">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb4-32" title="32">        <span class="kw">virtual</span> <span class="dt">void</span> show();</a>
<a class="sourceLine" id="cb4-33" title="33">        Adult(<span class="dt">int</span> age,<span class="dt">int</span> sex,string str):Human(age,sex),job(str){}</a>
<a class="sourceLine" id="cb4-34" title="34">        Adult(){}</a>
<a class="sourceLine" id="cb4-35" title="35">        <span class="kw">virtual</span> ~Adult(){}</a>
<a class="sourceLine" id="cb4-36" title="36">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb4-37" title="37">        string job;</a>
<a class="sourceLine" id="cb4-38" title="38">};</a>
<a class="sourceLine" id="cb4-39" title="39"><span class="dt">void</span> Adult::show()</a>
<a class="sourceLine" id="cb4-40" title="40">{</a>
<a class="sourceLine" id="cb4-41" title="41">    cout&lt;&lt;<span class="st">"I am a "</span>&lt;&lt;job&lt;&lt;endl;</a>
<a class="sourceLine" id="cb4-42" title="42">}</a>
<a class="sourceLine" id="cb4-43" title="43"><span class="kw">class</span> Teen:<span class="kw">public</span> Human{</a>
<a class="sourceLine" id="cb4-44" title="44">    <span class="kw">public</span>:</a>
<a class="sourceLine" id="cb4-45" title="45">        <span class="kw">virtual</span> <span class="dt">void</span> show();</a>
<a class="sourceLine" id="cb4-46" title="46">        Teen(<span class="dt">int</span> age,<span class="dt">int</span> sex,<span class="dt">int</span> sco):Human(age,sex),score(sco){}</a>
<a class="sourceLine" id="cb4-47" title="47">        Teen(){}</a>
<a class="sourceLine" id="cb4-48" title="48">        <span class="kw">virtual</span> ~Teen(){}</a>
<a class="sourceLine" id="cb4-49" title="49">    <span class="kw">private</span>:</a>
<a class="sourceLine" id="cb4-50" title="50">        <span class="dt">int</span> score;</a>
<a class="sourceLine" id="cb4-51" title="51">};</a>
<a class="sourceLine" id="cb4-52" title="52"><span class="dt">void</span> Teen::show()</a>
<a class="sourceLine" id="cb4-53" title="53">{</a>
<a class="sourceLine" id="cb4-54" title="54">    cout&lt;&lt;<span class="st">"my score is "</span>&lt;&lt;score&lt;&lt;endl;</a>
<a class="sourceLine" id="cb4-55" title="55">}</a>
<a class="sourceLine" id="cb4-56" title="56"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb4-57" title="57">{</a>
<a class="sourceLine" id="cb4-58" title="58">    Teen teen(<span class="dv">12</span>,<span class="dv">0</span>,<span class="dv">100</span>);</a>
<a class="sourceLine" id="cb4-59" title="59">    string Job;</a>
<a class="sourceLine" id="cb4-60" title="60">    Job=<span class="st">"teacher"</span>;</a>
<a class="sourceLine" id="cb4-61" title="61">    Adult adult(<span class="dv">1</span>,<span class="dv">45</span>,Job);</a>
<a class="sourceLine" id="cb4-62" title="62">    Human* tp=&amp;teen;</a>
<a class="sourceLine" id="cb4-63" title="63">    Human* ap=&amp;adult;</a>
<a class="sourceLine" id="cb4-64" title="64">    tp-&gt;show();</a>
<a class="sourceLine" id="cb4-65" title="65">    ap-&gt;show();</a>
<a class="sourceLine" id="cb4-66" title="66">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-67" title="67">} </a></code></pre></div>
]]></content>
      <categories>
        <category>C++</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>继承</tag>
        <tag>学习笔记</tag>
        <tag>虚函数</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>【OpenGL学习笔记】一、VBO，VAO与EBO</title>
    <url>/2020/07/25/%E3%80%90OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E4%B8%80%E3%80%81VBO%EF%BC%8CVAO%E4%B8%8EEBO/</url>
    <content><![CDATA[<p><img src="https://pic.downk.cc/item/5f1b8a4e14195aa594516bd0.png"> <span id="more"></span> ### 前言 VBO、VAO和EBO是OpenGL中三个很基础的概念，但一开始时总是分不清他们的区别与联系。 ### 正文 * VBO：顶点缓冲对象</p>
<ul>
<li><p>是在显卡存储空间中开辟的一块内存缓存区，用于存储顶点的各类属性（顶点坐标、顶点法向量、顶点颜色等）</p></li>
<li><p>渲染时，可以直接从VBO中取出顶点的各类属性数据</p></li>
<li><p>每个VBO都有其唯一标识ID</p></li>
<li><p>使用glGenBuffers开辟VBO并分配id</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="dt">unsigned</span> <span class="dt">int</span> VBO;</a>
<a class="sourceLine" id="cb1-2" title="2">glGenBuffers(<span class="dv">1</span>,&amp;VBO);</a></code></pre></div></li>
<li><p>通过glBindBuffer将某种类型的顶点数据绑定到某个VBO上（可以暂时理解为告诉该VBO它要存储的数据的类型，当然这是不准确的，因为同一类型的顶点数据一次只能绑定一个VBO）。绑定的类型必须是以下几种中的一种</p>
<ul>
<li>GL_ARRAY_BUFFER</li>
<li>GL_ELEMENT_ARRAY_BUFFER</li>
<li>GL_PIXEL_PACK_BUFFER</li>
<li>GL_PIXEL_UNPACK_BUFFER</li>
</ul>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="dt">unsigned</span> <span class="dt">int</span> VBO;</a>
<a class="sourceLine" id="cb2-2" title="2">glGenBuffers(<span class="dv">1</span>,&amp;VBO);</a>
<a class="sourceLine" id="cb2-3" title="3">glBindBuffer(GL_ARRAY_BUFFER,VBO);</a></code></pre></div></li>
<li><p>通过glBufferData将数据传送到绑定的VBO中</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1">glBufferData(GL_ARRAY_BUFFER,<span class="kw">sizeof</span>(vertices),vertices,GL_STATIC_DRAW);</a></code></pre></div></li>
<li><p>使用glVertexAttribPointer告知OpenGL如何处理某个VBO中的数据</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1">glVertexAttribPointer(<span class="dv">0</span>,<span class="dv">4</span>,GL_FLOAT,GL_FALSE,<span class="dv">0</span>,(<span class="dt">void</span>*)<span class="dv">0</span>);</a></code></pre></div>
<ul>
<li>第一个参数指定顶点属性位置，与顶点着色器中的layout(location=0)对应</li>
<li>第二个参数指定一个顶点属性组的大小（数据元素个数）</li>
<li>第三个参数指定顶点属性数据类型</li>
<li>第四个参数指定数据是否要被标准化</li>
<li>第五个参数是步长，指定连续顶点属性组之间的间隔。比方说三个GL_FLOAT数据表示一个坐标点，那就把他们作为一个属性组，步长就是3*sizeof(float)</li>
<li>第六个参数是数据起始位置距离缓冲区中起始位置的偏移量</li>
</ul></li>
<li><p>使用glEnableVertexAttribArray开启glVertexAttribPointer。由于glVertexAttribPointer默认是关闭的，所以使用时要用顶点属性位置的值为参数，通过glEnableVertexAttribArray来开启这一功能</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb5-1" title="1">glEnableVertexAttribArray(<span class="dv">0</span>)</a></code></pre></div></li>
<li><p>VAO：顶点数组对象</p>
<ul>
<li><p>保存了很多VBO的引用，相当于把很多VBO统一到一个对象中进行管理</p></li>
<li><p>使用glGenVertexArrays得到一个VAO，并分配id</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb6-1" title="1">glGenVertexArrays(<span class="dv">1</span>,&amp;VAO);</a></code></pre></div></li>
<li><p>使用glBindVertexArray绑定VAO。绑定后，后面所有VBO的引用都会被保存在这一个VAO中。</p></li>
<li><p>VAO的存在意义是减少绑定的工作量。因为每次绘制某些之前都需要绑定顶点的所有信息到对应的VBO中。这样做未免有点太麻烦，尤其是数据量很大的情况下。使用VAO，可以把所有顶点信息都绑定到VBO后，再通过VAO把所有顶点信息绑定到一个对象上(VAO)，后面只需要绑定VAO这一个对象即可。</p></li>
</ul></li>
<li><p>EBO：索引缓存对象</p>
<ul>
<li>存储顶点的索引，避免因为某些点重复存储导致的空间浪费</li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>OpenGL学习笔记</category>
      </categories>
      <tags>
        <tag>计算机图形学</tag>
        <tag>OpenGL</tag>
        <tag>OpenGL学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>【求最小生成树】Prim算法&amp;Kruskal算法</title>
    <url>/2019/02/27/%E3%80%90%E6%B1%82%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E3%80%91Prim%E7%AE%97%E6%B3%95-Kruskal%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h4 id="一概念解释">一、概念解释</h4>
首先解释几个概念：
<ul>
<li>
<p>连通图：在无向图中，若任意两个顶点vi与vj都有路径相通，则称该无向图为连通图。</p>
</li><li>
<p>强连通图：在有向图中，若任意两个顶点vi与vj都有路径相通，则称该有向图为强连通图。</p>
</li><li>
<p>连通网：在连通图中，若图的边具有一定的意义，每一条边都对应着一个数，称为权；权代表着连接连个顶点的代价，称这种连通图叫做连通网。</p>
</li><li>
<p>生成树：一个连通图的生成树是指一个连通子图，它含有图中全部n个顶点，但只有足以构成一棵树的n-1条边。一颗有n个顶点的生成树有且仅有n-1条边，如果生成树中再添加一条边，则必定成环。</p>
</li><li>
最小生成树：在连通网的所有生成树中，所有边的代价和最小的生成树，称为最小生成树。
</li></ul>
<p>(转自<a href="http://blog.csdn.net/luoshixian099/article/details/51908175">勿在浮沙筑高台</a>)</p>
<p>  简单来说，最小生成树就是在连通图中找出一颗树，这棵树满足这样的要求：1、可以将图中的所有顶点都连通；2、这颗树的边的权重和是最小的(具体到实际问题上，边的权重可能是成本、路程等)</p>
<p>  求最小生成树一般有两种算法，一种是Prim算法，另一种则是Kruskal算法。</p>
<h4 id="二prim算法">二、Prim算法</h4>
<p>  Prim使用的是贪心的思想，与Dijkstra有异曲同工之处。它的原理是，先从图中任意选择一个起点，并记录下与这个点直接相连的点对应的边的权值，然后找到这些边中权值最小的，并将这个权值加到最终结果中，同时在vis数组里将选定的起点标记。然后然后我们将“起点”转移到刚才选择的权值最小边所对应的另一个顶点，重复上述过程，再找出一条与新起点直接相连的权值最小边，把它的权值加到最终结果中......不断重复以上过程共n-1次，即可找出最小生成树。代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="co">//low[]用来记录最小权值,vis[]为标记数组，标记已经走过的点</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="dt">int</span> prim()</a>
<a class="sourceLine" id="cb1-3" title="3">{    </a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="dt">int</span> mini; </a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="dt">int</span> rsl=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-6" title="6">    mst(vis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-7" title="7">    vis[<span class="dv">1</span>]=<span class="dv">1</span>;<span class="dt">int</span> pos=<span class="dv">1</span>;        <span class="co">//先以1为起点 </span></a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-9" title="9">        low[i]=gra[pos][i];        <span class="co">//存储与1相连的边的权值 </span></a>
<a class="sourceLine" id="cb1-10" title="10">    low[pos]=<span class="dv">0</span>;vis[pos]=<span class="dv">1</span>;        <span class="co">//1到1的距离为0；1作为起点，可认为已在树里 </span></a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-12" title="12">    {</a>
<a class="sourceLine" id="cb1-13" title="13">        mini=INF;</a>
<a class="sourceLine" id="cb1-14" title="14">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">2</span>;j&lt;=n;j++)</a>
<a class="sourceLine" id="cb1-15" title="15">            <span class="cf">if</span>(!vis[j]&amp;&amp;mini&gt;low[j]){        <span class="co">//查找与1相连的权值最小的边， </span></a>
<a class="sourceLine" id="cb1-16" title="16">                mini=low[j];                <span class="co">//将这一条边的另一个顶点加入树中， </span></a>
<a class="sourceLine" id="cb1-17" title="17">                pos=j;                        <span class="co">//同时，将pos改为这条边的另一个顶点， </span></a>
<a class="sourceLine" id="cb1-18" title="18">            }                                <span class="co">//下一次找权值最小的边时从这一个点开始 </span></a>
<a class="sourceLine" id="cb1-19" title="19">        vis[pos]=<span class="dv">1</span>;                            <span class="co">//因为被找到的点已经加入了树中，所以vis[pos]=1； </span></a>
<a class="sourceLine" id="cb1-20" title="20">        <span class="cf">if</span>(mini!=INF)         </a>
<a class="sourceLine" id="cb1-21" title="21">            rsl+=mini;</a>
<a class="sourceLine" id="cb1-22" title="22">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">2</span>;j&lt;=n;j++)</a>
<a class="sourceLine" id="cb1-23" title="23">            <span class="cf">if</span>(!vis[j]&amp;&amp;low[j]&gt;gra[pos][j])</a>
<a class="sourceLine" id="cb1-24" title="24">                low[j]=gra[pos][j];        <span class="co">////计算、更新与已经加入树中的点相连的边的最小权值</span></a>
<a class="sourceLine" id="cb1-25" title="25">    }</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="cf">return</span> rsl;</a>
<a class="sourceLine" id="cb1-27" title="27">}</a></code></pre></div>
<p>  Prim与Dijkstra的相同之处在于，两者都用到了贪心思想，且都有点与点之间的转移。但不同之处在于，Dijkstra是求从一个点到另一个点的最短路，而Prim是求最小权值的树。这就决定了两者之间的一个区别，即Dijkstra的dis[]数组用于存放起点到每一个点的最短距离，而Prim的dis[]数组用于存放当前点到与它直接相连的点的最小权值。<del>(我怎么觉得我在说废话)</del></p>
<p>  再来一道Prim的模板题→<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1233">HDU1233 还是畅通工程</a></p>
<p>  这题只需要直接套用模板即可，没什么需要注意的地方。可以通过这道题感受一下Prim怎么用。</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-9" title="9"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-10" title="10"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-11" title="11"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-12" title="12"><span class="dt">int</span> gra[<span class="dv">105</span>][<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb2-13" title="13"><span class="dt">int</span> low[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb2-14" title="14"><span class="dt">bool</span> vis[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="dt">int</span> prim()</a>
<a class="sourceLine" id="cb2-17" title="17">{    </a>
<a class="sourceLine" id="cb2-18" title="18">    <span class="dt">int</span> mini; </a>
<a class="sourceLine" id="cb2-19" title="19">    <span class="dt">int</span> rsl=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-20" title="20">    mst(vis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-21" title="21">    vis[<span class="dv">1</span>]=<span class="dv">1</span>;<span class="dt">int</span> pos=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-22" title="22">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb2-23" title="23">        low[i]=gra[pos][i];</a>
<a class="sourceLine" id="cb2-24" title="24">    low[pos]=<span class="dv">0</span>;vis[pos]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-25" title="25">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb2-26" title="26">    {</a>
<a class="sourceLine" id="cb2-27" title="27">        mini=INF;</a>
<a class="sourceLine" id="cb2-28" title="28">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">2</span>;j&lt;=n;j++)</a>
<a class="sourceLine" id="cb2-29" title="29">            <span class="cf">if</span>(!vis[j]&amp;&amp;mini&gt;low[j]){</a>
<a class="sourceLine" id="cb2-30" title="30">                mini=low[j];</a>
<a class="sourceLine" id="cb2-31" title="31">                pos=j;</a>
<a class="sourceLine" id="cb2-32" title="32">            }</a>
<a class="sourceLine" id="cb2-33" title="33">        vis[pos]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-34" title="34">        <span class="cf">if</span>(mini!=INF)</a>
<a class="sourceLine" id="cb2-35" title="35">            rsl+=mini;</a>
<a class="sourceLine" id="cb2-36" title="36">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">2</span>;j&lt;=n;j++)</a>
<a class="sourceLine" id="cb2-37" title="37">            <span class="cf">if</span>(!vis[j]&amp;&amp;low[j]&gt;gra[pos][j])</a>
<a class="sourceLine" id="cb2-38" title="38">                low[j]=gra[pos][j];</a>
<a class="sourceLine" id="cb2-39" title="39">    }</a>
<a class="sourceLine" id="cb2-40" title="40">    <span class="cf">return</span> rsl;</a>
<a class="sourceLine" id="cb2-41" title="41">}</a>
<a class="sourceLine" id="cb2-42" title="42"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-43" title="43">{</a>
<a class="sourceLine" id="cb2-44" title="44">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF&amp;&amp;n)</a>
<a class="sourceLine" id="cb2-45" title="45">    {    </a>
<a class="sourceLine" id="cb2-46" title="46">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb2-47" title="47">            gra[i][i]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-48" title="48">        <span class="dt">int</span> tot=(n*(n-<span class="dv">1</span>))/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb2-49" title="49">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;tot;i++)</a>
<a class="sourceLine" id="cb2-50" title="50">        {</a>
<a class="sourceLine" id="cb2-51" title="51">            <span class="dt">int</span> a,b;</a>
<a class="sourceLine" id="cb2-52" title="52">            <span class="dt">int</span> u,v,len;</a>
<a class="sourceLine" id="cb2-53" title="53">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;u,&amp;v,&amp;len);</a>
<a class="sourceLine" id="cb2-54" title="54">            gra[u][v]=gra[v][u]=len; </a>
<a class="sourceLine" id="cb2-55" title="55">        }</a>
<a class="sourceLine" id="cb2-56" title="56">        <span class="dt">int</span> ans=prim();</a>
<a class="sourceLine" id="cb2-57" title="57">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-58" title="58">    }</a>
<a class="sourceLine" id="cb2-59" title="59">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-60" title="60">}</a></code></pre></div>
<h4 id="三kruskal算法">三、Kruskal算法</h4>
<p>  与Prim的基于顶点不同，Kruskal是一种基于边的算法。它的原理是，首先将一个连通图的所有边存起来，然后根据权值从小到大对这些边进行排序。然后每次按权值从小到大的顺序取出一条边，检查这条边的两个顶点是否在同一个集合内，若是，则这条边弃之不用且永远不会被使用(否则会产生闭环)；否则，选用这条边，作为最小生成树的其中一条边(即将两个这条边对应的两个顶点合并入一个集合中)。而在检查与合并的过程中，为了保证效率，我们可以使用并查集来实现。代码如下：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">typedef</span> <span class="kw">struct</span>{</a>
<a class="sourceLine" id="cb3-2" title="2">    <span class="dt">int</span> from,to,wei;</a>
<a class="sourceLine" id="cb3-3" title="3">}edge;        <span class="co">//y用一个结构体表示边</span></a>
<a class="sourceLine" id="cb3-4" title="4">edge arr[<span class="dv">5000</span>];</a>
<a class="sourceLine" id="cb3-5" title="5"><span class="dt">bool</span> cmp(edge a,edge b)        <span class="co">//用于边的排序</span></a>
<a class="sourceLine" id="cb3-6" title="6">{</a>
<a class="sourceLine" id="cb3-7" title="7">    <span class="cf">return</span> a.wei&lt;b.wei;</a>
<a class="sourceLine" id="cb3-8" title="8">}</a>
<a class="sourceLine" id="cb3-9" title="9"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb3-10" title="10">{</a>
<a class="sourceLine" id="cb3-11" title="11">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb3-12" title="12">        pre[i]=i;</a>
<a class="sourceLine" id="cb3-13" title="13">    }</a>
<a class="sourceLine" id="cb3-14" title="14">}</a>
<a class="sourceLine" id="cb3-15" title="15"><span class="dt">int</span> findr(<span class="dt">int</span> x)</a>
<a class="sourceLine" id="cb3-16" title="16">{</a>
<a class="sourceLine" id="cb3-17" title="17">    <span class="cf">if</span>(x==pre[x])</a>
<a class="sourceLine" id="cb3-18" title="18">        <span class="cf">return</span> x;</a>
<a class="sourceLine" id="cb3-19" title="19">    <span class="cf">return</span> pre[x]=findr(pre[x]);        <span class="co">//找根节点同时进行压缩，提高往后查询时的效率</span></a>
<a class="sourceLine" id="cb3-20" title="20">}</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="dt">int</span> kruskal()</a>
<a class="sourceLine" id="cb3-22" title="22">{</a>
<a class="sourceLine" id="cb3-23" title="23">    <span class="dt">int</span> rsl=<span class="dv">0</span>;<span class="dt">int</span> num=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-24" title="24">    init();</a>
<a class="sourceLine" id="cb3-25" title="25">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++)</a>
<a class="sourceLine" id="cb3-26" title="26">    {</a>
<a class="sourceLine" id="cb3-27" title="27">        <span class="dt">int</span> fx=findr(arr[i].from);</a>
<a class="sourceLine" id="cb3-28" title="28">        <span class="dt">int</span> fy=findr(arr[i].to);        <span class="co">//找根节点</span></a>
<a class="sourceLine" id="cb3-29" title="29">        <span class="cf">if</span>(fx!=fy)        <span class="co">//如果不在一个集合内，则合并</span></a>
<a class="sourceLine" id="cb3-30" title="30">        {</a>
<a class="sourceLine" id="cb3-31" title="31">            pre[fx]=fy;</a>
<a class="sourceLine" id="cb3-32" title="32">            rsl+=arr[i].wei;</a>
<a class="sourceLine" id="cb3-33" title="33">            num++;</a>
<a class="sourceLine" id="cb3-34" title="34">        }</a>
<a class="sourceLine" id="cb3-35" title="35">    }</a>
<a class="sourceLine" id="cb3-36" title="36">    <span class="cf">if</span>(num==n-<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-37" title="37">        <span class="cf">return</span> rsl;</a>
<a class="sourceLine" id="cb3-38" title="38">   <span class="cf">else</span></a>
<a class="sourceLine" id="cb3-39" title="39">         <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-40" title="40">}</a></code></pre></div>
<p>来一道Kruskal的模板题→<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1875">HDU1875畅通工程再续</a></p>
<p>代码如下：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb4-8" title="8"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb4-9" title="9"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb4-10" title="10"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb4-11" title="11"><span class="dt">int</span> n,m,idx1;</a>
<a class="sourceLine" id="cb4-12" title="12"><span class="kw">typedef</span> <span class="kw">struct</span>{</a>
<a class="sourceLine" id="cb4-13" title="13">    <span class="dt">int</span> from,to;</a>
<a class="sourceLine" id="cb4-14" title="14">    <span class="dt">double</span> len;</a>
<a class="sourceLine" id="cb4-15" title="15">}edge;</a>
<a class="sourceLine" id="cb4-16" title="16"><span class="kw">typedef</span> <span class="kw">struct</span>{</a>
<a class="sourceLine" id="cb4-17" title="17">    <span class="dt">double</span> x,y;</a>
<a class="sourceLine" id="cb4-18" title="18">}point;</a>
<a class="sourceLine" id="cb4-19" title="19">point p[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb4-20" title="20">edge e[<span class="dv">5000</span>];</a>
<a class="sourceLine" id="cb4-21" title="21"><span class="dt">int</span> pre[<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb4-22" title="22"><span class="dt">double</span> get_len(point pa,point pb)</a>
<a class="sourceLine" id="cb4-23" title="23">{</a>
<a class="sourceLine" id="cb4-24" title="24">    <span class="cf">return</span> sqrt((pa.x-pb.x)*(pa.x-pb.x)+(pa.y-pb.y)*(pa.y-pb.y));</a>
<a class="sourceLine" id="cb4-25" title="25">}</a>
<a class="sourceLine" id="cb4-26" title="26"><span class="dt">bool</span> cmp(edge e1,edge e2)</a>
<a class="sourceLine" id="cb4-27" title="27">{</a>
<a class="sourceLine" id="cb4-28" title="28">    <span class="cf">return</span> e1.len&lt;e2.len;</a>
<a class="sourceLine" id="cb4-29" title="29">}</a>
<a class="sourceLine" id="cb4-30" title="30"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb4-31" title="31">{</a>
<a class="sourceLine" id="cb4-32" title="32">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb4-33" title="33">        pre[i]=i;</a>
<a class="sourceLine" id="cb4-34" title="34">    } </a>
<a class="sourceLine" id="cb4-35" title="35">}</a>
<a class="sourceLine" id="cb4-36" title="36"><span class="dt">int</span> findr(<span class="dt">int</span> x)</a>
<a class="sourceLine" id="cb4-37" title="37">{</a>
<a class="sourceLine" id="cb4-38" title="38">    <span class="cf">if</span>(x==pre[x])</a>
<a class="sourceLine" id="cb4-39" title="39">        <span class="cf">return</span> x;</a>
<a class="sourceLine" id="cb4-40" title="40">    <span class="cf">return</span> pre[x]=findr(pre[x]);</a>
<a class="sourceLine" id="cb4-41" title="41">}</a>
<a class="sourceLine" id="cb4-42" title="42"><span class="dt">double</span> kruskal()</a>
<a class="sourceLine" id="cb4-43" title="43">{</a>
<a class="sourceLine" id="cb4-44" title="44">    <span class="dt">double</span> rsl=<span class="dv">0</span>;<span class="dt">int</span> num=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-45" title="45">    init();</a>
<a class="sourceLine" id="cb4-46" title="46">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=idx1;i++)</a>
<a class="sourceLine" id="cb4-47" title="47">    {</a>
<a class="sourceLine" id="cb4-48" title="48">        <span class="dt">int</span> fx=findr(e[i].from);</a>
<a class="sourceLine" id="cb4-49" title="49">        <span class="dt">int</span> fy=findr(e[i].to);</a>
<a class="sourceLine" id="cb4-50" title="50">        <span class="cf">if</span>(fx!=fy)</a>
<a class="sourceLine" id="cb4-51" title="51">        {</a>
<a class="sourceLine" id="cb4-52" title="52">            pre[fx]=fy;</a>
<a class="sourceLine" id="cb4-53" title="53">            rsl+=e[i].len;</a>
<a class="sourceLine" id="cb4-54" title="54">            num++;</a>
<a class="sourceLine" id="cb4-55" title="55">        }</a>
<a class="sourceLine" id="cb4-56" title="56">    }</a>
<a class="sourceLine" id="cb4-57" title="57">    <span class="cf">if</span>(num==n-<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb4-58" title="58">        <span class="cf">return</span> rsl;</a>
<a class="sourceLine" id="cb4-59" title="59">    <span class="cf">else</span></a>
<a class="sourceLine" id="cb4-60" title="60">        <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb4-61" title="61">}</a>
<a class="sourceLine" id="cb4-62" title="62"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb4-63" title="63">{</a>
<a class="sourceLine" id="cb4-64" title="64">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb4-65" title="65">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb4-66" title="66">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb4-67" title="67">    {</a>
<a class="sourceLine" id="cb4-68" title="68">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb4-69" title="69">        <span class="dt">double</span> x,y;point tmp;</a>
<a class="sourceLine" id="cb4-70" title="70">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb4-71" title="71">            scanf(<span class="st">"</span><span class="sc">%lf</span><span class="st"> </span><span class="sc">%lf</span><span class="st">"</span>,&amp;x,&amp;y);</a>
<a class="sourceLine" id="cb4-72" title="72">            tmp.x=x;tmp.y=y;</a>
<a class="sourceLine" id="cb4-73" title="73">            p[i]=tmp; </a>
<a class="sourceLine" id="cb4-74" title="74">        }</a>
<a class="sourceLine" id="cb4-75" title="75">        idx1=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb4-76" title="76">        m=(n*(n-<span class="dv">1</span>))/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb4-77" title="77">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb4-78" title="78">            <span class="cf">for</span>(<span class="dt">int</span> j=i+<span class="dv">1</span>;j&lt;=n;j++){</a>
<a class="sourceLine" id="cb4-79" title="79">                edge temp;</a>
<a class="sourceLine" id="cb4-80" title="80">                temp.from=i;</a>
<a class="sourceLine" id="cb4-81" title="81">                temp.to=j;</a>
<a class="sourceLine" id="cb4-82" title="82">                temp.len=get_len(p[i],p[j]);</a>
<a class="sourceLine" id="cb4-83" title="83">                <span class="cf">if</span>(temp.len&lt;=<span class="dv">1000</span>&amp;&amp;temp.len&gt;=<span class="dv">10</span>)</a>
<a class="sourceLine" id="cb4-84" title="84">                    e[idx1++]=temp; </a>
<a class="sourceLine" id="cb4-85" title="85">            }</a>
<a class="sourceLine" id="cb4-86" title="86">        }</a>
<a class="sourceLine" id="cb4-87" title="87">        sort(e,e+idx1,cmp);</a>
<a class="sourceLine" id="cb4-88" title="88">        <span class="dt">double</span> ans=kruskal();</a>
<a class="sourceLine" id="cb4-89" title="89">        <span class="cf">if</span>(ans==-<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb4-90" title="90">            cout&lt;&lt;<span class="st">"oh!"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb4-91" title="91">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb4-92" title="92">            printf(<span class="st">"%.1lf</span><span class="sc">\n</span><span class="st">"</span>,ans*<span class="dv">100</span>);</a>
<a class="sourceLine" id="cb4-93" title="93">    }</a>
<a class="sourceLine" id="cb4-94" title="94">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-95" title="95">} </a></code></pre></div>
<p>两种算法的图解，可参考此文章→<a href="https://www.jianshu.com/p/efcd21494dff">图的基本算法（最小生成树</a></p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>最小生成树</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>Kruskal</tag>
        <tag>最小生成树</tag>
        <tag>Prim</tag>
      </tags>
  </entry>
  <entry>
    <title>【瞎搞】如何只用顺序结构实现三个数的排序</title>
    <url>/2019/01/26/%E3%80%90%E7%9E%8E%E6%90%9E%E3%80%91%E5%A6%82%E4%BD%95%E5%8F%AA%E7%94%A8%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E5%AE%9E%E7%8E%B0%E4%B8%89%E4%B8%AA%E6%95%B0%E7%9A%84%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>RT，如何在不用循环、不用判断、不用三目运算符的条件下，实现三个数字的排序？代码如下 <span id="more"></span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-4" title="4"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-5" title="5">{</a>
<a class="sourceLine" id="cb1-6" title="6">    <span class="dt">int</span> a,b,c;</a>
<a class="sourceLine" id="cb1-7" title="7">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;a,&amp;b,&amp;c); </a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="dt">int</span> d=a*(a&lt;b)+b*(b&lt;=a);        <span class="co">//求出a，b中的最小值，d即为这个最小值 </span></a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="dt">int</span> e=d*(d&lt;c)+c*(c&lt;=d);        <span class="co">//求出三个中的最小; </span></a>
<a class="sourceLine" id="cb1-10" title="10">    d=(a+b-d)*(a+b-d&gt;c)+c*(c&gt;=a+b-d);    </a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="co">//d是a，b中的最小值，故a+b-d为a，b中的最大值，再通过上面这条式子选出a+b-d与c两者之间的较大值，即可得到三个数中的最大值</span></a>
<a class="sourceLine" id="cb1-12" title="12">    printf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d\n</span><span class="st">"</span>,e,a+b+c-e-d,d);        </a>
<a class="sourceLine" id="cb1-13" title="13">    <span class="co">//e，d分别为最小值和最大值，三个数的总和减去最大值和最小值即得中间值</span></a>
<a class="sourceLine" id="cb1-14" title="14">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-15" title="15">}</a></code></pre></div>
<p>想法来自：诸君有哪些有关排序的奇技淫巧？ - rsa的回答 - 知乎 https://www.zhihu.com/question/269128251/answer/345732846</p>
]]></content>
      <categories>
        <category>瞎搞</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>瞎搞</tag>
      </tags>
  </entry>
  <entry>
    <title>上海探店 - 蔡师傅</title>
    <url>/2022/10/04/%E4%B8%8A%E6%B5%B7%E6%8E%A2%E5%BA%97-%E8%94%A1%E5%B8%88%E5%82%85/</url>
    <content><![CDATA[<p>今天从浦东机场下飞机后还没吃东西，就想着到外面吃一点吧。刚好想起之前在小红书看到有一家叫蔡师傅的阳春面店，据说量大管饱，性价比挺高，于是打算去看看</p>
<p><img src="https://s2.loli.net/2022/10/04/PlhniSZHWuaT6OE.jpg"></p>
<p>我点了一个雪菜肉丝面，一个煎鸡蛋和一个素面。雪菜肉丝面中规中矩，算是好吃；荷包蛋也没什么好说的；但是他家的素鸡确实非常好吃，厚厚的，很多孔，吸饱了汤汁，真的非常好吃。这三样总共花了17.5，在上海确实非常便宜了。</p>
]]></content>
  </entry>
  <entry>
    <title>Codeforces思维题（更新中）</title>
    <url>/2019/05/29/%E5%87%A0%E9%81%93CF%E6%B0%B4%E9%A2%98/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/HTB1DNhkXfxj_uVjSZFqq6yboFXaE.jpg"></p>
<p>Photo by NO NAME from Pixels <span id="more"></span></p>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1141A">Game 23</a></p>
<p>对m/n不断除以3，再除以2即可</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-21" title="21">{</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-23" title="23">    cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="cf">if</span>(n==m){</a>
<a class="sourceLine" id="cb1-26" title="26">        ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-27" title="27">    }<span class="cf">else</span> <span class="cf">if</span>(m%n!=<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-28" title="28">        ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-29" title="29">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="dt">int</span> tmp=m/n;</a>
<a class="sourceLine" id="cb1-31" title="31">        <span class="cf">while</span>(tmp%<span class="dv">3</span>==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-32" title="32">            ans++;</a>
<a class="sourceLine" id="cb1-33" title="33">            tmp/=<span class="dv">3</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">        } </a>
<a class="sourceLine" id="cb1-35" title="35">        <span class="cf">while</span>(tmp%<span class="dv">2</span>==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-36" title="36">            ans++;</a>
<a class="sourceLine" id="cb1-37" title="37">            tmp/=<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-38" title="38">        }</a>
<a class="sourceLine" id="cb1-39" title="39">        <span class="cf">if</span>(tmp!=<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-40" title="40">            ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-41" title="41">    }</a>
<a class="sourceLine" id="cb1-42" title="42">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-43" title="43">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-44" title="44">} </a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1141B">Maximal Continuous Rest</a></p>
<p>对于一个序列，设从左端开始的最长1序列的长度为len1，从右端开始的最长1序列的长度为len2，处于序列中间的最长1序列的长度为len3,最长的连续1序列的长度只可能是len3或len1+len2.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="dt">int</span> arr[<span class="dv">2</span>*maxn];</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-22" title="22">{</a>
<a class="sourceLine" id="cb2-23" title="23">    <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb2-24" title="24">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb2-25" title="25">        cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb2-26" title="26">    <span class="dt">int</span> len1,len2;<span class="dt">int</span> len3;</a>
<a class="sourceLine" id="cb2-27" title="27">    len1=len2=len3=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-28" title="28">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb2-29" title="29">        <span class="cf">if</span>(arr[i]==<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb2-30" title="30">            <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb2-31" title="31">        len1++;</a>
<a class="sourceLine" id="cb2-32" title="32">    }</a>
<a class="sourceLine" id="cb2-33" title="33">    <span class="cf">for</span>(<span class="dt">int</span> i=n;i&gt;=<span class="dv">1</span>;i--){</a>
<a class="sourceLine" id="cb2-34" title="34">        <span class="cf">if</span>(arr[i]==<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb2-35" title="35">            <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb2-36" title="36">        len2++;</a>
<a class="sourceLine" id="cb2-37" title="37">    }</a>
<a class="sourceLine" id="cb2-38" title="38"><span class="co">//    int beg,end;</span></a>
<a class="sourceLine" id="cb2-39" title="39">    <span class="dt">int</span> tmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-40" title="40">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb2-41" title="41">        <span class="cf">if</span>(arr[i]==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-42" title="42">            tmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-43" title="43">            len3=max(len3,tmp);</a>
<a class="sourceLine" id="cb2-44" title="44">            <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb2-45" title="45">        }</a>
<a class="sourceLine" id="cb2-46" title="46">        tmp++;</a>
<a class="sourceLine" id="cb2-47" title="47">        len3=max(len3,tmp);</a>
<a class="sourceLine" id="cb2-48" title="48">    }</a>
<a class="sourceLine" id="cb2-49" title="49"><span class="co">//    cout&lt;&lt;"len3="&lt;&lt;len3&lt;&lt;endl;</span></a>
<a class="sourceLine" id="cb2-50" title="50">    <span class="dt">int</span> ans=max(len3,len1+len2);</a>
<a class="sourceLine" id="cb2-51" title="51">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-52" title="52">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-53" title="53">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1141C">Polycarp Restores Permutation</a></p>
<p>题意是说，存在一个序列<span class="math inline">\(p\)</span>和序列<span class="math inline">\(q\)</span>，且p是一个<span class="math inline">\(1~n\)</span>的排列（就是说<span class="math inline">\(1~n\)</span>这n个数都必须出现且只能出现一次），对于<span class="math inline">\(q_i\)</span>，有<span class="math inline">\(q_i=p_{i+1}-p_i\)</span>，即<span class="math inline">\(p_i+q_i=p_{i+1}\)</span>。现在只给出q，让我们求出p。</p>
<p>分析后不难得出以下思路：我们可以先假设<span class="math inline">\(p_1=1\)</span>，并根据<span class="math inline">\(q_i=p_{i+1}-p_i\)</span>得出一段q序列，并找到该序列的最小值。该最小值正好对应的就是我们要求的<span class="math inline">\(p\)</span>序列中的1，因此我们可以将现在的得到的p序列中的每一个值都加上1到当前最小值的差值，最后再用一个vis数组判断以下每个数的出现次数，即可得到答案。（转化为图像的话会更好理解）</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-16" title="16"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-17" title="17"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-19" title="19"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-20" title="20"><span class="dt">int</span> arr[maxn*<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="dt">int</span> seq[maxn*<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb3-22" title="22"><span class="dt">int</span> ans[maxn*<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb3-23" title="23">map&lt;<span class="dt">int</span>,<span class="dt">int</span>&gt; vis;</a>
<a class="sourceLine" id="cb3-24" title="24"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-25" title="25">{</a>
<a class="sourceLine" id="cb3-26" title="26"><span class="co">//    freopen("data_generator.txt","r",stdin);</span></a>
<a class="sourceLine" id="cb3-27" title="27">    <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb3-28" title="28">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb3-29" title="29">        cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb3-30" title="30">    <span class="dt">bool</span> flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-31" title="31">    <span class="dt">int</span> mini=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-32" title="32">    <span class="dt">int</span> tmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-33" title="33">    seq[<span class="dv">1</span>]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-34" title="34">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb3-35" title="35">        seq[i+<span class="dv">1</span>]=tmp=seq[i]+arr[i];</a>
<a class="sourceLine" id="cb3-36" title="36">        <span class="cf">if</span>(vis.count(tmp)){</a>
<a class="sourceLine" id="cb3-37" title="37">            flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-38" title="38">            <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb3-39" title="39">        }</a>
<a class="sourceLine" id="cb3-40" title="40">        vis[tmp]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-41" title="41">        <span class="cf">if</span>(tmp&lt;mini){</a>
<a class="sourceLine" id="cb3-42" title="42">            mini=tmp;</a>
<a class="sourceLine" id="cb3-43" title="43">        }</a>
<a class="sourceLine" id="cb3-44" title="44">    }</a>
<a class="sourceLine" id="cb3-45" title="45">    vis.clear();</a>
<a class="sourceLine" id="cb3-46" title="46">    <span class="dt">int</span> raise=(mini&lt;=<span class="dv">1</span>?<span class="dv">1</span>-mini:mini-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-47" title="47">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb3-48" title="48">        ans[i]=seq[i]+raise;</a>
<a class="sourceLine" id="cb3-49" title="49">        vis[ans[i]]++;</a>
<a class="sourceLine" id="cb3-50" title="50">    }</a>
<a class="sourceLine" id="cb3-51" title="51"><span class="co">//    debug;</span></a>
<a class="sourceLine" id="cb3-52" title="52">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb3-53" title="53">        <span class="cf">if</span>(vis[i]!=<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb3-54" title="54">            flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-55" title="55">            <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb3-56" title="56">        }</a>
<a class="sourceLine" id="cb3-57" title="57">    }</a>
<a class="sourceLine" id="cb3-58" title="58">    <span class="cf">if</span>(flag){</a>
<a class="sourceLine" id="cb3-59" title="59">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb3-60" title="60">            printf(<span class="st">"</span><span class="sc">%d%c</span><span class="st">"</span>,ans[i],i==n?<span class="ch">'</span><span class="sc">\n</span><span class="ch">'</span>:<span class="ch">' '</span>);</a>
<a class="sourceLine" id="cb3-61" title="61">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb3-62" title="62">        printf(<span class="st">"-1</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb3-63" title="63">    }</a>
<a class="sourceLine" id="cb3-64" title="64">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-65" title="65">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1141D">Colored Boots</a></p>
<p>题意是说对于两个字符串，每个字母代表一种颜色，两个相同的字母可以凑成一对，问如果从字符串一中挑出一个字符、再从字符串二中挑出一个字符（挑出后不放回），最多能凑出多少对。如果字符为'?'，说明该字符可以与任何字符配对（包括'?'）</p>
<p>暴力贪心即可😀</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb4-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb4-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb4-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb4-17" title="17"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">150000</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb4-18" title="18"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb4-19" title="19"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb4-20" title="20"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb4-21" title="21">vector&lt;<span class="dt">int</span>&gt; lef[<span class="dv">128</span>];</a>
<a class="sourceLine" id="cb4-22" title="22">vector&lt;<span class="dt">int</span>&gt; rig[<span class="dv">128</span>];</a>
<a class="sourceLine" id="cb4-23" title="23"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb4-24" title="24">    <span class="dt">int</span> lef_boot;</a>
<a class="sourceLine" id="cb4-25" title="25">    <span class="dt">int</span> rig_boot;</a>
<a class="sourceLine" id="cb4-26" title="26">};</a>
<a class="sourceLine" id="cb4-27" title="27">node ans[maxn];</a>
<a class="sourceLine" id="cb4-28" title="28"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb4-29" title="29">{</a>
<a class="sourceLine" id="cb4-30" title="30">    <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb4-31" title="31">    string l,r;</a>
<a class="sourceLine" id="cb4-32" title="32">    cin&gt;&gt;l&gt;&gt;r;</a>
<a class="sourceLine" id="cb4-33" title="33">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb4-34" title="34">        lef[l[i]].push_back(i+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb4-35" title="35">        rig[r[i]].push_back(i+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb4-36" title="36">    }</a>
<a class="sourceLine" id="cb4-37" title="37">    <span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-38" title="38">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">97</span>;i&lt;=<span class="dv">122</span>;i++){</a>
<a class="sourceLine" id="cb4-39" title="39">        <span class="cf">while</span>(!lef[i].empty()&amp;&amp;!rig[i].empty()){</a>
<a class="sourceLine" id="cb4-40" title="40">            ans[cnt++]=node{lef[i].back(),rig[i].back()};</a>
<a class="sourceLine" id="cb4-41" title="41">            lef[i].pop_back();</a>
<a class="sourceLine" id="cb4-42" title="42">            rig[i].pop_back();</a>
<a class="sourceLine" id="cb4-43" title="43">        }</a>
<a class="sourceLine" id="cb4-44" title="44">    }</a>
<a class="sourceLine" id="cb4-45" title="45">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">97</span>;i&lt;=<span class="dv">122</span>;i++){</a>
<a class="sourceLine" id="cb4-46" title="46">        <span class="cf">while</span>(!lef[<span class="ch">'?'</span>].empty()&amp;&amp;!rig[i].empty()){</a>
<a class="sourceLine" id="cb4-47" title="47">            ans[cnt++]=node{lef[<span class="ch">'?'</span>].back(),rig[i].back()};</a>
<a class="sourceLine" id="cb4-48" title="48">            lef[<span class="ch">'?'</span>].pop_back();rig[i].pop_back();</a>
<a class="sourceLine" id="cb4-49" title="49">        }</a>
<a class="sourceLine" id="cb4-50" title="50">        <span class="cf">if</span>(lef[<span class="ch">'?'</span>].empty())        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb4-51" title="51">    }</a>
<a class="sourceLine" id="cb4-52" title="52">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">97</span>;i&lt;=<span class="dv">122</span>;i++){</a>
<a class="sourceLine" id="cb4-53" title="53">        <span class="cf">while</span>(!rig[<span class="ch">'?'</span>].empty()&amp;&amp;!lef[i].empty()){</a>
<a class="sourceLine" id="cb4-54" title="54">            ans[cnt++]=node{lef[i].back(),rig[<span class="ch">'?'</span>].back()};</a>
<a class="sourceLine" id="cb4-55" title="55">            rig[<span class="ch">'?'</span>].pop_back();lef[i].pop_back();</a>
<a class="sourceLine" id="cb4-56" title="56">        }</a>
<a class="sourceLine" id="cb4-57" title="57">        <span class="cf">if</span>(rig[<span class="ch">'?'</span>].empty())        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb4-58" title="58">    }</a>
<a class="sourceLine" id="cb4-59" title="59">    <span class="cf">while</span>(!lef[<span class="ch">'?'</span>].empty()&amp;&amp;!rig[<span class="ch">'?'</span>].empty()){</a>
<a class="sourceLine" id="cb4-60" title="60">        ans[cnt++]=node{lef[<span class="ch">'?'</span>].back(),rig[<span class="ch">'?'</span>].back()};</a>
<a class="sourceLine" id="cb4-61" title="61">        lef[<span class="ch">'?'</span>].pop_back();rig[<span class="ch">'?'</span>].pop_back();</a>
<a class="sourceLine" id="cb4-62" title="62">    }</a>
<a class="sourceLine" id="cb4-63" title="63">    printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,cnt);</a>
<a class="sourceLine" id="cb4-64" title="64">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;cnt;i++)        printf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d\n</span><span class="st">"</span>,ans[i].lef_boot,ans[i].rig_boot);</a>
<a class="sourceLine" id="cb4-65" title="65">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-66" title="66">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1140C">Playlist</a></p>
<p>题意是说，对于一个序列，每一个元素都包含<span class="math inline">\(t_i\)</span>和<span class="math inline">\(b_i\)</span>两个值，现在要求一个长度不超过<span class="math inline">\(k\)</span>的子序列，使得该序列中的值满足<span class="math inline">\(\Sigma\ t_i\times \ min(b_i)\)</span>的值最大。</p>
<p>emmmmmm一开始我是用的dp，因为感觉这题很像01背包，如果把k看作是背包总容量，每个元素的体积是1的话......但事实是我搞不出来OTZ......然后就去看题解了OTZ</p>
<p>正确做法是贪心。因为我们要求的是<span class="math inline">\(\Sigma\ t_i\times \ min(b_i)\)</span>的最大值，而要让该值最大，我们应该贪心地选择更大的<span class="math inline">\(t_i\)</span>。具体来说就是，先对所有元素按照<span class="math inline">\(b\)</span>值从小到大排个序，然后从左到右扫描这些元素（排序的目的是为了保证扫过去时取到的<span class="math inline">\(b_i\)</span>一定不大于上一次取到的<span class="math inline">\(b_i\)</span>，也就是保证取得最小的<span class="math inline">\(b_i\)</span>），然后在这个过程中，用优先队列维护<span class="math inline">\(t\)</span>值前k大的元素。在选择元素的过程中，如果当前被选元素的个数大于<span class="math inline">\(k\)</span>，就把队列中<span class="math inline">\(t\)</span>值最小的pop出去，并更新答案。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb5-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb5-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb5-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb5-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb5-11" title="11"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb5-12" title="12"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb5-13" title="13"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb5-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb5-15" title="15"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb5-16" title="16"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb5-17" title="17"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb5-18" title="18"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb5-19" title="19"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb5-20" title="20"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb5-21" title="21"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb5-22" title="22">    <span class="dt">int</span> t,b;</a>
<a class="sourceLine" id="cb5-23" title="23">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> node&amp; nb){</a>
<a class="sourceLine" id="cb5-24" title="24">        <span class="cf">return</span> b&lt;nb.b;</a>
<a class="sourceLine" id="cb5-25" title="25">    }</a>
<a class="sourceLine" id="cb5-26" title="26">};</a>
<a class="sourceLine" id="cb5-27" title="27">node ns[<span class="dv">3</span>*maxn];</a>
<a class="sourceLine" id="cb5-28" title="28">priority_queue&lt;<span class="dt">int</span>,vector&lt;<span class="dt">int</span>&gt;,greater&lt;<span class="dt">int</span>&gt;&gt; que;</a>
<a class="sourceLine" id="cb5-29" title="29"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb5-30" title="30">{</a>
<a class="sourceLine" id="cb5-31" title="31">    <span class="dt">int</span> n,k;</a>
<a class="sourceLine" id="cb5-32" title="32">    cin&gt;&gt;n&gt;&gt;k;</a>
<a class="sourceLine" id="cb5-33" title="33">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb5-34" title="34">        cin&gt;&gt;ns[i].t&gt;&gt;ns[i].b;</a>
<a class="sourceLine" id="cb5-35" title="35">    sort(ns+<span class="dv">1</span>,ns+n+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb5-36" title="36">    ll ans=-<span class="dv">1</span>;ll sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-37" title="37">    <span class="cf">for</span>(<span class="dt">int</span> i=n;i&gt;=<span class="dv">1</span>;i--){</a>
<a class="sourceLine" id="cb5-38" title="38">        sum+=ns[i].t;</a>
<a class="sourceLine" id="cb5-39" title="39">        que.push(ns[i].t);</a>
<a class="sourceLine" id="cb5-40" title="40">        <span class="cf">while</span>(que.size()&gt;k){</a>
<a class="sourceLine" id="cb5-41" title="41">            sum-=que.top();</a>
<a class="sourceLine" id="cb5-42" title="42">            que.pop();</a>
<a class="sourceLine" id="cb5-43" title="43">        }</a>
<a class="sourceLine" id="cb5-44" title="44">        ans=max(ans,sum*ns[i].b);</a>
<a class="sourceLine" id="cb5-45" title="45">    }</a>
<a class="sourceLine" id="cb5-46" title="46">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb5-47" title="47">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-48" title="48">}</a></code></pre></div>
<p>(或许这题确实能用dp吧......)</p>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1140D">Minimum Triangulation</a></p>
<p>题意是说，对于一个多边形，首先按顺时针顺序从1开始对顶点进行排序。然后我们将他分割成若干个不重叠的三角形，并规定，对于每个三角形，其权重为三个顶点的序号的乘积。问如何分割该多边形可以使得其三角形权重和最小。</p>
<p>emmmmm......大水题</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb6-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb6-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb6-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb6-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb6-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb6-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb6-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb6-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb6-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb6-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb6-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb6-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb6-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb6-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb6-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb6-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb6-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb6-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb6-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb6-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb6-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb6-23" title="23"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb6-24" title="24">{</a>
<a class="sourceLine" id="cb6-25" title="25">    IOS;</a>
<a class="sourceLine" id="cb6-26" title="26">    ll ans=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb6-27" title="27">    <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb6-28" title="28">    <span class="cf">if</span>(n==<span class="dv">3</span>){</a>
<a class="sourceLine" id="cb6-29" title="29">        ans=<span class="dv">6</span>;</a>
<a class="sourceLine" id="cb6-30" title="30">    }<span class="cf">else</span> <span class="cf">if</span>(n==<span class="dv">4</span>){</a>
<a class="sourceLine" id="cb6-31" title="31">        ans=<span class="dv">18</span>;</a>
<a class="sourceLine" id="cb6-32" title="32">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb6-33" title="33">        ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb6-34" title="34">        <span class="cf">for</span>(ll i=<span class="dv">2</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb6-35" title="35">            ans+=i*(i+<span class="dv">1</span>);    </a>
<a class="sourceLine" id="cb6-36" title="36">    }</a>
<a class="sourceLine" id="cb6-37" title="37">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb6-38" title="38">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb6-39" title="39">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1139A">Even Substrings</a></p>
<p>emmmmm也是大水题</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb7-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb7-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb7-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb7-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb7-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb7-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb7-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb7-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb7-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb7-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb7-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb7-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb7-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb7-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb7-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb7-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb7-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb7-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb7-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb7-22" title="22"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb7-23" title="23">{</a>
<a class="sourceLine" id="cb7-24" title="24">    <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb7-25" title="25">    string str;</a>
<a class="sourceLine" id="cb7-26" title="26">    cin&gt;&gt;str;</a>
<a class="sourceLine" id="cb7-27" title="27">    <span class="dt">int</span> ans=<span class="dv">0</span>;<span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-28" title="28">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;str.size();i++){</a>
<a class="sourceLine" id="cb7-29" title="29">        <span class="dt">int</span> tmp=str[i]-<span class="ch">'0'</span>;</a>
<a class="sourceLine" id="cb7-30" title="30">        <span class="cf">if</span>(tmp%<span class="dv">2</span>==<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb7-31" title="31">            ans+=i+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb7-32" title="32">    }</a>
<a class="sourceLine" id="cb7-33" title="33">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb7-34" title="34">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-35" title="35">} </a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/CodeForces-1139B">Chocolates</a></p>
<p>题意是说对于一个序列<span class="math inline">\(a_n\)</span>,可以从第i个位置取出<span class="math inline">\(x_i(x_i&lt;=a_i)\)</span>，从而形成一个新的序列<span class="math inline">\(x_n\)</span>，该序列必须满足以下两个条件中至少一个:</p>
<ul>
<li><span class="math inline">\(x_i=0\)</span></li>
<li>若<span class="math inline">\(i&lt;j\)</span>，则<span class="math inline">\(x_i&lt;x_j\)</span></li>
</ul>
<p>依然是大水题......</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb8-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb8-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb8-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb8-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb8-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb8-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb8-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb8-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb8-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb8-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb8-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb8-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb8-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb8-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb8-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb8-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb8-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb8-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb8-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb8-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb8-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb8-23" title="23">ll arr[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb8-24" title="24"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb8-25" title="25">{</a>
<a class="sourceLine" id="cb8-26" title="26">    IOS;</a>
<a class="sourceLine" id="cb8-27" title="27">    ll n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb8-28" title="28">    <span class="cf">for</span>(ll i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb8-29" title="29">        cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb8-30" title="30">    ll ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb8-31" title="31">    ans+=arr[n];ll tmp=arr[n];</a>
<a class="sourceLine" id="cb8-32" title="32">    <span class="cf">for</span>(ll i=n-<span class="dv">1</span>;i&gt;=<span class="dv">1</span>;i--){</a>
<a class="sourceLine" id="cb8-33" title="33">        <span class="cf">if</span>(arr[i]&lt;tmp){</a>
<a class="sourceLine" id="cb8-34" title="34">            tmp=arr[i];</a>
<a class="sourceLine" id="cb8-35" title="35">            ans+=arr[i];</a>
<a class="sourceLine" id="cb8-36" title="36">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb8-37" title="37">            <span class="cf">if</span>(tmp-<span class="dv">1</span>&gt;<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb8-38" title="38">                tmp--;</a>
<a class="sourceLine" id="cb8-39" title="39">            <span class="cf">else</span></a>
<a class="sourceLine" id="cb8-40" title="40">                tmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb8-41" title="41">            ans+=tmp;</a>
<a class="sourceLine" id="cb8-42" title="42">        }</a>
<a class="sourceLine" id="cb8-43" title="43">    }    </a>
<a class="sourceLine" id="cb8-44" title="44">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb8-45" title="45">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb8-46" title="46">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>水题</tag>
        <tag>思维题</tag>
        <tag>水题不水</tag>
      </tags>
  </entry>
  <entry>
    <title>几道水题(Gym101502A,Gym101502B,Gym - 101502E,Gym101502K)</title>
    <url>/2019/03/10/%E5%87%A0%E9%81%93%E6%B0%B4%E9%A2%98/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/gym/101502/problem/A">Gym101502A</a></p>
<span id="more"></span>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-17" title="17">{</a>
<a class="sourceLine" id="cb1-18" title="18">    ll t;</a>
<a class="sourceLine" id="cb1-19" title="19">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb1-20" title="20">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb1-21" title="21">    {</a>
<a class="sourceLine" id="cb1-22" title="22">        <span class="dt">double</span> y;<span class="dt">double</span> x;</a>
<a class="sourceLine" id="cb1-23" title="23">        cin&gt;&gt;y&gt;&gt;x;</a>
<a class="sourceLine" id="cb1-24" title="24">        <span class="dt">double</span> ans=y/(<span class="dv">1</span>+(x/<span class="fl">100.0</span>));</a>
<a class="sourceLine" id="cb1-25" title="25">        printf(<span class="st">"%.0lf</span><span class="sc">\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-26" title="26">    }</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-28" title="28">}</a></code></pre></div>
<p><a href="https://codeforces.com/gym/101502/problem/B">Gym101502B</a></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-18" title="18">ll col[maxn];</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-20" title="20">{</a>
<a class="sourceLine" id="cb2-21" title="21">    ll t;</a>
<a class="sourceLine" id="cb2-22" title="22">    scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb2-23" title="23">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb2-24" title="24">    {    </a>
<a class="sourceLine" id="cb2-25" title="25">        map&lt;ll,ll&gt; rows;        <span class="co">//数字，次数 </span></a>
<a class="sourceLine" id="cb2-26" title="26">        rows.erase(rows.begin(),rows.end());</a>
<a class="sourceLine" id="cb2-27" title="27">        ll n;</a>
<a class="sourceLine" id="cb2-28" title="28">        scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb2-29" title="29">        <span class="cf">for</span>(ll i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb2-30" title="30">            ll row;</a>
<a class="sourceLine" id="cb2-31" title="31">            scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,&amp;row);</a>
<a class="sourceLine" id="cb2-32" title="32">            rows[row]++;</a>
<a class="sourceLine" id="cb2-33" title="33">            scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,&amp;col[i]);</a>
<a class="sourceLine" id="cb2-34" title="34">        }</a>
<a class="sourceLine" id="cb2-35" title="35">        ll sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-36" title="36">        <span class="cf">for</span>(ll i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb2-37" title="37">            sum+=rows[col[i]];</a>
<a class="sourceLine" id="cb2-38" title="38">        printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>,sum);</a>
<a class="sourceLine" id="cb2-39" title="39">    }</a>
<a class="sourceLine" id="cb2-40" title="40">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-41" title="41">}</a></code></pre></div>
<p><a href="https://codeforces.com/gym/101502/problem/E">Gym101502E</a></p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-13" title="13"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-14" title="14"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-15" title="15"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-16" title="16"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-17" title="17">{</a>
<a class="sourceLine" id="cb3-18" title="18">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb3-19" title="19">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb3-20" title="20">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb3-21" title="21">    {    </a>
<a class="sourceLine" id="cb3-22" title="22">        <span class="dt">int</span> kit=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-23" title="23">        <span class="dt">int</span> living=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-24" title="24">        <span class="dt">int</span> bed=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-25" title="25">        string str;</a>
<a class="sourceLine" id="cb3-26" title="26">        <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb3-27" title="27">        <span class="cf">while</span>(n--)</a>
<a class="sourceLine" id="cb3-28" title="28">        {</a>
<a class="sourceLine" id="cb3-29" title="29">            cin&gt;&gt;str;</a>
<a class="sourceLine" id="cb3-30" title="30">            <span class="cf">if</span>(str[<span class="dv">0</span>]==<span class="ch">'k'</span>)</a>
<a class="sourceLine" id="cb3-31" title="31">                kit++;</a>
<a class="sourceLine" id="cb3-32" title="32">            <span class="cf">else</span> <span class="cf">if</span>(str[<span class="dv">0</span>]==<span class="ch">'b'</span>)</a>
<a class="sourceLine" id="cb3-33" title="33">                bed++;</a>
<a class="sourceLine" id="cb3-34" title="34">            <span class="cf">else</span> <span class="cf">if</span>(str[<span class="dv">0</span>]==<span class="ch">'l'</span>)</a>
<a class="sourceLine" id="cb3-35" title="35">                living++;</a>
<a class="sourceLine" id="cb3-36" title="36">        }</a>
<a class="sourceLine" id="cb3-37" title="37">        <span class="dt">int</span> ans=min(kit,min(bed/<span class="dv">2</span>,living));</a>
<a class="sourceLine" id="cb3-38" title="38">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-39" title="39">    }</a>
<a class="sourceLine" id="cb3-40" title="40">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-41" title="41">}</a></code></pre></div>
<p><a href="https://codeforces.com/gym/101502/problem/K">Gym101502K</a></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span><span class="pp"> </span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb4-11" title="11"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb4-13" title="13"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb4-14" title="14"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb4-15" title="15"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb4-16" title="16"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb4-17" title="17">{</a>
<a class="sourceLine" id="cb4-18" title="18">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb4-19" title="19">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb4-20" title="20">    <span class="cf">while</span>(t--)</a>
<a class="sourceLine" id="cb4-21" title="21">    {</a>
<a class="sourceLine" id="cb4-22" title="22">        ll n;<span class="dt">double</span> m;</a>
<a class="sourceLine" id="cb4-23" title="23">        cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb4-24" title="24">        ll tmp;ll sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-25" title="25">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb4-26" title="26">        {</a>
<a class="sourceLine" id="cb4-27" title="27">            cin&gt;&gt;tmp;</a>
<a class="sourceLine" id="cb4-28" title="28">            sum+=tmp&gt;=<span class="dv">50</span>?<span class="dv">1</span>:<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-29" title="29">        }</a>
<a class="sourceLine" id="cb4-30" title="30">        <span class="dt">double</span> success=ceil(m*n);</a>
<a class="sourceLine" id="cb4-31" title="31">        <span class="cf">if</span>(sum&gt;=success)</a>
<a class="sourceLine" id="cb4-32" title="32">            printf(<span class="st">"YES</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb4-33" title="33">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb4-34" title="34">            printf(<span class="st">"NO</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb4-35" title="35">    }</a>
<a class="sourceLine" id="cb4-36" title="36">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-37" title="37">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>卢卡斯定理与中国剩余定理</title>
    <url>/2019/01/28/%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86%E4%B8%8E%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h4 id="卢卡斯定理">卢卡斯定理</h4>
<p>  卢卡斯定理主要是用来求组合数取模，即C(n,m)%p。其适用范围是:组合数很大，但p又不是很大且p是素数的情况(10^6+3也算是“不很大”) 。卢卡斯定理可以表达为: <span id="more"></span> <img src="https://pic.superbed.cn/item/5c4ea00b5f3e509ed97ce0f6"></p>
<p>在写代码时，可以用递归实现:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1">LL lucas(LL a,LL b,LL p)</a>
<a class="sourceLine" id="cb1-2" title="2">{</a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="cf">return</span> !b?<span class="dv">1</span>:lucas(a/p,b/p,p)*comb(a%p,b%p,p)%p;</a>
<a class="sourceLine" id="cb1-4" title="4">}</a></code></pre></div>
<p>为什么可以转化为lucas(a/p,b/p,p) * comb(a%p,b%p,p)%p这个递归呢？看这里👇 <img src="https://pic.superbed.cn/item/5c4ea0d75f3e509ed97ce5e1"> <img src="https://pic.superbed.cn/item/5c4ea0f25f3e509ed97ce666"></p>
<p>因此，可以利用这样的一个递归实现。 在这里，comb()是求组合数取模的函数(适用于小组合数)，代码为</p>
<pre><code>LL comb(LL n,LL m,LL p)
{
    if(n&lt;m||m&lt;0)
        return 0;
    LL up=1;
    LL down=1;
    for(LL i=n-m+1;i&lt;=n;i++)
        up=(up*i)%p;
    for(LL i=1;i&lt;=m;i++)
        down=(down*i)%p;
    return up*inv(down,p)%p;
}</code></pre>
<p>而inv()是求down的逆元的函数，原理是利用快速幂求a^(p-2)。</p>
<h4 id="中国剩余定理">中国剩余定理</h4>
<p>  中国剩余定理又被称为孙子定理，它来自于一个耳熟能详的数学问题：今有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？。转换为数学式子，即为以下这个一元线性同余方程组 <img src="https://pic.superbed.cn/item/5c4ea2b05f3e509ed97cf145"> 那么，要如何求解这个方程组呢？ <img src="https://pic.superbed.cn/item/5c4ea3675f3e509ed97cf50c"> (我自己至今还是不太懂怎么求解OTZ) 因此，只需要求kM+∑(i=1,n)ai x ti x Mi即可</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1">LL china(<span class="dt">int</span> k,LL a[],LL m[])</a>
<a class="sourceLine" id="cb3-2" title="2">{</a>
<a class="sourceLine" id="cb3-3" title="3">    LL M=<span class="dv">1</span>;LL ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-4" title="4">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;k;i++)</a>
<a class="sourceLine" id="cb3-5" title="5">        M*=m[i];</a>
<a class="sourceLine" id="cb3-6" title="6">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;k;i++)</a>
<a class="sourceLine" id="cb3-7" title="7">    {</a>
<a class="sourceLine" id="cb3-8" title="8">        LL tmp=M/m[i];        <span class="co">//tmp==&gt;mi        </span></a>
<a class="sourceLine" id="cb3-9" title="9">        ans=(ans+mulq(tmp*inv(tmp,m[i]),a[i],M))%M;        <span class="co">//ti==&gt;ti*mi=1 (mod mi)</span></a>
<a class="sourceLine" id="cb3-10" title="10">    }</a>
<a class="sourceLine" id="cb3-11" title="11">    <span class="cf">return</span> (ans+M)%M;            <span class="co">//通解为kM+∑(i=0,k)(ai*ti*Mi) </span></a>
<a class="sourceLine" id="cb3-12" title="12">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>哈哈，好一个国庆出行</title>
    <url>/2022/10/04/%E5%93%88%E5%93%88%EF%BC%8C%E5%A5%BD%E4%B8%80%E4%B8%AA%E5%9B%BD%E5%BA%86%E5%87%BA%E8%A1%8C/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="75b6c228abb99646a7e9ab57be0429471c50b5938e153fa4b6cb3ff332b48c17"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>国庆</tag>
        <tag>出行</tag>
        <tag>见面</tag>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>基础dp专题总结 Part 1</title>
    <url>/2019/07/28/%E5%9F%BA%E7%A1%80dp%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93-Part-1/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H814b65cf7389427c925e1c64354420a29.jpg"></p>
<p>Photo by Suvan Chowdhury from Pexels <span id="more"></span></p>
<h4 id="hdu1024-max-sum-plus-plus"><a href="https://cn.vjudge.net/problem/HDU-1024">HDU1024 Max Sum Plus Plus</a></h4>
<p>题意是说，对于一个序列<span class="math inline">\(S\)</span>，找出<span class="math inline">\(m\)</span>个数对<span class="math inline">\((i_1,j_1)\)</span>，<span class="math inline">\((i_2,j_2)\)</span>，<span class="math inline">\((i_3,j_3)\)</span>，······,<span class="math inline">\((i_m,j_m)\)</span>，使得这些数对对应的区间和的和最大，也就是让<span class="math inline">\(Sum=sum(i_1,j_1)+sum(i_2,j_2)+sum(i_3,j_3)+...+sum(i_m,j_m)\)</span>最大。输出该最大和。</p>
<p>首先，状态转移方程为 <span class="math display">\[
dp[i][j]=max(dp[i][j-1]+arr[j],max(dp[i-1][k])+arr[j])\\
0&lt;k&lt;j
\]</span> <span class="math inline">\(dp[i][j]\)</span>表示将前<span class="math inline">\(j\)</span>个数分成<span class="math inline">\(i\)</span>组，<span class="math inline">\(dp[i][j-1]+arr[j]\)</span>表示前j个数分成<span class="math inline">\(i\)</span>组，第<span class="math inline">\(j\)</span>个数放在第<span class="math inline">\(i\)</span>组里面；<span class="math inline">\(max(dp[i-1][k])+arr[j]\)</span>表示从前<span class="math inline">\(j-1\)</span>个数中取出<span class="math inline">\(k\)</span>个数，将他们分成<span class="math inline">\(i-1\)</span>组，然后第<span class="math inline">\(j\)</span>个数自成一组，总共<span class="math inline">\(i\)</span>组。</p>
<p>但如果只是单纯这样做的话，由于数据范围比较大<span class="math inline">\((1 ≤ x ≤ n ≤ 1000000)\)</span>，这种<span class="math inline">\(O(n^3)\)</span>的做法肯定会超时，因此要做一定的优化。</p>
<p>方法是，另外开一个<span class="math inline">\(maxi\_[]\)</span>数组，用来存放<span class="math inline">\(dp[i-1]\)</span>中的最大值。<span class="math inline">\(maxi\_[j-1]\)</span>标识的就是当前<span class="math inline">\(dp[i-1]\)</span>中的最大值。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define debug </span>cout&lt;&lt;<span class="st">"debug"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> arr[maxn];</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> dp[maxn];</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">int</span> <span class="va">maxi_</span>[maxn];</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-26" title="26">{</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="dt">int</span> m,n;</a>
<a class="sourceLine" id="cb1-28" title="28">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;m,&amp;n)!=EOF){</a>
<a class="sourceLine" id="cb1-29" title="29">        <span class="dt">int</span> ans=-INF;</a>
<a class="sourceLine" id="cb1-30" title="30">        mst(dp,<span class="dv">0</span>);mst(<span class="va">maxi_</span>,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-31" title="31">        mst(arr,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-32" title="32">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-33" title="33">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;arr[i]);</a>
<a class="sourceLine" id="cb1-34" title="34">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++){</a>
<a class="sourceLine" id="cb1-35" title="35">            ans=-INF;</a>
<a class="sourceLine" id="cb1-36" title="36">            <span class="cf">for</span>(<span class="dt">int</span> j=i;j&lt;=n;j++){</a>
<a class="sourceLine" id="cb1-37" title="37">                dp[j]=max(dp[j-<span class="dv">1</span>]+arr[j],<span class="va">maxi_</span>[j-<span class="dv">1</span>]+arr[j]);</a>
<a class="sourceLine" id="cb1-38" title="38">                <span class="va">maxi_</span>[j-<span class="dv">1</span>]=ans;</a>
<a class="sourceLine" id="cb1-39" title="39">                ans=max(ans,dp[j]);</a>
<a class="sourceLine" id="cb1-40" title="40">            }</a>
<a class="sourceLine" id="cb1-41" title="41">        }</a>
<a class="sourceLine" id="cb1-42" title="42">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-43" title="43">    }</a>
<a class="sourceLine" id="cb1-44" title="44">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-45" title="45">}</a></code></pre></div>
<h4 id="hdu1029-lgnatius-and-the-princess-iv"><a href="https://cn.vjudge.net/problem/HDU-1029">HDU1029 lgnatius and the Princess IV</a></h4>
<p>题意是说，给出一个奇数N，以及一个长度为N的整数序列，问序列中出现次数至少为<span class="math inline">\(\frac{N+1}{2}\)</span>的数是什么</p>
<ul>
<li>可以直接用map做</li>
<li>但既然是dp专题，肯定要用dp来做🦆</li>
</ul>
<p>dp做法涉及到了一个叫做摩尔投票算法的东西。事实上这道题就是该算法的板子题。下面先上代码：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define debug </span>cout&lt;&lt;<span class="st">"debug"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb2-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e6</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-22" title="22"><span class="dt">int</span> arr[maxn];</a>
<a class="sourceLine" id="cb2-23" title="23"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-24" title="24">{</a>
<a class="sourceLine" id="cb2-25" title="25">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb2-26" title="26">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF){</a>
<a class="sourceLine" id="cb2-27" title="27">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb2-28" title="28">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;arr[i]);</a>
<a class="sourceLine" id="cb2-29" title="29">        <span class="dt">int</span> cnt=<span class="dv">0</span>;<span class="dt">int</span> ans;</a>
<a class="sourceLine" id="cb2-30" title="30">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb2-31" title="31">            <span class="cf">if</span>(cnt==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-32" title="32">                ans=arr[i];</a>
<a class="sourceLine" id="cb2-33" title="33">                cnt++;</a>
<a class="sourceLine" id="cb2-34" title="34">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-35" title="35">                <span class="cf">if</span>(ans==arr[i])</a>
<a class="sourceLine" id="cb2-36" title="36">                    cnt++;</a>
<a class="sourceLine" id="cb2-37" title="37">                <span class="cf">else</span></a>
<a class="sourceLine" id="cb2-38" title="38">                    cnt--;</a>
<a class="sourceLine" id="cb2-39" title="39">            }</a>
<a class="sourceLine" id="cb2-40" title="40">        }</a>
<a class="sourceLine" id="cb2-41" title="41">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb2-42" title="42">    }</a>
<a class="sourceLine" id="cb2-43" title="43">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-44" title="44">}</a></code></pre></div>
<p>有一种非常通俗易懂的方法解释该算法：将每一种数想象成是一个阵营的士兵，当一个阵营的士兵遇到另一个阵营的士兵时，双方会发生战斗，且结果一定是同归于尽。<span class="math inline">\(cnt\)</span>其实就是在统计一个阵营的士兵数目。当所有士兵都战斗过一次后（也就是序列被遍历完了），剩下的士兵就是我们要求的数。</p>
<h4 id="hdu1069-monkey-and-banana"><a href="https://cn.vjudge.net/problem/HDU-1069">HDU1069 Monkey and Banana</a></h4>
<p>题目大意是说，有若干种方块，对于每一种方块，可以以它的任意一个面为底面。现在要求使用这若干种方块堆成一座塔，要求是每一个方块正上方的那个方块的底面长和宽必须严格小于当前方块顶面的长和宽。</p>
<p>emmmmmmmm这题就是Uva的那道巴比伦塔啊......就改了一下题目描述，连样例都没改hhhhh。</p>
<p>做法就是求DAG上的最长路，dfs+记忆化即可。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-17" title="17"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb3-18" title="18"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb3-19" title="19"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-20" title="20"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">20005</span>;</a>
<a class="sourceLine" id="cb3-22" title="22"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-23" title="23"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-24" title="24"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-25" title="25"><span class="dt">int</span> bs[<span class="dv">35</span>][<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb3-26" title="26"><span class="dt">int</span> dp[<span class="dv">35</span>][<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb3-27" title="27"><span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb3-28" title="28"><span class="dt">void</span> <span class="va">get_</span>(<span class="dt">int</span> arr[],<span class="dt">int</span> idx,<span class="dt">int</span> hidx)</a>
<a class="sourceLine" id="cb3-29" title="29">{</a>
<a class="sourceLine" id="cb3-30" title="30">    <span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-31" title="31">    <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=<span class="dv">3</span>;j++){</a>
<a class="sourceLine" id="cb3-32" title="32">        <span class="cf">if</span>(j!=hidx){</a>
<a class="sourceLine" id="cb3-33" title="33">            arr[cnt++]=bs[idx][j];</a>
<a class="sourceLine" id="cb3-34" title="34">        }</a>
<a class="sourceLine" id="cb3-35" title="35">    }</a>
<a class="sourceLine" id="cb3-36" title="36">}</a>
<a class="sourceLine" id="cb3-37" title="37"><span class="dt">int</span> solve(<span class="dt">int</span> idx,<span class="dt">int</span> hidx)</a>
<a class="sourceLine" id="cb3-38" title="38">{</a>
<a class="sourceLine" id="cb3-39" title="39">    <span class="dt">int</span>&amp; ans=dp[idx][hidx];</a>
<a class="sourceLine" id="cb3-40" title="40">    <span class="cf">if</span>(ans!=-<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-41" title="41">        <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb3-42" title="42">    ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-43" title="43">    <span class="dt">int</span> b1[<span class="dv">2</span>],b2[<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb3-44" title="44">    <span class="va">get_</span>(b1,idx,hidx);</a>
<a class="sourceLine" id="cb3-45" title="45">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb3-46" title="46">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=<span class="dv">3</span>;j++){</a>
<a class="sourceLine" id="cb3-47" title="47">            <span class="va">get_</span>(b2,i,j);</a>
<a class="sourceLine" id="cb3-48" title="48">            <span class="cf">if</span>((b2[<span class="dv">0</span>]&lt;b1[<span class="dv">0</span>]&amp;&amp;b2[<span class="dv">1</span>]&lt;b1[<span class="dv">1</span>])||(b2[<span class="dv">1</span>]&lt;b1[<span class="dv">0</span>]&amp;&amp;b2[<span class="dv">0</span>]&lt;b1[<span class="dv">1</span>]))</a>
<a class="sourceLine" id="cb3-49" title="49">                ans=max(ans,solve(i,j));</a>
<a class="sourceLine" id="cb3-50" title="50">        }</a>
<a class="sourceLine" id="cb3-51" title="51">    }</a>
<a class="sourceLine" id="cb3-52" title="52">    ans+=bs[idx][hidx];</a>
<a class="sourceLine" id="cb3-53" title="53">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb3-54" title="54">}</a>
<a class="sourceLine" id="cb3-55" title="55"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-56" title="56">{</a>
<a class="sourceLine" id="cb3-57" title="57">    IOS;</a>
<a class="sourceLine" id="cb3-58" title="58">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-59" title="59">    <span class="cf">while</span>(cin&gt;&gt;n&amp;&amp;n){</a>
<a class="sourceLine" id="cb3-60" title="60">        mst(bs,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb3-61" title="61">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb3-62" title="62">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=<span class="dv">3</span>;j++){</a>
<a class="sourceLine" id="cb3-63" title="63">                cin&gt;&gt;bs[i][j];</a>
<a class="sourceLine" id="cb3-64" title="64">            }</a>
<a class="sourceLine" id="cb3-65" title="65">            sort(bs[i]+<span class="dv">1</span>,bs[i]+<span class="dv">4</span>);</a>
<a class="sourceLine" id="cb3-66" title="66">        }</a>
<a class="sourceLine" id="cb3-67" title="67">        mst(dp,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-68" title="68">        <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-69" title="69">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb3-70" title="70">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=<span class="dv">3</span>;j++){</a>
<a class="sourceLine" id="cb3-71" title="71">                ans=max(ans,solve(i,j));</a>
<a class="sourceLine" id="cb3-72" title="72">            }</a>
<a class="sourceLine" id="cb3-73" title="73">        }</a>
<a class="sourceLine" id="cb3-74" title="74">        cout&lt;&lt;<span class="st">"Case "</span>&lt;&lt;++kase&lt;&lt;<span class="st">": maximum height = "</span>&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-75" title="75">        <span class="co">//Case 1: maximum height = 40</span></a>
<a class="sourceLine" id="cb3-76" title="76">    }</a>
<a class="sourceLine" id="cb3-77" title="77">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-78" title="78">}</a></code></pre></div>
<h4 id="hdu1074-doing-homework"><a href="https://cn.vjudge.net/problem/HDU-1074">HDU1074 Doing Homework</a></h4>
<p>一道状压dp的题目，刚看到题目的时候真的没有想到是状压dp......因为当时我还不会状压......看了题解，才知道这题要用状压。于是去学了一波，做了几道入门题，然后才来做这道题。</p>
<p>这题的题解已经在之前的一篇文章中有写到了，故贴出链接，不再赘述</p>
<p><a href="https://xtayex.github.io/2019/07/22/%E7%8A%B6%E5%8E%8Bdp%E6%80%BB%E7%BB%93-%E6%9B%B4%E6%96%B0%E4%B8%AD/">状压dp总结</a></p>
<h4 id="hdu1087-super-jumping-jumping-jumping"><a href="https://cn.vjudge.net/problem/HDU-1087">HDU1087 Super Jumping! Jumping! Jumping!</a></h4>
<p>其实就是求最大和上升子序列，也就是对于给定的序列，找出一个子序列，使得该子序列的总和最大。输出该最大和。</p>
<p>状态转移方程为: <span class="math display">\[
dp[i]=max(dp[j]+arr[i],dp[i]),\ 0 ≤j&lt;i
\]</span> <span class="math inline">\(dp[i]\)</span>表示由前<span class="math inline">\(i\)</span>个数组成的序列的最大和上升子序列和为多少。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb4-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb4-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb4-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb4-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb4-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb4-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb4-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb4-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb4-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb4-23" title="23"><span class="dt">int</span> arr[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb4-24" title="24"><span class="dt">int</span> dp[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb4-25" title="25"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb4-26" title="26">{</a>
<a class="sourceLine" id="cb4-27" title="27">    IOS;</a>
<a class="sourceLine" id="cb4-28" title="28">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb4-29" title="29">    <span class="cf">while</span>(cin&gt;&gt;n&amp;&amp;n){</a>
<a class="sourceLine" id="cb4-30" title="30">        mst(arr,<span class="dv">0</span>);mst(dp,-INF);</a>
<a class="sourceLine" id="cb4-31" title="31">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb4-32" title="32">            cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb4-33" title="33">        <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-34" title="34">        dp[<span class="dv">1</span>]=arr[<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb4-35" title="35">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">2</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb4-36" title="36">            dp[i]=arr[i];</a>
<a class="sourceLine" id="cb4-37" title="37">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;i;j++){</a>
<a class="sourceLine" id="cb4-38" title="38">                <span class="cf">if</span>(arr[j]&lt;arr[i]){</a>
<a class="sourceLine" id="cb4-39" title="39">                    dp[i]=max(dp[i],dp[j]+arr[i]);</a>
<a class="sourceLine" id="cb4-40" title="40">                }</a>
<a class="sourceLine" id="cb4-41" title="41">            }</a>
<a class="sourceLine" id="cb4-42" title="42">        }</a>
<a class="sourceLine" id="cb4-43" title="43">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb4-44" title="44">            ans=max(dp[i],ans);</a>
<a class="sourceLine" id="cb4-45" title="45">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb4-46" title="46">    }</a>
<a class="sourceLine" id="cb4-47" title="47">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-48" title="48">} </a></code></pre></div>
<h4 id="hdu1114-piggy-bank"><a href="https://cn.vjudge.net/problem/HDU-1114">HDU1114 Piggy-Bank</a></h4>
<p>完全背包模板题，之前的题解中已有提及到此题，不在赘述。</p>
<p><a href="https://xtayex.github.io/2019/02/17/POJ1384-Piggy-Bank/">POJ1384 - Piggy Bank</a></p>
<h4 id="hdu1176-免费馅饼"><a href="https://cn.vjudge.net/problem/HDU-1176">HDU1176 免费馅饼</a></h4>
<p>题意是说，有若干个馅饼掉落，馅饼<span class="math inline">\(p_i\)</span>会在时间<span class="math inline">\(t_i\)</span>掉落到位置<span class="math inline">\(x_i\)</span>处。初始时你位于位置5，每秒钟你只可以往左或往右移动一个单位，问能够接到的馅饼数目是多少。 <span class="math display">\[
dp[i][j]=max(dp[i+1][j],max(dp[i+1][j-1],dp[i+1][j+1]))+bs[i][j]
\]</span> <span class="math inline">\(dp[i][j]\)</span>表示在时间<span class="math inline">\(i\)</span>、位置<span class="math inline">\(j\)</span>接到的最多馅饼数；<span class="math inline">\(bs[i][j]\)</span>表示在时间<span class="math inline">\(i\)</span>，位置<span class="math inline">\(j\)</span>掉到地上的馅饼的数目。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb5-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb5-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb5-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb5-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb5-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb5-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb5-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb5-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb5-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb5-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb5-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb5-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb5-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">100000</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb5-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb5-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb5-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb5-23" title="23"><span class="dt">int</span> bs[maxn][<span class="dv">15</span>];        <span class="co">//时间,位置 </span></a>
<a class="sourceLine" id="cb5-24" title="24"><span class="dt">int</span> dp[maxn][<span class="dv">15</span>];        <span class="co">//时间,位置 </span></a>
<a class="sourceLine" id="cb5-25" title="25"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb5-26" title="26">{</a>
<a class="sourceLine" id="cb5-27" title="27">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb5-28" title="28">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF&amp;&amp;n){</a>
<a class="sourceLine" id="cb5-29" title="29">        <span class="dt">int</span> ubt=-INF;mst(bs,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb5-30" title="30">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb5-31" title="31">            <span class="dt">int</span> x,t;</a>
<a class="sourceLine" id="cb5-32" title="32">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;x,&amp;t);</a>
<a class="sourceLine" id="cb5-33" title="33">            bs[t][x]++;</a>
<a class="sourceLine" id="cb5-34" title="34">            ubt=max(ubt,t);</a>
<a class="sourceLine" id="cb5-35" title="35">        }</a>
<a class="sourceLine" id="cb5-36" title="36">        mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb5-37" title="37">        <span class="cf">for</span>(<span class="dt">int</span> i=ubt;i&gt;=<span class="dv">0</span>;i--){</a>
<a class="sourceLine" id="cb5-38" title="38">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;=<span class="dv">10</span>;j++){</a>
<a class="sourceLine" id="cb5-39" title="39">                dp[i][j]=max(dp[i+<span class="dv">1</span>][j],max(dp[i+<span class="dv">1</span>][j-<span class="dv">1</span>],dp[i+<span class="dv">1</span>][j+<span class="dv">1</span>]))+bs[i][j];</a>
<a class="sourceLine" id="cb5-40" title="40">            }</a>
<a class="sourceLine" id="cb5-41" title="41">        }</a>
<a class="sourceLine" id="cb5-42" title="42">        <span class="dt">int</span> ans=dp[<span class="dv">0</span>][<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb5-43" title="43">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb5-44" title="44">    }</a>
<a class="sourceLine" id="cb5-45" title="45">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-46" title="46">}</a></code></pre></div>
<h4 id="hdu1260-tickets"><a href="https://cn.vjudge.net/problem/HDU-1260">HDU1260 Tickets</a></h4>
<p>题意是说，对于一个整数序列，有两种操作，一种是删除当前的一个数，一种是删除相邻的两个数，两种操作都对应一定的费用。现在要求从左到右进行操作，问将所有数删除掉所需要的最小费用是多少。</p>
<p>直接转移即可</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb6-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb6-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></a>
<a class="sourceLine" id="cb6-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb6-5" title="5"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb6-6" title="6"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">2005</span>;</a>
<a class="sourceLine" id="cb6-7" title="7"><span class="dt">int</span> t1[maxn],t2[maxn];</a>
<a class="sourceLine" id="cb6-8" title="8"><span class="dt">int</span> dp[maxn];</a>
<a class="sourceLine" id="cb6-9" title="9"><span class="dt">void</span> Time(<span class="dt">int</span> todo)</a>
<a class="sourceLine" id="cb6-10" title="10">{</a>
<a class="sourceLine" id="cb6-11" title="11">    <span class="dt">int</span> tmp=todo;</a>
<a class="sourceLine" id="cb6-12" title="12">    <span class="dt">int</span> mins=todo/<span class="dv">60</span>;</a>
<a class="sourceLine" id="cb6-13" title="13">    <span class="dt">int</span> hr=<span class="dv">8</span>+mins/<span class="dv">60</span>;</a>
<a class="sourceLine" id="cb6-14" title="14">    <span class="dt">int</span> sec=todo%<span class="dv">60</span>%<span class="dv">60</span>;</a>
<a class="sourceLine" id="cb6-15" title="15">    mins%=<span class="dv">60</span>;</a>
<a class="sourceLine" id="cb6-16" title="16">    <span class="dt">int</span> htmp=hr;</a>
<a class="sourceLine" id="cb6-17" title="17">    <span class="cf">if</span>(hr&gt;<span class="dv">12</span>)        hr-=<span class="dv">12</span>;</a>
<a class="sourceLine" id="cb6-18" title="18">    printf(<span class="st">"%02d:%02d:%02d "</span>,hr,mins,sec);</a>
<a class="sourceLine" id="cb6-19" title="19">    <span class="cf">if</span>(htmp&lt;<span class="dv">12</span>)        printf(<span class="st">"am</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb6-20" title="20">    <span class="cf">else</span>        printf(<span class="st">"pm</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb6-21" title="21">}</a>
<a class="sourceLine" id="cb6-22" title="22"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb6-23" title="23">{</a>
<a class="sourceLine" id="cb6-24" title="24">    <span class="dt">int</span> n,k;</a>
<a class="sourceLine" id="cb6-25" title="25">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb6-26" title="26">    <span class="cf">while</span>(n--)</a>
<a class="sourceLine" id="cb6-27" title="27">    {    </a>
<a class="sourceLine" id="cb6-28" title="28">        memset(dp,<span class="dv">0</span>,<span class="kw">sizeof</span>(dp));</a>
<a class="sourceLine" id="cb6-29" title="29">        memset(t1,<span class="dv">0</span>,<span class="kw">sizeof</span>(t1));</a>
<a class="sourceLine" id="cb6-30" title="30">        memset(t2,<span class="dv">0</span>,<span class="kw">sizeof</span>(t2));</a>
<a class="sourceLine" id="cb6-31" title="31">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;k);</a>
<a class="sourceLine" id="cb6-32" title="32">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=k;i++)        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t1[i]);</a>
<a class="sourceLine" id="cb6-33" title="33">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=k-<span class="dv">1</span>;i++)        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t2[i]);</a>
<a class="sourceLine" id="cb6-34" title="34">        dp[<span class="dv">1</span>]=t1[<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb6-35" title="35">        dp[<span class="dv">2</span>]=min(t1[<span class="dv">1</span>]+t1[<span class="dv">2</span>],t2[<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb6-36" title="36">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">3</span>;i&lt;=k;i++){</a>
<a class="sourceLine" id="cb6-37" title="37">            dp[i]=min(dp[i-<span class="dv">1</span>]+t1[i],dp[i-<span class="dv">2</span>]+t2[i-<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb6-38" title="38">        }</a>
<a class="sourceLine" id="cb6-39" title="39">        <span class="dt">int</span> ans=dp[k];</a>
<a class="sourceLine" id="cb6-40" title="40">        Time(ans);</a>
<a class="sourceLine" id="cb6-41" title="41">    }</a>
<a class="sourceLine" id="cb6-42" title="42">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb6-43" title="43">}</a></code></pre></div>
<h4 id="hdu1257-最少拦截系统"><a href="https://cn.vjudge.net/problem/HDU-1257">HDU1257 最少拦截系统</a></h4>
<p>题目是说，对于一连串导弹，一套拦截系统所能拦截的导弹的高度不能大于该系统上一次拦截的导弹的高度。问要拦截所有的导弹，最少要多少套拦截系统。</p>
<p>这题直接贪心模拟即可，对于每一发导弹，检查当前存在的拦截系统是否可以将其拦截。如果存在一套拦截系统可以将该导弹拦截，就将此系统的高度改为该导弹的高度；如果不存在，就添加一套系统，并将其高度设为当前导弹的高度。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb7-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb7-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb7-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb7-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb7-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb7-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb7-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb7-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb7-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb7-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb7-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb7-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb7-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb7-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb7-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb7-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb7-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb7-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb7-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb7-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb7-23" title="23"><span class="dt">int</span> arr[maxn];</a>
<a class="sourceLine" id="cb7-24" title="24"><span class="dt">int</span> sys[maxn];</a>
<a class="sourceLine" id="cb7-25" title="25"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb7-26" title="26">{</a>
<a class="sourceLine" id="cb7-27" title="27">    IOS;</a>
<a class="sourceLine" id="cb7-28" title="28">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb7-29" title="29">    <span class="cf">while</span>(cin&gt;&gt;n){</a>
<a class="sourceLine" id="cb7-30" title="30">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb7-31" title="31">            cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb7-32" title="32">        <span class="dt">int</span> cnt=<span class="dv">0</span>;sys[cnt++]=arr[<span class="dv">0</span>];</a>
<a class="sourceLine" id="cb7-33" title="33">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb7-34" title="34">            <span class="dt">bool</span> flag=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-35" title="35">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;cnt;j++){</a>
<a class="sourceLine" id="cb7-36" title="36">                <span class="cf">if</span>(sys[j]&gt;=arr[i]){</a>
<a class="sourceLine" id="cb7-37" title="37">                    flag=<span class="dv">1</span>;sys[j]=arr[i];</a>
<a class="sourceLine" id="cb7-38" title="38">                    <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb7-39" title="39">                }</a>
<a class="sourceLine" id="cb7-40" title="40">            }</a>
<a class="sourceLine" id="cb7-41" title="41">            <span class="cf">if</span>(!flag)</a>
<a class="sourceLine" id="cb7-42" title="42">                sys[cnt++]=arr[i];</a>
<a class="sourceLine" id="cb7-43" title="43">        }</a>
<a class="sourceLine" id="cb7-44" title="44">        cout&lt;&lt;cnt&lt;&lt;endl;</a>
<a class="sourceLine" id="cb7-45" title="45">    }</a>
<a class="sourceLine" id="cb7-46" title="46">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-47" title="47">}</a></code></pre></div>
<p>当然，因为sys数组是单调不减的，所以也可以将内层循环优化为二分。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb8-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb8-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb8-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb8-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb8-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb8-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb8-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb8-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb8-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb8-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb8-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb8-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb8-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb8-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb8-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb8-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb8-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb8-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb8-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb8-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb8-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb8-23" title="23"><span class="dt">int</span> arr[maxn];</a>
<a class="sourceLine" id="cb8-24" title="24"><span class="dt">int</span> sys[maxn];</a>
<a class="sourceLine" id="cb8-25" title="25"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb8-26" title="26">{</a>
<a class="sourceLine" id="cb8-27" title="27">    IOS;</a>
<a class="sourceLine" id="cb8-28" title="28">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb8-29" title="29">    <span class="cf">while</span>(cin&gt;&gt;n){</a>
<a class="sourceLine" id="cb8-30" title="30">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb8-31" title="31">            cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb8-32" title="32">        <span class="dt">int</span> cnt=<span class="dv">0</span>;sys[cnt++]=arr[<span class="dv">0</span>];</a>
<a class="sourceLine" id="cb8-33" title="33">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb8-34" title="34">            <span class="dt">int</span>* pos=lower_bound(sys,sys+cnt,arr[i]);</a>
<a class="sourceLine" id="cb8-35" title="35">            <span class="dt">int</span> idx=pos-sys;</a>
<a class="sourceLine" id="cb8-36" title="36">            <span class="cf">if</span>(pos==sys+cnt)</a>
<a class="sourceLine" id="cb8-37" title="37">                sys[cnt++]=arr[i];</a>
<a class="sourceLine" id="cb8-38" title="38">            <span class="cf">else</span></a>
<a class="sourceLine" id="cb8-39" title="39">                sys[idx]=arr[i];</a>
<a class="sourceLine" id="cb8-40" title="40">        }</a>
<a class="sourceLine" id="cb8-41" title="41">        cout&lt;&lt;cnt&lt;&lt;endl;</a>
<a class="sourceLine" id="cb8-42" title="42">    }</a>
<a class="sourceLine" id="cb8-43" title="43">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb8-44" title="44">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>基础DP</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>基础DP</tag>
      </tags>
  </entry>
  <entry>
    <title>基础dp专题总结 Part 2</title>
    <url>/2019/07/28/%E5%9F%BA%E7%A1%80dp%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93-Part-2/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H7073915b94cb45789270cb9ac2829fb6e.jpg"> <span id="more"></span> #### <a href="https://cn.vjudge.net/problem/HDU-1160">HDU1160 FatMouse's Speed</a></p>
<p>题意是说，有两个整数序列<span class="math inline">\(W\)</span>和<span class="math inline">\(S\)</span>，要求找出一组下标<span class="math inline">\(m_1,m_2,m_3,···,m_n\)</span>，使得<span class="math display">\[W[m_1]&lt;W[m_2]&lt;W[m_3]&lt;···&lt;W[m_n]\]</span>且<span class="math display">\[S[m_1]&gt;S[m_2]&gt;S[m_3]&gt;···&gt;S[m_n]\]</span>。下标的个数应尽可能地多。要求输出下标的个数以及被选出的下标。</p>
<p>对所有的<span class="math inline">\(W-S\)</span>对进行排序，排序规则是按<span class="math inline">\(W\)</span>为第一关键字从小到大排序，按<span class="math inline">\(S\)</span>为第二关键字从大到小排序。而dp的方法其实跟LIS或者最大上升子序列和是很像的。关于输出被选取的下标，其实就是记录路径，只需要用一个pre数组记录下每一个下标的前驱，然后递归回去即可。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> wei;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="dt">int</span> speed;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="dt">int</span> id;</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> node&amp; nn)<span class="at">const</span>{</a>
<a class="sourceLine" id="cb1-28" title="28">        <span class="cf">if</span>(wei!=nn.wei)</a>
<a class="sourceLine" id="cb1-29" title="29">            <span class="cf">return</span> wei&lt;nn.wei;</a>
<a class="sourceLine" id="cb1-30" title="30">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-31" title="31">            <span class="cf">return</span> speed&gt;nn.speed;</a>
<a class="sourceLine" id="cb1-32" title="32">    }</a>
<a class="sourceLine" id="cb1-33" title="33">};</a>
<a class="sourceLine" id="cb1-34" title="34">node ns[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb1-35" title="35"><span class="dt">int</span> pre[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb1-36" title="36"><span class="dt">int</span> dp[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb1-37" title="37"><span class="dt">void</span> show(<span class="dt">int</span> todo)</a>
<a class="sourceLine" id="cb1-38" title="38">{</a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="cf">if</span>(pre[todo]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-40" title="40">        cout&lt;&lt;ns[todo].id&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-41" title="41">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-42" title="42">    }</a>
<a class="sourceLine" id="cb1-43" title="43">    show(pre[todo]);</a>
<a class="sourceLine" id="cb1-44" title="44">    cout&lt;&lt;ns[todo].id&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-45" title="45">}</a>
<a class="sourceLine" id="cb1-46" title="46"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-47" title="47">{</a>
<a class="sourceLine" id="cb1-48" title="48">    IOS;</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="dt">int</span> w,s;<span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-50" title="50">    <span class="dt">int</span> ID=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-51" title="51">    mst(pre,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-52" title="52">    <span class="cf">while</span>(cin&gt;&gt;w&gt;&gt;s){</a>
<a class="sourceLine" id="cb1-53" title="53">        ns[cnt].wei=w;</a>
<a class="sourceLine" id="cb1-54" title="54">        ns[cnt].id=++ID;</a>
<a class="sourceLine" id="cb1-55" title="55">        ns[cnt++].speed=s;</a>
<a class="sourceLine" id="cb1-56" title="56">    }</a>
<a class="sourceLine" id="cb1-57" title="57">    sort(ns,ns+cnt);</a>
<a class="sourceLine" id="cb1-58" title="58">    <span class="dt">int</span> idx=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-59" title="59">    <span class="dt">int</span> last=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-60" title="60">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-61" title="61">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;cnt;i++){</a>
<a class="sourceLine" id="cb1-62" title="62">        dp[i]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-63" title="63">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;i;j++){</a>
<a class="sourceLine" id="cb1-64" title="64">            <span class="cf">if</span>(ns[j].wei&lt;ns[i].wei&amp;&amp;ns[j].speed&gt;ns[i].speed){</a>
<a class="sourceLine" id="cb1-65" title="65">                <span class="cf">if</span>(dp[i]&lt;dp[j]+<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-66" title="66">                    dp[i]=dp[j]+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-67" title="67">                    pre[i]=j;</a>
<a class="sourceLine" id="cb1-68" title="68">                }</a>
<a class="sourceLine" id="cb1-69" title="69">            }</a>
<a class="sourceLine" id="cb1-70" title="70">        }</a>
<a class="sourceLine" id="cb1-71" title="71">        <span class="dt">int</span> tmp=ans;</a>
<a class="sourceLine" id="cb1-72" title="72">        ans=max(ans,dp[i]);</a>
<a class="sourceLine" id="cb1-73" title="73">        <span class="cf">if</span>(ans!=tmp)</a>
<a class="sourceLine" id="cb1-74" title="74">            last=i;</a>
<a class="sourceLine" id="cb1-75" title="75">    }</a>
<a class="sourceLine" id="cb1-76" title="76">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-77" title="77">    show(last);</a>
<a class="sourceLine" id="cb1-78" title="78">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-79" title="79">}</a></code></pre></div>
<h4 id="poj1015-jury-compromise"><a href="https://cn.vjudge.net/problem/POJ-1015">POJ1015 Jury Compromise</a></h4>
<p>已有题解，不再赘述（确实是道好题）</p>
<p><a href="https://xtayex.github.io/2019/07/22/POJ1015-Jury-Compromise/">POJ1015 - Jury Compromise</a></p>
<h4 id="poj1458-common-subsequence"><a href="https://cn.vjudge.net/problem/POJ-1458">POJ1458 Common Subsequence</a></h4>
<p>题如其名，最长公共子序列。直接写就可。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb2-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-23" title="23"><span class="dt">int</span> dp[<span class="dv">1005</span>][<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb2-24" title="24"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-25" title="25">{</a>
<a class="sourceLine" id="cb2-26" title="26">    string sa,sb;</a>
<a class="sourceLine" id="cb2-27" title="27">    <span class="cf">while</span>(cin&gt;&gt;sa&gt;&gt;sb){</a>
<a class="sourceLine" id="cb2-28" title="28">        mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-29" title="29">        <span class="dt">int</span> lena=sa.size();</a>
<a class="sourceLine" id="cb2-30" title="30">        <span class="dt">int</span> lenb=sb.size();</a>
<a class="sourceLine" id="cb2-31" title="31">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=lena;i++){</a>
<a class="sourceLine" id="cb2-32" title="32">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=lenb;j++){</a>
<a class="sourceLine" id="cb2-33" title="33">                <span class="cf">if</span>(sa[i-<span class="dv">1</span>]==sb[j-<span class="dv">1</span>])</a>
<a class="sourceLine" id="cb2-34" title="34">                    dp[i][j]=dp[i-<span class="dv">1</span>][j-<span class="dv">1</span>]+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-35" title="35">                <span class="cf">else</span></a>
<a class="sourceLine" id="cb2-36" title="36">                    dp[i][j]=max(dp[i-<span class="dv">1</span>][j],dp[i][j-<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb2-37" title="37">            }</a>
<a class="sourceLine" id="cb2-38" title="38">        }</a>
<a class="sourceLine" id="cb2-39" title="39">        cout&lt;&lt;dp[lena][lenb]&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-40" title="40">    }</a>
<a class="sourceLine" id="cb2-41" title="41">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-42" title="42">}</a></code></pre></div>
<h4 id="poj1661-help-jimmy"><a href="https://cn.vjudge.net/problem/POJ-1661">POJ1661 Help Jimmy</a></h4>
<p>题目大意不知道怎么描述......</p>
<p>思路就是从最下面的平台往上dp，<span class="math inline">\(dp[i][0]\)</span>表示的是从当前平台往左走一直到下一个平台的边缘（左边缘或右边缘）所需要的最小时间。<span class="math inline">\(dp[i][1]\)</span>表示的是从当前平台往右走一直到下一个平台的边缘（左边缘或右边缘）所需要的最小时间。此处的最小时间指的是从最下面的平台一直递推到当前平台的总时间。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb3-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-23" title="23"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb3-24" title="24">    <span class="dt">int</span> lef,rig;</a>
<a class="sourceLine" id="cb3-25" title="25">    <span class="dt">int</span> hei;</a>
<a class="sourceLine" id="cb3-26" title="26">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> node&amp; nn)<span class="at">const</span>{</a>
<a class="sourceLine" id="cb3-27" title="27">        <span class="cf">return</span> hei&gt;nn.hei;        <span class="co">//从大到小 </span></a>
<a class="sourceLine" id="cb3-28" title="28">    }</a>
<a class="sourceLine" id="cb3-29" title="29">};</a>
<a class="sourceLine" id="cb3-30" title="30">node ns[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb3-31" title="31"><span class="dt">int</span> dp[<span class="dv">1005</span>][<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb3-32" title="32"><span class="dt">int</span> n,x,y,maxi;</a>
<a class="sourceLine" id="cb3-33" title="33"><span class="dt">void</span> <span class="va">left_</span>(<span class="dt">int</span> i)</a>
<a class="sourceLine" id="cb3-34" title="34">{</a>
<a class="sourceLine" id="cb3-35" title="35">    <span class="dt">int</span> k;</a>
<a class="sourceLine" id="cb3-36" title="36">    <span class="cf">for</span>(k=i+<span class="dv">1</span>;k&lt;=n+<span class="dv">1</span>;k++){        <span class="co">//k在i下面 </span></a>
<a class="sourceLine" id="cb3-37" title="37">        <span class="cf">if</span>(ns[k].lef&lt;=ns[i].lef</a>
<a class="sourceLine" id="cb3-38" title="38">        &amp;&amp;ns[k].rig&gt;=ns[i].lef</a>
<a class="sourceLine" id="cb3-39" title="39">        &amp;&amp;ns[i].hei-ns[k].hei&lt;=maxi){</a>
<a class="sourceLine" id="cb3-40" title="40">            <span class="cf">if</span>(k==n+<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-41" title="41">                dp[i][<span class="dv">0</span>]=ns[i].hei-ns[k].hei;</a>
<a class="sourceLine" id="cb3-42" title="42">            <span class="cf">else</span>    </a>
<a class="sourceLine" id="cb3-43" title="43">                dp[i][<span class="dv">0</span>]=ns[i].hei-ns[k].hei+min(dp[k][<span class="dv">0</span>]+ns[i].lef-ns[k].lef,dp[k][<span class="dv">1</span>]+ns[k].rig-ns[i].lef);</a>
<a class="sourceLine" id="cb3-44" title="44">            <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb3-45" title="45">        }</a>
<a class="sourceLine" id="cb3-46" title="46">    }</a>
<a class="sourceLine" id="cb3-47" title="47">    <span class="cf">if</span>(ns[i].hei-ns[k].hei&gt;maxi)</a>
<a class="sourceLine" id="cb3-48" title="48">        dp[i][<span class="dv">0</span>]=INF;</a>
<a class="sourceLine" id="cb3-49" title="49">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb3-50" title="50">}</a>
<a class="sourceLine" id="cb3-51" title="51"><span class="dt">void</span> <span class="va">right_</span>(<span class="dt">int</span> i)</a>
<a class="sourceLine" id="cb3-52" title="52">{</a>
<a class="sourceLine" id="cb3-53" title="53">    <span class="dt">int</span> k;</a>
<a class="sourceLine" id="cb3-54" title="54">    <span class="cf">for</span>(k=i+<span class="dv">1</span>;k&lt;=n+<span class="dv">1</span>;k++){        <span class="co">//k在i下面 </span></a>
<a class="sourceLine" id="cb3-55" title="55">        <span class="cf">if</span>(ns[k].lef&lt;=ns[i].rig</a>
<a class="sourceLine" id="cb3-56" title="56">        &amp;&amp;ns[k].rig&gt;=ns[i].rig</a>
<a class="sourceLine" id="cb3-57" title="57">        &amp;&amp;ns[i].hei-ns[k].hei&lt;=maxi){</a>
<a class="sourceLine" id="cb3-58" title="58">            <span class="cf">if</span>(k==n+<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-59" title="59">                dp[i][<span class="dv">1</span>]=ns[i].hei-ns[k].hei;</a>
<a class="sourceLine" id="cb3-60" title="60">            <span class="cf">else</span>    </a>
<a class="sourceLine" id="cb3-61" title="61">                dp[i][<span class="dv">1</span>]=ns[i].hei-ns[k].hei+min(dp[k][<span class="dv">0</span>]+ns[i].rig-ns[k].lef,dp[k][<span class="dv">1</span>]+ns[k].rig-ns[i].rig);</a>
<a class="sourceLine" id="cb3-62" title="62">            <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb3-63" title="63">        }</a>
<a class="sourceLine" id="cb3-64" title="64">    }</a>
<a class="sourceLine" id="cb3-65" title="65">    <span class="cf">if</span>(ns[i].hei-ns[k].hei&gt;maxi)</a>
<a class="sourceLine" id="cb3-66" title="66">        dp[i][<span class="dv">1</span>]=INF;</a>
<a class="sourceLine" id="cb3-67" title="67">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb3-68" title="68">}</a>
<a class="sourceLine" id="cb3-69" title="69"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-70" title="70">{</a>
<a class="sourceLine" id="cb3-71" title="71">    IOS;</a>
<a class="sourceLine" id="cb3-72" title="72">    <span class="dt">int</span> t;cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb3-73" title="73">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb3-74" title="74">        mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb3-75" title="75">        cin&gt;&gt;n&gt;&gt;x&gt;&gt;y&gt;&gt;maxi;</a>
<a class="sourceLine" id="cb3-76" title="76">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb3-77" title="77">            cin&gt;&gt;ns[i].lef&gt;&gt;ns[i].rig&gt;&gt;ns[i].hei;</a>
<a class="sourceLine" id="cb3-78" title="78">        }</a>
<a class="sourceLine" id="cb3-79" title="79">        sort(ns+<span class="dv">1</span>,ns+<span class="dv">1</span>+n);</a>
<a class="sourceLine" id="cb3-80" title="80">        dp[n+<span class="dv">1</span>][<span class="dv">0</span>]=dp[n+<span class="dv">1</span>][<span class="dv">1</span>]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-81" title="81">        ns[n+<span class="dv">1</span>].lef=-INF;ns[n+<span class="dv">1</span>].rig=INF;ns[n+<span class="dv">1</span>].hei=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-82" title="82">        ns[<span class="dv">0</span>].lef=ns[<span class="dv">0</span>].rig=x;ns[<span class="dv">0</span>].hei=y;</a>
<a class="sourceLine" id="cb3-83" title="83">        <span class="cf">for</span>(<span class="dt">int</span> i=n;i&gt;=<span class="dv">0</span>;i--){</a>
<a class="sourceLine" id="cb3-84" title="84">            <span class="va">left_</span>(i);</a>
<a class="sourceLine" id="cb3-85" title="85">            <span class="va">right_</span>(i);</a>
<a class="sourceLine" id="cb3-86" title="86">        }</a>
<a class="sourceLine" id="cb3-87" title="87">        <span class="dt">int</span> ans=min(dp[<span class="dv">0</span>][<span class="dv">1</span>],dp[<span class="dv">0</span>][<span class="dv">0</span>]);        </a>
<a class="sourceLine" id="cb3-88" title="88">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-89" title="89">    }</a>
<a class="sourceLine" id="cb3-90" title="90">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-91" title="91">}</a></code></pre></div>
<h4 id="poj2533-longest-ordered-subsequence"><a href="https://cn.vjudge.net/problem/POJ-2533">POJ2533 Longest Ordered Subsequence</a></h4>
<p>题如其名，直接转移即可。注意初始化。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb4-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb4-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb4-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb4-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb4-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb4-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb4-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb4-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb4-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb4-23" title="23"><span class="dt">int</span> dp[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb4-24" title="24"><span class="dt">int</span> arr[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb4-25" title="25"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb4-26" title="26">{</a>
<a class="sourceLine" id="cb4-27" title="27">    IOS;</a>
<a class="sourceLine" id="cb4-28" title="28">    <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb4-29" title="29">    mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb4-30" title="30">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb4-31" title="31">        cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb4-32" title="32">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)    dp[i]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb4-33" title="33">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb4-34" title="34">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;i;j++){</a>
<a class="sourceLine" id="cb4-35" title="35">            <span class="cf">if</span>(arr[j]&lt;arr[i]){</a>
<a class="sourceLine" id="cb4-36" title="36">                dp[i]=max(dp[i],dp[j]+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb4-37" title="37">            }</a>
<a class="sourceLine" id="cb4-38" title="38">        }</a>
<a class="sourceLine" id="cb4-39" title="39">    }</a>
<a class="sourceLine" id="cb4-40" title="40">    <span class="dt">int</span> ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb4-41" title="41">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb4-42" title="42">        ans=max(ans,dp[i]);</a>
<a class="sourceLine" id="cb4-43" title="43">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb4-44" title="44">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-45" title="45">}</a></code></pre></div>
<h4 id="poj3186-treats-for-the-cows"><a href="https://cn.vjudge.net/problem/POJ-3186">POJ3186 Treats for the Cows</a></h4>
<p>题意懒得描述了......</p>
<p><span class="math inline">\(dp[i][j]\)</span>表示的是区间<span class="math inline">\([i,j]\)</span>所能获得的最大价值。</p>
<p>做法是直接转移过去即可。注意初始化和转移顺序。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb5-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb5-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb5-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb5-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb5-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb5-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb5-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb5-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb5-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb5-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb5-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb5-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb5-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb5-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb5-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb5-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb5-23" title="23"><span class="dt">int</span> arr[<span class="dv">2005</span>];</a>
<a class="sourceLine" id="cb5-24" title="24"><span class="dt">int</span> dp[<span class="dv">2005</span>][<span class="dv">2005</span>];</a>
<a class="sourceLine" id="cb5-25" title="25"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb5-26" title="26">{</a>
<a class="sourceLine" id="cb5-27" title="27">    IOS;</a>
<a class="sourceLine" id="cb5-28" title="28">    <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb5-29" title="29">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb5-30" title="30">        cin&gt;&gt;arr[i],dp[i][i]=arr[i];</a>
<a class="sourceLine" id="cb5-31" title="31">    mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb5-32" title="32">    <span class="dt">int</span> age=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb5-33" title="33">    <span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-34" title="34">    <span class="cf">for</span>(<span class="dt">int</span> i=n-<span class="dv">1</span>;i&gt;=<span class="dv">1</span>;i--)</a>
<a class="sourceLine" id="cb5-35" title="35">        <span class="cf">for</span>(<span class="dt">int</span> j=i;j&lt;=n;j++)</a>
<a class="sourceLine" id="cb5-36" title="36">            dp[i][j]=max(dp[i+<span class="dv">1</span>][j]+arr[i]*(n-j+i),dp[i][j-<span class="dv">1</span>]+arr[j]*(n-j+i));</a>
<a class="sourceLine" id="cb5-37" title="37">    <span class="dt">int</span> ans=dp[<span class="dv">1</span>][n];</a>
<a class="sourceLine" id="cb5-38" title="38">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb5-39" title="39">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-40" title="40">}</a></code></pre></div>
<h4 id="hdu1078-fatmouse-and-the-cheese"><a href="https://cn.vjudge.net/problem/HDU-1078">HDU1078 FatMouse and the Cheese</a></h4>
<p>题目大意是说，现在有<span class="math inline">\(n \times n\)</span>个网格，这些网格中有若干个网格放有cheese。从网格<span class="math inline">\((0,0)\)</span>出发，每次走到下一个放有cheese的地方，可以水平走、垂直走，可以回头，每次最多走<span class="math inline">\(k\)</span>步；同时，每一次获得的cheese都应该比上一次多，问最终最多能得到多少cheese。</p>
<p>一开始想着状态要怎么转移，感觉这题的规则挺多，不太好转移......然而实际上只需要记忆化+爆搜+简单dp即可。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb6-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb6-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb6-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb6-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb6-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb6-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb6-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb6-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb6-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb6-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb6-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb6-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb6-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb6-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb6-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb6-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb6-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb6-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb6-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb6-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb6-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb6-23" title="23"><span class="dt">int</span> mp[<span class="dv">1005</span>][<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb6-24" title="24"><span class="dt">int</span> dp[<span class="dv">1005</span>][<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb6-25" title="25"><span class="dt">int</span> dir[<span class="dv">4</span>][<span class="dv">2</span>]=&lt;!--swig￼<span class="dv">0</span>--&gt;;</a>
<a class="sourceLine" id="cb6-26" title="26"><span class="dt">int</span> n,k;</a>
<a class="sourceLine" id="cb6-27" title="27"><span class="dt">int</span> dfs(<span class="dt">int</span> x,<span class="dt">int</span> y)</a>
<a class="sourceLine" id="cb6-28" title="28">{</a>
<a class="sourceLine" id="cb6-29" title="29">    <span class="cf">if</span>(dp[x][y])    <span class="cf">return</span> dp[x][y];</a>
<a class="sourceLine" id="cb6-30" title="30">    <span class="dt">int</span> sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb6-31" title="31">    <span class="dt">int</span> tx=<span class="dv">0</span>;<span class="dt">int</span> ty=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb6-32" title="32">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;<span class="dv">4</span>;i++){</a>
<a class="sourceLine" id="cb6-33" title="33">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=k;j++){</a>
<a class="sourceLine" id="cb6-34" title="34">            tx=x+j*dir[i][<span class="dv">0</span>];</a>
<a class="sourceLine" id="cb6-35" title="35">            ty=y+j*dir[i][<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb6-36" title="36">            <span class="cf">if</span>(tx&lt;n&amp;&amp;<span class="dv">0</span>&lt;=tx&amp;&amp;ty&lt;n&amp;&amp;<span class="dv">0</span>&lt;=ty){</a>
<a class="sourceLine" id="cb6-37" title="37">                <span class="cf">if</span>(mp[tx][ty]&gt;mp[x][y])</a>
<a class="sourceLine" id="cb6-38" title="38">                    sum=max(sum,dfs(tx,ty));</a>
<a class="sourceLine" id="cb6-39" title="39">            }</a>
<a class="sourceLine" id="cb6-40" title="40">        }</a>
<a class="sourceLine" id="cb6-41" title="41">    }</a>
<a class="sourceLine" id="cb6-42" title="42">    dp[x][y]=sum+mp[x][y];</a>
<a class="sourceLine" id="cb6-43" title="43">    <span class="cf">return</span> dp[x][y];</a>
<a class="sourceLine" id="cb6-44" title="44">}</a>
<a class="sourceLine" id="cb6-45" title="45"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb6-46" title="46">{</a>
<a class="sourceLine" id="cb6-47" title="47">    IOS;</a>
<a class="sourceLine" id="cb6-48" title="48">    <span class="cf">while</span>(cin&gt;&gt;n&gt;&gt;k&amp;&amp;n!=-<span class="dv">1</span>&amp;&amp;k!=-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb6-49" title="49">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb6-50" title="50">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;n;j++)</a>
<a class="sourceLine" id="cb6-51" title="51">                cin&gt;&gt;mp[i][j];</a>
<a class="sourceLine" id="cb6-52" title="52">        mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb6-53" title="53">        cout&lt;&lt;dfs(<span class="dv">0</span>,<span class="dv">0</span>)&lt;&lt;endl;</a>
<a class="sourceLine" id="cb6-54" title="54">    }</a>
<a class="sourceLine" id="cb6-55" title="55">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb6-56" title="56">}</a></code></pre></div>
<h4 id="hdu2859-phalanx"><a href="https://cn.vjudge.net/problem/HDU-2859">HDU2859 Phalanx</a></h4>
<p>题目大意是说，从一个矩阵中找出一个关于自身右对角线（从右上到左下）对称的子矩阵，问能找到的符合要求的最大子矩阵的大小是多少。</p>
<p><span class="math inline">\(dp[i][j]\)</span>表示如果<span class="math inline">\((i,j)\)</span>处的元素是某个子矩阵的左下角，那么对应的子矩阵的大小是多少。</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb7-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb7-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb7-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb7-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb7-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb7-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb7-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb7-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb7-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb7-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb7-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb7-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb7-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb7-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb7-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb7-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb7-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb7-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb7-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb7-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb7-23" title="23"><span class="dt">char</span> mp[<span class="dv">1005</span>][<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb7-24" title="24"><span class="dt">int</span> dp[<span class="dv">1005</span>][<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb7-25" title="25"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb7-26" title="26">{</a>
<a class="sourceLine" id="cb7-27" title="27">    IOS;</a>
<a class="sourceLine" id="cb7-28" title="28">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb7-29" title="29">    <span class="cf">while</span>(cin&gt;&gt;n&amp;&amp;n){</a>
<a class="sourceLine" id="cb7-30" title="30">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb7-31" title="31">            string str;cin&gt;&gt;str;</a>
<a class="sourceLine" id="cb7-32" title="32">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;n;j++){</a>
<a class="sourceLine" id="cb7-33" title="33">                mp[i][j]=str[j];</a>
<a class="sourceLine" id="cb7-34" title="34">            }</a>
<a class="sourceLine" id="cb7-35" title="35">        }</a>
<a class="sourceLine" id="cb7-36" title="36">        <span class="cf">if</span>(n==<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb7-37" title="37">            cout&lt;&lt;<span class="st">"1"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb7-38" title="38">            <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb7-39" title="39">        }</a>
<a class="sourceLine" id="cb7-40" title="40">        mst(dp,<span class="dv">0</span>);<span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-41" title="41">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb7-42" title="42">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;n;j++){</a>
<a class="sourceLine" id="cb7-43" title="43">                <span class="dt">int</span> x=i-<span class="dv">1</span>;<span class="dt">int</span> y=j+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb7-44" title="44">                <span class="cf">while</span>(x&gt;=<span class="dv">0</span>&amp;&amp;y&lt;n){</a>
<a class="sourceLine" id="cb7-45" title="45">                    <span class="cf">if</span>(mp[x][j]!=mp[i][y])</a>
<a class="sourceLine" id="cb7-46" title="46">                        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb7-47" title="47">                    x--;y++;</a>
<a class="sourceLine" id="cb7-48" title="48">                }</a>
<a class="sourceLine" id="cb7-49" title="49">                <span class="dt">int</span> sz=y-j;</a>
<a class="sourceLine" id="cb7-50" title="50">                <span class="cf">if</span>(sz&gt;dp[i-<span class="dv">1</span>][j+<span class="dv">1</span>])</a>
<a class="sourceLine" id="cb7-51" title="51">                    dp[i][j]=dp[i-<span class="dv">1</span>][j+<span class="dv">1</span>]+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb7-52" title="52">                <span class="cf">else</span></a>
<a class="sourceLine" id="cb7-53" title="53">                    dp[i][j]=sz; </a>
<a class="sourceLine" id="cb7-54" title="54">                ans=max(ans,dp[i][j]);</a>
<a class="sourceLine" id="cb7-55" title="55">            }</a>
<a class="sourceLine" id="cb7-56" title="56">        }</a>
<a class="sourceLine" id="cb7-57" title="57">        cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb7-58" title="58">    }</a>
<a class="sourceLine" id="cb7-59" title="59">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-60" title="60">}</a></code></pre></div>
<h4 id="poj3616-miking-time"><a href="https://cn.vjudge.net/problem/POJ-3616">POJ3616 Miking Time</a></h4>
<p>将每一个时间段的结束时间加上休息时间，即可用最大上升子序列和的思路来做。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb8-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb8-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb8-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb8-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb8-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb8-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb8-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb8-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb8-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb8-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb8-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb8-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb8-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb8-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb8-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb8-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb8-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb8-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb8-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb8-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb8-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb8-23" title="23"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb8-24" title="24">    <span class="dt">int</span> s,e,eff;</a>
<a class="sourceLine" id="cb8-25" title="25">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> node&amp; nn)<span class="at">const</span>{</a>
<a class="sourceLine" id="cb8-26" title="26">        <span class="cf">if</span>(s!=nn.s)    <span class="cf">return</span> s&lt;nn.s;</a>
<a class="sourceLine" id="cb8-27" title="27">        <span class="cf">return</span> e&lt;nn.e;</a>
<a class="sourceLine" id="cb8-28" title="28">    }</a>
<a class="sourceLine" id="cb8-29" title="29">};</a>
<a class="sourceLine" id="cb8-30" title="30">node ns[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb8-31" title="31"><span class="dt">int</span> dp[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb8-32" title="32"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb8-33" title="33">{</a>
<a class="sourceLine" id="cb8-34" title="34">    IOS;</a>
<a class="sourceLine" id="cb8-35" title="35">    <span class="dt">int</span> n,m,r;</a>
<a class="sourceLine" id="cb8-36" title="36">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;r;</a>
<a class="sourceLine" id="cb8-37" title="37">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++){</a>
<a class="sourceLine" id="cb8-38" title="38">        cin&gt;&gt;ns[i].s&gt;&gt;ns[i].e&gt;&gt;ns[i].eff;</a>
<a class="sourceLine" id="cb8-39" title="39">        ns[i].e+=r;</a>
<a class="sourceLine" id="cb8-40" title="40">    }</a>
<a class="sourceLine" id="cb8-41" title="41">    sort(ns+<span class="dv">1</span>,ns+<span class="dv">1</span>+m);</a>
<a class="sourceLine" id="cb8-42" title="42">    mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb8-43" title="43">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++){</a>
<a class="sourceLine" id="cb8-44" title="44">        dp[i]=ns[i].eff;</a>
<a class="sourceLine" id="cb8-45" title="45">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;i;j++){</a>
<a class="sourceLine" id="cb8-46" title="46">            <span class="cf">if</span>(ns[j].e&lt;=ns[i].s){</a>
<a class="sourceLine" id="cb8-47" title="47">                dp[i]=max(dp[j]+ns[i].eff,dp[i]);</a>
<a class="sourceLine" id="cb8-48" title="48">            }</a>
<a class="sourceLine" id="cb8-49" title="49">        }</a>
<a class="sourceLine" id="cb8-50" title="50">    }</a>
<a class="sourceLine" id="cb8-51" title="51">    <span class="dt">int</span> ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb8-52" title="52">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++)</a>
<a class="sourceLine" id="cb8-53" title="53">        ans=max(ans,dp[i]);</a>
<a class="sourceLine" id="cb8-54" title="54">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb8-55" title="55">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb8-56" title="56">}</a></code></pre></div>
<h4 id="poj3666-making-the-grade"><a href="https://cn.vjudge.net/problem/POJ-3666">POJ3666 Making the Grade</a></h4>
<p>题目大意是说，对于一个给定的序列，现在要把它变成递增的或递减的，每改动一个数要付出的代价为改动后的数与改动前的数的差的绝对值。问如何改动才能使得代价最小。</p>
<p>首先，这题的数据有点问题，只需要考虑递增的情况......</p>
<p>这题的状态转移也不太好想，甚至感觉有点......神奇。具体见代码及代码注释</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb9-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb9-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb9-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb9-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb9-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb9-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb9-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb9-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb9-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb9-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb9-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb9-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb9-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb9-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb9-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb9-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb9-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb9-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb9-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e3</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb9-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb9-21" title="21"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb9-22" title="22"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb9-23" title="23"><span class="dt">int</span> <span class="va">abs_</span>(<span class="dt">int</span> todo)</a>
<a class="sourceLine" id="cb9-24" title="24">{</a>
<a class="sourceLine" id="cb9-25" title="25">    <span class="cf">if</span>(todo&lt;<span class="dv">0</span>)    <span class="cf">return</span> -todo;</a>
<a class="sourceLine" id="cb9-26" title="26">    <span class="cf">return</span> todo;    </a>
<a class="sourceLine" id="cb9-27" title="27">}</a>
<a class="sourceLine" id="cb9-28" title="28"><span class="dt">int</span> arr[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb9-29" title="29"><span class="dt">int</span> b[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb9-30" title="30"><span class="dt">int</span> dp[maxn&lt;&lt;<span class="dv">1</span>][maxn&lt;&lt;<span class="dv">1</span>];        <span class="co">//dp[i][j]表示前i个数,最后一个数在arr[]中第j小 </span></a>
<a class="sourceLine" id="cb9-31" title="31"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb9-32" title="32">{</a>
<a class="sourceLine" id="cb9-33" title="33">    IOS;</a>
<a class="sourceLine" id="cb9-34" title="34">    <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb9-35" title="35">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb9-36" title="36">        cin&gt;&gt;arr[i];</a>
<a class="sourceLine" id="cb9-37" title="37">        b[i]=arr[i];</a>
<a class="sourceLine" id="cb9-38" title="38">    }</a>
<a class="sourceLine" id="cb9-39" title="39">    sort(b+<span class="dv">1</span>,b+n+<span class="dv">1</span>);        <span class="co">//? 为什么要排序?为什么不排序就会不行? </span></a>
<a class="sourceLine" id="cb9-40" title="40">    <span class="co">//如果排序是为了去重，那去重的意义是什么?以及，为什么我不去重也能过? </span></a>
<a class="sourceLine" id="cb9-41" title="41">    mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb9-42" title="42">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb9-43" title="43">        <span class="dt">int</span> tmp=INF;</a>
<a class="sourceLine" id="cb9-44" title="44">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=n;j++){</a>
<a class="sourceLine" id="cb9-45" title="45">            tmp=min(dp[i-<span class="dv">1</span>][j],tmp);        </a>
<a class="sourceLine" id="cb9-46" title="46">            <span class="co">//k:[1,j],这一层循环可以省掉,维护一个最小值即可 </span></a>
<a class="sourceLine" id="cb9-47" title="47">            <span class="co">//可以保证tmp一定是范围[1,j]内最小的 </span></a>
<a class="sourceLine" id="cb9-48" title="48">            dp[i][j]=<span class="va">abs_</span>(arr[i]-b[j])+tmp;</a>
<a class="sourceLine" id="cb9-49" title="49">        }</a>
<a class="sourceLine" id="cb9-50" title="50">    }</a>
<a class="sourceLine" id="cb9-51" title="51">    <span class="dt">int</span> ans=INF;</a>
<a class="sourceLine" id="cb9-52" title="52">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb9-53" title="53">        ans=min(ans,dp[n][i]);</a>
<a class="sourceLine" id="cb9-54" title="54">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb9-55" title="55">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb9-56" title="56">} </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>基础DP</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>DP</tag>
        <tag>基础DP</tag>
      </tags>
  </entry>
  <entry>
    <title>快速乘算法</title>
    <url>/2019/01/28/%E5%BF%AB%E9%80%9F%E4%B9%98%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>  原理与快速幂相似，利用二进制将两个数的乘法运算转化为加法运算。具体代码如下: <span id="more"></span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="dt">int</span> mul(<span class="dt">int</span> a,<span class="dt">int</span> b)</a>
<a class="sourceLine" id="cb1-2" title="2">{</a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-4" title="4">    <span class="cf">while</span>(b)</a>
<a class="sourceLine" id="cb1-5" title="5">    {</a>
<a class="sourceLine" id="cb1-6" title="6">        <span class="cf">if</span>(b&amp;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-7" title="7">            ans+=a;</a>
<a class="sourceLine" id="cb1-8" title="8">        a+=a;</a>
<a class="sourceLine" id="cb1-9" title="9">        b&gt;&gt;=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-10" title="10">    }</a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-12" title="12">}</a></code></pre></div>
<p>加上取模的话是这样:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="dt">int</span> mul(<span class="dt">int</span> a,<span class="dt">int</span> b,<span class="dt">int</span> p)</a>
<a class="sourceLine" id="cb2-2" title="2">{</a>
<a class="sourceLine" id="cb2-3" title="3">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-4" title="4">    <span class="cf">while</span>(b)</a>
<a class="sourceLine" id="cb2-5" title="5">    {</a>
<a class="sourceLine" id="cb2-6" title="6">        <span class="cf">if</span>(b&amp;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb2-7" title="7">            ans=(ans+a)%p;</a>
<a class="sourceLine" id="cb2-8" title="8">        a=(a+a)%p;</a>
<a class="sourceLine" id="cb2-9" title="9">        b&gt;&gt;=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-10" title="10">    }</a>
<a class="sourceLine" id="cb2-11" title="11">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb2-12" title="12">}</a></code></pre></div>
<p>  快速乘其实是利用了二进制与乘法分配律。以 2 x 7 为例，因为 7(10) = 111(2) = 100(2)+ 010(2) + 001(2) = 4(10)+2(10)+1(10)，也就是 2 x 7 = 2 x ( 4 + 2 + 1 ) = 8 + 4 + 2，从而将乘法转化为加法(对于计算机而言，算加法要比算乘法快得多)</p>
<p>  我们再将快速幂与快速乘对比一下: 快速幂:</p>
<pre><code>int fpow(int a,int b)
{    
    int ans=1;
    while(b)
    {
        if(b&amp;1)
            ans*=a;
        a*=a;
        b&gt;&gt;=1;
    }
    return ans;
}</code></pre>
<p>快速乘:</p>
<pre><code>int mul(int a,int b)
{
    int ans=0;
    while(b)
    {
        if(b&amp;1)
            ans+=a;
        a+=a;
        b&gt;&gt;=1;
    }
    return ans;
}</code></pre>
<p>可以发现，两者之间的差别只有加号与乘号的差别。这是因为，乘法就是若干次加法，而求幂就是若干次乘法。</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>快速读入模板</title>
    <url>/2019/02/18/%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%85%A5%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>代码如下👇</p>
<span id="more"></span>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-4" title="4"><span class="kw">inline</span> <span class="dt">int</span> read()</a>
<a class="sourceLine" id="cb1-5" title="5">{</a>
<a class="sourceLine" id="cb1-6" title="6">    <span class="dt">char</span> ch;</a>
<a class="sourceLine" id="cb1-7" title="7">    <span class="dt">int</span> x=<span class="dv">0</span>;<span class="dt">int</span> sign=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="cf">do</span>{</a>
<a class="sourceLine" id="cb1-9" title="9">        ch=getchar();</a>
<a class="sourceLine" id="cb1-10" title="10">        <span class="cf">if</span>(ch==<span class="ch">'-'</span>)        sign=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-11" title="11">    }<span class="cf">while</span>(ch&gt;<span class="ch">'9'</span>||ch&lt;<span class="ch">'0'</span>);</a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="cf">while</span>(<span class="ch">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="ch">'9'</span>){</a>
<a class="sourceLine" id="cb1-13" title="13">        x=x*<span class="dv">10</span>+(ch-<span class="ch">'0'</span>);</a>
<a class="sourceLine" id="cb1-14" title="14">        ch=getchar();</a>
<a class="sourceLine" id="cb1-15" title="15">    }</a>
<a class="sourceLine" id="cb1-16" title="16">    <span class="cf">return</span> x*sign;</a>
<a class="sourceLine" id="cb1-17" title="17">}</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="kw">template</span> &lt;<span class="kw">typename</span> T&gt; </a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">inline</span> T read_Tp(T&amp; x)</a>
<a class="sourceLine" id="cb1-20" title="20">{</a>
<a class="sourceLine" id="cb1-21" title="21">    <span class="dt">char</span> ch;x=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="dt">int</span> sign=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="cf">do</span>{</a>
<a class="sourceLine" id="cb1-24" title="24">        ch=getchar();</a>
<a class="sourceLine" id="cb1-25" title="25">        <span class="cf">if</span>(ch==<span class="ch">'-'</span>)        sign=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-26" title="26">    }<span class="cf">while</span>(ch&gt;<span class="ch">'9'</span>||ch&lt;<span class="ch">'0'</span>);</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">while</span>(<span class="ch">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="ch">'9'</span>){</a>
<a class="sourceLine" id="cb1-28" title="28">        x=x*<span class="dv">10</span>+(ch-<span class="ch">'0'</span>);</a>
<a class="sourceLine" id="cb1-29" title="29">        ch=getchar();</a>
<a class="sourceLine" id="cb1-30" title="30">    }</a>
<a class="sourceLine" id="cb1-31" title="31">    x*=sign;</a>
<a class="sourceLine" id="cb1-32" title="32">}</a>
<a class="sourceLine" id="cb1-33" title="33"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-34" title="34">{</a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="dt">int</span> a;</a>
<a class="sourceLine" id="cb1-36" title="36">    a=read_Tp(a);</a>
<a class="sourceLine" id="cb1-37" title="37">    cout&lt;&lt;a&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-38" title="38">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>拓展欧几里得算法</title>
    <url>/2019/02/01/%E6%8B%93%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h4 id="普通的欧几里得算法">普通的欧几里得算法</h4>
<p>  这大概是最为人熟知的数论算法了吧，作用是求出gcd(a,b)，代码如下: <span id="more"></span> 递归版本:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="dt">int</span> gcd(<span class="dt">int</span> a,<span class="dt">int</span> b)</a>
<a class="sourceLine" id="cb1-2" title="2">{</a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="cf">return</span> !b?a:gcd(b,a%b);</a>
<a class="sourceLine" id="cb1-4" title="4">}</a></code></pre></div>
<p>循环版本:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="dt">int</span> gcd(<span class="dt">int</span> a,<span class="dt">int</span> b)</a>
<a class="sourceLine" id="cb2-2" title="2">{</a>
<a class="sourceLine" id="cb2-3" title="3">    <span class="cf">while</span>(b)</a>
<a class="sourceLine" id="cb2-4" title="4">    {</a>
<a class="sourceLine" id="cb2-5" title="5">        <span class="dt">int</span> tmp=a%b;</a>
<a class="sourceLine" id="cb2-6" title="6">        a=b;</a>
<a class="sourceLine" id="cb2-7" title="7">        b=tmp;</a>
<a class="sourceLine" id="cb2-8" title="8">    }</a>
<a class="sourceLine" id="cb2-9" title="9">    <span class="cf">return</span> a;</a>
<a class="sourceLine" id="cb2-10" title="10">}</a></code></pre></div>
<p>  另外，求最大公约数还可以用库函数__gcd(),这是GNU里的库函数，不是标准库函数，头文件为 &lt; algorithm &gt;</p>
<h4 id="拓展欧几里得算法">拓展欧几里得算法</h4>
<p>  而拓展欧几里得算法则是在算出a,b的最大公约数的同时，顺带计算贝祖公式的一组解，即ax+by=gcd(a,b)的解( <a href="https://baike.baidu.com/item/%E8%B4%9D%E7%A5%96%E5%AE%9A%E7%90%86/5185441?fr=aladdin">贝祖等式</a> )</p>
<p>  那么，如果要手算ax+by=gcd(a,b)，我们要怎么算呢?</p>
<p>  首先，因为gcd(a,b)=gcd(b,a%b),</p>
<p>  所以a x + b y = gcd ( a,b ) = gcd ( b,a%b )= c x' + d y' ( 其中，c = b，d = a % b )</p>
<p>  又因为a % b = a - (a/b) * b</p>
<p>  所以有a y' + b ( x' - (a/b) * y) = a x + b y</p>
<p>  比较两式，可得x = y' , y = x' - ( a / b ) * y’</p>
<p>  又因为当b = 0时，解为x = 1 , y = 0，所以只要递归求解至b = 0即可</p>
<p>代码如下:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="dt">int</span> exgcd(<span class="dt">int</span> a,<span class="dt">int</span> b,<span class="dt">int</span>&amp; x,<span class="dt">int</span>&amp; y)</a>
<a class="sourceLine" id="cb3-2" title="2">{</a>
<a class="sourceLine" id="cb3-3" title="3">    <span class="cf">if</span>(!b)</a>
<a class="sourceLine" id="cb3-4" title="4">    {</a>
<a class="sourceLine" id="cb3-5" title="5">        x=<span class="dv">1</span>;y=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-6" title="6">        <span class="cf">return</span> a;</a>
<a class="sourceLine" id="cb3-7" title="7">    }</a>
<a class="sourceLine" id="cb3-8" title="8">    <span class="dt">int</span> r=exgcd(b,a%b,x,y);</a>
<a class="sourceLine" id="cb3-9" title="9">    <span class="dt">int</span> tmp=x;</a>
<a class="sourceLine" id="cb3-10" title="10">    x=y;</a>
<a class="sourceLine" id="cb3-11" title="11">    y=tmp-(a/b)*y;</a>
<a class="sourceLine" id="cb3-12" title="12">    <span class="cf">return</span> r;</a>
<a class="sourceLine" id="cb3-13" title="13">}</a></code></pre></div>
<p>另一种写法为:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="dt">int</span> exgcd(<span class="dt">int</span> a,<span class="dt">int</span> b,<span class="dt">int</span>&amp; x,<span class="dt">int</span>&amp; y)</a>
<a class="sourceLine" id="cb4-2" title="2">{    </a>
<a class="sourceLine" id="cb4-3" title="3">    <span class="dt">int</span> r;</a>
<a class="sourceLine" id="cb4-4" title="4">    <span class="cf">if</span>(b==<span class="dv">0</span>){    </a>
<a class="sourceLine" id="cb4-5" title="5">        x=<span class="dv">1</span>;y=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-6" title="6">        <span class="cf">return</span> a;</a>
<a class="sourceLine" id="cb4-7" title="7">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb4-8" title="8">        r=exgcd(b,a%b,y,x);</a>
<a class="sourceLine" id="cb4-9" title="9">        y-=x*(a/b);</a>
<a class="sourceLine" id="cb4-10" title="10">    }</a>
<a class="sourceLine" id="cb4-11" title="11">    <span class="cf">return</span> r; </a>
<a class="sourceLine" id="cb4-12" title="12">}</a></code></pre></div>
<p>  拓展欧几里得的一个作用，是求出满足形如ax+by=c的方程的解。根据贝祖等式可以看出，若c % gcd( a,b ) != 0，则方程无解。代码如下:</p>
<pre><code>ll solve(ll a,ll b,ll b)
{
    ll x,y;
    ll g=exgcd(a,b,x,y);
    if(c%g)
        return -1;
    x*=c/gcd;
    b/=gcd;
    if(b&lt;0)
        b=-b;        //如果b &lt; 0，就取其绝对值
    ll ans=x%b;        //如果求出的解小于0，就将其加上b
    if(ans&lt;=0)
        ans+=b;
    return ans; 
}</code></pre>
<p>  这个算法的另一个作用是求最小逆元。根据a x = 1 ( mod p) ==&gt; ax = py + 1 ==&gt; ax + by = 1，不难看出，求最小逆元其实就是求ax + by = c的解的特殊情况。因此，利用拓展欧几里得求最小逆元的代码如下：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb6-1" title="1"><span class="dt">int</span> inv(<span class="dt">int</span> a,<span class="dt">int</span> b)</a>
<a class="sourceLine" id="cb6-2" title="2">{</a>
<a class="sourceLine" id="cb6-3" title="3">    <span class="dt">int</span> x,y;</a>
<a class="sourceLine" id="cb6-4" title="4">    <span class="dt">int</span> g=exgcd(a,bx,y);</a>
<a class="sourceLine" id="cb6-5" title="5">    <span class="cf">if</span>(<span class="dv">1</span>%gcd)        </a>
<a class="sourceLine" id="cb6-6" title="6">        <span class="cf">return</span> -<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb6-7" title="7">    x*=<span class="dv">1</span>/g;</a>
<a class="sourceLine" id="cb6-8" title="8">    b=abs(b);        <span class="co">//假如b是一个负数，就取b的绝对值</span></a>
<a class="sourceLine" id="cb6-9" title="9">    <span class="dt">int</span> ans=x%b;    <span class="co">//假如求得的解不是正数，就将解对b取模再加上b</span></a>
<a class="sourceLine" id="cb6-10" title="10">    <span class="cf">if</span>(ans&lt;=<span class="dv">0</span>)        </a>
<a class="sourceLine" id="cb6-11" title="11">        ans+=b;</a>
<a class="sourceLine" id="cb6-12" title="12">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb6-13" title="13">}</a></code></pre></div>
<p>一道求ax + by = c 的模板题： <a href="https://cn.vjudge.net/problem/POJ-1061">青蛙约会</a></p>
<p>我的代码:</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;cstdlib&gt;
using namespace std;
typedef long long ll;
void exgcd(ll a,ll b,ll&amp; d,ll&amp; x,ll&amp; y)
{
    if(!b){
        d=a;x=1;y=0;
    }
    else{
        exgcd(b,a%b,d,y,x);
        y-=(a/b)*x;
    }
}
ll solve(ll a,ll b,ll c)
{
    ll x;ll y;ll g;
    exgcd(a,b,g,x,y);
    if(c%g)        return -1;
    x=(x*c)/g;
    b/=g;
    if(b&lt;0)        b=-b;
    ll ans=x%b;
    if(ans&lt;=0)        ans+=b;
    return ans;
}
int main()
{
    ll x,y,m,n,L;
    scanf("%lld %lld %lld %lld %lld",&amp;x,&amp;y,&amp;m,&amp;n,&amp;L);
    ll ans=solve(n-m,L,x-y);
    if(ans==-1)
        printf("Impossible\n");
    else
        printf("%lld\n",ans);
    return 0;
}</code></pre>
<p><del>为什么求ax + by = c的代码可以这样写呢？我也不知道啊OTZ(发出了数学太差的声音)</del></p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>最大流，最大流最小割与最大权闭合子图</title>
    <url>/2019/10/10/%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%8C%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2%E4%B8%8E%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%AD%90%E5%9B%BE/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H5f34d005235d4ae08a65080af36eb1b35.jpg"> <span id="more"></span></p>
<h3 id="前言">前言</h3>
<p>很久之前学过最大流，但当时网络流的学习便止步于此。国庆时做了几套去年ICPC Regional的题目，有好几道网络流相关的题目，遂决定复习一下最大流，同时学点新东西</p>
<h3 id="最大流">最大流</h3>
<p>解决最大流问题主要有FF，EK，Dinic，ISAP这四种算法。FF和EK在时间复杂度上较劣，不适合用来解题，故大多数情况使用的都是Dinic和ISAP。而这两种算法相比较，虽然ISAP会比Dinic更快一点，但由于网络流相关的题目重点往往不在算法实现，而在于如何对问题建模。再加上Dinic的思路比ISAP更简明，实现也很简单，故实际解题时，Dinic使用得更多一些。</p>
<h4 id="dinic">Dinic</h4>
<h5 id="该算法的大致步骤如下">该算法的大致步骤如下：</h5>
<ol type="1">
<li>连边，建立网络</li>
<li>BFS建立分层图</li>
<li>判断分层后汇点所处层次是否为-1。若是，说明此时汇点已不可达，直接输出答案；否则，进行下一步</li>
<li>一边DFS完成所有增广。对于网络中的每一条边，都加上当前的最小残量，同时对于每一条边的反向边，都减去当前的最小残量，并将答案加上该最小残量。</li>
<li>返回步骤2</li>
</ol>
<p>该算法的最坏时间复杂度为：<span class="math inline">\(O(n^2 m)\)</span>，但大多数情况下都是挺快的</p>
<h5 id="当前弧优化">当前弧优化</h5>
<p>每一次在做dfs时，对于一个点，有可能有一些边在之前已经计算过了，那我们在遍历这个点的边的时候，就没必要再计算那些已经计算过的边。因此，我们可以用一个cur[]数组记录某个点已经计算到了那条边。</p>
<h5 id="代码">代码</h5>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="dt">int</span> head[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="dt">int</span> dep[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="dt">int</span> cur[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="dt">int</span> cnt;</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="kw">struct</span> edge{</a>
<a class="sourceLine" id="cb1-15" title="15">    <span class="dt">int</span> to;<span class="dt">int</span> next;</a>
<a class="sourceLine" id="cb1-16" title="16">    <span class="dt">int</span> wei;</a>
<a class="sourceLine" id="cb1-17" title="17">};</a>
<a class="sourceLine" id="cb1-18" title="18">edge es[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">inline</span> <span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb1-20" title="20">{</a>
<a class="sourceLine" id="cb1-21" title="21">    cnt=<span class="dv">0</span>;mst(head,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-22" title="22">    mst(dep,-<span class="dv">1</span>);mst(cur,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-23" title="23">}</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">void</span> add(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> wei)</a>
<a class="sourceLine" id="cb1-25" title="25">{</a>
<a class="sourceLine" id="cb1-26" title="26">    es[cnt].to=v;</a>
<a class="sourceLine" id="cb1-27" title="27">    es[cnt].wei=wei;</a>
<a class="sourceLine" id="cb1-28" title="28">    es[cnt].next=head[u];</a>
<a class="sourceLine" id="cb1-29" title="29">    head[u]=cnt++;</a>
<a class="sourceLine" id="cb1-30" title="30">}</a>
<a class="sourceLine" id="cb1-31" title="31"><span class="dt">void</span> add_edge(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> wei)</a>
<a class="sourceLine" id="cb1-32" title="32">{</a>
<a class="sourceLine" id="cb1-33" title="33">    add(u,v,wei);</a>
<a class="sourceLine" id="cb1-34" title="34">    add(v,u,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-35" title="35">}</a>
<a class="sourceLine" id="cb1-36" title="36"><span class="dt">bool</span> bfs(<span class="dt">int</span> s,<span class="dt">int</span> t)</a>
<a class="sourceLine" id="cb1-37" title="37">{</a>
<a class="sourceLine" id="cb1-38" title="38">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb1-39" title="39">    mst(dep,-<span class="dv">1</span>);dep[s]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-40" title="40">    que.push(s);</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb1-42" title="42">        <span class="dt">int</span> u=que.front();</a>
<a class="sourceLine" id="cb1-43" title="43">        que.pop();</a>
<a class="sourceLine" id="cb1-44" title="44">        <span class="cf">for</span>(<span class="dt">int</span> i=head[u];i!=-<span class="dv">1</span>;i=es[i].next){</a>
<a class="sourceLine" id="cb1-45" title="45">            <span class="cf">if</span>(es[i].wei&gt;<span class="dv">0</span>&amp;&amp;dep[es[i].to]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-46" title="46">                dep[es[i].to]=dep[u]+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-47" title="47">                que.push(es[i].to);</a>
<a class="sourceLine" id="cb1-48" title="48">            }</a>
<a class="sourceLine" id="cb1-49" title="49">        }</a>
<a class="sourceLine" id="cb1-50" title="50">    }</a>
<a class="sourceLine" id="cb1-51" title="51">    <span class="cf">return</span> dep[t]!=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-52" title="52">}</a>
<a class="sourceLine" id="cb1-53" title="53"><span class="dt">int</span> dfs(<span class="dt">int</span> s,<span class="dt">int</span> t,<span class="dt">int</span> mini)</a>
<a class="sourceLine" id="cb1-54" title="54">{</a>
<a class="sourceLine" id="cb1-55" title="55">    <span class="cf">if</span>(s==t) <span class="cf">return</span> mini;</a>
<a class="sourceLine" id="cb1-56" title="56">    <span class="cf">for</span>(<span class="dt">int</span> &amp;i=cur[s];i!=-<span class="dv">1</span>;i=es[i].next){</a>
<a class="sourceLine" id="cb1-57" title="57">        <span class="cf">if</span>(es[i].wei&gt;<span class="dv">0</span>&amp;&amp;dep[es[i].to]==dep[s]+<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-58" title="58">            <span class="dt">int</span> d=dfs(es[i].to,t,min(es[i].wei,mini));</a>
<a class="sourceLine" id="cb1-59" title="59">            <span class="cf">if</span>(d&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-60" title="60">                es[i].wei-=d;</a>
<a class="sourceLine" id="cb1-61" title="61">                es[i^<span class="dv">1</span>].wei+=d;</a>
<a class="sourceLine" id="cb1-62" title="62">                <span class="cf">return</span> d;</a>
<a class="sourceLine" id="cb1-63" title="63">            }</a>
<a class="sourceLine" id="cb1-64" title="64">        }</a>
<a class="sourceLine" id="cb1-65" title="65">    }</a>
<a class="sourceLine" id="cb1-66" title="66">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-67" title="67">}</a>
<a class="sourceLine" id="cb1-68" title="68"><span class="dt">int</span> Dinic(<span class="dt">int</span> s,<span class="dt">int</span> t,<span class="dt">int</span> n)</a>
<a class="sourceLine" id="cb1-69" title="69">{</a>
<a class="sourceLine" id="cb1-70" title="70">    <span class="dt">int</span> ans=<span class="dv">0</span>;<span class="dt">int</span> tmp;</a>
<a class="sourceLine" id="cb1-71" title="71">    <span class="cf">while</span>(bfs(s,t)){</a>
<a class="sourceLine" id="cb1-72" title="72">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;=n;i++) cur[i]=head[i];</a>
<a class="sourceLine" id="cb1-73" title="73">        <span class="cf">while</span>((tmp=dfs(s,t,INF))&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb1-74" title="74">            ans+=tmp;</a>
<a class="sourceLine" id="cb1-75" title="75">        }</a>
<a class="sourceLine" id="cb1-76" title="76">    }</a>
<a class="sourceLine" id="cb1-77" title="77">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb1-78" title="78">}</a>
<a class="sourceLine" id="cb1-79" title="79"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-80" title="80">{</a>
<a class="sourceLine" id="cb1-81" title="81">    <span class="dt">int</span> n,m,s,t;</a>
<a class="sourceLine" id="cb1-82" title="82">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m,&amp;s,&amp;t);</a>
<a class="sourceLine" id="cb1-83" title="83">    init();</a>
<a class="sourceLine" id="cb1-84" title="84">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb1-85" title="85">        <span class="dt">int</span> u,v,w;</a>
<a class="sourceLine" id="cb1-86" title="86">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;u,&amp;v,&amp;w);</a>
<a class="sourceLine" id="cb1-87" title="87">        add_edge(u,v,w);</a>
<a class="sourceLine" id="cb1-88" title="88">    }</a>
<a class="sourceLine" id="cb1-89" title="89">    <span class="dt">int</span> ans=Dinic(s,t,n);</a>
<a class="sourceLine" id="cb1-90" title="90">    printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-91" title="91">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-92" title="92">}</a></code></pre></div>
<h5 id="验板子">验板子</h5>
<p><a href="https://www.luogu.org/problem/P3376">P3376 【模板】网络最大流</a></p>
<h3 id="最大流最小割">最大流最小割</h3>
<h4 id="什么是割什么是最小割">什么是割?什么是最小割？</h4>
<p>所谓的割，指的是对于一个网络上的一个边集，如果从网络上将该边集中的边都删去后，不存在一条从源点到汇点的路，则该边集称为割。最小割指的就是边权和最小的割</p>
<h4 id="一个结论">一个结论</h4>
<center>
<strong>最小割 == 最大流</strong>
</center>
<p>我是这么理解这个结论的：因为割的意思是指拿掉割里面的边以后，就不能找到一条从源点到汇点的路了，也就是说割将网络的两个部分连接起来，拿掉之后网络就分成了两个部分。那我们是否可以将割集中的边合并成一条边呢？这样去理解的话就可以很容易得出这样一个结论：在满足最大流的情况下，这一条边的流量就是等于最大流。而又因为流量不能超过容量，故在满足最大流的情况下，任意一个割的容量和都是大于等于最大流的。在这个基础上，我们不断地去找容量和更小的割，最终一定能够找到一个割，他们的容量和等于最大流。为什么一定能找到呢？因为最大流意味着满流，意味着我们已经无法继续增广了。</p>
<h4 id="来道例题">来道例题</h4>
<p><a href="https://www.luogu.org/problem/P2774">P2774 方格取数</a></p>
<p>第一反应是贪心，隔一个数取一个什么的。但很容易就能举出反例。正确的做法是按照<span class="math inline">\((i+j)\)</span>（<span class="math inline">\(i,j\)</span>分别是行数和列数）的奇偶来连边构建一个二分图。对于一个方格，如果其所在行加上所在列<span class="math display">\[ row_{cur} + col_{cur}\]</span>为奇数，则将其与超级源点连一条容量为1的边；如果为偶数，则将其与超级汇点连一条容量为1的边。最后，对于左侧的奇数点，将它们与所有<strong>不符合限制的不能取的</strong>偶数点，即与它们相邻的那些点各连一条容量为INF的边。最后算一遍最小割，将所有方格的数的总和减去最小割即为答案。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#define debug </span>puts(<span class="st">"debug"</span>)</a>
<a class="sourceLine" id="cb2-9" title="9"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-10" title="10"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-11" title="11"><span class="dt">int</span> head[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb2-12" title="12"><span class="dt">int</span> dep[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb2-13" title="13"><span class="dt">int</span> cur[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb2-14" title="14"><span class="dt">int</span> cnt;</a>
<a class="sourceLine" id="cb2-15" title="15"><span class="kw">struct</span> edge{</a>
<a class="sourceLine" id="cb2-16" title="16">    <span class="dt">int</span> to;<span class="dt">int</span> next;</a>
<a class="sourceLine" id="cb2-17" title="17">    <span class="dt">int</span> wei;</a>
<a class="sourceLine" id="cb2-18" title="18">};</a>
<a class="sourceLine" id="cb2-19" title="19">edge es[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb2-20" title="20"><span class="kw">inline</span> <span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb2-21" title="21">{</a>
<a class="sourceLine" id="cb2-22" title="22">    cnt=<span class="dv">0</span>;mst(head,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-23" title="23">    mst(dep,-<span class="dv">1</span>);mst(cur,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-24" title="24">}</a>
<a class="sourceLine" id="cb2-25" title="25"><span class="dt">void</span> add(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> wei)</a>
<a class="sourceLine" id="cb2-26" title="26">{</a>
<a class="sourceLine" id="cb2-27" title="27">    es[cnt].to=v;</a>
<a class="sourceLine" id="cb2-28" title="28">    es[cnt].wei=wei;</a>
<a class="sourceLine" id="cb2-29" title="29">    es[cnt].next=head[u];</a>
<a class="sourceLine" id="cb2-30" title="30">    head[u]=cnt++;</a>
<a class="sourceLine" id="cb2-31" title="31">}</a>
<a class="sourceLine" id="cb2-32" title="32"><span class="dt">void</span> add_edge(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> wei)</a>
<a class="sourceLine" id="cb2-33" title="33">{</a>
<a class="sourceLine" id="cb2-34" title="34">    add(u,v,wei);</a>
<a class="sourceLine" id="cb2-35" title="35">    add(v,u,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-36" title="36">}</a>
<a class="sourceLine" id="cb2-37" title="37"><span class="dt">bool</span> bfs(<span class="dt">int</span> s,<span class="dt">int</span> t)</a>
<a class="sourceLine" id="cb2-38" title="38">{</a>
<a class="sourceLine" id="cb2-39" title="39">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb2-40" title="40">    mst(dep,-<span class="dv">1</span>);dep[s]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-41" title="41">    que.push(s);</a>
<a class="sourceLine" id="cb2-42" title="42">    <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb2-43" title="43">        <span class="dt">int</span> u=que.front();</a>
<a class="sourceLine" id="cb2-44" title="44">        que.pop();</a>
<a class="sourceLine" id="cb2-45" title="45">        <span class="cf">for</span>(<span class="dt">int</span> i=head[u];i!=-<span class="dv">1</span>;i=es[i].next){</a>
<a class="sourceLine" id="cb2-46" title="46">            <span class="cf">if</span>(es[i].wei&gt;<span class="dv">0</span>&amp;&amp;dep[es[i].to]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb2-47" title="47">                dep[es[i].to]=dep[u]+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-48" title="48">                que.push(es[i].to);</a>
<a class="sourceLine" id="cb2-49" title="49">            }</a>
<a class="sourceLine" id="cb2-50" title="50">        }</a>
<a class="sourceLine" id="cb2-51" title="51">    }</a>
<a class="sourceLine" id="cb2-52" title="52">    <span class="cf">return</span> dep[t]!=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-53" title="53">}</a>
<a class="sourceLine" id="cb2-54" title="54"><span class="dt">int</span> dfs(<span class="dt">int</span> s,<span class="dt">int</span> t,<span class="dt">int</span> mini)</a>
<a class="sourceLine" id="cb2-55" title="55">{</a>
<a class="sourceLine" id="cb2-56" title="56">    <span class="cf">if</span>(s==t) <span class="cf">return</span> mini;</a>
<a class="sourceLine" id="cb2-57" title="57">    <span class="cf">for</span>(<span class="dt">int</span> &amp;i=cur[s];i!=-<span class="dv">1</span>;i=es[i].next){</a>
<a class="sourceLine" id="cb2-58" title="58">        <span class="cf">if</span>(es[i].wei&gt;<span class="dv">0</span>&amp;&amp;dep[es[i].to]==dep[s]+<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb2-59" title="59">            <span class="dt">int</span> d=dfs(es[i].to,t,min(es[i].wei,mini));</a>
<a class="sourceLine" id="cb2-60" title="60">            <span class="cf">if</span>(d&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-61" title="61">                es[i].wei-=d;</a>
<a class="sourceLine" id="cb2-62" title="62">                es[i^<span class="dv">1</span>].wei+=d;</a>
<a class="sourceLine" id="cb2-63" title="63">                <span class="cf">return</span> d;</a>
<a class="sourceLine" id="cb2-64" title="64">            }</a>
<a class="sourceLine" id="cb2-65" title="65">        }</a>
<a class="sourceLine" id="cb2-66" title="66">    }</a>
<a class="sourceLine" id="cb2-67" title="67">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-68" title="68">}</a>
<a class="sourceLine" id="cb2-69" title="69"><span class="dt">int</span> Dinic(<span class="dt">int</span> s,<span class="dt">int</span> t,<span class="dt">int</span> n)</a>
<a class="sourceLine" id="cb2-70" title="70">{</a>
<a class="sourceLine" id="cb2-71" title="71">    <span class="dt">int</span> ans=<span class="dv">0</span>;<span class="dt">int</span> tmp;</a>
<a class="sourceLine" id="cb2-72" title="72">    <span class="cf">while</span>(bfs(s,t)){</a>
<a class="sourceLine" id="cb2-73" title="73">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;=n;i++) cur[i]=head[i];</a>
<a class="sourceLine" id="cb2-74" title="74">        <span class="cf">while</span>((tmp=dfs(s,t,INF))&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-75" title="75">            ans+=tmp;</a>
<a class="sourceLine" id="cb2-76" title="76">        }</a>
<a class="sourceLine" id="cb2-77" title="77">    }</a>
<a class="sourceLine" id="cb2-78" title="78">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb2-79" title="79">}</a>
<a class="sourceLine" id="cb2-80" title="80"><span class="dt">int</span> mp[<span class="dv">105</span>][<span class="dv">105</span>];</a>
<a class="sourceLine" id="cb2-81" title="81"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-82" title="82">{</a>
<a class="sourceLine" id="cb2-83" title="83">    init();</a>
<a class="sourceLine" id="cb2-84" title="84">    <span class="dt">int</span> n,m;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m);</a>
<a class="sourceLine" id="cb2-85" title="85">    <span class="dt">int</span> sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-86" title="86">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb2-87" title="87">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=m;j++){</a>
<a class="sourceLine" id="cb2-88" title="88">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;mp[i][j]);</a>
<a class="sourceLine" id="cb2-89" title="89">            sum+=mp[i][j]; </a>
<a class="sourceLine" id="cb2-90" title="90">        }</a>
<a class="sourceLine" id="cb2-91" title="91">    }</a>
<a class="sourceLine" id="cb2-92" title="92">    <span class="dt">int</span> cntt=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-93" title="93">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb2-94" title="94">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=m;j++,cntt++){</a>
<a class="sourceLine" id="cb2-95" title="95">            <span class="cf">if</span>((i+j)%<span class="dv">2</span>==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-96" title="96">                add_edge(<span class="dv">0</span>,cntt,mp[i][j]);</a>
<a class="sourceLine" id="cb2-97" title="97">                <span class="cf">if</span>(j&lt;m) </a>
<a class="sourceLine" id="cb2-98" title="98">                    add_edge(cntt,cntt+<span class="dv">1</span>,INF);</a>
<a class="sourceLine" id="cb2-99" title="99">                <span class="cf">if</span>(j&gt;<span class="dv">1</span>) </a>
<a class="sourceLine" id="cb2-100" title="100">                    add_edge(cntt,cntt-<span class="dv">1</span>,INF);</a>
<a class="sourceLine" id="cb2-101" title="101">                <span class="cf">if</span>(i&gt;<span class="dv">1</span>) </a>
<a class="sourceLine" id="cb2-102" title="102">                    add_edge(cntt,cntt-m,INF);</a>
<a class="sourceLine" id="cb2-103" title="103">                <span class="cf">if</span>(i&lt;n) </a>
<a class="sourceLine" id="cb2-104" title="104">                    add_edge(cntt,cntt+m,INF);</a>
<a class="sourceLine" id="cb2-105" title="105">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb2-106" title="106">                add_edge(cntt,n*m+<span class="dv">1</span>,mp[i][j]);</a>
<a class="sourceLine" id="cb2-107" title="107">            }</a>
<a class="sourceLine" id="cb2-108" title="108">        }</a>
<a class="sourceLine" id="cb2-109" title="109">    }</a>
<a class="sourceLine" id="cb2-110" title="110"><span class="co">//    debug;</span></a>
<a class="sourceLine" id="cb2-111" title="111">    <span class="dt">int</span> ans=Dinic(<span class="dv">0</span>,n*m+<span class="dv">1</span>,n*m*<span class="dv">2</span>);</a>
<a class="sourceLine" id="cb2-112" title="112">    ans=sum-ans;    <span class="co">//总和减去最小割</span></a>
<a class="sourceLine" id="cb2-113" title="113">    printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb2-114" title="114">    <span class="cf">return</span> <span class="dv">0</span>; </a>
<a class="sourceLine" id="cb2-115" title="115">}</a></code></pre></div>
<p>从这道题中我们可以看出，最小割可以解决这样的一类问题，在满足某些限制的情况下，计算可以获得的最大价值。在这种情况下，我们可以先假设所有价值都可取，然后将那些不满足情况的作为割删去，那么求最小割就等价于求最小损失。</p>
<h3 id="最大权闭合子图">最大权闭合子图</h3>
<h4 id="什么是最大权闭合子图">什么是最大权闭合子图？</h4>
<p>首先，闭合子图指的是对于一个图，我们从中选出一个子图，它的任意一个点的出度指向的点仍然在这个子图内。而最大权闭合子图指的就是所有闭合子图中点权和最大的那一个。</p>
<h4 id="如何求最大权闭合子图">如何求最大权闭合子图？</h4>
<p>有一个结论，对于一个图，满足</p>
<center>
<strong>最大权闭合子图权值=所有权值为正的权值总和-最大流</strong>
</center>
<p>证明不会......</p>
<p>如何得到这样的一个图呢？</p>
<ol type="1">
<li>抽象出一个超级源点和一个超级汇点</li>
<li>将权值为正的点与源点连边，容量分别为各点点权</li>
<li>将权值为负的点与汇点连边，容量分别为各点点权的绝对值</li>
<li>权值为0的点不做处理</li>
<li>将除了源点和汇点之外的边按照题目中的关系连边，容量为INF</li>
</ol>
<h4 id="代码-1">代码</h4>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-8" title="8"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-9" title="9"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-10" title="10"><span class="dt">int</span> head[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb3-11" title="11"><span class="dt">int</span> dep[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb3-12" title="12"><span class="dt">int</span> cur[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb3-13" title="13"><span class="dt">int</span> cnt;</a>
<a class="sourceLine" id="cb3-14" title="14"><span class="kw">struct</span> edge{</a>
<a class="sourceLine" id="cb3-15" title="15">    <span class="dt">int</span> to;<span class="dt">int</span> next;</a>
<a class="sourceLine" id="cb3-16" title="16">    <span class="dt">int</span> wei;</a>
<a class="sourceLine" id="cb3-17" title="17">};</a>
<a class="sourceLine" id="cb3-18" title="18">edge es[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb3-19" title="19"><span class="kw">inline</span> <span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb3-20" title="20">{</a>
<a class="sourceLine" id="cb3-21" title="21">    cnt=<span class="dv">0</span>;mst(head,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-22" title="22">    mst(dep,-<span class="dv">1</span>);mst(cur,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-23" title="23">}</a>
<a class="sourceLine" id="cb3-24" title="24"><span class="dt">void</span> add(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> wei)</a>
<a class="sourceLine" id="cb3-25" title="25">{</a>
<a class="sourceLine" id="cb3-26" title="26">    es[cnt].to=v;</a>
<a class="sourceLine" id="cb3-27" title="27">    es[cnt].wei=wei;</a>
<a class="sourceLine" id="cb3-28" title="28">    es[cnt].next=head[u];</a>
<a class="sourceLine" id="cb3-29" title="29">    head[u]=cnt++;</a>
<a class="sourceLine" id="cb3-30" title="30">}</a>
<a class="sourceLine" id="cb3-31" title="31"><span class="dt">void</span> add_edge(<span class="dt">int</span> u,<span class="dt">int</span> v,<span class="dt">int</span> wei)</a>
<a class="sourceLine" id="cb3-32" title="32">{</a>
<a class="sourceLine" id="cb3-33" title="33">    add(u,v,wei);</a>
<a class="sourceLine" id="cb3-34" title="34">    add(v,u,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb3-35" title="35">}</a>
<a class="sourceLine" id="cb3-36" title="36"><span class="dt">bool</span> bfs(<span class="dt">int</span> s,<span class="dt">int</span> t)</a>
<a class="sourceLine" id="cb3-37" title="37">{</a>
<a class="sourceLine" id="cb3-38" title="38">    queue&lt;<span class="dt">int</span>&gt; que;</a>
<a class="sourceLine" id="cb3-39" title="39">    mst(dep,-<span class="dv">1</span>);dep[s]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-40" title="40">    que.push(s);</a>
<a class="sourceLine" id="cb3-41" title="41">    <span class="cf">while</span>(!que.empty()){</a>
<a class="sourceLine" id="cb3-42" title="42">        <span class="dt">int</span> u=que.front();</a>
<a class="sourceLine" id="cb3-43" title="43">        que.pop();</a>
<a class="sourceLine" id="cb3-44" title="44">        <span class="cf">for</span>(<span class="dt">int</span> i=head[u];i!=-<span class="dv">1</span>;i=es[i].next){</a>
<a class="sourceLine" id="cb3-45" title="45">            <span class="cf">if</span>(es[i].wei&gt;<span class="dv">0</span>&amp;&amp;dep[es[i].to]==-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb3-46" title="46">                dep[es[i].to]=dep[u]+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-47" title="47">                que.push(es[i].to);</a>
<a class="sourceLine" id="cb3-48" title="48">            }</a>
<a class="sourceLine" id="cb3-49" title="49">        }</a>
<a class="sourceLine" id="cb3-50" title="50">    }</a>
<a class="sourceLine" id="cb3-51" title="51">    <span class="cf">return</span> dep[t]!=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-52" title="52">}</a>
<a class="sourceLine" id="cb3-53" title="53"><span class="dt">int</span> dfs(<span class="dt">int</span> s,<span class="dt">int</span> t,<span class="dt">int</span> mini)</a>
<a class="sourceLine" id="cb3-54" title="54">{</a>
<a class="sourceLine" id="cb3-55" title="55">    <span class="cf">if</span>(s==t) <span class="cf">return</span> mini;</a>
<a class="sourceLine" id="cb3-56" title="56">    <span class="cf">for</span>(<span class="dt">int</span> &amp;i=cur[s];i!=-<span class="dv">1</span>;i=es[i].next){</a>
<a class="sourceLine" id="cb3-57" title="57">        <span class="cf">if</span>(es[i].wei&gt;<span class="dv">0</span>&amp;&amp;dep[es[i].to]==dep[s]+<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb3-58" title="58">            <span class="dt">int</span> d=dfs(es[i].to,t,min(es[i].wei,mini));</a>
<a class="sourceLine" id="cb3-59" title="59">            <span class="cf">if</span>(d&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb3-60" title="60">                es[i].wei-=d;</a>
<a class="sourceLine" id="cb3-61" title="61">                es[i^<span class="dv">1</span>].wei+=d;</a>
<a class="sourceLine" id="cb3-62" title="62">                <span class="cf">return</span> d;</a>
<a class="sourceLine" id="cb3-63" title="63">            }</a>
<a class="sourceLine" id="cb3-64" title="64">        }</a>
<a class="sourceLine" id="cb3-65" title="65">    }</a>
<a class="sourceLine" id="cb3-66" title="66">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-67" title="67">}</a>
<a class="sourceLine" id="cb3-68" title="68"><span class="dt">int</span> Dinic(<span class="dt">int</span> s,<span class="dt">int</span> t,<span class="dt">int</span> n)</a>
<a class="sourceLine" id="cb3-69" title="69">{</a>
<a class="sourceLine" id="cb3-70" title="70">    <span class="dt">int</span> ans=<span class="dv">0</span>;<span class="dt">int</span> tmp;</a>
<a class="sourceLine" id="cb3-71" title="71">    <span class="cf">while</span>(bfs(s,t)){</a>
<a class="sourceLine" id="cb3-72" title="72">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;=n;i++) cur[i]=head[i];</a>
<a class="sourceLine" id="cb3-73" title="73">        <span class="cf">while</span>((tmp=dfs(s,t,INF))&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb3-74" title="74">            ans+=tmp;</a>
<a class="sourceLine" id="cb3-75" title="75">        }</a>
<a class="sourceLine" id="cb3-76" title="76">    }</a>
<a class="sourceLine" id="cb3-77" title="77">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb3-78" title="78">}</a>
<a class="sourceLine" id="cb3-79" title="79"><span class="dt">int</span> a[maxn&lt;&lt;<span class="dv">1</span>],b[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb3-80" title="80"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-81" title="81">{</a>
<a class="sourceLine" id="cb3-82" title="82">    init();</a>
<a class="sourceLine" id="cb3-83" title="83">    <span class="dt">int</span> n,m;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m);</a>
<a class="sourceLine" id="cb3-84" title="84">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++)</a>
<a class="sourceLine" id="cb3-85" title="85">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;b[i]);        <span class="co">//学生 </span></a>
<a class="sourceLine" id="cb3-86" title="86">    <span class="dt">int</span> sum=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-87" title="87">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){        <span class="co">//活动 </span></a>
<a class="sourceLine" id="cb3-88" title="88">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;a[i]);</a>
<a class="sourceLine" id="cb3-89" title="89">        sum+=a[i];</a>
<a class="sourceLine" id="cb3-90" title="90">        <span class="dt">int</span> k;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;k);</a>
<a class="sourceLine" id="cb3-91" title="91">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=k;j++){</a>
<a class="sourceLine" id="cb3-92" title="92">            <span class="dt">int</span> v;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;v);</a>
<a class="sourceLine" id="cb3-93" title="93">            add_edge(i,v+n,INF);</a>
<a class="sourceLine" id="cb3-94" title="94">        }</a>
<a class="sourceLine" id="cb3-95" title="95">    }</a>
<a class="sourceLine" id="cb3-96" title="96">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++) add_edge(<span class="dv">0</span>,i,a[i]);</a>
<a class="sourceLine" id="cb3-97" title="97">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=m;i++) add_edge(i+n,n+m+<span class="dv">1</span>,b[i]);</a>
<a class="sourceLine" id="cb3-98" title="98">    <span class="dt">int</span> ans=Dinic(<span class="dv">0</span>,n+m+<span class="dv">1</span>,n+m+<span class="dv">3</span>);</a>
<a class="sourceLine" id="cb3-99" title="99">    ans=sum-ans;</a>
<a class="sourceLine" id="cb3-100" title="100">    printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb3-101" title="101">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-102" title="102">}</a></code></pre></div>
<h4 id="测一下板子">测一下板子</h4>
<p><a href="https://vjudge.net/problem/HihoCoder-1398">网络流五·最大权闭合子图</a></p>
<h3 id="参考博文">参考博文</h3>
<ul>
<li><a href="https://www.cnblogs.com/songorz/p/9642840.html">最大权闭合子图</a></li>
<li><a href="https://blog.csdn.net/qq_41357771/article/details/79416899">网络流【最大流&amp;&amp;最小割&amp;&amp;费用流】——一篇简单易懂的博文</a></li>
<li><a href="https://www.cnblogs.com/linzhengmin/p/9313216.html">[算法]网络最大流Dinic 前言</a></li>
</ul>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>网络流</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>网络流</tag>
        <tag>最大流</tag>
        <tag>最大流最小割</tag>
        <tag>最大权闭合子图</tag>
      </tags>
  </entry>
  <entry>
    <title>欧拉路、欧拉回路与Fleury算法</title>
    <url>/2019/02/27/%E6%AC%A7%E6%8B%89%E8%B7%AF%E3%80%81%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF%E4%B8%8EFleury%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h4 id="一概念解释">一、概念解释</h4>
<ul>
<li><p>欧拉路：给定无孤立结点图G，若存在一条路，经过图中每边一次且仅一次，该条路称为欧拉路。</p></li>
<li><p>欧拉路的存在条件：没有孤立结点，同时奇数度数的点只有2个或0个。</p></li>
<li><p>欧拉回路：若一个连通图中没有奇数度数的点，则该图中一定存在一条起点与终点重合的欧拉路，称为欧拉回路。</p></li>
</ul>
<p>  通俗地讲，欧拉路就是一笔画游戏，每条边只能走一次，问怎么画才能把所有边都画出来。欧拉回路就是在此基础上，不仅要把所有边都画出来，还要求起点和终点要是同一个地方。</p>
<h4 id="二判断欧拉路是否存在">二、判断欧拉路是否存在</h4>
<p>  要判断欧拉路是否存在，只需要判断奇数度数的个数即可。一般使用并查集来实现。代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="co">//判断欧拉路是否存在</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">int</span> pre[maxn];</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">int</span> deg[maxn];</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="dt">bool</span> root[maxn];</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="dt">void</span> init()</a>
<a class="sourceLine" id="cb1-18" title="18">{</a>
<a class="sourceLine" id="cb1-19" title="19">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=<span class="dv">10000</span>;i++)</a>
<a class="sourceLine" id="cb1-20" title="20">        pre[i]=i;</a>
<a class="sourceLine" id="cb1-21" title="21">}</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> findr(<span class="dt">int</span> x)</a>
<a class="sourceLine" id="cb1-23" title="23">{</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="cf">if</span>(pre[x]==x)</a>
<a class="sourceLine" id="cb1-25" title="25">        <span class="cf">return</span> x;</a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="cf">return</span> pre[x]=findr(pre[x]);;</a>
<a class="sourceLine" id="cb1-27" title="27">}</a>
<a class="sourceLine" id="cb1-28" title="28"><span class="dt">void</span> mix(<span class="dt">int</span> x,<span class="dt">int</span> y)</a>
<a class="sourceLine" id="cb1-29" title="29">{</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="dt">int</span> fx=findr(x);</a>
<a class="sourceLine" id="cb1-31" title="31">    <span class="dt">int</span> fy=findr(y);</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="cf">if</span>(fx!=fy)</a>
<a class="sourceLine" id="cb1-33" title="33">        pre[fy]=fx;</a>
<a class="sourceLine" id="cb1-34" title="34">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-35" title="35">}</a>
<a class="sourceLine" id="cb1-36" title="36"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-37" title="37">{    </a>
<a class="sourceLine" id="cb1-38" title="38">    init();</a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-40" title="40">    cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb1-41" title="41">    mst(deg,<span class="dv">0</span>);mst(root,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-42" title="42">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++)</a>
<a class="sourceLine" id="cb1-43" title="43">    {</a>
<a class="sourceLine" id="cb1-44" title="44">        <span class="dt">int</span> a,b;</a>
<a class="sourceLine" id="cb1-45" title="45">        cin&gt;&gt;a&gt;&gt;b;</a>
<a class="sourceLine" id="cb1-46" title="46">        mix(a,b);</a>
<a class="sourceLine" id="cb1-47" title="47">        deg[a]++;deg[b]++;</a>
<a class="sourceLine" id="cb1-48" title="48">    }</a>
<a class="sourceLine" id="cb1-49" title="49">    <span class="dt">int</span> d=<span class="dv">0</span>;<span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-50" title="50">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-51" title="51">        <span class="cf">if</span>(deg[i]&amp;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-52" title="52">            d++;        <span class="co">//奇数度数节点计数</span></a>
<a class="sourceLine" id="cb1-53" title="53">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-54" title="54">        root[findr(i)]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-55" title="55">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb1-56" title="56">        <span class="cf">if</span>(root[i])        <span class="co">//判断是否有孤立节点</span></a>
<a class="sourceLine" id="cb1-57" title="57">            cnt++;</a>
<a class="sourceLine" id="cb1-58" title="58">    <span class="cf">if</span>(cnt==<span class="dv">1</span>&amp;&amp;(d==<span class="dv">0</span>||d==<span class="dv">2</span>))</a>
<a class="sourceLine" id="cb1-59" title="59">        cout&lt;&lt;<span class="st">"OK"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-60" title="60">    <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-61" title="61">        cout&lt;&lt;<span class="st">"NO"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-62" title="62">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-63" title="63">}</a></code></pre></div>
<h4 id="三fleury算法求欧拉回路">三、Fleury算法求欧拉回路</h4>
<p>  要求欧拉回路，一般使用Fleury算法。这个算法的过程可以这样描述：</p>
<pre><code>1、在原图中找一个任意路径L1(不需要是欧拉路)，并按照L1的顺序将L1上的点压入一个栈中

2、从L1的终点往回回溯，依次将每个点出栈。并检查当前点是否还有其他没有经过的边。若存在则以当前点为起点，查找L2，并对L2的节点同样用栈记录重复该算法。

3、当L1中的点全部出栈后，算法结束。</code></pre>
<p>(参考<a href="https://cn.vjudge.net/problem/HihoCoder-1181">欧拉路·二</a>)</p>
<p>具体代码实现如下：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-11" title="11"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-12" title="12"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-13" title="13"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-14" title="14"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-15" title="15"><span class="dt">int</span> gra[<span class="dv">1005</span>][<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb3-16" title="16"><span class="dt">int</span> deg[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb3-17" title="17"><span class="dt">int</span> path[maxn];</a>
<a class="sourceLine" id="cb3-18" title="18">vector&lt;<span class="dt">int</span>&gt; g[<span class="dv">1005</span>];</a>
<a class="sourceLine" id="cb3-19" title="19"><span class="dt">int</span> size;</a>
<a class="sourceLine" id="cb3-20" title="20"><span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="dt">void</span> dfs(<span class="dt">int</span> u)</a>
<a class="sourceLine" id="cb3-22" title="22">{        </a>
<a class="sourceLine" id="cb3-23" title="23">    <span class="dt">bool</span> flag=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-24" title="24">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;g[u].size();i++)</a>
<a class="sourceLine" id="cb3-25" title="25">    {    </a>
<a class="sourceLine" id="cb3-26" title="26">        <span class="dt">int</span> x=g[u][i];</a>
<a class="sourceLine" id="cb3-27" title="27">        <span class="cf">if</span>(gra[u][x]){</a>
<a class="sourceLine" id="cb3-28" title="28">            gra[u][x]--;</a>
<a class="sourceLine" id="cb3-29" title="29">            gra[x][u]--;</a>
<a class="sourceLine" id="cb3-30" title="30">            dfs(x);</a>
<a class="sourceLine" id="cb3-31" title="31">        }</a>
<a class="sourceLine" id="cb3-32" title="32">    }</a>
<a class="sourceLine" id="cb3-33" title="33">    path[size++]=u;</a>
<a class="sourceLine" id="cb3-34" title="34">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb3-35" title="35">}</a>
<a class="sourceLine" id="cb3-36" title="36"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-37" title="37">{    </a>
<a class="sourceLine" id="cb3-38" title="38">    mst(path,<span class="dv">0</span>);size=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-39" title="39">    mst(gra,<span class="dv">0</span>);mst(deg,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb3-40" title="40">    <span class="dt">int</span> m;</a>
<a class="sourceLine" id="cb3-41" title="41">    cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb3-42" title="42">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++)</a>
<a class="sourceLine" id="cb3-43" title="43">    {</a>
<a class="sourceLine" id="cb3-44" title="44">        <span class="dt">int</span> u,v;</a>
<a class="sourceLine" id="cb3-45" title="45">        cin&gt;&gt;u&gt;&gt;v;</a>
<a class="sourceLine" id="cb3-46" title="46">        gra[u][v]++;gra[v][u]++;</a>
<a class="sourceLine" id="cb3-47" title="47">        deg[u]++;deg[v]++;</a>
<a class="sourceLine" id="cb3-48" title="48">        g[u].push_back(v);g[v].push_back(u);</a>
<a class="sourceLine" id="cb3-49" title="49">    }</a>
<a class="sourceLine" id="cb3-50" title="50">    <span class="dt">int</span> d=<span class="dv">0</span>;<span class="dt">int</span> st=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb3-51" title="51">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb3-52" title="52">        <span class="cf">if</span>(deg[i]&amp;<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb3-53" title="53">            d++;</a>
<a class="sourceLine" id="cb3-54" title="54">            st=i;</a>
<a class="sourceLine" id="cb3-55" title="55">        }</a>
<a class="sourceLine" id="cb3-56" title="56">    dfs(st);</a>
<a class="sourceLine" id="cb3-57" title="57">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;size;i++)</a>
<a class="sourceLine" id="cb3-58" title="58">    {</a>
<a class="sourceLine" id="cb3-59" title="59">        <span class="cf">if</span>(i==<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb3-60" title="60">            cout&lt;&lt;path[i];</a>
<a class="sourceLine" id="cb3-61" title="61">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb3-62" title="62">            cout&lt;&lt;<span class="st">" "</span>&lt;&lt;path[i];</a>
<a class="sourceLine" id="cb3-63" title="63">    }</a>
<a class="sourceLine" id="cb3-64" title="64">    cout&lt;&lt;<span class="ch">'</span><span class="sc">\n</span><span class="ch">'</span>;</a>
<a class="sourceLine" id="cb3-65" title="65">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-66" title="66">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>图论</category>
        <category>欧拉路与欧拉回路</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>图论</tag>
        <tag>欧拉路与欧拉回路</tag>
        <tag>Fleury</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P1417 烹调方案</title>
    <url>/2019/02/19/%E6%B4%9B%E8%B0%B7P1417-%E7%83%B9%E8%B0%83%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1417">P1417 烹调方案</a></p>
<p>  依然是01背包。这道题跟之前HDU的那道merchant很像，都是要先算一个不等式，再根据这个不等式进行排序，然后再进行01背包。具体而言，是要解下面这个不等式：</p>
<p> a1 - (t0 + c1) x b1 + a2 - (t0 + c1 + c2) x b2 &gt; a2 - (t0 + c2) x b2 +a1 - (t0 + c1 + c2) x b1</p>
<p>==&gt;   b2 c1 &lt; b1 c2</p>
<p>具体代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset(a,b,<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">struct</span> food{</a>
<a class="sourceLine" id="cb1-10" title="10">    ll a,b,c;</a>
<a class="sourceLine" id="cb1-11" title="11">};</a>
<a class="sourceLine" id="cb1-12" title="12">food arr[<span class="dv">55</span>];</a>
<a class="sourceLine" id="cb1-13" title="13">ll dp[maxn];</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">bool</span> cmp(food fa,food fb)</a>
<a class="sourceLine" id="cb1-15" title="15">{</a>
<a class="sourceLine" id="cb1-16" title="16">    <span class="cf">return</span> (fb.b)*(fa.c)&lt;(fa.b)*(fb.c);</a>
<a class="sourceLine" id="cb1-17" title="17">}</a>
<a class="sourceLine" id="cb1-18" title="18"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-19" title="19">{</a>
<a class="sourceLine" id="cb1-20" title="20">    ll t,n;</a>
<a class="sourceLine" id="cb1-21" title="21">    mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-22" title="22">    cin&gt;&gt;t&gt;&gt;n;</a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="cf">for</span>(ll i=<span class="dv">0</span>;i&lt;n;i++)        cin&gt;&gt;arr[i].a;</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="cf">for</span>(ll i=<span class="dv">0</span>;i&lt;n;i++)        cin&gt;&gt;arr[i].b;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="cf">for</span>(ll i=<span class="dv">0</span>;i&lt;n;i++)        cin&gt;&gt;arr[i].c;</a>
<a class="sourceLine" id="cb1-26" title="26">    sort(arr,arr+n,cmp);</a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="cf">for</span>(ll i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb1-28" title="28">        <span class="cf">for</span>(ll j=t;j&gt;=arr[i].c;j--){</a>
<a class="sourceLine" id="cb1-29" title="29">            ll val=(arr[i].a)-(arr[i].b)*j;</a>
<a class="sourceLine" id="cb1-30" title="30">            dp[j]=max(dp[j],dp[j-arr[i].c]+val);</a>
<a class="sourceLine" id="cb1-31" title="31">        }</a>
<a class="sourceLine" id="cb1-32" title="32">    }</a>
<a class="sourceLine" id="cb1-33" title="33">    ll ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">    <span class="cf">for</span>(ll j=<span class="dv">0</span>;j&lt;=t;j++)</a>
<a class="sourceLine" id="cb1-35" title="35">        ans=max(ans,dp[j]);</a>
<a class="sourceLine" id="cb1-36" title="36"><span class="co">//    ans=dp[t];</span></a>
<a class="sourceLine" id="cb1-37" title="37">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-38" title="38">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-39" title="39"> } </a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P1855 榨取kkksc03</title>
    <url>/2019/02/19/%E6%B4%9B%E8%B0%B7P1855-%E6%A6%A8%E5%8F%96kkksc03/</url>
    <content><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P1855">P1855 榨取kkksc03</a></p>
<p>  一道01背包模板题，但多了一个维度。</p>
<span id="more"></span>
<p>代码如下:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-5" title="5"><span class="dt">int</span> m[<span class="dv">205</span>],t[<span class="dv">205</span>];</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="dt">int</span> dp[<span class="dv">205</span>][<span class="dv">205</span>];</a>
<a class="sourceLine" id="cb1-7" title="7"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-8" title="8">{</a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-13" title="13"><span class="dt">int</span> m[<span class="dv">205</span>],t[<span class="dv">205</span>];</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="dt">int</span> dp[<span class="dv">205</span>][<span class="dv">205</span>];</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-16" title="16">{</a>
<a class="sourceLine" id="cb1-17" title="17">    <span class="dt">int</span> n,M,T;</a>
<a class="sourceLine" id="cb1-18" title="18">    cin&gt;&gt;n&gt;&gt;M&gt;&gt;T;</a>
<a class="sourceLine" id="cb1-19" title="19">    memset(m,<span class="dv">0</span>,<span class="kw">sizeof</span>(m));</a>
<a class="sourceLine" id="cb1-20" title="20">    memset(t,<span class="dv">0</span>,<span class="kw">sizeof</span>(t));</a>
<a class="sourceLine" id="cb1-21" title="21">    memset(dp,<span class="dv">0</span>,<span class="kw">sizeof</span>(dp));</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb1-23" title="23">        cin&gt;&gt;m[i]&gt;&gt;t[i];</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="dt">int</span> ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="cf">for</span>(<span class="dt">int</span> k=<span class="dv">0</span>;k&lt;n;k++){</a>
<a class="sourceLine" id="cb1-26" title="26">        <span class="cf">for</span>(<span class="dt">int</span> i=M;i&gt;=m[k];i--){</a>
<a class="sourceLine" id="cb1-27" title="27">            <span class="cf">for</span>(<span class="dt">int</span> j=T;j&gt;=t[k];j--){</a>
<a class="sourceLine" id="cb1-28" title="28">                dp[i][j]=max(dp[i][j],dp[i-m[k]][j-t[k]]+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-29" title="29">            }</a>
<a class="sourceLine" id="cb1-30" title="30">        }</a>
<a class="sourceLine" id="cb1-31" title="31">    }</a>
<a class="sourceLine" id="cb1-32" title="32">    cout&lt;&lt;dp[M][T]&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-33" title="33">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-34" title="34">}</a>
<a class="sourceLine" id="cb1-35" title="35">}</a></code></pre></div>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>01背包</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title>状压dp总结(更新中)</title>
    <url>/2019/07/22/%E7%8A%B6%E5%8E%8Bdp%E6%80%BB%E7%BB%93-%E6%9B%B4%E6%96%B0%E4%B8%AD/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/HTB1pqI0aW61gK0jSZFlq6xDKFXaA.jpg"> <span id="more"></span></p>
<p>所谓的状压dp指的是状态压缩dp。具体来说就是借助二进制数来对保存状态时的空间复杂度进行优化。举个简单的例子，对于一个n行m列的棋盘，如果用1表示有棋子放置，用0表示没有棋子放置，则我们可以用n个m位的二进制数来表示当前棋盘的整体状态。与常规的使用数组保存状态相比，对于一个n行m列的棋盘，至少需要一个n × m的int型数组来进行保存，也就是n × m × 32 byte。而使用二进制数表示则只需要n × 32 byte（一般而言）。由此可见，空间复杂度得到了很大的优化。而在状压dp中，我们可以使用各种位运算来操作二进制数，这使得时间复杂度也很优良。</p>
<p>首先上一道题目感受一下吧。</p>
<p><a href="https://www.luogu.org/problemnew/show/P1879">P1879 Corn Fields</a></p>
<p>题目大意是说，有一块m行n列的牧场，每一格都是一块正方形的土地。现在要在这些土地上种草，规则是只能在肥沃的土地上种草，且不能选择两块相邻的土地。问一共有多少种可行的种植方案。（完全不种草也是一种方案）</p>
<p>如果不使用状压dp而是直接暴力dfs的话，当n和m取到最大值时，很有可能跑几个小时都跑不出结果......</p>
<p>考虑使用状压dp。大致思路为，首先使用m个n位的二进制数保存土地的肥沃情况，然后预处理出所有不存在相邻列的行状态。dp[i][j]表示的是对于牧场的第i行，在状态j下一共有多少种放置方法。对于第i行，我们可以由第k-1行转移过来。状态转移方程为: <span class="math display">\[
dp[i][j]=(dp[i][j]+dp[i-1][k])\ mod\ p\\
p = 100000000, 0\lt j\lt (1&lt;&lt;n),0\lt k\lt (1&lt;&lt;n)
\]</span> 在最后计算答案的时候，根据dp[][]的定义，我们只需要讲dp[n][]里面的内容全部加起来，然后取个模就是题目要求的答案。</p>
<p>代码如下:</p>
<p>（由于个人习惯，代码中是n行m列，而非题目所述的m行n列）</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-20" title="20"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">20005</span>;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-25" title="25"><span class="dt">int</span> <span class="va">map_</span>[<span class="dv">15</span>];</a>
<a class="sourceLine" id="cb1-26" title="26"><span class="dt">int</span> arr[<span class="dv">1</span>&lt;&lt;<span class="dv">12</span>+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb1-27" title="27"><span class="dt">int</span> dp[<span class="dv">15</span>][<span class="dv">1</span>&lt;&lt;<span class="dv">12</span>+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb1-28" title="28"><span class="dt">int</span> mod=<span class="dv">100000000</span>;</a>
<a class="sourceLine" id="cb1-29" title="29"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-30" title="30">{</a>
<a class="sourceLine" id="cb1-31" title="31">    IOS;</a>
<a class="sourceLine" id="cb1-32" title="32">    <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb1-33" title="33">    cin&gt;&gt;n&gt;&gt;m;      <span class="co">//n行m列 </span></a>
<a class="sourceLine" id="cb1-34" title="34">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-35" title="35">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">1</span>;j&lt;=m;j++){</a>
<a class="sourceLine" id="cb1-36" title="36">            <span class="dt">int</span> tmp;cin&gt;&gt;tmp;</a>
<a class="sourceLine" id="cb1-37" title="37">            <span class="va">map_</span>[i]=(<span class="va">map_</span>[i]&lt;&lt;<span class="dv">1</span>)+tmp;   <span class="co">//用二进制数保存</span></a>
<a class="sourceLine" id="cb1-38" title="38">        }</a>
<a class="sourceLine" id="cb1-39" title="39">    }</a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;(<span class="dv">1</span>&lt;&lt;m);i++){</a>
<a class="sourceLine" id="cb1-41" title="41">        arr[i]=((i&amp;(i&lt;&lt;<span class="dv">1</span>))==<span class="dv">0</span>)&amp;&amp;((i&amp;(i&gt;&gt;<span class="dv">1</span>))==<span class="dv">0</span>); <span class="co">//检查该状态是否有相邻列</span></a>
<a class="sourceLine" id="cb1-42" title="42">    }</a>
<a class="sourceLine" id="cb1-43" title="43">    mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-44" title="44">    dp[<span class="dv">0</span>][<span class="dv">0</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb1-45" title="45">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb1-46" title="46">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;(<span class="dv">1</span>&lt;&lt;m);j++){</a>
<a class="sourceLine" id="cb1-47" title="47">            <span class="cf">if</span>(arr[j]&amp;&amp;((j&amp;<span class="va">map_</span>[i])==j)){    <span class="co">//当前状态没有相邻列，且都是在肥沃土地上种草</span></a>
<a class="sourceLine" id="cb1-48" title="48">                <span class="cf">for</span>(<span class="dt">int</span> k=<span class="dv">0</span>;k&lt;(<span class="dv">1</span>&lt;&lt;m);k++){    <span class="co">//枚举上一行的状态</span></a>
<a class="sourceLine" id="cb1-49" title="49">                    <span class="cf">if</span>((k&amp;j)==<span class="dv">0</span>)        <span class="co">//同一列上没有相邻</span></a>
<a class="sourceLine" id="cb1-50" title="50">                        dp[i][j]=(dp[i][j]+dp[i-<span class="dv">1</span>][k])%mod; <span class="co">//当前行的状态由上一行转移而来</span></a>
<a class="sourceLine" id="cb1-51" title="51">                }</a>
<a class="sourceLine" id="cb1-52" title="52">            }</a>
<a class="sourceLine" id="cb1-53" title="53">        }</a>
<a class="sourceLine" id="cb1-54" title="54">    }</a>
<a class="sourceLine" id="cb1-55" title="55">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-56" title="56">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;(<span class="dv">1</span>&lt;&lt;m);i++)</a>
<a class="sourceLine" id="cb1-57" title="57">        ans=(ans+dp[n][i])%mod;</a>
<a class="sourceLine" id="cb1-58" title="58">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb1-59" title="59">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-60" title="60">}</a></code></pre></div>
<p>通过这道题目，有没有一种感觉，状压dp其实是一种高效的暴力，也就是说，其本质还是暴力？确实如此，状压dp其实可以说是经过了很好的优化的暴力(至少目前我是这么认为的OTZ)。抓住这一点，有利于我们建立状压dp的思考方法。</p>
<p>再看一道题</p>
<p><a href="https://www.luogu.org/problemnew/show/P1896">P1896 互不侵犯</a></p>
<p>题目大意是说，在一个n × n的棋盘中放k个国王，使他们互不攻击，问有多少种摆放的方案。国王可以攻击到它的上下左右，以及左上左下右上右下八个方向。</p>
<p>这道题与上一道题有点像，但多了个k个国王的约束条件。大致思路为：首先预处理出所有不存在列相邻情况的行状态，也就是那些无法让国王横向攻击的行状态。通过上一行的状态，可以转移得到当前行的状态。状态转移方程为： <span class="math display">\[
dp[i][j][kings[i]+cnt]+=dp[i-1][p][cnt]\
\]</span> 该方程的第一维表示的是当前所处行的行号，第二维表示的是状态j，第三维表示的是在这一行以及这一行上面的行中一个放置了的国王的个数(kings[i]表示的是状态j的国王个数，也就是有多少个1)。</p>
<p>具体代码如下:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb2-19" title="19"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-20" title="20"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">20005</span>;</a>
<a class="sourceLine" id="cb2-22" title="22"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-23" title="23"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-24" title="24"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-25" title="25">ll ok[<span class="dv">1</span>&lt;&lt;<span class="dv">9</span>+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb2-26" title="26">ll kings[<span class="dv">1</span>&lt;&lt;<span class="dv">9</span>+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb2-27" title="27">ll dp[<span class="dv">10</span>][<span class="dv">1</span>&lt;&lt;<span class="dv">9</span>+<span class="dv">2</span>][<span class="dv">100</span>];</a>
<a class="sourceLine" id="cb2-28" title="28"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-29" title="29">{</a>
<a class="sourceLine" id="cb2-30" title="30">    IOS;</a>
<a class="sourceLine" id="cb2-31" title="31">    <span class="dt">int</span> n,k;</a>
<a class="sourceLine" id="cb2-32" title="32">    cin&gt;&gt;n&gt;&gt;k;</a>
<a class="sourceLine" id="cb2-33" title="33">    mst(ok,<span class="dv">0</span>);mst(kings,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-34" title="34">    mst(dp,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb2-35" title="35">    <span class="dt">int</span> maxi_state=(<span class="dv">1</span>&lt;&lt;n);</a>
<a class="sourceLine" id="cb2-36" title="36">    <span class="dt">int</span> idx=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-37" title="37">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;maxi_state;i++){        <span class="co">//预处理所有不存在列相邻情况的行状态</span></a>
<a class="sourceLine" id="cb2-38" title="38">        <span class="cf">if</span>((i&amp;(i&lt;&lt;<span class="dv">1</span>))==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb2-39" title="39">            ok[idx++]=i;</a>
<a class="sourceLine" id="cb2-40" title="40">        }</a>
<a class="sourceLine" id="cb2-41" title="41">    }</a>
<a class="sourceLine" id="cb2-42" title="42">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;idx;i++){        <span class="co">//数一下状态i有多少个国王，也就是有多少个1</span></a>
<a class="sourceLine" id="cb2-43" title="43">        <span class="dt">int</span> tmp=ok[i];</a>
<a class="sourceLine" id="cb2-44" title="44">        <span class="cf">while</span>(tmp){</a>
<a class="sourceLine" id="cb2-45" title="45">            kings[i]+=(tmp&amp;<span class="dv">1</span>);    <span class="co">//等价于kings[i]+=tmp%2;</span></a>
<a class="sourceLine" id="cb2-46" title="46">            tmp&gt;&gt;=<span class="dv">1</span>;            <span class="co">//等价于tmp/=2;</span></a>
<a class="sourceLine" id="cb2-47" title="47">        }</a>
<a class="sourceLine" id="cb2-48" title="48">    }</a>
<a class="sourceLine" id="cb2-49" title="49">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;idx;i++){</a>
<a class="sourceLine" id="cb2-50" title="50">        <span class="cf">if</span>(kings[i]&lt;=k)        <span class="co">//如果第一行的国王个数不大于k</span></a>
<a class="sourceLine" id="cb2-51" title="51">            dp[<span class="dv">1</span>][i][kings[i]]=<span class="dv">1</span>;    <span class="co">//先处理第一行，以便根据第一行推出第二行</span></a>
<a class="sourceLine" id="cb2-52" title="52">    }</a>
<a class="sourceLine" id="cb2-53" title="53">    <span class="cf">for</span>(<span class="dt">int</span> row=<span class="dv">2</span>;row&lt;=n;row++){    <span class="co">//处理每一行</span></a>
<a class="sourceLine" id="cb2-54" title="54">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;idx;i++){     <span class="co">//枚举当前行的状态</span></a>
<a class="sourceLine" id="cb2-55" title="55">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;idx;j++){     <span class="co">//枚举上一行的状态</span></a>
<a class="sourceLine" id="cb2-56" title="56">                <span class="cf">if</span>(ok[i]&amp;ok[j])        <span class="co">//如果行相邻</span></a>
<a class="sourceLine" id="cb2-57" title="57">                    <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb2-58" title="58">                <span class="cf">if</span>((ok[j]&lt;&lt;<span class="dv">1</span>)&amp;(ok[i]))    <span class="co">//如果对角线上有国王</span></a>
<a class="sourceLine" id="cb2-59" title="59">                    <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb2-60" title="60">                <span class="cf">if</span>((ok[j]&gt;&gt;<span class="dv">1</span>)&amp;(ok[i]))    <span class="co">//同上</span></a>
<a class="sourceLine" id="cb2-61" title="61">                    <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb2-62" title="62">                <span class="cf">for</span>(<span class="dt">int</span> cnt=<span class="dv">1</span>;cnt&lt;=k;cnt++){</a>
<a class="sourceLine" id="cb2-63" title="63">                    <span class="cf">if</span>(kings[i]+cnt&lt;=k){        <span class="co">//国王数不能超过k</span></a>
<a class="sourceLine" id="cb2-64" title="64">                        dp[row][i][kings[i]+cnt]+=dp[row-<span class="dv">1</span>][j][cnt];</a>
<a class="sourceLine" id="cb2-65" title="65">                    }</a>
<a class="sourceLine" id="cb2-66" title="66">                }</a>
<a class="sourceLine" id="cb2-67" title="67">            }</a>
<a class="sourceLine" id="cb2-68" title="68">        }</a>
<a class="sourceLine" id="cb2-69" title="69">    }</a>
<a class="sourceLine" id="cb2-70" title="70">    ll ans=<span class="dv">0</span>;        <span class="co">//注意要用long long，否则会WA</span></a>
<a class="sourceLine" id="cb2-71" title="71">    <span class="co">//因为不知道到底是在哪一行用完k个国王，所以要把所有行上的方案数都加起来</span></a>
<a class="sourceLine" id="cb2-72" title="72">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb2-73" title="73">        <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;idx;j++)</a>
<a class="sourceLine" id="cb2-74" title="74">            ans+=dp[i][j][k];</a>
<a class="sourceLine" id="cb2-75" title="75">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb2-76" title="76">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-77" title="77">}</a></code></pre></div>
<p>最后再来一题</p>
<p><a href="https://cn.vjudge.net/problem/HDU-1074">Doing Homework</a></p>
<p>大致题意是说，现在要交作业了，一共有n项作业要做，每一项作业都对应一个ddl和完成所需要的时间，如果超过了ddl，则会得到一定的惩罚，每超过1天则惩罚加1分。问如何安排做作业的次序才能使得到的惩罚最少。</p>
<p>一开始看到这道题目时我没有想到要用状压，因为那时我还没学......我想到的是，这题感觉可以通过DAG来解决，但又似乎不是正解.....所以正确做法应该是，用二进制数表示某一科目是否已经完成，0表示未完成，1表示已完成。故011表示第1和第2项作业已经完成，而第3项则未完成。一个表示作业完成情况的二进制数是可以由其他二进制数转移而来的，如011就可以有001和010转移而来，而001和010都是由000转移而来。这就是这道题dp的基本思路。而对于这道题的输出，因为要输出做作业的次序，所以需要输出路径。这只需要记录下当前作业的前驱，输出时递归一下即可。具体见代码注释。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-17" title="17"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb3-18" title="18"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb3-19" title="19"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-20" title="20"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-22" title="22"><span class="kw">struct</span> hw{</a>
<a class="sourceLine" id="cb3-23" title="23">    string name;</a>
<a class="sourceLine" id="cb3-24" title="24">    <span class="dt">int</span> cost;</a>
<a class="sourceLine" id="cb3-25" title="25">    <span class="dt">int</span> ddl;</a>
<a class="sourceLine" id="cb3-26" title="26">};</a>
<a class="sourceLine" id="cb3-27" title="27">hw hws[<span class="dv">20</span>];</a>
<a class="sourceLine" id="cb3-28" title="28"><span class="dt">int</span> dp[(<span class="dv">1</span>&lt;&lt;<span class="dv">15</span>)+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb3-29" title="29"><span class="dt">int</span> pre[(<span class="dv">1</span>&lt;&lt;<span class="dv">15</span>)+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb3-30" title="30"><span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb3-31" title="31"><span class="dt">void</span> show(<span class="dt">int</span> state)</a>
<a class="sourceLine" id="cb3-32" title="32">{</a>
<a class="sourceLine" id="cb3-33" title="33">    <span class="cf">if</span>(state==<span class="dv">0</span>)    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb3-34" title="34">    <span class="dt">int</span> tt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-35" title="35">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb3-36" title="36">        <span class="cf">if</span>(((<span class="dv">1</span>&lt;&lt;i)&amp;state)&amp;&amp;(((<span class="dv">1</span>&lt;&lt;i)&amp;pre[state])==<span class="dv">0</span>)){        </a>
<a class="sourceLine" id="cb3-37" title="37">            <span class="co">//如果在状态state下，作业i已经完成，而state的前驱没有完成作业i，那就说明state相较于其</span></a>
<a class="sourceLine" id="cb3-38" title="38">            <span class="co">//前驱，多完成了作业i</span></a>
<a class="sourceLine" id="cb3-39" title="39">            tt=i;</a>
<a class="sourceLine" id="cb3-40" title="40">            <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb3-41" title="41">        }</a>
<a class="sourceLine" id="cb3-42" title="42">    }</a>
<a class="sourceLine" id="cb3-43" title="43">    show(pre[state]);</a>
<a class="sourceLine" id="cb3-44" title="44">    cout&lt;&lt;hws[tt].name&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-45" title="45">}</a>
<a class="sourceLine" id="cb3-46" title="46"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-47" title="47">{</a>
<a class="sourceLine" id="cb3-48" title="48">    IOS;</a>
<a class="sourceLine" id="cb3-49" title="49">    <span class="dt">int</span> t;cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb3-50" title="50">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb3-51" title="51">        mst(pre,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb3-52" title="52">        cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb3-53" title="53">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb3-54" title="54">            cin&gt;&gt;hws[i].name&gt;&gt;hws[i].ddl&gt;&gt;hws[i].cost;</a>
<a class="sourceLine" id="cb3-55" title="55">        <span class="dt">int</span> maxi_state=(<span class="dv">1</span>&lt;&lt;n);</a>
<a class="sourceLine" id="cb3-56" title="56">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;maxi_state;i++)</a>
<a class="sourceLine" id="cb3-57" title="57">            dp[i]=INF;        <span class="co">//因为是求最小值，所以初始化为INF</span></a>
<a class="sourceLine" id="cb3-58" title="58">        dp[<span class="dv">0</span>]=<span class="dv">0</span>;        <span class="co">//所有作业都没做时，惩罚自然也是0</span></a>
<a class="sourceLine" id="cb3-59" title="59">        <span class="dt">int</span> kase=<span class="dv">0</span>;<span class="dt">int</span> t1=<span class="dv">0</span>;<span class="dt">int</span> t2=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-60" title="60">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;maxi_state;i++){        <span class="co">//枚举完成作业的情况</span></a>
<a class="sourceLine" id="cb3-61" title="61">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;n;j++){    <span class="co">//枚举作业</span></a>
<a class="sourceLine" id="cb3-62" title="62">                <span class="cf">if</span>(i&amp;(<span class="dv">1</span>&lt;&lt;j))        <span class="co">//如果当前作业已经完成了，就continue</span></a>
<a class="sourceLine" id="cb3-63" title="63">                    <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb3-64" title="64">                <span class="dt">int</span> tot=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-65" title="65">                <span class="cf">for</span>(<span class="dt">int</span> k=<span class="dv">0</span>;k&lt;n;k++){</a>
<a class="sourceLine" id="cb3-66" title="66">                    <span class="cf">if</span>(i&amp;(<span class="dv">1</span>&lt;&lt;k))</a>
<a class="sourceLine" id="cb3-67" title="67">                        tot+=hws[k].cost;        <span class="co">//将已经完成的作业所花费的时间加起来</span></a>
<a class="sourceLine" id="cb3-68" title="68">                }</a>
<a class="sourceLine" id="cb3-69" title="69">                tot+=hws[j].cost;        <span class="co">//再加上当前作业</span></a>
<a class="sourceLine" id="cb3-70" title="70">                <span class="dt">int</span> penalty=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-71" title="71">                <span class="cf">if</span>(tot&gt;hws[j].ddl)        <span class="co">//计算惩罚</span></a>
<a class="sourceLine" id="cb3-72" title="72">                    penalty=tot-hws[j].ddl;</a>
<a class="sourceLine" id="cb3-73" title="73">                <span class="cf">else</span></a>
<a class="sourceLine" id="cb3-74" title="74">                    penalty=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-75" title="75">                <span class="dt">int</span> tmp=dp[i|(<span class="dv">1</span>&lt;&lt;j)];</a>
<a class="sourceLine" id="cb3-76" title="76">                dp[i|(<span class="dv">1</span>&lt;&lt;j)]=min(dp[i|(<span class="dv">1</span>&lt;&lt;j)],dp[i]+penalty);</a>
<a class="sourceLine" id="cb3-77" title="77">                <span class="cf">if</span>(dp[i|(<span class="dv">1</span>&lt;&lt;j)]!=tmp)       <span class="co">//小于时才去记录</span></a>
<a class="sourceLine" id="cb3-78" title="78">                    pre[i|(<span class="dv">1</span>&lt;&lt;j)]=i;        <span class="co">//pre[]保存前驱状态</span></a>
<a class="sourceLine" id="cb3-79" title="79">            }</a>
<a class="sourceLine" id="cb3-80" title="80">        }</a>
<a class="sourceLine" id="cb3-81" title="81">        cout&lt;&lt;dp[(<span class="dv">1</span>&lt;&lt;n)-<span class="dv">1</span>]&lt;&lt;endl;</a>
<a class="sourceLine" id="cb3-82" title="82">        show((<span class="dv">1</span>&lt;&lt;n)-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-83" title="83">    }</a>
<a class="sourceLine" id="cb3-84" title="84">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-85" title="85">}</a></code></pre></div>
<p>所以，经过这三道题目，可以得出结论，状压dp其实本质就是暴力(大概)</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>DP</category>
        <category>状压DP</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>C</tag>
        <tag>C++</tag>
        <tag>DP</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title>用手势操控你的电脑——基于Opencv.js，Tensorflow，electron的手势人机交互</title>
    <url>/2020/07/04/%E7%94%A8%E6%89%8B%E5%8A%BF%E6%93%8D%E6%8E%A7%E4%BD%A0%E7%9A%84%E7%94%B5%E8%84%91%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8EOpencv-js%EF%BC%8CTensorflow%EF%BC%8Celectron%E7%9A%84%E6%89%8B%E5%8A%BF%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<p><img src="https://pic.downk.cc/item/5f00278014195aa594787856.png"> <span id="more"></span></p>
<h3 id="前言">前言</h3>
<p>昨晚看了以下许久没有访问的博客，发现最近一篇博客居然是今年3月份的一份AGC题解。还记得大一的时候，写博客的热情高涨，恨不得日更三篇；上了大二之后，一方面是各方面的压力变大了，另一方面是自己在这方面越来越懒，<del>于是出现了四个月没写过一篇文章的情况</del>。这学期上多媒体课程，期末大作业和刘总一起做了一个基于手势识别的人机交互小程序，就拿来<del>水一水</del>吧</p>
<h3 id="介绍">介绍</h3>
<p>看标题就知道，这是一个通过识别手势来完成一些电脑操作的东西。因为是一个桌面应用，同时为了界面好看（好看是第一生产力.jpg），我们选择了electron。首先是用python+Tensorflow训练一个CNN用于手势识别，并导出该模型为json格式；然后，我们在electron中使用opencv.js处理图像，并把上一步训练得到的json格式模型导入到Tensorflow.js中做手势识别；最后，借助robot.js来实现操控电脑。</p>
<p>放一下结构图</p>
<p><img src="https://pic.downk.cc/item/5f00239914195aa594769dc9.jpg"></p>
<p>之所以要分离出前端和服务端，是因为robot.js要塞进electron里面比较麻烦，尝试了好几次之后都没有成功，于是索性不把他放到electron里面。这样一来，避免了配置上的麻烦，而且结构更清晰，代码写起来也更方便。</p>
<p>目前仅支持在windows上使用，可以完成的操作有：</p>
<ul>
<li>切换窗口</li>
<li>隐藏窗口</li>
<li>静音/恢复音量</li>
<li>关闭当前窗口</li>
<li>上、下、左、右四个方向键</li>
</ul>
<h3 id="模型搭建">模型搭建</h3>
<p>这一步主要就是采集训练样本，然后使用Opencv处理图像，最后扔进Tensorflow里训练。</p>
<p>先说一下采集训练样本以及处理图像这两部分。通过Opencv调用摄像头，每0.1秒截取一次图像，然后用Opencv处理这一图像。所做的处理包括：</p>
<ul>
<li><p>获取ROI（感兴趣区域）</p>
<p>其实就是从原图像上截取一个指定区域。</p>
<center>
<img src="https://pic.downk.cc/item/5f00061014195aa5946a4677.png" style="zoom:50%;">
</center>
<center>
处理前
</center>
<center>
<img src="https://pic.downk.cc/item/5f00064814195aa5946a5c36.png" style="zoom: 67%;">
</center>
<center>
处理后
</center>
<p>代码如下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">def</span> getRoi(frame, x0, y0, width, height):</a>
<a class="sourceLine" id="cb1-2" title="2">  roi <span class="op">=</span> frame[y0:y0 <span class="op">+</span> height, x0:x0 <span class="op">+</span> width]</a>
<a class="sourceLine" id="cb1-3" title="3">  cv.imshow(<span class="st">'roi'</span>, roi)</a>
<a class="sourceLine" id="cb1-4" title="4">  <span class="cf">return</span> roi</a></code></pre></div></li>
<li><p>使用Otsu法（大津法）进行肤色检测</p>
<p>大致原理是通过遮罩的方法，计算按位与运算，从而过滤掉那些我们不关心的像素。代码如下：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">def</span> getSkin(frame):</a>
<a class="sourceLine" id="cb2-2" title="2">    ycrcb <span class="op">=</span> cv.cvtColor(frame, cv.COLOR_BGR2YCR_CB)</a>
<a class="sourceLine" id="cb2-3" title="3">    y, cr, cb <span class="op">=</span> cv.split(ycrcb)</a>
<a class="sourceLine" id="cb2-4" title="4">    cr_ <span class="op">=</span> cv.GaussianBlur(cr, (<span class="dv">5</span>, <span class="dv">5</span>), <span class="dv">0</span>) <span class="co"># 高斯模糊</span></a>
<a class="sourceLine" id="cb2-5" title="5">   _, skin <span class="op">=</span> cv.threshold(cr_, <span class="dv">0</span>, <span class="dv">255</span>, cv.THRESH_BINARY <span class="op">|</span> cv.THRESH_OTSU) <span class="co"># otsu二值化 </span></a>
<a class="sourceLine" id="cb2-6" title="6">    ret <span class="op">=</span> cv.bitwise_and(frame, frame, mask<span class="op">=</span>skin)</a>
<a class="sourceLine" id="cb2-7" title="7">    <span class="cf">return</span> ret</a></code></pre></div>
<center>
<img src="https://pic.downk.cc/item/5f00064814195aa5946a5c36.png" style="zoom:50%;">
</center>
<center>
处理前
</center>
<center>
<img src="https://pic.downk.cc/item/5f000a5c14195aa5946bfd10.png" style="zoom:50%;">
</center>
<center>
处理后
</center></li>
<li><p>提取轮廓并计算傅里叶算子</p>
<p>提取轮廓可以用opencv中的findContour。计算傅里叶算子可以理解为提取特征。</p>
<center>
<img src="https://pic.downk.cc/item/5f000a5c14195aa5946bfd10.png" style="zoom:50%;">
</center>
<center>
处理前
</center>
<center>
<img src="https://pic.downk.cc/item/5f000ad514195aa5946c30ba.png" style="zoom:50%;">
</center>
<center>
处理后
</center>
<p>代码如下：</p>
<p>提取轮廓</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">def</span> findContour(Laplacian):</a>
<a class="sourceLine" id="cb3-2" title="2">  h <span class="op">=</span> cv.findContours(Laplacian, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_NONE)</a>
<a class="sourceLine" id="cb3-3" title="3">  contour <span class="op">=</span> h[<span class="dv">0</span>]</a>
<a class="sourceLine" id="cb3-4" title="4">  contour <span class="op">=</span> <span class="bu">sorted</span>(contour, key<span class="op">=</span>cv.contourArea, reverse<span class="op">=</span><span class="va">True</span>)</a>
<a class="sourceLine" id="cb3-5" title="5">  <span class="cf">return</span> contour</a></code></pre></div>
<p>计算傅里叶算子：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">def</span> trucate(des):</a>
<a class="sourceLine" id="cb4-2" title="2">    ret <span class="op">=</span> np.fft.fftshift(des)</a>
<a class="sourceLine" id="cb4-3" title="3">    centerIdx <span class="op">=</span> <span class="bu">int</span>(<span class="bu">len</span>(ret) <span class="op">/</span> <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb4-4" title="4">    low, high <span class="op">=</span> centerIdx <span class="op">-</span> <span class="bu">int</span>(MIN_DESCRIPTOR <span class="op">/</span> <span class="dv">2</span>), centerIdx <span class="op">+</span> <span class="bu">int</span>(MIN_DESCRIPTOR <span class="op">/</span> <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb4-5" title="5">    ret <span class="op">=</span> ret[low:high]</a>
<a class="sourceLine" id="cb4-6" title="6">    ret <span class="op">=</span> np.fft.ifftshift(ret)</a>
<a class="sourceLine" id="cb4-7" title="7">    <span class="cf">return</span> ret</a>
<a class="sourceLine" id="cb4-8" title="8"></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="kw">def</span> fourier(frame):</a>
<a class="sourceLine" id="cb4-10" title="10">    gray <span class="op">=</span> cv.cvtColor(frame, cv.COLOR_BGR2GRAY)</a>
<a class="sourceLine" id="cb4-11" title="11">    dst <span class="op">=</span> cv.Laplacian(gray, cv.CV_16S, ksize<span class="op">=</span><span class="dv">3</span>)</a>
<a class="sourceLine" id="cb4-12" title="12">    Laplacian <span class="op">=</span> cv.convertScaleAbs(dst)</a>
<a class="sourceLine" id="cb4-13" title="13">    contour <span class="op">=</span> findContour(Laplacian)</a>
<a class="sourceLine" id="cb4-14" title="14">    contourArray <span class="op">=</span> contour[<span class="dv">0</span>][:, <span class="dv">0</span>, :]</a>
<a class="sourceLine" id="cb4-15" title="15">    retbg <span class="op">=</span> np.ones(dst.shape, np.uint8)</a>
<a class="sourceLine" id="cb4-16" title="16">    ret <span class="op">=</span> cv.drawContours(retbg, contour[<span class="dv">0</span>], <span class="dv">-1</span>, (<span class="dv">255</span>, <span class="dv">255</span>, <span class="dv">255</span>), <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb4-17" title="17">    contourComplex <span class="op">=</span> np.empty(contourArray.shape[:<span class="op">-</span><span class="dv">1</span>], dtype<span class="op">=</span><span class="bu">complex</span>)</a>
<a class="sourceLine" id="cb4-18" title="18">    contourComplex.real <span class="op">=</span> contourArray[:, <span class="dv">0</span>]</a>
<a class="sourceLine" id="cb4-19" title="19">    contourComplex.imag <span class="op">=</span> contourArray[:, <span class="dv">1</span>]</a>
<a class="sourceLine" id="cb4-20" title="20">    fourierResult <span class="op">=</span> np.fft.fft(contourComplex)</a>
<a class="sourceLine" id="cb4-21" title="21">    desInUse <span class="op">=</span> trucate(fourierResult)</a>
<a class="sourceLine" id="cb4-22" title="22">    <span class="cf">return</span> ret, desInUse</a></code></pre></div>
<p>根据傅里叶算子重构：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">def</span> reconstruct(img, desInUse):</a>
<a class="sourceLine" id="cb5-2" title="2">    contour_reconstruct <span class="op">=</span> np.fft.ifft(descirptor_in_use)</a>
<a class="sourceLine" id="cb5-3" title="3">    contour_reconstruct <span class="op">=</span> np.array([contour_reconstruct.real, contour_reconstruct.imag])</a>
<a class="sourceLine" id="cb5-4" title="4">    contour_reconstruct <span class="op">=</span> np.transpose(contour_reconstruct)</a>
<a class="sourceLine" id="cb5-5" title="5">    contour_reconstruct <span class="op">=</span> np.expand_dims(contour_reconstruct, axis<span class="op">=</span><span class="dv">1</span>)</a>
<a class="sourceLine" id="cb5-6" title="6">    <span class="cf">if</span> contour_reconstruct.<span class="bu">min</span>() <span class="op">&lt;</span> <span class="dv">0</span>:</a>
<a class="sourceLine" id="cb5-7" title="7">        contour_reconstruct <span class="op">-=</span> contour_reconstruct.<span class="bu">min</span>()</a>
<a class="sourceLine" id="cb5-8" title="8">    contour_reconstruct <span class="op">*=</span> img.shape[<span class="dv">0</span>] <span class="op">/</span> contour_reconstruct.<span class="bu">max</span>()</a>
<a class="sourceLine" id="cb5-9" title="9">    contour_reconstruct <span class="op">=</span> contour_reconstruct.astype(np.int32, copy<span class="op">=</span><span class="va">False</span>)</a>
<a class="sourceLine" id="cb5-10" title="10"></a>
<a class="sourceLine" id="cb5-11" title="11">    black_np <span class="op">=</span> np.ones(img.shape, np.uint8)  <span class="co"># 创建黑色幕布</span></a>
<a class="sourceLine" id="cb5-12" title="12">    black <span class="op">=</span> cv2.drawContours(black_np, contour_reconstruct, <span class="dv">-1</span>, (<span class="dv">255</span>, <span class="dv">255</span>, <span class="dv">255</span>), <span class="dv">1</span>)  <span class="co"># 绘制白色轮廓</span></a>
<a class="sourceLine" id="cb5-13" title="13">    cv2.imshow(<span class="st">'contour_reconstruct'</span>, black)</a>
<a class="sourceLine" id="cb5-14" title="14">    <span class="cf">return</span> black</a></code></pre></div></li>
</ul>
<p>完成上面这些步骤后，就可以得到原始的训练样本了。</p>
<p>接着还要处理得到测试集与训练集。这里做的事情包括:</p>
<ul>
<li><p>改变原始图片尺寸</p>
<p>将尺寸从<span class="math inline">\(300\times 300\)</span>改成<span class="math inline">\(128\times 128\)</span>。</p></li>
<li><p>归一化</p>
<p>将图片中每个像素的值除以255。</p></li>
<li><p>划分测试集与训练集</p></li>
</ul>
<p>最后搭建CNN并训练了。CNN的结构如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Layer</th>
<th style="text-align: center;">Width</th>
<th style="text-align: center;">Height</th>
<th style="text-align: center;">Filter</th>
<th style="text-align: center;">Kernel Size</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Input</td>
<td style="text-align: center;">128</td>
<td style="text-align: center;">128</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">-</td>
</tr>
<tr class="even">
<td style="text-align: center;">Convolution</td>
<td style="text-align: center;">128</td>
<td style="text-align: center;">128</td>
<td style="text-align: center;">32</td>
<td style="text-align: center;">3×3</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Max Pooling</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">32</td>
<td style="text-align: center;">2×2</td>
</tr>
<tr class="even">
<td style="text-align: center;">Convolution</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">3×3</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Max Pooling</td>
<td style="text-align: center;">32</td>
<td style="text-align: center;">32</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">2×2</td>
</tr>
<tr class="even">
<td style="text-align: center;">Convolution</td>
<td style="text-align: center;">32</td>
<td style="text-align: center;">32</td>
<td style="text-align: center;">128</td>
<td style="text-align: center;">3×3</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Max Pooling</td>
<td style="text-align: center;">16</td>
<td style="text-align: center;">16</td>
<td style="text-align: center;">128</td>
<td style="text-align: center;">2×2</td>
</tr>
<tr class="even">
<td style="text-align: center;">Flatten</td>
<td style="text-align: center;">32768</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">-</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Dense</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">-</td>
</tr>
<tr class="even">
<td style="text-align: center;">Dropout</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">-</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Dense</td>
<td style="text-align: center;">9</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">-</td>
</tr>
</tbody>
</table>
<p>最终训练结果：</p>
<p><img src="https://pic.downk.cc/item/5f00128a14195aa5946f60ad.jpg"></p>
<p>效果还不错（至少目前来说）</p>
<h3 id="前端">前端</h3>
<p>前端部分做的事情除了展示界面，还包括以下这些：</p>
<ul>
<li><p>采集手势</p>
<p>调用摄像头并读取图像帧。代码如下：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">function</span> <span class="at">getMedia</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb6-2" title="2">  <span class="kw">let</span> constraints <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb6-3" title="3">    <span class="dt">video</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb6-4" title="4">      <span class="dt">width</span><span class="op">:</span> <span class="dv">400</span><span class="op">,</span> </a>
<a class="sourceLine" id="cb6-5" title="5">      <span class="dt">height</span><span class="op">:</span> <span class="dv">400</span><span class="op">,</span> </a>
<a class="sourceLine" id="cb6-6" title="6">      <span class="dt">facingMode</span><span class="op">:</span> <span class="st">'user'</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-7" title="7">      <span class="dt">mirrored</span><span class="op">:</span> <span class="kw">true</span></a>
<a class="sourceLine" id="cb6-8" title="8">    <span class="op">},</span></a>
<a class="sourceLine" id="cb6-9" title="9">    <span class="dt">audio</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-10" title="10">  <span class="op">};</span></a>
<a class="sourceLine" id="cb6-11" title="11">  <span class="kw">let</span> promise <span class="op">=</span> <span class="va">navigator</span>.<span class="va">mediaDevices</span>.<span class="at">getUserMedia</span>(constraints)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-12" title="12">  <span class="va">promise</span>.<span class="at">then</span>(<span class="kw">function</span> (MediaStream) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-13" title="13">    <span class="va">video</span>.<span class="at">srcObject</span> <span class="op">=</span> MediaStream<span class="op">;</span></a>
<a class="sourceLine" id="cb6-14" title="14">    <span class="va">video</span>.<span class="at">play</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb6-15" title="15">  <span class="op">}</span>).<span class="at">catch</span>(<span class="kw">function</span> (PermissionDeniedError) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-16" title="16">    <span class="va">console</span>.<span class="at">log</span>(PermissionDeniedError)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-17" title="17">  <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-18" title="18"><span class="op">}</span></a></code></pre></div></li>
<li><p>数据处理</p>
其实就是把在Opencv里的东西在Opencv.js上再实现一遍</li>
<li><p>模型预测</p>
<p>将处理后的图像帧数据转换为Tensorflow.js输入所对应的格式后，将其输入上述已经训练好的模型中，获得预测值</p></li>
<li><p>手势判断与输出</p>
<p>根据模型预测输出的Tensor判断手势类型，且根据“阈值溢出机制”判断是否向服务器发送手势。什么是“阈值溢出机制”呢？实际上就是，单位时间内，如果某个手势的出现频率超过一个阈值<span class="math inline">\(\lambda(&gt;0.5)\)</span>，则认为这一手势就是当前手势。</p></li>
</ul>
<h3 id="服务端">服务端</h3>
<p>这一部分通过TCP协议获取前端的手势识别结果，并根据这一结果，通过调用robot.js来完成相应操作。</p>
<p>服务端代码：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb7-1" title="1"><span class="kw">const</span> net <span class="op">=</span> <span class="at">require</span>(<span class="st">'net'</span>)</a>
<a class="sourceLine" id="cb7-2" title="2"><span class="kw">const</span> robot <span class="op">=</span> <span class="at">require</span>(<span class="st">'robotjs'</span>)</a>
<a class="sourceLine" id="cb7-3" title="3"><span class="kw">let</span> controlable <span class="op">=</span> <span class="kw">false</span><span class="co">//解锁</span></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="kw">let</span> directable <span class="op">=</span> <span class="kw">false</span><span class="co">//开启上下左右键</span></a>
<a class="sourceLine" id="cb7-5" title="5"><span class="kw">let</span> key_set <span class="op">=</span> []</a>
<a class="sourceLine" id="cb7-6" title="6"><span class="kw">function</span> <span class="at">clear_key</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb7-7" title="7">  <span class="cf">for</span> (<span class="kw">let</span> index <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> index <span class="op">&lt;</span> <span class="va">key_set</span>.<span class="at">length</span><span class="op">;</span> index<span class="op">++</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-8" title="8">    <span class="va">robot</span>.<span class="at">keyToggle</span>(key_set[index]<span class="op">,</span> <span class="st">'up'</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-9" title="9">  <span class="op">}</span></a>
<a class="sourceLine" id="cb7-10" title="10">  key_set <span class="op">=</span> []</a>
<a class="sourceLine" id="cb7-11" title="11"><span class="op">}</span></a>
<a class="sourceLine" id="cb7-12" title="12"></a>
<a class="sourceLine" id="cb7-13" title="13"><span class="kw">function</span> <span class="at">minimize</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb7-14" title="14">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">'minimize'</span>)</a>
<a class="sourceLine" id="cb7-15" title="15">  pre_gesture <span class="op">=</span> <span class="dv">7</span><span class="op">;</span></a>
<a class="sourceLine" id="cb7-16" title="16">  <span class="va">robot</span>.<span class="at">keyToggle</span>(<span class="st">'command'</span><span class="op">,</span> <span class="st">'down'</span>)</a>
<a class="sourceLine" id="cb7-17" title="17">  <span class="va">robot</span>.<span class="at">keyTap</span>(<span class="st">'D'</span>)</a>
<a class="sourceLine" id="cb7-18" title="18">  <span class="va">robot</span>.<span class="at">keyToggle</span>(<span class="st">'command'</span><span class="op">,</span> <span class="st">'up'</span>)</a>
<a class="sourceLine" id="cb7-19" title="19"></a>
<a class="sourceLine" id="cb7-20" title="20"><span class="op">}</span></a>
<a class="sourceLine" id="cb7-21" title="21"><span class="kw">function</span> <span class="at">closeWindow</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb7-22" title="22">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">'closeWin'</span>)</a>
<a class="sourceLine" id="cb7-23" title="23">  pre_gesture <span class="op">=</span> <span class="dv">4</span><span class="op">;</span></a>
<a class="sourceLine" id="cb7-24" title="24">  <span class="va">robot</span>.<span class="at">keyToggle</span>(<span class="st">'alt'</span><span class="op">,</span> <span class="st">'down'</span>)</a>
<a class="sourceLine" id="cb7-25" title="25">  <span class="va">robot</span>.<span class="at">keyTap</span>(<span class="st">'f4'</span>)</a>
<a class="sourceLine" id="cb7-26" title="26">  <span class="va">robot</span>.<span class="at">keyToggle</span>(<span class="st">'alt'</span><span class="op">,</span> <span class="st">'up'</span>)</a>
<a class="sourceLine" id="cb7-27" title="27">  </a>
<a class="sourceLine" id="cb7-28" title="28"><span class="op">}</span></a>
<a class="sourceLine" id="cb7-29" title="29"><span class="kw">function</span> <span class="at">altTab</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb7-30" title="30">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">'altTab'</span>)</a>
<a class="sourceLine" id="cb7-31" title="31">  pre_gesture <span class="op">=</span> <span class="dv">8</span><span class="op">;</span></a>
<a class="sourceLine" id="cb7-32" title="32">  <span class="va">robot</span>.<span class="at">keyToggle</span>(<span class="st">'alt'</span><span class="op">,</span> <span class="st">'down'</span>)</a>
<a class="sourceLine" id="cb7-33" title="33">  <span class="va">key_set</span>.<span class="at">push</span>(<span class="st">'alt'</span>)</a>
<a class="sourceLine" id="cb7-34" title="34">  <span class="va">robot</span>.<span class="at">keyTap</span>(<span class="st">'tab'</span>)</a>
<a class="sourceLine" id="cb7-35" title="35"><span class="op">}</span></a>
<a class="sourceLine" id="cb7-36" title="36"><span class="kw">function</span> <span class="at">re_altTab</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb7-37" title="37">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">'re_altTab'</span>)</a>
<a class="sourceLine" id="cb7-38" title="38">  pre_gesture <span class="op">=</span> <span class="dv">9</span><span class="op">;</span></a>
<a class="sourceLine" id="cb7-39" title="39">  <span class="va">robot</span>.<span class="at">keyToggle</span>(<span class="st">'alt'</span><span class="op">,</span> <span class="st">'down'</span>)</a>
<a class="sourceLine" id="cb7-40" title="40">  <span class="va">key_set</span>.<span class="at">push</span>(<span class="st">'alt'</span>)</a>
<a class="sourceLine" id="cb7-41" title="41">  <span class="va">robot</span>.<span class="at">keyToggle</span>(<span class="st">'shift'</span><span class="op">,</span> <span class="st">'down'</span>)</a>
<a class="sourceLine" id="cb7-42" title="42">  <span class="va">key_set</span>.<span class="at">push</span>(<span class="st">'shift'</span>)</a>
<a class="sourceLine" id="cb7-43" title="43">  <span class="va">robot</span>.<span class="at">keyTap</span>(<span class="st">'tab'</span>)</a>
<a class="sourceLine" id="cb7-44" title="44"><span class="op">}</span></a>
<a class="sourceLine" id="cb7-45" title="45"><span class="kw">function</span> <span class="at">audioMute</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb7-46" title="46">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">'audio_mute'</span>)</a>
<a class="sourceLine" id="cb7-47" title="47">  <span class="va">robot</span>.<span class="at">keyTap</span>(<span class="st">'audio_mute'</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-48" title="48"><span class="op">}</span></a>
<a class="sourceLine" id="cb7-49" title="49"></a>
<a class="sourceLine" id="cb7-50" title="50"><span class="kw">let</span> pre_gesture<span class="op">;</span></a>
<a class="sourceLine" id="cb7-51" title="51"><span class="kw">const</span> server <span class="op">=</span> <span class="va">net</span>.<span class="at">createServer</span>(<span class="kw">function</span> (sock) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-52" title="52">  <span class="va">sock</span>.<span class="at">on</span>(<span class="st">'close'</span><span class="op">,</span> <span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb7-53" title="53">    <span class="va">console</span>.<span class="at">log</span>(<span class="st">'close socket'</span>)</a>
<a class="sourceLine" id="cb7-54" title="54">    <span class="va">server</span>.<span class="at">close</span>()</a>
<a class="sourceLine" id="cb7-55" title="55">  <span class="op">}</span>)</a>
<a class="sourceLine" id="cb7-56" title="56">  <span class="va">sock</span>.<span class="at">on</span>(<span class="st">'data'</span><span class="op">,</span> <span class="kw">function</span> (data) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-57" title="57">    <span class="va">console</span>.<span class="at">log</span>(<span class="st">'ok!'</span>)</a>
<a class="sourceLine" id="cb7-58" title="58">    <span class="va">console</span>.<span class="at">log</span>(<span class="va">data</span>.<span class="at">toString</span>())</a>
<a class="sourceLine" id="cb7-59" title="59">    <span class="kw">let</span> stringifyData <span class="op">=</span> <span class="va">data</span>.<span class="at">toString</span>()</a>
<a class="sourceLine" id="cb7-60" title="60">    <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'5'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-61" title="61">      directable <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></a>
<a class="sourceLine" id="cb7-62" title="62">      <span class="cf">if</span> (controlable) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-63" title="63">        controlable <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></a>
<a class="sourceLine" id="cb7-64" title="64">        <span class="at">clear_key</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb7-65" title="65">      <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb7-66" title="66">        controlable <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></a>
<a class="sourceLine" id="cb7-67" title="67">      <span class="op">}</span></a>
<a class="sourceLine" id="cb7-68" title="68">      pre_gesture <span class="op">=</span> stringifyData<span class="op">;</span></a>
<a class="sourceLine" id="cb7-69" title="69">    <span class="op">}</span></a>
<a class="sourceLine" id="cb7-70" title="70">    <span class="cf">if</span> (controlable) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-71" title="71">      <span class="cf">if</span> (directable) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-72" title="72">        <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'1'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-73" title="73">          <span class="va">console</span>.<span class="at">log</span>(<span class="st">'up'</span>)</a>
<a class="sourceLine" id="cb7-74" title="74">          <span class="va">robot</span>.<span class="at">keyTap</span>(<span class="st">'up'</span>)</a>
<a class="sourceLine" id="cb7-75" title="75">        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'7'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-76" title="76">          <span class="va">console</span>.<span class="at">log</span>(<span class="st">'down'</span>)</a>
<a class="sourceLine" id="cb7-77" title="77">          <span class="va">robot</span>.<span class="at">keyTap</span>(<span class="st">'down'</span>)</a>
<a class="sourceLine" id="cb7-78" title="78">        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'8'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-79" title="79">          <span class="va">console</span>.<span class="at">log</span>(<span class="st">'right'</span>)</a>
<a class="sourceLine" id="cb7-80" title="80">          <span class="va">robot</span>.<span class="at">keyTap</span>(<span class="st">'right'</span>)</a>
<a class="sourceLine" id="cb7-81" title="81">        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'9'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-82" title="82">          <span class="va">console</span>.<span class="at">log</span>(<span class="st">'left'</span>)</a>
<a class="sourceLine" id="cb7-83" title="83">          <span class="va">robot</span>.<span class="at">keyTap</span>(<span class="st">'left'</span>)</a>
<a class="sourceLine" id="cb7-84" title="84">        <span class="op">}</span></a>
<a class="sourceLine" id="cb7-85" title="85">      <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb7-86" title="86">        <span class="cf">if</span> (stringifyData <span class="op">!=</span> pre_gesture) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-87" title="87">          <span class="at">clear_key</span>()</a>
<a class="sourceLine" id="cb7-88" title="88">        <span class="op">}</span></a>
<a class="sourceLine" id="cb7-89" title="89">        <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'6'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-90" title="90">          <span class="at">audioMute</span>()</a>
<a class="sourceLine" id="cb7-91" title="91">        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'7'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-92" title="92">          <span class="at">minimize</span>()</a>
<a class="sourceLine" id="cb7-93" title="93">        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'4'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-94" title="94">          directable <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></a>
<a class="sourceLine" id="cb7-95" title="95">        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'2'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-96" title="96">          <span class="at">closeWindow</span>()</a>
<a class="sourceLine" id="cb7-97" title="97">        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'9'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-98" title="98">          <span class="at">re_altTab</span>()</a>
<a class="sourceLine" id="cb7-99" title="99">        <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> (stringifyData <span class="op">===</span> <span class="st">'8'</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-100" title="100">          <span class="at">altTab</span>()</a>
<a class="sourceLine" id="cb7-101" title="101">        <span class="op">}</span></a>
<a class="sourceLine" id="cb7-102" title="102">      <span class="op">}</span></a>
<a class="sourceLine" id="cb7-103" title="103">    <span class="op">}</span></a>
<a class="sourceLine" id="cb7-104" title="104">  <span class="op">}</span>)</a>
<a class="sourceLine" id="cb7-105" title="105"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb7-106" title="106"></a>
<a class="sourceLine" id="cb7-107" title="107"><span class="va">server</span>.<span class="at">on</span>(<span class="st">'listening'</span><span class="op">,</span> <span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb7-108" title="108">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">'start listening'</span>)</a>
<a class="sourceLine" id="cb7-109" title="109"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb7-110" title="110"></a>
<a class="sourceLine" id="cb7-111" title="111"><span class="va">server</span>.<span class="at">on</span>(<span class="st">'error'</span><span class="op">,</span> <span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb7-112" title="112">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">'listen error'</span>)</a>
<a class="sourceLine" id="cb7-113" title="113"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb7-114" title="114"></a>
<a class="sourceLine" id="cb7-115" title="115"><span class="va">server</span>.<span class="at">on</span>(<span class="st">'close'</span><span class="op">,</span> <span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb7-116" title="116">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">'stop listening'</span>)</a>
<a class="sourceLine" id="cb7-117" title="117"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb7-118" title="118"></a>
<a class="sourceLine" id="cb7-119" title="119"><span class="va">server</span>.<span class="at">listen</span>(<span class="op">{</span></a>
<a class="sourceLine" id="cb7-120" title="120">  <span class="dt">port</span><span class="op">:</span> <span class="dv">6080</span><span class="op">,</span></a>
<a class="sourceLine" id="cb7-121" title="121">  <span class="dt">host</span><span class="op">:</span> <span class="st">'127.0.0.1'</span><span class="op">,</span></a>
<a class="sourceLine" id="cb7-122" title="122">  <span class="dt">exclusive</span><span class="op">:</span> <span class="kw">true</span></a>
<a class="sourceLine" id="cb7-123" title="123"><span class="op">}</span>)</a></code></pre></div>
<p>electron的主进程中连接服务端并发送手势识别结果</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">const</span> sockConfig <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb8-2" title="2">  <span class="dt">port</span><span class="op">:</span> <span class="dv">6080</span><span class="op">,</span></a>
<a class="sourceLine" id="cb8-3" title="3">  <span class="dt">host</span><span class="op">:</span> <span class="st">'127.0.0.1'</span></a>
<a class="sourceLine" id="cb8-4" title="4"><span class="op">}</span></a>
<a class="sourceLine" id="cb8-5" title="5"><span class="kw">const</span> sock <span class="op">=</span> <span class="va">net</span>.<span class="at">connect</span>(sockConfig<span class="op">,</span> <span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb8-6" title="6">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">'connected to server!'</span>)</a>
<a class="sourceLine" id="cb8-7" title="7"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb8-8" title="8"></a>
<a class="sourceLine" id="cb8-9" title="9"><span class="va">sock</span>.<span class="at">on</span>(<span class="st">'connect'</span><span class="op">,</span> <span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb8-10" title="10">  <span class="va">console</span>.<span class="at">log</span>(<span class="st">'connect success'</span>)</a>
<a class="sourceLine" id="cb8-11" title="11"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb8-12" title="12"></a>
<a class="sourceLine" id="cb8-13" title="13"><span class="kw">function</span> <span class="at">sendGesture</span>(ges) <span class="op">{</span></a>
<a class="sourceLine" id="cb8-14" title="14">  <span class="kw">let</span> ges2string <span class="op">=</span> <span class="va">ges</span>.<span class="at">toString</span>()</a>
<a class="sourceLine" id="cb8-15" title="15">  <span class="va">console</span>.<span class="at">log</span>(ges2string)</a>
<a class="sourceLine" id="cb8-16" title="16">  <span class="va">sock</span>.<span class="at">write</span>(ges2string)</a>
<a class="sourceLine" id="cb8-17" title="17"><span class="op">}</span></a></code></pre></div>
<h2 id="最终实现效果">最终实现效果</h2>
<p><img src="https://pic.downk.cc/item/5f00185114195aa59471b6bb.png"></p>
<center>
为了避免误操作，一开始是上锁状态，无法操作
</center>
<p><img src="https://pic.downk.cc/item/5f00188214195aa59471cc29.png"></p>
<center>
手势5解锁
</center>
<p><img src="https://pic.downk.cc/item/5f0018a814195aa59471daeb.png"></p>
<center>
无法识别手势，需要调整手势
</center>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>手势识别</tag>
        <tag>人机交互</tag>
        <tag>JavaScript</tag>
        <tag>Electron</tag>
        <tag>Tensorflow</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2018/12/10/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>这是我的第一篇博客 <span id="more"></span></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-3" title="3">{</a>
<a class="sourceLine" id="cb1-4" title="4">    printf(<span class="st">"hello,world</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-6" title="6">}</a></code></pre></div>
]]></content>
      <categories>
        <category>hexo-test</category>
      </categories>
  </entry>
  <entry>
    <title>线段树与树状数组总结</title>
    <url>/2020/02/05/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://pic.downk.cc/item/5e3adbdf2fb38b8c3ccee2f7.jpg"> <span id="more"></span> 本文章为2020年寒训用资料，有部分删减</p>
<h2 id="线段树">线段树</h2>
<h3 id="引入">引入</h3>
<p>问题引入：</p>
<ul>
<li>问题一：给定一个长度为<span class="math inline">\(n\)</span>的数列，可以进行<span class="math inline">\(m\)</span>次询问，每次询问查询区间<span class="math inline">\([l,r]\)</span>内所有数的和
<ul>
<li>如果数据范围很小（例如<span class="math inline">\(n\leq 1000,m\leq 100\)</span>），可以直接枚举。复杂度<span class="math inline">\(O(n)\)</span></li>
<li>如果数据范围较大（例如<span class="math inline">\(n\leq 1e6,m\leq 1e3\)</span>），可以用前缀和。复杂度<span class="math inline">\(O(n+m)\)</span></li>
</ul></li>
<li>问题二：给定一个长度为<span class="math inline">\(n\)</span>的数列，可以进行<span class="math inline">\(m\)</span>次操作，操作分两种，一种是修改单点的数值，另一种是查询区间<span class="math inline">\([l,r]\)</span>内所有数的和
<ul>
<li>如果数据范围很小，依然可以枚举。复杂度<span class="math inline">\(O(n)\)</span></li>
<li>但大数据范围的情况下会TLE</li>
<li>此时即使使用前缀和，在进行修改操作后需要维护前缀和，故复杂度与枚举一致。大数据范围的情况下依然会TLE</li>
</ul></li>
<li>问题三：给定一个长度为<span class="math inline">\(n\)</span>的数列，可以进行<span class="math inline">\(m\)</span>次操作，操作分两种，一种是修改区间<span class="math inline">\([l,r]\)</span>内每个数的数值，另一种是查询区间<span class="math inline">\([l,r]\)</span>内所有数的和
<ul>
<li>数据范围小的话当然可以枚举……</li>
<li>如果数据范围很大呢？（例如<span class="math inline">\(n\leq 1e6,m\leq 1e3\)</span>）</li>
</ul></li>
</ul>
<h3 id="线段树是什么">线段树是什么</h3>
<p>线段树是一种二叉树，它的基本思想是在二叉树的节点上保存区间信息，并在树上进行区间。下图是区间<span class="math inline">\([1,7]\)</span>对应的线段树</p>
<p><img src="https://pic.downk.cc/item/5e3ada242fb38b8c3cceb6bb.png"></p>
<p>上面这张图所表示的意思是，以求区间和为例，对于区间<span class="math inline">\([1,7]\)</span>，其区间和等于其左儿子<span class="math inline">\(([1,4])\)</span>的区间和加上其右儿子<span class="math inline">\([5,7]\)</span>的区间和；而区间<span class="math inline">\([1,4]\)</span>的区间和又等于区间<span class="math inline">\([1,2]\)</span>和区间<span class="math inline">\([3,4]\)</span>的和。对于一个区间<span class="math inline">\([lef,rig]\)</span>，其左右儿子分别为<span class="math inline">\([lef,\lfloor(lef+rig)/2\rfloor]\)</span>，<span class="math inline">\([\lfloor(lef+rig)/2\rfloor+1,rig]\)</span>。对于线段树上的各节点，我们采取从上到下、从左往右的编号方法。具体而言，以上图为例，<span class="math inline">\([1,7]\)</span>是编号为1，<span class="math inline">\([1,4]\)</span>编号为2，<span class="math inline">\([5,7]\)</span>编号为3……</p>
<p>对于查询与修改，线段树的复杂度都是<span class="math inline">\(O(\log_2n)\)</span></p>
<h3 id="建树">建树</h3>
<p>根据线段树的结构和节点编号方式，我们很容易得到以下建树方式</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="dt">int</span> sum[maxn&lt;&lt;<span class="dv">2</span>]</a>
<a class="sourceLine" id="cb1-2" title="2"><span class="dt">void</span> pushup(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-3" title="3">{</a>
<a class="sourceLine" id="cb1-4" title="4">    sum[rt]=sum[rt&lt;&lt;<span class="dv">1</span>]+sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-5" title="5">}</a>
<a class="sourceLine" id="cb1-6" title="6"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-7" title="7">{</a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb1-9" title="9">        <span class="dt">int</span> tmp;</a>
<a class="sourceLine" id="cb1-10" title="10">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;tmp);</a>
<a class="sourceLine" id="cb1-11" title="11">        sum[rt]=tmp;</a>
<a class="sourceLine" id="cb1-12" title="12">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-13" title="13">    }</a>
<a class="sourceLine" id="cb1-14" title="14">    <span class="dt">int</span> mid=(lef+rig)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-15" title="15">    build(lef,mid,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-16" title="16">    build(mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-17" title="17">    pushup(rt);</a>
<a class="sourceLine" id="cb1-18" title="18">}</a></code></pre></div>
<p>代码很短，但有些地方可能会让初次接触的人稍微有点疑惑：</p>
<ul>
<li><p>maxn&lt;&lt;2是什么意思？</p>
<p>此处maxn表示的是最大区间长度，maxn&lt;&lt;2等同于4 * maxn。sum是用来存我们的线段树节点的数组。为什么需要开4倍大的空间呢？首先，线段树是一棵完全二叉树， 对于一棵完全二叉树，假如有<span class="math inline">\(n\)</span>个叶子节点（对应到线段树上就是区间总长度为<span class="math inline">\(n\)</span>），其总节点数为<span class="math inline">\(2n-1\)</span>。似乎开2倍就够了呢……但经验告诉我们，开四倍是较为保险的选择，既不会太大导致MLE，也不会太小导致越界。</p></li>
<li><p>rt&lt;&lt;1和rt&lt;&lt;1|1</p>
<p>由于线段树节点的编号方式，父节点和其两个子节点的编号存在这样的关系：<span class="math display">\[id_{leftson}=2\times id_{father}\]</span>，<span class="math display">\[id_{rigson}=2\times id_{father}+1\]</span></p>
<p>为了提高速度，我们使用位运算来代替乘法、加法。</p></li>
<li><p>pushup</p>
<p>父亲节点的信息来自于两个子节点，故在完成子节点的建立后，我们要用两个子节点来建立父亲节点</p></li>
</ul>
<h3 id="单点操作">单点操作</h3>
<p>单点操作包括单点查询与单点修改</p>
<h4 id="单点查询">单点查询</h4>
<p>单点查询的大致思想与二分查找类似。如果需要查询的位置<span class="math inline">\(pos\)</span>在当前区间的左侧，则查找当前区间的左儿子；否则，查找当前区间的右儿子。重复这一过程，直至区间左右端点相等，则说明已经找到。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="dt">int</span> ans;</a>
<a class="sourceLine" id="cb2-2" title="2"><span class="dt">void</span> query(<span class="dt">int</span> pos,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb2-3" title="3">{</a>
<a class="sourceLine" id="cb2-4" title="4">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb2-5" title="5">        ans=sum[rt];</a>
<a class="sourceLine" id="cb2-6" title="6">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb2-7" title="7">    }</a>
<a class="sourceLine" id="cb2-8" title="8">    <span class="dt">int</span> mid=(lef+rig)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb2-9" title="9">    <span class="cf">if</span>(pos&lt;=mid) query(pos,lef,mid,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-10" title="10">    <span class="cf">else</span> <span class="cf">if</span>(pos&gt;mid) query(pos,mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-11" title="11">}</a></code></pre></div>
<h4 id="单点修改">单点修改</h4>
<p>单点修改代码如下：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="dt">void</span> update(<span class="dt">int</span> pos,<span class="dt">int</span> val,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb3-2" title="2">{</a>
<a class="sourceLine" id="cb3-3" title="3">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb3-4" title="4">        sum[rt]+=val;</a>
<a class="sourceLine" id="cb3-5" title="5">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb3-6" title="6">    }</a>
<a class="sourceLine" id="cb3-7" title="7">    <span class="dt">int</span> mid=(lef+rig)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb3-8" title="8">    <span class="cf">if</span>(pos&lt;=mid) update(pos,val,lef,mid,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-9" title="9">    <span class="cf">else</span> <span class="cf">if</span>(pos&gt;mid) update(pos,val,mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-10" title="10">    pushup(rt);</a>
<a class="sourceLine" id="cb3-11" title="11">}</a></code></pre></div>
<p>与单点查询基本一致，但要记得最后pushup一下来更新父节点。</p>
<h3 id="区间操作">区间操作</h3>
<p>区间操作的总体思想是，对于带查询的区间<span class="math inline">\([L,R]\)</span>，如果当前区间<span class="math inline">\([lef,rig]\)</span>完全包含在带查询区间中，就直接将<span class="math inline">\([lef,rig]\)</span>上的信息统计到答案中。如下所示 <span class="math display">\[
\underbrace{L,L+1,\dots \overbrace{lef,lef+1,\dots ,rig-1,rig}\dots ,R-1,R}
\]</span> 否则，如果当前区间不是完全包含在待查询区间内，就查询左儿子或右儿子。如下所示 <span class="math display">\[
\rlap{\overbrace{\phantom{lef,lef+1,\dots,L,L+1,\dots,rig-1,rig}}} lef,lef+1,\dots, \underbrace{L, L+1,\dots,rig-1,rig,\dots,R-1,R}
\]</span></p>
<h4 id="区间查询">区间查询</h4>
<p>借用上面所提到的总体思想，可以写出这样的代码：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="dt">int</span> query(<span class="dt">int</span> L,<span class="dt">int</span> R,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb4-2" title="2">{</a>
<a class="sourceLine" id="cb4-3" title="3">    <span class="cf">if</span>(lef&gt;=L&amp;&amp;rig&lt;=R){</a>
<a class="sourceLine" id="cb4-4" title="4">           <span class="cf">return</span> sum[rt];     </a>
<a class="sourceLine" id="cb4-5" title="5">    }</a>
<a class="sourceLine" id="cb4-6" title="6">    <span class="dt">int</span> mid=(lef+rig)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb4-7" title="7">    <span class="dt">int</span> ret=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-8" title="8">    <span class="cf">if</span>(L&lt;=mid) ret+=query(L,R,lef,mid,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb4-9" title="9">    <span class="cf">if</span>(R&gt;mid) ret+=query(L,R,mid+<span class="dv">1</span>,rt&lt;&lt;<span class="dv">1</span>); </a>
<a class="sourceLine" id="cb4-10" title="10">}</a></code></pre></div>
<h4 id="区间修改">区间修改</h4>
<p>借用单点修改的思想，很容易想到，区间修改就是相当于调用多次单点修改，把区间内的数字都修改了。举个例子，对于区间<span class="math inline">\([1,7]\)</span>，如果我们要修改<span class="math inline">\([2,7]\)</span>内的数，那最终被修改的节点如下图所示 <img src="https://pic.downk.cc/item/5e3ada522fb38b8c3ccebc1d.png"></p>
<p>一个很明显的问题在于，这样做的话，复杂度会比直接暴力修改还高！而且，如果我要查询的只是<span class="math inline">\([5,7]\)</span>的子区间，那就会存在不必要的修改。比如说我要查询<span class="math inline">\([1,5]\)</span>，那<span class="math inline">\([5,6]\)</span>等等的修改就没有用。</p>
<p>事实上，要修改区间<span class="math inline">\([2,7]\)</span>，我们可以仅仅修改我们需要的区间。具体而言，修改的时候只需要修改<span class="math inline">\([1,7],[1,4],[1,2],[2,2],[3,4],[5,7]\)</span>。等到需要查询这些区间以外的区间时，再去进行相应的修改。这就是懒惰标记（lazy tag）的思想</p>
<p>所谓懒惰，就是“要用的时候才用，否则就不用”。具体来说，懒惰标记用于存储父节点的修改信息，但暂时不把信息传给子节点，等到需要用到子节点时再把信息传给子节点。</p>
<p>加上了懒惰标记的区间修改代码如下：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb5-1" title="1"><span class="dt">void</span> pushdown(<span class="dt">int</span> rt,<span class="dt">int</span> len)</a>
<a class="sourceLine" id="cb5-2" title="2">{</a>
<a class="sourceLine" id="cb5-3" title="3">    <span class="cf">if</span>(lazy[rt]){</a>
<a class="sourceLine" id="cb5-4" title="4">        lazy[rt&lt;&lt;<span class="dv">1</span>]+=lazy[rt];</a>
<a class="sourceLine" id="cb5-5" title="5">        lazy[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]+=lazy[rt];</a>
<a class="sourceLine" id="cb5-6" title="6">        sum[rt&lt;&lt;<span class="dv">1</span>]=lazy[rt&lt;&lt;<span class="dv">1</span>]*(len-(len&gt;&gt;<span class="dv">1</span>));</a>
<a class="sourceLine" id="cb5-7" title="7">        sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=lazy[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]*(len&gt;&gt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb5-8" title="8">        lazy[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-9" title="9">    }</a>
<a class="sourceLine" id="cb5-10" title="10">}</a>
<a class="sourceLine" id="cb5-11" title="11"><span class="dt">void</span> update(<span class="dt">int</span> L,<span class="dt">int</span> R,<span class="dt">int</span> val,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb5-12" title="12">{</a>
<a class="sourceLine" id="cb5-13" title="13">    <span class="cf">if</span>(lef&gt;=L&amp;&amp;rig&lt;=R){</a>
<a class="sourceLine" id="cb5-14" title="14">        sum[rt]+=val*(rig-lef+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb5-15" title="15">        lazy[rt]+=val;</a>
<a class="sourceLine" id="cb5-16" title="16">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb5-17" title="17">    }</a>
<a class="sourceLine" id="cb5-18" title="18">    pushdown(rt);</a>
<a class="sourceLine" id="cb5-19" title="19">    <span class="dt">int</span> mid=(lef+rig)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb5-20" title="20">    <span class="cf">if</span>(L&lt;=mid) update(L,R,val,lef,mid,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb5-21" title="21">    <span class="cf">if</span>(R&gt;mid) update(L,R,val,mid+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb5-22" title="22">    pushup(rt);</a>
<a class="sourceLine" id="cb5-23" title="23">}</a></code></pre></div>
<p>加上懒惰标记后，同样是修改<span class="math inline">\([2,7]\)</span>这一区间，被修改的区间如下所示：</p>
<p><img src="https://pic.downk.cc/item/5e3ada6a2fb38b8c3ccebf3e.png"></p>
<p>另外，在引入了懒惰标记后，单点查询、区间查询的代码也要更改（其实就是加上pushdown而已）。具体如下：</p>
<p>单点查询：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb6-1" title="1"><span class="dt">int</span> query(<span class="dt">int</span> pos,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb6-2" title="2">{</a>
<a class="sourceLine" id="cb6-3" title="3">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb6-4" title="4">           <span class="cf">return</span> sum[rt];     </a>
<a class="sourceLine" id="cb6-5" title="5">    }</a>
<a class="sourceLine" id="cb6-6" title="6">    pushdown(rt);</a>
<a class="sourceLine" id="cb6-7" title="7">    <span class="dt">int</span> ret=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb6-8" title="8">    <span class="dt">int</span> mid=(lef+rig)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb6-9" title="9">    <span class="cf">if</span>(lef&lt;=mid) ret+=query(pos,lef,mid,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb6-10" title="10">    <span class="cf">else</span> <span class="cf">if</span>(rig&gt;mid) ret+=query(pos,mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb6-11" title="11">    <span class="cf">return</span> ret;</a>
<a class="sourceLine" id="cb6-12" title="12">}</a></code></pre></div>
<p>区间查询：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb7-1" title="1"><span class="dt">int</span> query(<span class="dt">int</span> L,<span class="dt">int</span> R,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb7-2" title="2">{</a>
<a class="sourceLine" id="cb7-3" title="3">    <span class="cf">if</span>(L&gt;=lef&amp;&amp;R&lt;=rig){</a>
<a class="sourceLine" id="cb7-4" title="4">        <span class="cf">return</span> sum[rt];</a>
<a class="sourceLine" id="cb7-5" title="5">    }</a>
<a class="sourceLine" id="cb7-6" title="6">    pushdown(rt);</a>
<a class="sourceLine" id="cb7-7" title="7">    <span class="dt">int</span> ret=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-8" title="8">    <span class="dt">int</span> mid=(lef+rig)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb7-9" title="9">    <span class="cf">if</span>(L&lt;=mid) ret+=query(L,R,lef,mid,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb7-10" title="10">    <span class="cf">if</span>(R&gt;mid) ret+=query(L,R,mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb7-11" title="11">    <span class="cf">return</span> ret;</a>
<a class="sourceLine" id="cb7-12" title="12">}</a></code></pre></div>
<h3 id="减法运算和乘法运算">减法运算和乘法运算</h3>
<p>上面所提到的都是修改与查询都是基于加法的，那如果是减法、乘法、除法呢？</p>
<ul>
<li><p>如果是减法的话就直接加上负数即可。</p></li>
<li><p>如果是乘法或除法的话，就要另当别论。</p>
<p>（此处只讨论区间查询与区间修改，如果区间的会了，单点肯定也会吧 :D）</p>
<ul>
<li><p>对于乘法，只需要像这个样子修改update：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb8-1" title="1"><span class="dt">void</span> update(<span class="dt">int</span> L,<span class="dt">int</span> R,<span class="dt">int</span> val,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb8-2" title="2">{</a>
<a class="sourceLine" id="cb8-3" title="3">    <span class="cf">if</span>(lef&gt;=L&amp;&amp;rig&lt;=R){</a>
<a class="sourceLine" id="cb8-4" title="4">        lazy[rt]*=val;</a>
<a class="sourceLine" id="cb8-5" title="5">        sum[rt]*=lazy[rt];</a>
<a class="sourceLine" id="cb8-6" title="6">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb8-7" title="7">    }</a>
<a class="sourceLine" id="cb8-8" title="8">    pushdown(rt);</a>
<a class="sourceLine" id="cb8-9" title="9">    <span class="dt">int</span> mid=(lef+rig)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb8-10" title="10">    <span class="cf">if</span>(L&lt;=mid) update(L,R,val,lson);</a>
<a class="sourceLine" id="cb8-11" title="11">    <span class="cf">if</span>(R&gt;mid) update(L,R,val,rson);</a>
<a class="sourceLine" id="cb8-12" title="12">}</a></code></pre></div>
<p>这样修改pushdown：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb9-1" title="1"><span class="dt">void</span> pushdown(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb9-2" title="2">{</a>
<a class="sourceLine" id="cb9-3" title="3">    <span class="cf">if</span>(lazy[rt]!=<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb9-4" title="4">        lazy[rt&lt;&lt;<span class="dv">1</span>]*=lazy[rt];</a>
<a class="sourceLine" id="cb9-5" title="5">        lazy[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]*=lazy[rt];</a>
<a class="sourceLine" id="cb9-6" title="6">        sum[rt&lt;&lt;<span class="dv">1</span>]=sum[rt&lt;&lt;<span class="dv">1</span>]*lazy[rt];</a>
<a class="sourceLine" id="cb9-7" title="7">        sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]*lazy[rt];</a>
<a class="sourceLine" id="cb9-8" title="8">        lazy[rt]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb9-9" title="9">    }</a>
<a class="sourceLine" id="cb9-10" title="10">}</a></code></pre></div>
<p>另外要记得初始化lazy中所有数为1</p>
<p>PS：思考一下，如果是乘法和加法同时进行，即区间修改操作中，既可以将区间上的数乘以一个数，也可以将区间上的数加上一个数，那要怎么维护sum和lazy呢？</p></li>
</ul></li>
</ul>
<h3 id="离散化">离散化</h3>
<p>所谓离散化指的是，在某些情况下，由于数据范围过大，直接保存数据的做法会导致MLE；但要解出题目其实并不需要保存实际的数据，只需要保存数据之间的相对大小即可。举个例子，现在要在一条长度为<span class="math inline">\(1e9\)</span>的线段上进行区间染色，颜色与颜色之间会相互覆盖，求最终线段上可以看到多少种颜色。显然，我们不可能开一个长度为<span class="math inline">\(4e9\)</span>的数组来存线段树节点，也不可能开一个长度为<span class="math inline">\(4e9\)</span>的数组来存懒惰标记。如何解决这一问题呢？注意到，我们现在其实并不关心被染色的线段具体有多长，而只关心线段之间的关系（相对大小，位置关系）。所以我们可以为每一个需要染色的区间的左右端点分配一个id，并通过id来建立线段树。所有的修改与查询都在这棵”id线段树“上进行。离散化的实际实现一般通过sort()和unique。</p>
<p>下面用一道例题来讲解：</p>
<p><a href="http://poj.org/problem?id=2528">Mayor's posters</a></p>
<p>题目大意是说，有一堵长为10000000，现在要在墙上贴<span class="math inline">\(n(1\leq n\leq 10000)\)</span>张海报（海报与海报之间会相互覆盖），问贴完所有海报后，能看到的海报有多少张？</p>
<p>与上面提到的染色问题思路一致，将每张海报离散化后，用离散化得到的id建立线段树，并通过query查询能看到的海报的数目。完成离散化后，通过lower_bound()查询左右端点对应的id。</p>
<p>参考代码：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb10-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb10-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb10-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb10-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb10-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb10-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb10-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb10-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb10-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb10-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb10-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb10-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb10-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb10-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb10-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb10-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb10-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb10-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">10005</span>;</a>
<a class="sourceLine" id="cb10-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb10-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb10-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb10-22" title="22"><span class="dt">int</span> vis[<span class="dv">10000</span>+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb10-23" title="23"><span class="dt">int</span> lazy[maxn&lt;&lt;<span class="dv">3</span>];</a>
<a class="sourceLine" id="cb10-24" title="24"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb10-25" title="25">    <span class="dt">int</span> lef;</a>
<a class="sourceLine" id="cb10-26" title="26">    <span class="dt">int</span> rig;</a>
<a class="sourceLine" id="cb10-27" title="27">};</a>
<a class="sourceLine" id="cb10-28" title="28">node ps[<span class="dv">20000</span>+<span class="dv">5</span>];</a>
<a class="sourceLine" id="cb10-29" title="29"><span class="dt">void</span> pushdown(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb10-30" title="30">{</a>
<a class="sourceLine" id="cb10-31" title="31">    <span class="cf">if</span>(lazy[rt]!=<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb10-32" title="32">        lazy[rt&lt;&lt;<span class="dv">1</span>]=lazy[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=lazy[rt];</a>
<a class="sourceLine" id="cb10-33" title="33">        lazy[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-34" title="34">    }</a>
<a class="sourceLine" id="cb10-35" title="35">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb10-36" title="36">}</a>
<a class="sourceLine" id="cb10-37" title="37"><span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-38" title="38"><span class="dt">void</span> update(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb10-39" title="39">{</a>
<a class="sourceLine" id="cb10-40" title="40">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig){</a>
<a class="sourceLine" id="cb10-41" title="41">        lazy[rt]=todo;</a>
<a class="sourceLine" id="cb10-42" title="42">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb10-43" title="43">    }</a>
<a class="sourceLine" id="cb10-44" title="44">    pushdown(rt);</a>
<a class="sourceLine" id="cb10-45" title="45">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb10-46" title="46">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb10-47" title="47">        update(toL,toR,todo,lson);</a>
<a class="sourceLine" id="cb10-48" title="48">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb10-49" title="49">        update(toL,toR,todo,rson);</a>
<a class="sourceLine" id="cb10-50" title="50">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb10-51" title="51">}</a>
<a class="sourceLine" id="cb10-52" title="52"><span class="dt">void</span> query(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb10-53" title="53">{</a>
<a class="sourceLine" id="cb10-54" title="54">    <span class="cf">if</span>(lazy[rt]){</a>
<a class="sourceLine" id="cb10-55" title="55">        <span class="cf">if</span>(!vis[lazy[rt]]){</a>
<a class="sourceLine" id="cb10-56" title="56">            ans++;</a>
<a class="sourceLine" id="cb10-57" title="57">            vis[lazy[rt]]=<span class="dv">1</span>;    </a>
<a class="sourceLine" id="cb10-58" title="58">        }</a>
<a class="sourceLine" id="cb10-59" title="59">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb10-60" title="60">    }</a>
<a class="sourceLine" id="cb10-61" title="61">    <span class="cf">if</span>(lef==rig)</a>
<a class="sourceLine" id="cb10-62" title="62">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb10-63" title="63">    pushdown(rt);</a>
<a class="sourceLine" id="cb10-64" title="64">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb10-65" title="65">    <span class="cf">if</span>(lef&lt;=mid)</a>
<a class="sourceLine" id="cb10-66" title="66">        query(lson);</a>
<a class="sourceLine" id="cb10-67" title="67">    <span class="cf">if</span>(rig&gt;mid)</a>
<a class="sourceLine" id="cb10-68" title="68">        query(rson);</a>
<a class="sourceLine" id="cb10-69" title="69">}</a>
<a class="sourceLine" id="cb10-70" title="70"><span class="dt">int</span> lsh[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb10-71" title="71"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb10-72" title="72">{</a>
<a class="sourceLine" id="cb10-73" title="73">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb10-74" title="74">    cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb10-75" title="75">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb10-76" title="76">        <span class="dt">int</span> idx=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-77" title="77">        mst(lsh,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb10-78" title="78">        mst(lazy,<span class="dv">0</span>);mst(vis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb10-79" title="79">        ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-80" title="80">        <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb10-81" title="81">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb10-82" title="82">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;ps[i].lef,&amp;ps[i].rig);</a>
<a class="sourceLine" id="cb10-83" title="83">            lsh[idx++]=ps[i].lef;lsh[idx++]=ps[i].rig;</a>
<a class="sourceLine" id="cb10-84" title="84">        }</a>
<a class="sourceLine" id="cb10-85" title="85">        sort(lsh,lsh+idx);</a>
<a class="sourceLine" id="cb10-86" title="86">        <span class="dt">int</span> cnt=unique(lsh,lsh+idx)-lsh;</a>
<a class="sourceLine" id="cb10-87" title="87">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb10-88" title="88">            <span class="dt">int</span> L=lower_bound(lsh,lsh+cnt,ps[i].lef)-lsh+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb10-89" title="89">            <span class="dt">int</span> R=lower_bound(lsh,lsh+cnt,ps[i].rig)-lsh+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb10-90" title="90">            update(L,R,i+<span class="dv">1</span>,<span class="dv">1</span>,cnt+<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb10-91" title="91">        }</a>
<a class="sourceLine" id="cb10-92" title="92">        query(<span class="dv">1</span>,cnt+<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb10-93" title="93">        printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb10-94" title="94">    }</a>
<a class="sourceLine" id="cb10-95" title="95">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-96" title="96">}</a></code></pre></div>
<h3 id="拓展">拓展</h3>
<p>拓展内容包括：</p>
<ul>
<li><p>区间除、维护区间平方和、维护区间立方和、区间位运算...</p></li>
<li>扫描线</li>
<li>权值线段树</li>
<li>主席树</li>
<li><p>etc...</p></li>
</ul>
<h2 id="树状数组">树状数组</h2>
<h3 id="引入-1">引入</h3>
<p>所谓树状数组，就是用数组来模拟树形结构，常用于解决一些区间问题（区间加、区间求和等）。相较于线段树，其优点在于常数更小，且代码更短。缺点在于功能比较有限，对于一些复杂的区间问题很难解决，甚至是无法解决。可以说，能用树状数组解决的问题都能用线段树解决，但能用线段树解决的问题不一定能用树状数组解决。</p>
<h3 id="辅助数组c与lowbit">辅助数组c与lowbit</h3>
<p>首先，定义一个序列<span class="math inline">\(a_n\)</span>，其长度为<span class="math inline">\(n(1\leq n\leq1e6)\)</span>，可进行<span class="math inline">\(m(1\leq m \leq 1e3)\)</span>次操作，每次操作要么是对一个数加上一个数值（单点修改），要么是查询一段区间内的总和（区间查询）。</p>
<p>这一问题当然可以用上面所说的线段树来解决，但现在我们引入树状数组。</p>
<p>首先定义函数<span class="math inline">\(lowbit(x)\)</span>，有 <span class="math display">\[
lowbit(x)=x\&amp;(-x)
\]</span></p>
<p><span class="math inline">\(lowbit(x)\)</span>的具体含义在于，求出<span class="math display">\[x\]</span>最低位1所对应的值。比方说，<span class="math display">\[lowbit(10100_2)=100_2=4_{10}\]</span>，<span class="math display">\[lowbit(10001111_2)=1_2=1_{10}\]</span>，<span class="math display">\[lowbit(100010_2)=10_2=2_{10}\]</span></p>
<p>再定义一个辅助数组<span class="math inline">\(c_i\)</span>，有 <span class="math display">\[$
c_i=a_{i}+a_{i-1}+\dots+a_{i-lowbit(i)+1}
\]</span>$</p>
<p>也就是说，c[i]表示的是, 从a[i]开始，一直到 a[i-lowbit(i)+1] 这一长度为lowbit(i) 的连续区间的总和。如下图</p>
<p><img src="https://pic.downk.cc/item/5e3adb222fb38b8c3cced2a6.png"></p>
<p>构建出来的树状数组大致长下面这个样子</p>
<p><img src="https://pic.downk.cc/item/5e3adb452fb38b8c3cced59d.jpg"></p>
<h3 id="修改与查询">修改与查询</h3>
<p>此处只考虑单点修改和区间查询。</p>
<ul>
<li><p>单点修改：当我们要修改<span class="math display">\[a_j\]</span>的时候，因为有<span class="math display">\[c_i=a_i+a_{i-1}+\dots+a_{i-lowbit(i)+1}\]</span>，所以修改一个数可能会导致多个<span class="math display">\[c_i\]</span>的改变。所以我们这么编写单点修改的代码：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb11-1" title="1"><span class="dt">void</span> add(<span class="dt">int</span> i,<span class="dt">int</span> val)</a>
<a class="sourceLine" id="cb11-2" title="2">{</a>
<a class="sourceLine" id="cb11-3" title="3">    <span class="cf">while</span>(i&lt;=n){</a>
<a class="sourceLine" id="cb11-4" title="4">        c[i]+=val;</a>
<a class="sourceLine" id="cb11-5" title="5">        i+=lowbit(i);</a>
<a class="sourceLine" id="cb11-6" title="6">    }</a>
<a class="sourceLine" id="cb11-7" title="7">}</a></code></pre></div></li>
<li><p>对于区间查询，<span class="math inline">\(c_i\)</span>的定义让我们想到，是否可以通过求前缀和的方法求区间和。因此，查询的代码可以这样编写：</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb12-1" title="1"><span class="dt">int</span> query(<span class="dt">int</span> i)</a>
<a class="sourceLine" id="cb12-2" title="2">{</a>
<a class="sourceLine" id="cb12-3" title="3">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-4" title="4">    <span class="cf">while</span>(i&gt;<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb12-5" title="5">        ans+=c[i];</a>
<a class="sourceLine" id="cb12-6" title="6">        i-=lowbit(i);</a>
<a class="sourceLine" id="cb12-7" title="7">    }</a>
<a class="sourceLine" id="cb12-8" title="8">}</a></code></pre></div></li>
</ul>
<p>通过观察修改、查询的代码，以及树状数组的结构，我们可以看出，树状数组其实巧用二进制来对整个序列进行分段。以一个长度为7的序列为例，有 <span class="math display">\[
\begin{aligned}
lowbit(1)&amp;=1,c_1=a_1;\\
lowbit(2)&amp;=2,c_2=a_2+a_1;\\
lowbit(3)&amp;=1,c_2=a_3;\\
lowbit(4)&amp;=4,c_4=a_4+a_3+a_2+a_1;\\
lowbit(5)&amp;=1,c_5=a_5;\\
lowbit(6)&amp;=2,c_6=a_6+a_5;\\
lowbit(7)&amp;=1,c_7=a_7;
\end{aligned}
\]</span> 我们把这些数据套到query()代码中，可以发现，加上的<span class="math inline">\(c[i]\)</span>分别是<span class="math inline">\(c[7],c[6],c[4]\)</span>，也就是<span class="math inline">\(a[7],a[6]+a[5],a[4]+a[3]+a[2]+a[1]\)</span>这三段。</p>
]]></content>
      <categories>
        <category>ACM</category>
        <category>数据结构</category>
        <category>线段树</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>数据结构</tag>
        <tag>线段树</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统三（一）——计算机概要与技术</title>
    <url>/2020/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%89%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A6%82%E8%A6%81%E4%B8%8E%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p><img src="https://pic.downk.cc/item/5f924bd31cd1bbb86be6ec2b.jpg"> <span id="more"></span></p>
<h4 id="八个伟大思想">八个伟大思想</h4>
<ul>
<li>面向摩尔定律的设计</li>
<li>使用抽象简化设计</li>
<li>加速大概率时间</li>
<li>通过并行提高性能</li>
<li>通过流水线提高性能</li>
<li>存储器层次</li>
<li>通过冗余提高可靠性</li>
</ul>
<h4 id="集成电路的成本">集成电路的成本</h4>
<ul>
<li><span class="math inline">\(每芯片的价格=每晶圆的价格/(每晶圆的芯片数\times 成品率)\)</span></li>
<li><span class="math inline">\(每晶圆的芯片数\approx 晶圆面积/芯片面积\)</span></li>
<li><span class="math inline">\(成品率=1/(1+(单位面积的瑕疵数\times芯片面积/2))^2\)</span>（经验公式）</li>
<li>芯片面积与缺陷率非线性相关
<ul>
<li>晶圆成本和面积是固定的</li>
<li>缺陷率取决于制造过程</li>
<li>芯片面积取决于结构和电路设计</li>
</ul></li>
</ul>
<h4 id="响应时间和吞吐量">响应时间和吞吐量</h4>
<ul>
<li><p>响应时间（也叫执行时间）</p>
<p>计算机完成某任务所需的总时间</p></li>
<li><p>吞吐量（也叫带宽）</p>
<p>单位时间段内完成的任务数</p></li>
</ul>
<h4 id="时钟周期时钟频率与cpi计算题">时钟周期、时钟频率与CPI（计算题）</h4>
<ul>
<li><p>时钟周期：从一个上升沿到下一个上升沿的时间</p></li>
<li><p>时钟频率=1/时钟周期</p></li>
<li><p>对于时钟频率，1ns的时钟周期对应1GHz的时钟频率，所以0.25ns的时钟周期对应4GHz的时钟频率</p></li>
<li><p>CPU时间=CPU时钟周期数×时钟周期=CPU时钟周期数×1/时钟频率</p></li>
<li><p>CPI：clocks per instruction，每条指令占用的平均时钟周期数</p></li>
<li><p>如果有n种不同类型指令，则</p>
<p>总cpu时钟周期数=<span class="math inline">\(\sum_{i=1}^n(CPI_i\times C_i)\)</span></p>
<p>加权平均CPI：CPU=<span class="math inline">\(总CPU时钟周期数/指令数=\sum_{i=1}^n(CPI_i\times\frac{C_i}{指令数})\)</span></p></li>
<li><p>能耗正比于：<span class="math inline">\(1/2\times负载电容\times电压^2\)</span></p></li>
</ul>
]]></content>
      <categories>
        <category>计算机系统三</category>
      </categories>
      <tags>
        <tag>计算机系统三</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树专题总结</title>
    <url>/2019/08/10/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><img src="https://ae01.alicdn.com/kf/H8248ceab1da6430e949cd345061b92c0I.jpg"></p>
<p>Photo by <strong>Mohsin</strong> khan from <strong>Pexels</strong> <span id="more"></span> ### 前言</p>
<p>线段树的专题事实上早就已经刷完了，然而一直拖到现在才写题解......</p>
<p>bin巨的线段树专题主要包括以下几个方面：</p>
<ul>
<li>线段树维护和、区间和、立方和、最大值、最小值</li>
<li>线段树与染色问题</li>
<li>区间合并</li>
<li>扫描线</li>
</ul>
<h3 id="正文">正文</h3>
<p><a href="https://cn.vjudge.net/problem/HDU-1166">HDU1166 敌兵布阵</a></p>
<p>题意是说，现在有N个数，三种操作，这三种操作分别是：</p>
<ul>
<li>Add i j，表示在第<span class="math inline">\(i\)</span>个数<span class="math inline">\(a_i\)</span>上加上<span class="math inline">\(j\)</span></li>
<li>Sub i j，表示在第<span class="math inline">\(i\)</span>个数<span class="math inline">\(a_i\)</span>上减去<span class="math inline">\(j\)</span></li>
<li>Query i j，表示询问区间<span class="math inline">\([i,j]\)</span>的总和</li>
</ul>
<p>典型的单点修改区间查询。直接套线段树模板即可。sub操作可以通过add上相反数实现。</p>
<p>代码如下</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb1-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb1-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb1-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb1-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb1-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb1-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb1-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">50005</span>;</a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb1-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb1-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb1-22" title="22"><span class="dt">int</span> sum[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb1-23" title="23"><span class="dt">int</span> arr[maxn];</a>
<a class="sourceLine" id="cb1-24" title="24"><span class="dt">void</span> push_up(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-25" title="25">{</a>
<a class="sourceLine" id="cb1-26" title="26">    sum[rt]=sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]+sum[rt&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb1-27" title="27">}</a>
<a class="sourceLine" id="cb1-28" title="28"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-29" title="29">{</a>
<a class="sourceLine" id="cb1-30" title="30">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb1-31" title="31">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;sum[rt]);</a>
<a class="sourceLine" id="cb1-32" title="32">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-33" title="33">    }</a>
<a class="sourceLine" id="cb1-34" title="34">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-35" title="35">    build(lson);</a>
<a class="sourceLine" id="cb1-36" title="36">    build(rson);</a>
<a class="sourceLine" id="cb1-37" title="37">    push_up(rt);</a>
<a class="sourceLine" id="cb1-38" title="38">}</a>
<a class="sourceLine" id="cb1-39" title="39"><span class="dt">void</span> update(<span class="dt">int</span> pos,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-40" title="40">{</a>
<a class="sourceLine" id="cb1-41" title="41">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb1-42" title="42">        sum[rt]+=todo;</a>
<a class="sourceLine" id="cb1-43" title="43">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb1-44" title="44">    }</a>
<a class="sourceLine" id="cb1-45" title="45">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-46" title="46">    <span class="cf">if</span>(pos&lt;=mid)</a>
<a class="sourceLine" id="cb1-47" title="47">        update(pos,todo,lson);</a>
<a class="sourceLine" id="cb1-48" title="48">    <span class="cf">else</span></a>
<a class="sourceLine" id="cb1-49" title="49">        update(pos,todo,rson);</a>
<a class="sourceLine" id="cb1-50" title="50">    push_up(rt);</a>
<a class="sourceLine" id="cb1-51" title="51">}</a>
<a class="sourceLine" id="cb1-52" title="52"><span class="dt">int</span> query(<span class="dt">int</span> L,<span class="dt">int</span> R,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb1-53" title="53">{</a>
<a class="sourceLine" id="cb1-54" title="54">    <span class="cf">if</span>(L&lt;=lef&amp;&amp;R&gt;=rig)</a>
<a class="sourceLine" id="cb1-55" title="55">        <span class="cf">return</span> sum[rt];</a>
<a class="sourceLine" id="cb1-56" title="56">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb1-57" title="57">    <span class="dt">int</span> ret=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-58" title="58">    <span class="cf">if</span>(L&lt;=mid)</a>
<a class="sourceLine" id="cb1-59" title="59">        ret+=query(L,R,lson);</a>
<a class="sourceLine" id="cb1-60" title="60">    <span class="cf">if</span>(R&gt;mid)</a>
<a class="sourceLine" id="cb1-61" title="61">        ret+=query(L,R,rson);</a>
<a class="sourceLine" id="cb1-62" title="62">    <span class="cf">return</span> ret;</a>
<a class="sourceLine" id="cb1-63" title="63">}</a>
<a class="sourceLine" id="cb1-64" title="64"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb1-65" title="65">{</a>
<a class="sourceLine" id="cb1-66" title="66">    <span class="dt">int</span> t;</a>
<a class="sourceLine" id="cb1-67" title="67">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-68" title="68">    scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb1-69" title="69">    getchar();</a>
<a class="sourceLine" id="cb1-70" title="70">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb1-71" title="71">        printf(<span class="st">"Case </span><span class="sc">%d</span><span class="st">:</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb1-72" title="72">        mst(arr,<span class="dv">0</span>);mst(sum,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb1-73" title="73">        <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb1-74" title="74">        scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb1-75" title="75">        getchar();</a>
<a class="sourceLine" id="cb1-76" title="76"><span class="co">//        for(int i=1;i&lt;=n;i++)</span></a>
<a class="sourceLine" id="cb1-77" title="77"><span class="co">//            scanf("%d",&amp;arr[i]);</span></a>
<a class="sourceLine" id="cb1-78" title="78">        build(<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-79" title="79">        getchar();</a>
<a class="sourceLine" id="cb1-80" title="80">        <span class="cf">while</span>(<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb1-81" title="81">            <span class="dt">char</span> str[<span class="dv">15</span>];<span class="dt">int</span> a,b;</a>
<a class="sourceLine" id="cb1-82" title="82">            scanf(<span class="st">"</span><span class="sc">%s</span><span class="st">"</span>,str);</a>
<a class="sourceLine" id="cb1-83" title="83">            getchar();</a>
<a class="sourceLine" id="cb1-84" title="84">            <span class="cf">if</span>(str[<span class="dv">0</span>]==<span class="ch">'E'</span>)        <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb1-85" title="85">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;a,&amp;b); </a>
<a class="sourceLine" id="cb1-86" title="86">            getchar();</a>
<a class="sourceLine" id="cb1-87" title="87">            <span class="cf">if</span>(str[<span class="dv">0</span>]==<span class="ch">'Q'</span>){</a>
<a class="sourceLine" id="cb1-88" title="88">                <span class="dt">int</span> ans=query(a,b,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-89" title="89">                printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb1-90" title="90">            }<span class="cf">else</span> <span class="cf">if</span>(str[<span class="dv">0</span>]==<span class="ch">'A'</span>){</a>
<a class="sourceLine" id="cb1-91" title="91">                update(a,b,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-92" title="92">            }<span class="cf">else</span> <span class="cf">if</span>(str[<span class="dv">0</span>]==<span class="ch">'S'</span>){</a>
<a class="sourceLine" id="cb1-93" title="93">                update(a,-b,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb1-94" title="94">            }</a>
<a class="sourceLine" id="cb1-95" title="95">        }</a>
<a class="sourceLine" id="cb1-96" title="96">    }</a>
<a class="sourceLine" id="cb1-97" title="97">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb1-98" title="98">} </a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/HDU-1754">HDU1754 I Hate It</a></p>
<p>题意是查询区间最大值，同时还要有修改操作。线段树维护区间最大值即可。</p>
<p>代码如下</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb2-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb2-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb2-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb2-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb2-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb2-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb2-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb2-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb2-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb2-18" title="18"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb2-19" title="19"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb2-20" title="20"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb2-21" title="21"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">200000</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb2-22" title="22"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb2-23" title="23"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb2-24" title="24"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb2-25" title="25"><span class="dt">int</span> maxi[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb2-26" title="26"><span class="dt">void</span> pushup(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb2-27" title="27">{</a>
<a class="sourceLine" id="cb2-28" title="28">    maxi[rt]=max(maxi[rt&lt;&lt;<span class="dv">1</span>],maxi[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb2-29" title="29">}</a>
<a class="sourceLine" id="cb2-30" title="30"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb2-31" title="31">{</a>
<a class="sourceLine" id="cb2-32" title="32">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb2-33" title="33">        <span class="dt">int</span> tmp;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;tmp);</a>
<a class="sourceLine" id="cb2-34" title="34">        maxi[rt]=tmp;</a>
<a class="sourceLine" id="cb2-35" title="35">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb2-36" title="36">    }</a>
<a class="sourceLine" id="cb2-37" title="37">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb2-38" title="38">    build(lson);</a>
<a class="sourceLine" id="cb2-39" title="39">    build(rson);</a>
<a class="sourceLine" id="cb2-40" title="40">    pushup(rt);</a>
<a class="sourceLine" id="cb2-41" title="41">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb2-42" title="42">}</a>
<a class="sourceLine" id="cb2-43" title="43"><span class="dt">void</span> update(<span class="dt">int</span> pos,<span class="dt">int</span> val,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb2-44" title="44">{</a>
<a class="sourceLine" id="cb2-45" title="45">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb2-46" title="46">        maxi[rt]=val;</a>
<a class="sourceLine" id="cb2-47" title="47">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb2-48" title="48">    }</a>
<a class="sourceLine" id="cb2-49" title="49">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb2-50" title="50">    <span class="cf">if</span>(pos&lt;=mid)</a>
<a class="sourceLine" id="cb2-51" title="51">        update(pos,val,lson);</a>
<a class="sourceLine" id="cb2-52" title="52">    <span class="cf">else</span></a>
<a class="sourceLine" id="cb2-53" title="53">        update(pos,val,rson);</a>
<a class="sourceLine" id="cb2-54" title="54">    pushup(rt);</a>
<a class="sourceLine" id="cb2-55" title="55">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb2-56" title="56">}</a>
<a class="sourceLine" id="cb2-57" title="57"><span class="dt">int</span> ans;</a>
<a class="sourceLine" id="cb2-58" title="58"><span class="dt">void</span> query(<span class="dt">int</span> L,<span class="dt">int</span> R,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb2-59" title="59">{</a>
<a class="sourceLine" id="cb2-60" title="60">    <span class="cf">if</span>(L&lt;=lef&amp;&amp;rig&lt;=R){</a>
<a class="sourceLine" id="cb2-61" title="61">        ans=max(ans,maxi[rt]);</a>
<a class="sourceLine" id="cb2-62" title="62">        <span class="cf">return</span> ;    </a>
<a class="sourceLine" id="cb2-63" title="63">    }</a>
<a class="sourceLine" id="cb2-64" title="64">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb2-65" title="65">    <span class="cf">if</span>(L&lt;=mid)</a>
<a class="sourceLine" id="cb2-66" title="66">        query(L,R,lson);</a>
<a class="sourceLine" id="cb2-67" title="67">    <span class="cf">if</span>(R&gt;mid)</a>
<a class="sourceLine" id="cb2-68" title="68">        query(L,R,rson);</a>
<a class="sourceLine" id="cb2-69" title="69">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb2-70" title="70">}</a>
<a class="sourceLine" id="cb2-71" title="71"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb2-72" title="72">{</a>
<a class="sourceLine" id="cb2-73" title="73">    <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb2-74" title="74">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m)!=EOF){</a>
<a class="sourceLine" id="cb2-75" title="75">        build(<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-76" title="76">        ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-77" title="77"><span class="co">//        getchar();</span></a>
<a class="sourceLine" id="cb2-78" title="78">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb2-79" title="79">            getchar();</a>
<a class="sourceLine" id="cb2-80" title="80">            <span class="dt">char</span> op;scanf(<span class="st">"</span><span class="sc">%c</span><span class="st">"</span>,&amp;op);</a>
<a class="sourceLine" id="cb2-81" title="81">            <span class="dt">int</span> x,y;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;x,&amp;y);</a>
<a class="sourceLine" id="cb2-82" title="82">            <span class="cf">if</span>(op==<span class="ch">'Q'</span>){</a>
<a class="sourceLine" id="cb2-83" title="83">                ans=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb2-84" title="84">                query(x,y,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb2-85" title="85">                printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb2-86" title="86">            }<span class="cf">else</span> <span class="cf">if</span>(op==<span class="ch">'U'</span>){</a>
<a class="sourceLine" id="cb2-87" title="87">                update(x,y,<span class="dv">1</span>,n,<span class="dv">1</span>);    </a>
<a class="sourceLine" id="cb2-88" title="88">            }</a>
<a class="sourceLine" id="cb2-89" title="89">        }</a>
<a class="sourceLine" id="cb2-90" title="90">    }</a>
<a class="sourceLine" id="cb2-91" title="91">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb2-92" title="92">}</a></code></pre></div>
<p>这题有多组样例...OTZ</p>
<p><a href="https://cn.vjudge.net/problem/POJ-3468">POJ3468 A Simple Problem with integers</a></p>
<p>题意是说，有一串数字以及两种操作，一是为某一区间上的数都加上某个数，另一个操作是询问区间和。最简单的区间修改区间查询。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb3-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb3-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb3-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb3-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb3-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb3-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb3-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb3-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb3-22" title="22">ll sum[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb3-23" title="23">ll lazy[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb3-24" title="24"><span class="dt">void</span> pushup(ll rt)</a>
<a class="sourceLine" id="cb3-25" title="25">{</a>
<a class="sourceLine" id="cb3-26" title="26">    sum[rt]=sum[rt&lt;&lt;<span class="dv">1</span>]+sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb3-27" title="27">}</a>
<a class="sourceLine" id="cb3-28" title="28"><span class="dt">void</span> build(ll lef,ll rig,ll rt)</a>
<a class="sourceLine" id="cb3-29" title="29">{</a>
<a class="sourceLine" id="cb3-30" title="30">    sum[rt]=<span class="dv">0</span>;lazy[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-31" title="31">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb3-32" title="32"><span class="co">//        cin&gt;&gt;sum[rt];</span></a>
<a class="sourceLine" id="cb3-33" title="33">        scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,&amp;sum[rt]);</a>
<a class="sourceLine" id="cb3-34" title="34">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb3-35" title="35">    }</a>
<a class="sourceLine" id="cb3-36" title="36">    ll mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb3-37" title="37">    build(lson);</a>
<a class="sourceLine" id="cb3-38" title="38">    build(rson);</a>
<a class="sourceLine" id="cb3-39" title="39">    pushup(rt);</a>
<a class="sourceLine" id="cb3-40" title="40">}</a>
<a class="sourceLine" id="cb3-41" title="41"><span class="dt">void</span> pushdown(ll rt,ll len)</a>
<a class="sourceLine" id="cb3-42" title="42">{</a>
<a class="sourceLine" id="cb3-43" title="43">    <span class="cf">if</span>(lazy[rt]){</a>
<a class="sourceLine" id="cb3-44" title="44">        lazy[rt&lt;&lt;<span class="dv">1</span>]+=lazy[rt];</a>
<a class="sourceLine" id="cb3-45" title="45">        lazy[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]+=lazy[rt];</a>
<a class="sourceLine" id="cb3-46" title="46">        sum[rt&lt;&lt;<span class="dv">1</span>]+=lazy[rt]*(len-(len&gt;&gt;<span class="dv">1</span>));</a>
<a class="sourceLine" id="cb3-47" title="47">        sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]+=lazy[rt]*(len&gt;&gt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-48" title="48">        lazy[rt]=<span class="dv">0</span>; </a>
<a class="sourceLine" id="cb3-49" title="49">    }</a>
<a class="sourceLine" id="cb3-50" title="50">}</a>
<a class="sourceLine" id="cb3-51" title="51"><span class="dt">void</span> update(ll toL,ll toR,ll todo,ll lef,ll rig,ll rt)</a>
<a class="sourceLine" id="cb3-52" title="52">{</a>
<a class="sourceLine" id="cb3-53" title="53">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig){</a>
<a class="sourceLine" id="cb3-54" title="54">        lazy[rt]+=todo;</a>
<a class="sourceLine" id="cb3-55" title="55">        sum[rt]+=todo*(rig-lef+<span class="dv">1</span>); </a>
<a class="sourceLine" id="cb3-56" title="56">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb3-57" title="57">    }</a>
<a class="sourceLine" id="cb3-58" title="58">    pushdown(rt,rig-lef+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-59" title="59">    ll mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb3-60" title="60">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb3-61" title="61">        update(toL,toR,todo,lson);</a>
<a class="sourceLine" id="cb3-62" title="62">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb3-63" title="63">        update(toL,toR,todo,rson);</a>
<a class="sourceLine" id="cb3-64" title="64">    pushup(rt);</a>
<a class="sourceLine" id="cb3-65" title="65">}</a>
<a class="sourceLine" id="cb3-66" title="66">ll query(ll toL,ll toR,ll lef,ll rig,ll rt)</a>
<a class="sourceLine" id="cb3-67" title="67">{</a>
<a class="sourceLine" id="cb3-68" title="68">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig){</a>
<a class="sourceLine" id="cb3-69" title="69">        <span class="cf">return</span> sum[rt];</a>
<a class="sourceLine" id="cb3-70" title="70">    }</a>
<a class="sourceLine" id="cb3-71" title="71">    pushdown(rt,rig-lef+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-72" title="72">    ll mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb3-73" title="73">    ll ans=<span class="dv">0</span>; </a>
<a class="sourceLine" id="cb3-74" title="74">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb3-75" title="75">        ans+=query(toL,toR,lson);</a>
<a class="sourceLine" id="cb3-76" title="76">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb3-77" title="77">        ans+=query(toL,toR,rson);</a>
<a class="sourceLine" id="cb3-78" title="78">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb3-79" title="79">        </a>
<a class="sourceLine" id="cb3-80" title="80">}</a>
<a class="sourceLine" id="cb3-81" title="81"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb3-82" title="82">{</a>
<a class="sourceLine" id="cb3-83" title="83"><span class="co">//    std::ios::sync_with_stdio(false);</span></a>
<a class="sourceLine" id="cb3-84" title="84">    ll n,q;</a>
<a class="sourceLine" id="cb3-85" title="85">    scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st">"</span>,&amp;n,&amp;q);</a>
<a class="sourceLine" id="cb3-86" title="86">    build(<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-87" title="87">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;q;i++){</a>
<a class="sourceLine" id="cb3-88" title="88">        <span class="dt">char</span> op;cin&gt;&gt;op;</a>
<a class="sourceLine" id="cb3-89" title="89">        <span class="cf">if</span>(op==<span class="ch">'Q'</span>){</a>
<a class="sourceLine" id="cb3-90" title="90">            ll L,R;</a>
<a class="sourceLine" id="cb3-91" title="91">            scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st">"</span>,&amp;L,&amp;R);</a>
<a class="sourceLine" id="cb3-92" title="92">            ll ans=query(L,R,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-93" title="93">            printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb3-94" title="94">        }<span class="cf">else</span> <span class="cf">if</span>(op==<span class="ch">'C'</span>){</a>
<a class="sourceLine" id="cb3-95" title="95">            ll L,R,to;</a>
<a class="sourceLine" id="cb3-96" title="96">            scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st"> </span><span class="sc">%lld</span><span class="st">"</span>,&amp;L,&amp;R,&amp;to);</a>
<a class="sourceLine" id="cb3-97" title="97">            update(L,R,to,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb3-98" title="98">        }</a>
<a class="sourceLine" id="cb3-99" title="99">    }</a>
<a class="sourceLine" id="cb3-100" title="100">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb3-101" title="101">} </a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/POJ-2528">POJ2528 Mayor's posters</a></p>
<p>已写题解，不再赘述</p>
<p><a href="https://mimori.coding.me/2019/05/18/POJ2528-Mayor-s-poster/">Mayor's poster</a></p>
<p><a href="https://cn.vjudge.net/problem/HDU-1698">HDU1698 Just a Hook</a></p>
<p>就是区间修改区间查询。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb4-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb4-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb4-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb4-15" title="15"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb4-16" title="16"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb4-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb4-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb4-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb4-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb4-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb4-22" title="22"><span class="dt">int</span> lazy[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb4-23" title="23"><span class="dt">int</span> sum[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb4-24" title="24"><span class="dt">void</span> pushup(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb4-25" title="25">{</a>
<a class="sourceLine" id="cb4-26" title="26">    sum[rt]=sum[rt&lt;&lt;<span class="dv">1</span>]+sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb4-27" title="27">}</a>
<a class="sourceLine" id="cb4-28" title="28"><span class="dt">void</span> pushdown(<span class="dt">int</span> rt,<span class="dt">int</span> len)</a>
<a class="sourceLine" id="cb4-29" title="29">{</a>
<a class="sourceLine" id="cb4-30" title="30">    <span class="cf">if</span>(lazy[rt]!=<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb4-31" title="31">        lazy[rt&lt;&lt;<span class="dv">1</span>]=lazy[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=lazy[rt];</a>
<a class="sourceLine" id="cb4-32" title="32">        sum[rt&lt;&lt;<span class="dv">1</span>]=(len-(len&gt;&gt;<span class="dv">1</span>))*lazy[rt];</a>
<a class="sourceLine" id="cb4-33" title="33">        sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=(len&gt;&gt;<span class="dv">1</span>)*lazy[rt];</a>
<a class="sourceLine" id="cb4-34" title="34">        lazy[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-35" title="35">    }</a>
<a class="sourceLine" id="cb4-36" title="36">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb4-37" title="37">}</a>
<a class="sourceLine" id="cb4-38" title="38"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb4-39" title="39">{</a>
<a class="sourceLine" id="cb4-40" title="40">    sum[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-41" title="41">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb4-42" title="42">        sum[rt]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb4-43" title="43">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb4-44" title="44">    }</a>
<a class="sourceLine" id="cb4-45" title="45">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb4-46" title="46">    build(lson);</a>
<a class="sourceLine" id="cb4-47" title="47">    build(rson);</a>
<a class="sourceLine" id="cb4-48" title="48">    pushup(rt);</a>
<a class="sourceLine" id="cb4-49" title="49">}</a>
<a class="sourceLine" id="cb4-50" title="50"><span class="dt">void</span> update(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb4-51" title="51">{</a>
<a class="sourceLine" id="cb4-52" title="52">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig){</a>
<a class="sourceLine" id="cb4-53" title="53">        lazy[rt]=todo;</a>
<a class="sourceLine" id="cb4-54" title="54">        sum[rt]=(rig-lef+<span class="dv">1</span>)*todo;</a>
<a class="sourceLine" id="cb4-55" title="55">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb4-56" title="56">    }</a>
<a class="sourceLine" id="cb4-57" title="57">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb4-58" title="58">    pushdown(rt,rig-lef+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb4-59" title="59">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb4-60" title="60">        update(toL,toR,todo,lson);</a>
<a class="sourceLine" id="cb4-61" title="61">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb4-62" title="62">        update(toL,toR,todo,rson);</a>
<a class="sourceLine" id="cb4-63" title="63">    pushup(rt);</a>
<a class="sourceLine" id="cb4-64" title="64">}</a>
<a class="sourceLine" id="cb4-65" title="65"><span class="dt">int</span> query(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb4-66" title="66">{</a>
<a class="sourceLine" id="cb4-67" title="67">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig){</a>
<a class="sourceLine" id="cb4-68" title="68">        <span class="cf">return</span> sum[rt];</a>
<a class="sourceLine" id="cb4-69" title="69">    }</a>
<a class="sourceLine" id="cb4-70" title="70">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb4-71" title="71">    pushdown(rt,rig-lef+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb4-72" title="72">    <span class="dt">int</span> ret=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-73" title="73">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb4-74" title="74">        ret+=query(toL,toR,lson);</a>
<a class="sourceLine" id="cb4-75" title="75">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb4-76" title="76">        ret+=query(toL,toR,rson);</a>
<a class="sourceLine" id="cb4-77" title="77">    <span class="cf">return</span> ret; </a>
<a class="sourceLine" id="cb4-78" title="78">}</a>
<a class="sourceLine" id="cb4-79" title="79"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb4-80" title="80">{</a>
<a class="sourceLine" id="cb4-81" title="81"><span class="co">//    std::ios::sync_with_stdio(false);</span></a>
<a class="sourceLine" id="cb4-82" title="82">    <span class="dt">int</span> t;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb4-83" title="83">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-84" title="84">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb4-85" title="85">        mst(lazy,<span class="dv">0</span>);mst(sum,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb4-86" title="86">        <span class="dt">int</span> n;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb4-87" title="87">        build(<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb4-88" title="88"><span class="co">//        debug;</span></a>
<a class="sourceLine" id="cb4-89" title="89">        <span class="dt">int</span> q;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;q);</a>
<a class="sourceLine" id="cb4-90" title="90"><span class="co">//        debug;</span></a>
<a class="sourceLine" id="cb4-91" title="91">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;q;i++){</a>
<a class="sourceLine" id="cb4-92" title="92"><span class="co">//            debug;</span></a>
<a class="sourceLine" id="cb4-93" title="93">            <span class="dt">int</span> x,y,z;</a>
<a class="sourceLine" id="cb4-94" title="94">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;x,&amp;y,&amp;z);</a>
<a class="sourceLine" id="cb4-95" title="95">            update(x,y,z,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb4-96" title="96">        }</a>
<a class="sourceLine" id="cb4-97" title="97">        <span class="dt">int</span> ans=query(<span class="dv">1</span>,n,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb4-98" title="98">        printf(<span class="st">"Case </span><span class="sc">%d</span><span class="st">: The total value of the hook is </span><span class="sc">%d</span><span class="st">.</span><span class="sc">\n</span><span class="st">"</span>,++kase,ans);</a>
<a class="sourceLine" id="cb4-99" title="99">    }</a>
<a class="sourceLine" id="cb4-100" title="100">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb4-101" title="101">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/ZOJ-1610">ZOJ1610 Count the Colors</a></p>
<p>依然是染色问题。题意是说，在一条直线上涂色，颜色与颜色之间可以相互覆盖，问最终可以看到的颜色有多少。</p>
<p>与贴海报那题思路几乎一样。只需要用个<span class="math inline">\(cnt[]\)</span>数组记录一下颜色个数即可。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb5-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb5-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb5-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb5-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb5-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb5-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb5-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb5-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb5-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb5-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb5-15" title="15"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb5-16" title="16"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb5-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb5-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">8005</span>;</a>
<a class="sourceLine" id="cb5-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb5-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb5-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb5-22" title="22"><span class="dt">int</span> lazy[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb5-23" title="23"><span class="dt">int</span> cnt[maxn];</a>
<a class="sourceLine" id="cb5-24" title="24"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb5-25" title="25">    <span class="dt">int</span> lef;</a>
<a class="sourceLine" id="cb5-26" title="26">    <span class="dt">int</span> rig;</a>
<a class="sourceLine" id="cb5-27" title="27">    <span class="dt">int</span> to;</a>
<a class="sourceLine" id="cb5-28" title="28">};</a>
<a class="sourceLine" id="cb5-29" title="29">node ns[<span class="dv">8005</span>];</a>
<a class="sourceLine" id="cb5-30" title="30"><span class="dt">void</span> pushdown(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb5-31" title="31">{</a>
<a class="sourceLine" id="cb5-32" title="32">    <span class="cf">if</span>(lazy[rt]!=-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb5-33" title="33">        lazy[rt&lt;&lt;<span class="dv">1</span>]=lazy[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=lazy[rt];</a>
<a class="sourceLine" id="cb5-34" title="34">        lazy[rt]=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb5-35" title="35">    }</a>
<a class="sourceLine" id="cb5-36" title="36">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb5-37" title="37">}</a>
<a class="sourceLine" id="cb5-38" title="38"><span class="dt">void</span> update(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb5-39" title="39">{</a>
<a class="sourceLine" id="cb5-40" title="40">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig){</a>
<a class="sourceLine" id="cb5-41" title="41">        lazy[rt]=todo;</a>
<a class="sourceLine" id="cb5-42" title="42">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb5-43" title="43">    }</a>
<a class="sourceLine" id="cb5-44" title="44">    pushdown(rt);</a>
<a class="sourceLine" id="cb5-45" title="45">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb5-46" title="46">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb5-47" title="47">        update(toL,toR,todo,lson);</a>
<a class="sourceLine" id="cb5-48" title="48">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb5-49" title="49">        update(toL,toR,todo,rson);</a>
<a class="sourceLine" id="cb5-50" title="50">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb5-51" title="51">}</a>
<a class="sourceLine" id="cb5-52" title="52"><span class="dt">int</span> tag=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb5-53" title="53"><span class="dt">void</span> query(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb5-54" title="54">{</a>
<a class="sourceLine" id="cb5-55" title="55">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb5-56" title="56">        <span class="cf">if</span>(lazy[rt]!=-<span class="dv">1</span>&amp;&amp;lazy[rt]!=tag){</a>
<a class="sourceLine" id="cb5-57" title="57">            cnt[lazy[rt]]++;</a>
<a class="sourceLine" id="cb5-58" title="58">        }</a>
<a class="sourceLine" id="cb5-59" title="59">        tag=lazy[rt];</a>
<a class="sourceLine" id="cb5-60" title="60">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb5-61" title="61">    }</a>
<a class="sourceLine" id="cb5-62" title="62">    pushdown(rt);</a>
<a class="sourceLine" id="cb5-63" title="63">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb5-64" title="64">    query(lson);</a>
<a class="sourceLine" id="cb5-65" title="65">    query(rson);</a>
<a class="sourceLine" id="cb5-66" title="66">}</a>
<a class="sourceLine" id="cb5-67" title="67"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb5-68" title="68">{</a>
<a class="sourceLine" id="cb5-69" title="69">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb5-70" title="70">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF)</a>
<a class="sourceLine" id="cb5-71" title="71">    {</a>
<a class="sourceLine" id="cb5-72" title="72">        <span class="dt">int</span> max_id=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb5-73" title="73">        <span class="dt">int</span> range=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb5-74" title="74">        mst(lazy,-<span class="dv">1</span>);mst(cnt,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb5-75" title="75">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb5-76" title="76">            <span class="dt">int</span> lef,rig,to;</a>
<a class="sourceLine" id="cb5-77" title="77">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;ns[i].lef,&amp;ns[i].rig,&amp;ns[i].to);</a>
<a class="sourceLine" id="cb5-78" title="78">            range=max(range,ns[i].rig); </a>
<a class="sourceLine" id="cb5-79" title="79">            max_id=max(max_id,ns[i].to);</a>
<a class="sourceLine" id="cb5-80" title="80">        } </a>
<a class="sourceLine" id="cb5-81" title="81">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb5-82" title="82">            update(ns[i].lef+<span class="dv">1</span>,ns[i].rig,ns[i].to,<span class="dv">0</span>,range,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb5-83" title="83">        query(<span class="dv">0</span>,range,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb5-84" title="84">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;=max_id;i++)</a>
<a class="sourceLine" id="cb5-85" title="85">            <span class="cf">if</span>(cnt[i]!=<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb5-86" title="86">                printf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d\n</span><span class="st">"</span>,i,cnt[i]);</a>
<a class="sourceLine" id="cb5-87" title="87">        printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb5-88" title="88">    }</a>
<a class="sourceLine" id="cb5-89" title="89">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-90" title="90">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/POJ-3264">POJ3264 Balanced Lineup</a></p>
<p>线段树维护区间最大值和最小值</p>
<p>代码如下</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb6-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb6-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb6-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb6-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb6-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb6-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb6-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb6-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb6-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb6-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb6-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb6-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb6-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb6-15" title="15"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb6-16" title="16"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb6-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb6-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">8005</span>;</a>
<a class="sourceLine" id="cb6-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb6-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb6-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb6-22" title="22"><span class="dt">int</span> lazy[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb6-23" title="23"><span class="dt">int</span> cnt[maxn];</a>
<a class="sourceLine" id="cb6-24" title="24"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb6-25" title="25">    <span class="dt">int</span> lef;</a>
<a class="sourceLine" id="cb6-26" title="26">    <span class="dt">int</span> rig;</a>
<a class="sourceLine" id="cb6-27" title="27">    <span class="dt">int</span> to;</a>
<a class="sourceLine" id="cb6-28" title="28">};</a>
<a class="sourceLine" id="cb6-29" title="29">node ns[<span class="dv">8005</span>];</a>
<a class="sourceLine" id="cb6-30" title="30"><span class="dt">void</span> pushdown(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb6-31" title="31">{</a>
<a class="sourceLine" id="cb6-32" title="32">    <span class="cf">if</span>(lazy[rt]!=-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb6-33" title="33">        lazy[rt&lt;&lt;<span class="dv">1</span>]=lazy[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=lazy[rt];</a>
<a class="sourceLine" id="cb6-34" title="34">        lazy[rt]=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb6-35" title="35">    }</a>
<a class="sourceLine" id="cb6-36" title="36">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb6-37" title="37">}</a>
<a class="sourceLine" id="cb6-38" title="38"><span class="dt">void</span> update(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb6-39" title="39">{</a>
<a class="sourceLine" id="cb6-40" title="40">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig){</a>
<a class="sourceLine" id="cb6-41" title="41">        lazy[rt]=todo;</a>
<a class="sourceLine" id="cb6-42" title="42">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb6-43" title="43">    }</a>
<a class="sourceLine" id="cb6-44" title="44">    pushdown(rt);</a>
<a class="sourceLine" id="cb6-45" title="45">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb6-46" title="46">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb6-47" title="47">        update(toL,toR,todo,lson);</a>
<a class="sourceLine" id="cb6-48" title="48">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb6-49" title="49">        update(toL,toR,todo,rson);</a>
<a class="sourceLine" id="cb6-50" title="50">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb6-51" title="51">}</a>
<a class="sourceLine" id="cb6-52" title="52"><span class="dt">int</span> tag=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb6-53" title="53"><span class="dt">void</span> query(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb6-54" title="54">{</a>
<a class="sourceLine" id="cb6-55" title="55">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb6-56" title="56">        <span class="cf">if</span>(lazy[rt]!=-<span class="dv">1</span>&amp;&amp;lazy[rt]!=tag){</a>
<a class="sourceLine" id="cb6-57" title="57">            cnt[lazy[rt]]++;</a>
<a class="sourceLine" id="cb6-58" title="58">        }</a>
<a class="sourceLine" id="cb6-59" title="59">        tag=lazy[rt];</a>
<a class="sourceLine" id="cb6-60" title="60">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb6-61" title="61">    }</a>
<a class="sourceLine" id="cb6-62" title="62">    pushdown(rt);</a>
<a class="sourceLine" id="cb6-63" title="63">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb6-64" title="64">    query(lson);</a>
<a class="sourceLine" id="cb6-65" title="65">    query(rson);</a>
<a class="sourceLine" id="cb6-66" title="66">}</a>
<a class="sourceLine" id="cb6-67" title="67"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb6-68" title="68">{</a>
<a class="sourceLine" id="cb6-69" title="69">    <span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb6-70" title="70">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF)</a>
<a class="sourceLine" id="cb6-71" title="71">    {</a>
<a class="sourceLine" id="cb6-72" title="72">        <span class="dt">int</span> max_id=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb6-73" title="73">        <span class="dt">int</span> range=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb6-74" title="74">        mst(lazy,-<span class="dv">1</span>);mst(cnt,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb6-75" title="75">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb6-76" title="76">            <span class="dt">int</span> lef,rig,to;</a>
<a class="sourceLine" id="cb6-77" title="77">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;ns[i].lef,&amp;ns[i].rig,&amp;ns[i].to);</a>
<a class="sourceLine" id="cb6-78" title="78">            range=max(range,ns[i].rig); </a>
<a class="sourceLine" id="cb6-79" title="79">            max_id=max(max_id,ns[i].to);</a>
<a class="sourceLine" id="cb6-80" title="80">        } </a>
<a class="sourceLine" id="cb6-81" title="81">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++)</a>
<a class="sourceLine" id="cb6-82" title="82">            update(ns[i].lef+<span class="dv">1</span>,ns[i].rig,ns[i].to,<span class="dv">0</span>,range,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb6-83" title="83">        query(<span class="dv">0</span>,range,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb6-84" title="84">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;=max_id;i++)</a>
<a class="sourceLine" id="cb6-85" title="85">            <span class="cf">if</span>(cnt[i]!=<span class="dv">0</span>)</a>
<a class="sourceLine" id="cb6-86" title="86">                printf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d\n</span><span class="st">"</span>,i,cnt[i]);</a>
<a class="sourceLine" id="cb6-87" title="87">        printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb6-88" title="88">    }</a>
<a class="sourceLine" id="cb6-89" title="89">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb6-90" title="90">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/HDU-4027">HDU4027 Can you answer these queries?</a></p>
<p>题意是说，现在有一正整数序列，还有两种操作，第一种是可以将某一区间内的整数变为其自身的平方根；第二种操作是询问区间和。</p>
<p>注意本题有一个条件，“Notice that the square root operation should be rounded down to integer.”，因此，当某次操作后，如果某个数的结果小于1，那它就直接变成0了！这就给了我们一个解题的思路：这题我们可以一直走到叶子节点再进行平方根操作，对于那些已经为0的数，就可以将它们记录下来，下次操作的时候就可以不用操作这个数了！由此降低复杂度。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb7-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb7-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb7-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb7-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb7-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb7-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb7-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb7-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb7-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb7-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb7-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb7-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb7-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb7-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb7-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb7-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">100000</span>+<span class="dv">10</span>;</a>
<a class="sourceLine" id="cb7-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb7-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb7-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb7-22" title="22">ll sum[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb7-23" title="23"><span class="dt">bool</span> flag[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb7-24" title="24"><span class="dt">void</span> pushup(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb7-25" title="25">{</a>
<a class="sourceLine" id="cb7-26" title="26">    sum[rt]=sum[rt&lt;&lt;<span class="dv">1</span>]+sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb7-27" title="27">    flag[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-28" title="28">    <span class="cf">if</span>(flag[rt&lt;&lt;<span class="dv">1</span>]&amp;&amp;flag[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>])</a>
<a class="sourceLine" id="cb7-29" title="29">        flag[rt]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb7-30" title="30">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb7-31" title="31">}</a>
<a class="sourceLine" id="cb7-32" title="32"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb7-33" title="33">{</a>
<a class="sourceLine" id="cb7-34" title="34">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb7-35" title="35">        scanf(<span class="st">"</span><span class="sc">%lld</span><span class="st">"</span>,&amp;sum[rt]);</a>
<a class="sourceLine" id="cb7-36" title="36">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb7-37" title="37">    }</a>
<a class="sourceLine" id="cb7-38" title="38">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb7-39" title="39">    build(lson);</a>
<a class="sourceLine" id="cb7-40" title="40">    build(rson);</a>
<a class="sourceLine" id="cb7-41" title="41">    pushup(rt);</a>
<a class="sourceLine" id="cb7-42" title="42">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb7-43" title="43">}</a>
<a class="sourceLine" id="cb7-44" title="44"><span class="dt">void</span> update(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb7-45" title="45">{</a>
<a class="sourceLine" id="cb7-46" title="46">    <span class="cf">if</span>(flag[rt])</a>
<a class="sourceLine" id="cb7-47" title="47">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb7-48" title="48">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb7-49" title="49">        sum[rt]=(ll)sqrt(sum[rt]);</a>
<a class="sourceLine" id="cb7-50" title="50">        <span class="cf">if</span>(sum[rt]&lt;=<span class="dv">1</span>)        </a>
<a class="sourceLine" id="cb7-51" title="51">            flag[rt]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb7-52" title="52">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb7-53" title="53">    }</a>
<a class="sourceLine" id="cb7-54" title="54">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb7-55" title="55">    <span class="cf">if</span>(toL&lt;=mid) </a>
<a class="sourceLine" id="cb7-56" title="56">        update(toL,toR,lson);</a>
<a class="sourceLine" id="cb7-57" title="57">    <span class="cf">if</span>(toR&gt;mid)    </a>
<a class="sourceLine" id="cb7-58" title="58">        update(toL,toR,rson);</a>
<a class="sourceLine" id="cb7-59" title="59">    pushup(rt);</a>
<a class="sourceLine" id="cb7-60" title="60">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb7-61" title="61">}</a>
<a class="sourceLine" id="cb7-62" title="62">ll ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-63" title="63"><span class="dt">void</span> query(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb7-64" title="64">{</a>
<a class="sourceLine" id="cb7-65" title="65">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR){</a>
<a class="sourceLine" id="cb7-66" title="66">        ans+=sum[rt];</a>
<a class="sourceLine" id="cb7-67" title="67">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb7-68" title="68">    }</a>
<a class="sourceLine" id="cb7-69" title="69">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb7-70" title="70">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb7-71" title="71">        query(toL,toR,lson);</a>
<a class="sourceLine" id="cb7-72" title="72">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb7-73" title="73">        query(toL,toR,rson);</a>
<a class="sourceLine" id="cb7-74" title="74">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb7-75" title="75">}</a>
<a class="sourceLine" id="cb7-76" title="76"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb7-77" title="77">{</a>
<a class="sourceLine" id="cb7-78" title="78">    <span class="dt">int</span> n;<span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-79" title="79">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n)!=EOF){</a>
<a class="sourceLine" id="cb7-80" title="80">        mst(flag,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb7-81" title="81">        build(<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb7-82" title="82">        <span class="dt">int</span> t;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb7-83" title="83">        printf(<span class="st">"Case #</span><span class="sc">%d</span><span class="st">:</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb7-84" title="84">        <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb7-85" title="85">            <span class="dt">int</span> op,l,r;</a>
<a class="sourceLine" id="cb7-86" title="86">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;op,&amp;l,&amp;r);</a>
<a class="sourceLine" id="cb7-87" title="87">            <span class="cf">if</span>(l&gt;r)</a>
<a class="sourceLine" id="cb7-88" title="88">                swap(l,r);</a>
<a class="sourceLine" id="cb7-89" title="89">            <span class="cf">if</span>(op==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb7-90" title="90">                update(l,r,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb7-91" title="91">            }<span class="cf">else</span> <span class="cf">if</span>(op==<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb7-92" title="92">                ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-93" title="93">                query(l,r,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb7-94" title="94">                printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb7-95" title="95">            }</a>
<a class="sourceLine" id="cb7-96" title="96">        }</a>
<a class="sourceLine" id="cb7-97" title="97">        printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb7-98" title="98">    }</a>
<a class="sourceLine" id="cb7-99" title="99">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb7-100" title="100">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/HDU-1540">HDU1540 Tunnel Warfare</a></p>
<p>地道战。</p>
<p>题意是说，有一系列的村庄，除了末端的两个村庄以外，其他的都与相邻的两个连接形成一条线。现在有三种操作，一种是摧毁第<span class="math inline">\(x\)</span>个村庄；一种是询问有多少个村庄与第<span class="math inline">\(x\)</span>个村庄直接或间接连接；还有一种是将最后被摧毁的村庄修复，意味着该村庄与其邻近两个村庄的连接重新建立。</p>
<p>这题的正解是区间合并，但有一种很巧妙的做法：用线段树维护区间最大值和最小值。对于最大值，一开始初始化每个村庄都为0；对于最小值，初始化每个村庄都为INF。摧毁的时候，如果要摧毁第<span class="math inline">\(x\)</span>个村庄，只需要将对应的maxi[rt]改为<span class="math inline">\(x\)</span>，对应的mini[rt]也改为<span class="math inline">\(x\)</span>即可。查询的时候，对于第<span class="math inline">\(x\)</span>个村庄，查询区间<span class="math inline">\([1,x-1]\)</span>的最小值<span class="math inline">\(mini\_val\)</span>，再查询区间<span class="math inline">\([x,n]\)</span>的最大值<span class="math inline">\(mini\_val\)</span>，答案就是<span class="math inline">\(mini\_val-maxi\_val-1\)</span>。而对于修复操作，只需要将对应的maxi[rt]改回0，mini[rt]改回INF即可。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb8-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb8-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb8-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb8-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb8-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb8-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb8-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb8-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb8-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb8-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb8-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb8-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb8-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb8-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb8-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb8-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb8-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">50000</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb8-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb8-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb8-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb8-22" title="22"><span class="dt">int</span> mini[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb8-23" title="23"><span class="dt">int</span> maxi[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb8-24" title="24"><span class="dt">int</span> n;</a>
<a class="sourceLine" id="cb8-25" title="25"><span class="dt">void</span> pushup(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb8-26" title="26">{</a>
<a class="sourceLine" id="cb8-27" title="27">    mini[rt]=min(mini[rt&lt;&lt;<span class="dv">1</span>],mini[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb8-28" title="28">    maxi[rt]=max(maxi[rt&lt;&lt;<span class="dv">1</span>],maxi[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb8-29" title="29">}</a>
<a class="sourceLine" id="cb8-30" title="30"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb8-31" title="31">{</a>
<a class="sourceLine" id="cb8-32" title="32">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb8-33" title="33">        mini[rt]=n+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb8-34" title="34">        maxi[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb8-35" title="35">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb8-36" title="36">    }</a>
<a class="sourceLine" id="cb8-37" title="37">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb8-38" title="38">    build(lson);</a>
<a class="sourceLine" id="cb8-39" title="39">    build(rson);</a>
<a class="sourceLine" id="cb8-40" title="40">    pushup(rt);</a>
<a class="sourceLine" id="cb8-41" title="41">}</a>
<a class="sourceLine" id="cb8-42" title="42"><span class="dt">void</span> update_max(<span class="dt">int</span> pos,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb8-43" title="43">{</a>
<a class="sourceLine" id="cb8-44" title="44">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb8-45" title="45">        maxi[rt]=todo;</a>
<a class="sourceLine" id="cb8-46" title="46">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb8-47" title="47">    }</a>
<a class="sourceLine" id="cb8-48" title="48">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb8-49" title="49">    <span class="cf">if</span>(pos&lt;=mid)</a>
<a class="sourceLine" id="cb8-50" title="50">        update_max(pos,todo,lson);</a>
<a class="sourceLine" id="cb8-51" title="51">    <span class="cf">if</span>(pos&gt;mid)</a>
<a class="sourceLine" id="cb8-52" title="52">        update_max(pos,todo,rson);</a>
<a class="sourceLine" id="cb8-53" title="53">    maxi[rt]=max(maxi[rt&lt;&lt;<span class="dv">1</span>],maxi[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb8-54" title="54">}</a>
<a class="sourceLine" id="cb8-55" title="55"><span class="dt">void</span> update_min(<span class="dt">int</span> pos,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb8-56" title="56">{</a>
<a class="sourceLine" id="cb8-57" title="57">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb8-58" title="58">        mini[rt]=todo;</a>
<a class="sourceLine" id="cb8-59" title="59">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb8-60" title="60">    }</a>
<a class="sourceLine" id="cb8-61" title="61">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb8-62" title="62">    <span class="cf">if</span>(pos&lt;=mid)</a>
<a class="sourceLine" id="cb8-63" title="63">        update_min(pos,todo,lson);</a>
<a class="sourceLine" id="cb8-64" title="64">    <span class="cf">if</span>(pos&gt;mid)</a>
<a class="sourceLine" id="cb8-65" title="65">        update_min(pos,todo,rson);</a>
<a class="sourceLine" id="cb8-66" title="66">    mini[rt]=min(mini[rt&lt;&lt;<span class="dv">1</span>],mini[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]);</a>
<a class="sourceLine" id="cb8-67" title="67">}</a>
<a class="sourceLine" id="cb8-68" title="68"><span class="dt">int</span> min_val=INF;</a>
<a class="sourceLine" id="cb8-69" title="69"><span class="dt">int</span> max_val=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb8-70" title="70"><span class="dt">void</span> query_max(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb8-71" title="71">{</a>
<a class="sourceLine" id="cb8-72" title="72">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR){</a>
<a class="sourceLine" id="cb8-73" title="73">        max_val=max(max_val,maxi[rt]);</a>
<a class="sourceLine" id="cb8-74" title="74">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb8-75" title="75">    }</a>
<a class="sourceLine" id="cb8-76" title="76">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb8-77" title="77">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb8-78" title="78">        query_max(toL,toR,lson);</a>
<a class="sourceLine" id="cb8-79" title="79">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb8-80" title="80">        query_max(toL,toR,rson);</a>
<a class="sourceLine" id="cb8-81" title="81">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb8-82" title="82">}</a>
<a class="sourceLine" id="cb8-83" title="83"><span class="dt">void</span> query_min(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb8-84" title="84">{</a>
<a class="sourceLine" id="cb8-85" title="85">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR){</a>
<a class="sourceLine" id="cb8-86" title="86">        min_val=min(min_val,mini[rt]);</a>
<a class="sourceLine" id="cb8-87" title="87">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb8-88" title="88">    }</a>
<a class="sourceLine" id="cb8-89" title="89">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb8-90" title="90">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb8-91" title="91">        query_min(toL,toR,lson);</a>
<a class="sourceLine" id="cb8-92" title="92">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb8-93" title="93">        query_min(toL,toR,rson);</a>
<a class="sourceLine" id="cb8-94" title="94">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb8-95" title="95">}</a>
<a class="sourceLine" id="cb8-96" title="96"><span class="dt">int</span> stk[maxn];</a>
<a class="sourceLine" id="cb8-97" title="97"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb8-98" title="98">{</a>
<a class="sourceLine" id="cb8-99" title="99">    <span class="dt">int</span> m;</a>
<a class="sourceLine" id="cb8-100" title="100">     <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m)!=EOF){</a>
<a class="sourceLine" id="cb8-101" title="101">         getchar();<span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb8-102" title="102">         mst(stk,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb8-103" title="103">         build(<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb8-104" title="104">         <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb8-105" title="105">             max_val=-<span class="dv">2</span>;min_val=INF;</a>
<a class="sourceLine" id="cb8-106" title="106">            <span class="dt">char</span> op;cin&gt;&gt;op;</a>
<a class="sourceLine" id="cb8-107" title="107"><span class="co">//            getchar();getchar();</span></a>
<a class="sourceLine" id="cb8-108" title="108">            <span class="cf">if</span>(op==<span class="ch">'D'</span>){</a>
<a class="sourceLine" id="cb8-109" title="109">                <span class="dt">int</span> a;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;a);</a>
<a class="sourceLine" id="cb8-110" title="110">                stk[cnt++]=a;</a>
<a class="sourceLine" id="cb8-111" title="111">                update_max(a,a,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb8-112" title="112">                update_min(a,a,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb8-113" title="113">            }<span class="cf">else</span> <span class="cf">if</span>(op==<span class="ch">'Q'</span>){</a>
<a class="sourceLine" id="cb8-114" title="114">                <span class="dt">int</span> a;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;a);</a>
<a class="sourceLine" id="cb8-115" title="115">                query_max(<span class="dv">1</span>,a,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb8-116" title="116">                query_min(a,n,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb8-117" title="117"><span class="co">//                cout&lt;&lt;"max:"&lt;&lt;max_val&lt;&lt;" "&lt;&lt;"min:"&lt;&lt;min_val&lt;&lt;endl; </span></a>
<a class="sourceLine" id="cb8-118" title="118"><span class="co">//                if(min_val==50001)        min_val=n+1;</span></a>
<a class="sourceLine" id="cb8-119" title="119"><span class="co">//                if(max_val==-1)        max_val=1;</span></a>
<a class="sourceLine" id="cb8-120" title="120">                <span class="dt">int</span> ans=min_val-max_val-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb8-121" title="121">                <span class="cf">if</span>(min_val==max_val)        ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb8-122" title="122">                printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb8-123" title="123">            }<span class="cf">else</span> <span class="cf">if</span>(op==<span class="ch">'R'</span>){</a>
<a class="sourceLine" id="cb8-124" title="124">                <span class="dt">int</span> tmp=stk[--cnt];</a>
<a class="sourceLine" id="cb8-125" title="125">                update_max(tmp,<span class="dv">0</span>,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb8-126" title="126">                update_min(tmp,n+<span class="dv">1</span>,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb8-127" title="127">            }</a>
<a class="sourceLine" id="cb8-128" title="128">        }</a>
<a class="sourceLine" id="cb8-129" title="129">    }</a>
<a class="sourceLine" id="cb8-130" title="130">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb8-131" title="131">}</a></code></pre></div>
<p>然而本题的正解我却没有写hhhh，先挖个坑，到时再补</p>
<p><a href="https://cn.vjudge.net/problem/HDU-3974">HDU3974 Assign the task</a></p>
<p>题意是说，一个公司有N个员工，每个员工都有一个直接的上司。叶子节点没有下属，树根没有上司。当上司收到工作后，上司会将这份工作下发给他的所有下属，包括不直属的下属。下属在收到一份新的工作后，会马上停止手头上的工作开始新的工作。问，当前某个员工的工作是什么。</p>
<p>先用dfs序将树转为线性区间，就转化为单点查询区间修改的问题了，可以直接用线段树来搞。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb9-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb9-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb9-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb9-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb9-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb9-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb9-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb9-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb9-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb9-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb9-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb9-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb9-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb9-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb9-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb9-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb9-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb9-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">50010</span>;</a>
<a class="sourceLine" id="cb9-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb9-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb9-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb9-22" title="22"><span class="dt">int</span> in[maxn];</a>
<a class="sourceLine" id="cb9-23" title="23"><span class="dt">int</span> out[maxn];</a>
<a class="sourceLine" id="cb9-24" title="24">vector&lt;<span class="dt">int</span>&gt; gra[maxn];</a>
<a class="sourceLine" id="cb9-25" title="25"><span class="dt">int</span> tree[maxn&lt;&lt;<span class="dv">3</span>];</a>
<a class="sourceLine" id="cb9-26" title="26"><span class="dt">int</span> len=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb9-27" title="27"><span class="dt">bool</span> vis[maxn];</a>
<a class="sourceLine" id="cb9-28" title="28"><span class="dt">int</span> id=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb9-29" title="29"><span class="dt">void</span> dfs(<span class="dt">int</span> u)        <span class="co">//id从1开始 </span></a>
<a class="sourceLine" id="cb9-30" title="30">{</a>
<a class="sourceLine" id="cb9-31" title="31">    len++;</a>
<a class="sourceLine" id="cb9-32" title="32">    in[u]=id++;        <span class="co">//记录一下入栈时间 </span></a>
<a class="sourceLine" id="cb9-33" title="33">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;gra[u].size();i++){</a>
<a class="sourceLine" id="cb9-34" title="34">        dfs(gra[u][i]);</a>
<a class="sourceLine" id="cb9-35" title="35">    }</a>
<a class="sourceLine" id="cb9-36" title="36">    out[u]=id++;    <span class="co">//记录一下出栈时间 </span></a>
<a class="sourceLine" id="cb9-37" title="37">    len++;</a>
<a class="sourceLine" id="cb9-38" title="38">}</a>
<a class="sourceLine" id="cb9-39" title="39"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb9-40" title="40">{</a>
<a class="sourceLine" id="cb9-41" title="41">    tree[rt]=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb9-42" title="42">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb9-43" title="43">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb9-44" title="44">    }</a>
<a class="sourceLine" id="cb9-45" title="45">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb9-46" title="46">    build(lson);</a>
<a class="sourceLine" id="cb9-47" title="47">    build(rson);</a>
<a class="sourceLine" id="cb9-48" title="48">}</a>
<a class="sourceLine" id="cb9-49" title="49"><span class="dt">void</span> pushdown(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb9-50" title="50">{</a>
<a class="sourceLine" id="cb9-51" title="51">    <span class="cf">if</span>(tree[rt]!=-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb9-52" title="52">        tree[rt&lt;&lt;<span class="dv">1</span>]=tree[rt];</a>
<a class="sourceLine" id="cb9-53" title="53">        tree[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=tree[rt];</a>
<a class="sourceLine" id="cb9-54" title="54">        tree[rt]=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb9-55" title="55">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb9-56" title="56">    }</a>
<a class="sourceLine" id="cb9-57" title="57">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb9-58" title="58">}</a>
<a class="sourceLine" id="cb9-59" title="59"><span class="dt">void</span> update(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb9-60" title="60">{</a>
<a class="sourceLine" id="cb9-61" title="61">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR){</a>
<a class="sourceLine" id="cb9-62" title="62">        tree[rt]=todo;</a>
<a class="sourceLine" id="cb9-63" title="63">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb9-64" title="64">    }</a>
<a class="sourceLine" id="cb9-65" title="65">    pushdown(rt);</a>
<a class="sourceLine" id="cb9-66" title="66">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb9-67" title="67">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb9-68" title="68">        update(toL,toR,todo,lson);</a>
<a class="sourceLine" id="cb9-69" title="69">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb9-70" title="70">        update(toL,toR,todo,rson);</a>
<a class="sourceLine" id="cb9-71" title="71">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb9-72" title="72">}</a>
<a class="sourceLine" id="cb9-73" title="73"><span class="dt">int</span> ans;</a>
<a class="sourceLine" id="cb9-74" title="74"><span class="dt">void</span> query(<span class="dt">int</span> pos,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb9-75" title="75">{</a>
<a class="sourceLine" id="cb9-76" title="76">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb9-77" title="77">        ans=tree[rt];</a>
<a class="sourceLine" id="cb9-78" title="78">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb9-79" title="79">    }</a>
<a class="sourceLine" id="cb9-80" title="80">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb9-81" title="81">    pushdown(rt);</a>
<a class="sourceLine" id="cb9-82" title="82">    <span class="cf">if</span>(pos&lt;=mid)</a>
<a class="sourceLine" id="cb9-83" title="83">        query(pos,lson);</a>
<a class="sourceLine" id="cb9-84" title="84">    <span class="cf">if</span>(pos&gt;mid)</a>
<a class="sourceLine" id="cb9-85" title="85">        query(pos,rson);</a>
<a class="sourceLine" id="cb9-86" title="86">    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb9-87" title="87">}</a>
<a class="sourceLine" id="cb9-88" title="88"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb9-89" title="89">{</a>
<a class="sourceLine" id="cb9-90" title="90"><span class="co">//    freopen("data_generator.txt","r",stdin);</span></a>
<a class="sourceLine" id="cb9-91" title="91">    <span class="dt">int</span> t;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb9-92" title="92">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb9-93" title="93">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb9-94" title="94">        printf(<span class="st">"Case #</span><span class="sc">%d</span><span class="st">:</span><span class="sc">\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb9-95" title="95">        ans=<span class="dv">0</span>;id=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb9-96" title="96">        mst(vis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb9-97" title="97">        mst(in,<span class="dv">0</span>);mst(out,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb9-98" title="98">        <span class="dt">int</span> n;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb9-99" title="99">        build(<span class="dv">1</span>,<span class="dv">2</span>*n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb9-100" title="100">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n-<span class="dv">1</span>;i++){</a>
<a class="sourceLine" id="cb9-101" title="101">            <span class="dt">int</span> u,v;</a>
<a class="sourceLine" id="cb9-102" title="102">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;u,&amp;v);</a>
<a class="sourceLine" id="cb9-103" title="103">            gra[v].push_back(u);</a>
<a class="sourceLine" id="cb9-104" title="104">            vis[u]=<span class="dv">1</span>;        <span class="co">//用来记录节点u是否是别人的儿子 </span></a>
<a class="sourceLine" id="cb9-105" title="105">        }</a>
<a class="sourceLine" id="cb9-106" title="106">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++){</a>
<a class="sourceLine" id="cb9-107" title="107">            <span class="cf">if</span>(!vis[i]){</a>
<a class="sourceLine" id="cb9-108" title="108">                dfs(i);</a>
<a class="sourceLine" id="cb9-109" title="109">                <span class="cf">break</span>;</a>
<a class="sourceLine" id="cb9-110" title="110">            }</a>
<a class="sourceLine" id="cb9-111" title="111">        }</a>
<a class="sourceLine" id="cb9-112" title="112">        <span class="dt">int</span> m;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;m);</a>
<a class="sourceLine" id="cb9-113" title="113"><span class="co">//        getchar();</span></a>
<a class="sourceLine" id="cb9-114" title="114">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb9-115" title="115">            <span class="dt">char</span> op;cin&gt;&gt;op;</a>
<a class="sourceLine" id="cb9-116" title="116"><span class="co">//            char tmp=getchar();</span></a>
<a class="sourceLine" id="cb9-117" title="117">            <span class="cf">if</span>(op==<span class="ch">'C'</span>){</a>
<a class="sourceLine" id="cb9-118" title="118">                <span class="dt">int</span> x;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;x);</a>
<a class="sourceLine" id="cb9-119" title="119">                query(in[x],<span class="dv">1</span>,<span class="dv">2</span>*n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb9-120" title="120">                printf(<span class="st">"</span><span class="sc">%d\n</span><span class="st">"</span>,ans);    </a>
<a class="sourceLine" id="cb9-121" title="121">            }<span class="cf">else</span> <span class="cf">if</span>(op==<span class="ch">'T'</span>){</a>
<a class="sourceLine" id="cb9-122" title="122">                <span class="dt">int</span> x,y;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;x,&amp;y);</a>
<a class="sourceLine" id="cb9-123" title="123">                update(in[x],out[x],y,<span class="dv">1</span>,<span class="dv">2</span>*n,<span class="dv">1</span>);    </a>
<a class="sourceLine" id="cb9-124" title="124">            }</a>
<a class="sourceLine" id="cb9-125" title="125">        }</a>
<a class="sourceLine" id="cb9-126" title="126">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;=n;i++)</a>
<a class="sourceLine" id="cb9-127" title="127">            gra[i].clear();</a>
<a class="sourceLine" id="cb9-128" title="128">    }</a>
<a class="sourceLine" id="cb9-129" title="129">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb9-130" title="130">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/HDU-4578">HDU4578 Transformation</a></p>
<p>题意是说，现在有<span class="math inline">\(n\)</span>个整数<span class="math inline">\(a_1,a_2,a_3,...,a_n\)</span>，初始值都为0。有以下四种操作：</p>
<ul>
<li><p>对<span class="math inline">\(a_x\)</span>到<span class="math inline">\(a_y\)</span>的数，分别都加上<span class="math inline">\(c\)</span>。</p></li>
<li><p>对<span class="math inline">\(a_x\)</span>到<span class="math inline">\(a_y\)</span>的数，分别都乘上<span class="math inline">\(c\)</span>。</p></li>
<li><p>将<span class="math inline">\(a_x\)</span>到<span class="math inline">\(a_y\)</span>的数，都改为<span class="math inline">\(c\)</span>。</p></li>
<li><p>求<span class="math inline">\(a_x\)</span>到<span class="math inline">\(a_y\)</span>的数的<span class="math inline">\(p\)</span>次幂的总和。即<span class="math inline">\(a_x^p+a_{x+1}^p+a_{x+2}^p+...+a_{y}^p\)</span>。其中，<span class="math inline">\(0 \lt p \lt 4\)</span>，<span class="math inline">\(p\)</span>是整数。</p>
<p>这是一道比较复杂的题目，难点在于怎么维护<span class="math inline">\(p\)</span>次幂的区间和，以及加操作与乘操作之间的相互影响怎么处理。事实上根据以下两条式子来维护三次方和以及二次方和即可： <span class="math display">\[
(x+c)^3=x^3+3cx^2+3c^2x+c^3 \\
(x+c)^2=x^2+2cx+c^2
\]</span> 具体的看代码注释吧。</p>
<p>代码如下</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb10-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb10-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb10-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb10-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb10-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb10-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb10-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb10-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb10-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb10-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb10-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb10-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb10-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb10-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb10-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb10-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb10-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb10-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="fl">1e5</span>+<span class="dv">5</span>;</a>
<a class="sourceLine" id="cb10-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb10-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb10-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb10-22" title="22">ll mod=<span class="dv">10007</span>;</a>
<a class="sourceLine" id="cb10-23" title="23">ll sum1[maxn&lt;&lt;<span class="dv">2</span>];        <span class="co">//区间和 </span></a>
<a class="sourceLine" id="cb10-24" title="24">ll sum2[maxn&lt;&lt;<span class="dv">2</span>];        <span class="co">//区间平方和 </span></a>
<a class="sourceLine" id="cb10-25" title="25">ll sum3[maxn&lt;&lt;<span class="dv">2</span>];        <span class="co">//区间立方和</span></a>
<a class="sourceLine" id="cb10-26" title="26">ll lazy_add[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb10-27" title="27">ll lazy_mul[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb10-28" title="28">ll lazy_set[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb10-29" title="29"><span class="dt">void</span> push_up(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb10-30" title="30">{</a>
<a class="sourceLine" id="cb10-31" title="31">    sum1[rt]=(sum1[rt&lt;&lt;<span class="dv">1</span>]+sum1[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>])%mod;</a>
<a class="sourceLine" id="cb10-32" title="32">    sum2[rt]=(sum2[rt&lt;&lt;<span class="dv">1</span>]+sum2[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>])%mod;</a>
<a class="sourceLine" id="cb10-33" title="33">    sum3[rt]=(sum3[rt&lt;&lt;<span class="dv">1</span>]+sum3[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>])%mod; </a>
<a class="sourceLine" id="cb10-34" title="34">}</a>
<a class="sourceLine" id="cb10-35" title="35"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb10-36" title="36">{</a>
<a class="sourceLine" id="cb10-37" title="37">    sum1[rt]=sum2[rt]=sum3[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-38" title="38">    lazy_add[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-39" title="39">    lazy_mul[rt]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb10-40" title="40">    lazy_set[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-41" title="41">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb10-42" title="42"><span class="co">//        sum1[rt]=sum2[rt]=sum3[rt]=0;</span></a>
<a class="sourceLine" id="cb10-43" title="43">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb10-44" title="44">    }</a>
<a class="sourceLine" id="cb10-45" title="45">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb10-46" title="46">    build(lson);</a>
<a class="sourceLine" id="cb10-47" title="47">    build(rson);</a>
<a class="sourceLine" id="cb10-48" title="48">    push_up(rt);</a>
<a class="sourceLine" id="cb10-49" title="49">}</a>
<a class="sourceLine" id="cb10-50" title="50"><span class="dt">void</span> push_down(<span class="dt">int</span> rt,<span class="dt">int</span> len)</a>
<a class="sourceLine" id="cb10-51" title="51">{</a>
<a class="sourceLine" id="cb10-52" title="52">    <span class="cf">if</span>(lazy_set[rt]!=<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb10-53" title="53">        lazy_add[rt&lt;&lt;<span class="dv">1</span>]=lazy_add[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=<span class="dv">0</span>;        </a>
<a class="sourceLine" id="cb10-54" title="54">        lazy_mul[rt&lt;&lt;<span class="dv">1</span>]=lazy_mul[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb10-55" title="55">        lazy_set[rt&lt;&lt;<span class="dv">1</span>]=lazy_set[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=lazy_set[rt];</a>
<a class="sourceLine" id="cb10-56" title="56">        ll tmp=(lazy_set[rt]*(lazy_set[rt]%mod)*(lazy_set[rt]%mod))%mod;</a>
<a class="sourceLine" id="cb10-57" title="57">        sum3[rt&lt;&lt;<span class="dv">1</span>]=((len-(len&gt;&gt;<span class="dv">1</span>))*tmp)%mod;</a>
<a class="sourceLine" id="cb10-58" title="58">        sum3[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=((len&gt;&gt;<span class="dv">1</span>)*tmp)%mod;</a>
<a class="sourceLine" id="cb10-59" title="59"></a>
<a class="sourceLine" id="cb10-60" title="60">        sum2[rt&lt;&lt;<span class="dv">1</span>]=((len-(len&gt;&gt;<span class="dv">1</span>))*((lazy_set[rt]%mod)*(lazy_set[rt]%mod)))%mod;</a>
<a class="sourceLine" id="cb10-61" title="61">        sum2[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=((len&gt;&gt;<span class="dv">1</span>)*((lazy_set[rt]%mod)*(lazy_set[rt]%mod)))%mod;</a>
<a class="sourceLine" id="cb10-62" title="62"></a>
<a class="sourceLine" id="cb10-63" title="63">        sum1[rt&lt;&lt;<span class="dv">1</span>]=((len-(len&gt;&gt;<span class="dv">1</span>))*(lazy_set[rt]%mod))%mod;</a>
<a class="sourceLine" id="cb10-64" title="64">        sum1[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=((len&gt;&gt;<span class="dv">1</span>)*(lazy_set[rt]%mod))%mod;</a>
<a class="sourceLine" id="cb10-65" title="65"></a>
<a class="sourceLine" id="cb10-66" title="66">        lazy_set[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-67" title="67">    }</a>
<a class="sourceLine" id="cb10-68" title="68">    <span class="cf">if</span>(lazy_add[rt]!=<span class="dv">0</span>||lazy_mul[rt]!=<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb10-69" title="69">        ll add=lazy_add[rt];ll mul=lazy_mul[rt];</a>
<a class="sourceLine" id="cb10-70" title="70">        ll tmp=(mul*mul%mod*mul%mod)%mod;</a>
<a class="sourceLine" id="cb10-71" title="71"></a>
<a class="sourceLine" id="cb10-72" title="72">        lazy_add[rt&lt;&lt;<span class="dv">1</span>]=(lazy_add[rt&lt;&lt;<span class="dv">1</span>]*mul%mod+add%mod)%mod;</a>
<a class="sourceLine" id="cb10-73" title="73">        lazy_add[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=(lazy_add[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]*mul%mod+add%mod)%mod;</a>
<a class="sourceLine" id="cb10-74" title="74">        lazy_mul[rt&lt;&lt;<span class="dv">1</span>]=(lazy_mul[rt&lt;&lt;<span class="dv">1</span>]%mod*mul%mod)%mod;</a>
<a class="sourceLine" id="cb10-75" title="75">        lazy_mul[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=(lazy_mul[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]*mul%mod)%mod;</a>
<a class="sourceLine" id="cb10-76" title="76"></a>
<a class="sourceLine" id="cb10-77" title="77">        sum3[rt&lt;&lt;<span class="dv">1</span>]=(sum3[rt&lt;&lt;<span class="dv">1</span>]*tmp%mod+add*add%mod*add%mod*(len-(len&gt;&gt;<span class="dv">1</span>))</a>
<a class="sourceLine" id="cb10-78" title="78">                    +<span class="dv">3</span>*sum2[rt&lt;&lt;<span class="dv">1</span>]*mul*mul%mod*add%mod+<span class="dv">3</span>*sum1[rt&lt;&lt;<span class="dv">1</span>]*mul</a>
<a class="sourceLine" id="cb10-79" title="79">                    *add%mod*add%mod)%mod;        <span class="co">//(x + c)^3 = x^3 + 3cx^2 + 3(c^2)x + c^3</span></a>
<a class="sourceLine" id="cb10-80" title="80">        sum3[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=(sum3[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]*tmp%mod+add*add%mod*add%mod*(len&gt;&gt;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb10-81" title="81">                    +<span class="dv">3</span>*sum2[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]*mul*mul%mod*add%mod+<span class="dv">3</span>*sum1[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]*mul</a>
<a class="sourceLine" id="cb10-82" title="82">                    *add%mod*add%mod)%mod;        <span class="co">//(x + c)^3 = x^3 + 3cx^2 + 3(c^2)x + c^3</span></a>
<a class="sourceLine" id="cb10-83" title="83"></a>
<a class="sourceLine" id="cb10-84" title="84">        sum2[rt&lt;&lt;<span class="dv">1</span>]=(sum2[rt&lt;&lt;<span class="dv">1</span>]*mul*mul%mod+add*add%mod*(len-(len&gt;&gt;<span class="dv">1</span>))</a>
<a class="sourceLine" id="cb10-85" title="85">                    +<span class="dv">2</span>*mul*add%mod*sum1[rt&lt;&lt;<span class="dv">1</span>]%mod)%mod;    <span class="co">//(x + c)^2 = x^2 + 2cx + c^2</span></a>
<a class="sourceLine" id="cb10-86" title="86">        sum2[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=(sum2[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]*mul*mul%mod+add*add%mod*(len&gt;&gt;<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb10-87" title="87">                    +<span class="dv">2</span>*mul*add%mod*sum1[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]%mod)%mod;    <span class="co">//(x + c)^2 = x^2 + 2cx + c^2</span></a>
<a class="sourceLine" id="cb10-88" title="88"></a>
<a class="sourceLine" id="cb10-89" title="89">        sum1[rt&lt;&lt;<span class="dv">1</span>]=(sum1[rt&lt;&lt;<span class="dv">1</span>]*mul%mod+add%mod*(len-(len&gt;&gt;<span class="dv">1</span>)))%mod;</a>
<a class="sourceLine" id="cb10-90" title="90">        sum1[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=(sum1[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]*mul%mod+add%mod*(len&gt;&gt;<span class="dv">1</span>))%mod;</a>
<a class="sourceLine" id="cb10-91" title="91"></a>
<a class="sourceLine" id="cb10-92" title="92">        lazy_add[rt]=<span class="dv">0</span>;lazy_mul[rt]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb10-93" title="93">    }</a>
<a class="sourceLine" id="cb10-94" title="94">}</a>
<a class="sourceLine" id="cb10-95" title="95"><span class="co">/*</span></a>
<a class="sourceLine" id="cb10-96" title="96"><span class="co">op==1:add </span></a>
<a class="sourceLine" id="cb10-97" title="97"><span class="co">op==2:mul</span></a>
<a class="sourceLine" id="cb10-98" title="98"><span class="co">op==3:set</span></a>
<a class="sourceLine" id="cb10-99" title="99"><span class="co">*/</span></a>
<a class="sourceLine" id="cb10-100" title="100"><span class="dt">void</span> update(<span class="dt">int</span> op,<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb10-101" title="101">{</a>
<a class="sourceLine" id="cb10-102" title="102">    <span class="cf">if</span>(toR&lt;lef||toL&gt;rig)        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb10-103" title="103">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig){</a>
<a class="sourceLine" id="cb10-104" title="104">        <span class="cf">if</span>(op==<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb10-105" title="105">            lazy_add[rt]=(todo+lazy_add[rt])%mod;</a>
<a class="sourceLine" id="cb10-106" title="106">            sum3[rt]=(sum3[rt]+(todo*todo%mod*todo%mod*(rig-lef+<span class="dv">1</span>))</a>
<a class="sourceLine" id="cb10-107" title="107">            +<span class="dv">3</span>*todo%mod*sum2[rt]%mod+<span class="dv">3</span>*todo*todo%mod*sum1[rt]%mod)%mod;</a>
<a class="sourceLine" id="cb10-108" title="108">            <span class="co">//(x + c)^3 = x^3 + 3cx^2 + 3(c^2)x + c^3</span></a>
<a class="sourceLine" id="cb10-109" title="109">            sum2[rt]=(sum2[rt]+(todo*todo%mod)*(rig-lef+<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb10-110" title="110">            +<span class="dv">2</span>*sum1[rt]%mod*todo%mod)%mod;</a>
<a class="sourceLine" id="cb10-111" title="111"></a>
<a class="sourceLine" id="cb10-112" title="112">            sum1[rt]=(sum1[rt]+(rig-lef+<span class="dv">1</span>)*todo%mod)%mod;</a>
<a class="sourceLine" id="cb10-113" title="113">        }<span class="cf">else</span> <span class="cf">if</span>(op==<span class="dv">2</span>){</a>
<a class="sourceLine" id="cb10-114" title="114">            lazy_add[rt]=(lazy_add[rt]*todo)%mod;</a>
<a class="sourceLine" id="cb10-115" title="115">            lazy_mul[rt]=(lazy_mul[rt]*todo)%mod;</a>
<a class="sourceLine" id="cb10-116" title="116">            sum1[rt]=(todo*sum1[rt])%mod;</a>
<a class="sourceLine" id="cb10-117" title="117">            sum2[rt]=(todo*todo%mod*sum2[rt])%mod;</a>
<a class="sourceLine" id="cb10-118" title="118">            sum3[rt]=(todo*todo%mod*todo%mod*sum3[rt]%mod)%mod;</a>
<a class="sourceLine" id="cb10-119" title="119">        }<span class="cf">else</span> <span class="cf">if</span>(op==<span class="dv">3</span>){</a>
<a class="sourceLine" id="cb10-120" title="120">            lazy_add[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-121" title="121">            lazy_mul[rt]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb10-122" title="122">            lazy_set[rt]=todo;</a>
<a class="sourceLine" id="cb10-123" title="123">            sum3[rt]=(rig-lef+<span class="dv">1</span>)%mod*todo*todo%mod*todo%mod;</a>
<a class="sourceLine" id="cb10-124" title="124">            sum2[rt]=(rig-lef+<span class="dv">1</span>)%mod*todo*todo%mod;</a>
<a class="sourceLine" id="cb10-125" title="125">            sum1[rt]=(rig-lef+<span class="dv">1</span>)%mod*todo%mod;</a>
<a class="sourceLine" id="cb10-126" title="126">        }</a>
<a class="sourceLine" id="cb10-127" title="127">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb10-128" title="128">    }</a>
<a class="sourceLine" id="cb10-129" title="129">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb10-130" title="130">    push_down(rt,rig-lef+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb10-131" title="131">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb10-132" title="132">        update(op,toL,toR,todo,lson);</a>
<a class="sourceLine" id="cb10-133" title="133">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb10-134" title="134">        update(op,toL,toR,todo,rson);</a>
<a class="sourceLine" id="cb10-135" title="135">    push_up(rt);</a>
<a class="sourceLine" id="cb10-136" title="136">}</a>
<a class="sourceLine" id="cb10-137" title="137">ll query(<span class="dt">int</span> p,<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb10-138" title="138">{</a>
<a class="sourceLine" id="cb10-139" title="139">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;toR&gt;=rig){</a>
<a class="sourceLine" id="cb10-140" title="140">        <span class="cf">if</span>(p==<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb10-141" title="141">            <span class="cf">return</span> sum1[rt];</a>
<a class="sourceLine" id="cb10-142" title="142">        <span class="cf">else</span> <span class="cf">if</span>(p==<span class="dv">2</span>)</a>
<a class="sourceLine" id="cb10-143" title="143">            <span class="cf">return</span> sum2[rt];</a>
<a class="sourceLine" id="cb10-144" title="144">        <span class="cf">else</span> <span class="cf">if</span>(p==<span class="dv">3</span>)</a>
<a class="sourceLine" id="cb10-145" title="145">            <span class="cf">return</span> sum3[rt]; </a>
<a class="sourceLine" id="cb10-146" title="146">    }</a>
<a class="sourceLine" id="cb10-147" title="147">    <span class="cf">if</span>(lef==rig)        <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-148" title="148">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb10-149" title="149">    push_down(rt,rig-lef+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb10-150" title="150">    ll ret=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-151" title="151">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb10-152" title="152">        ret+=query(p,toL,toR,lson);</a>
<a class="sourceLine" id="cb10-153" title="153">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb10-154" title="154">        ret+=query(p,toL,toR,rson);</a>
<a class="sourceLine" id="cb10-155" title="155">    <span class="cf">return</span> ret%mod;</a>
<a class="sourceLine" id="cb10-156" title="156">}</a>
<a class="sourceLine" id="cb10-157" title="157"><span class="co">//void update(int op,int toL,int toR,int todo,int lef,int rig,int rt)</span></a>
<a class="sourceLine" id="cb10-158" title="158"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb10-159" title="159">{</a>
<a class="sourceLine" id="cb10-160" title="160"><span class="co">//    freopen("data_generator.txt","r",stdin);</span></a>
<a class="sourceLine" id="cb10-161" title="161"><span class="co">//    freopen("out_hdu4578.txt","w",stdout);</span></a>
<a class="sourceLine" id="cb10-162" title="162">    <span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb10-163" title="163">    <span class="cf">while</span>(scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;n,&amp;m)!=EOF&amp;&amp;n&amp;&amp;m){</a>
<a class="sourceLine" id="cb10-164" title="164"><span class="co">//        mst(sum1,0);mst(sum2,0);mst(sum3,0);</span></a>
<a class="sourceLine" id="cb10-165" title="165"><span class="co">//        mst(lazy_add,0);mst(lazy_mul,0);mst(lazy_set,0);</span></a>
<a class="sourceLine" id="cb10-166" title="166">        build(<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb10-167" title="167">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb10-168" title="168">            <span class="dt">int</span> type;</a>
<a class="sourceLine" id="cb10-169" title="169">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;type);</a>
<a class="sourceLine" id="cb10-170" title="170">            <span class="dt">int</span> a,b,c;</a>
<a class="sourceLine" id="cb10-171" title="171">            c%=mod; </a>
<a class="sourceLine" id="cb10-172" title="172">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;a,&amp;b,&amp;c);</a>
<a class="sourceLine" id="cb10-173" title="173">            <span class="cf">if</span>(type!=<span class="dv">4</span>){</a>
<a class="sourceLine" id="cb10-174" title="174">                update(type,a,b,c,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb10-175" title="175">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb10-176" title="176">                ll ans=query(c,a,b,<span class="dv">1</span>,n,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb10-177" title="177">                ans%=mod;</a>
<a class="sourceLine" id="cb10-178" title="178">                printf(<span class="st">"</span><span class="sc">%lld\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb10-179" title="179">            }</a>
<a class="sourceLine" id="cb10-180" title="180">        }</a>
<a class="sourceLine" id="cb10-181" title="181">    }</a>
<a class="sourceLine" id="cb10-182" title="182">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb10-183" title="183">}</a></code></pre></div></li>
</ul>
<p><a href="https://cn.vjudge.net/problem/HDU-4614">HDU4614 Vases and Flowers</a></p>
<p>题意是说，有若干个花瓶，有两种操作，分别是</p>
<ul>
<li>从花瓶A开始放F朵花，如果某个花瓶已经有花了，就跳过这个花瓶。不断尝试花瓶，直至所有花都放完了，或者A以及A以后的花瓶都被尝试了一边。输出放第一朵花的位置以及放最后一朵花的位置。</li>
<li>第二种操作则是清楚区间内的花。并输出清除了多少花</li>
</ul>
<p>思路是，空花瓶用1表示，线段树提供set操作，维护区间和。清空花瓶的操作很简单，只需要查询一下区间和，然后用区间长度减去区间和即可。对于放花的操作，可以用二分找到左边界和右边界。具体见代码及注释。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb11-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb11-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb11-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb11-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb11-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb11-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb11-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb11-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb11-9" title="9"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb11-10" title="10"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb11-11" title="11"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb11-12" title="12"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb11-13" title="13"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb11-14" title="14"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb11-15" title="15"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb11-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb11-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb11-18" title="18"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">50005</span>;</a>
<a class="sourceLine" id="cb11-19" title="19"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb11-20" title="20"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb11-21" title="21"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb11-22" title="22"><span class="dt">int</span> lazy[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb11-23" title="23"><span class="dt">int</span> sum[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb11-24" title="24"><span class="dt">int</span> n,m;</a>
<a class="sourceLine" id="cb11-25" title="25"><span class="dt">void</span> pushup(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb11-26" title="26">{</a>
<a class="sourceLine" id="cb11-27" title="27">    sum[rt]=sum[rt&lt;&lt;<span class="dv">1</span>]+sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb11-28" title="28">}</a>
<a class="sourceLine" id="cb11-29" title="29"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb11-30" title="30">{</a>
<a class="sourceLine" id="cb11-31" title="31">    lazy[rt]=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb11-32" title="32">    <span class="cf">if</span>(lef==rig){</a>
<a class="sourceLine" id="cb11-33" title="33">        sum[rt]=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb11-34" title="34">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb11-35" title="35">    }</a>
<a class="sourceLine" id="cb11-36" title="36">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb11-37" title="37">    build(lson);</a>
<a class="sourceLine" id="cb11-38" title="38">    build(rson);</a>
<a class="sourceLine" id="cb11-39" title="39">    pushup(rt);</a>
<a class="sourceLine" id="cb11-40" title="40">}</a>
<a class="sourceLine" id="cb11-41" title="41"><span class="dt">void</span> pushdown(<span class="dt">int</span> rt,<span class="dt">int</span> len)</a>
<a class="sourceLine" id="cb11-42" title="42">{</a>
<a class="sourceLine" id="cb11-43" title="43">    <span class="cf">if</span>(lazy[rt]!=-<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb11-44" title="44">        lazy[rt&lt;&lt;<span class="dv">1</span>]=lazy[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=lazy[rt];</a>
<a class="sourceLine" id="cb11-45" title="45">        sum[rt&lt;&lt;<span class="dv">1</span>]=lazy[rt]*(len-(len&gt;&gt;<span class="dv">1</span>));</a>
<a class="sourceLine" id="cb11-46" title="46">        sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]=lazy[rt]*(len&gt;&gt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb11-47" title="47">        lazy[rt]=-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb11-48" title="48">    }</a>
<a class="sourceLine" id="cb11-49" title="49">}</a>
<a class="sourceLine" id="cb11-50" title="50"><span class="dt">void</span> update(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> todo,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)        <span class="co">//进行set操作    //空花瓶用1表示 </span></a>
<a class="sourceLine" id="cb11-51" title="51">{</a>
<a class="sourceLine" id="cb11-52" title="52">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR){</a>
<a class="sourceLine" id="cb11-53" title="53">        lazy[rt]=todo;</a>
<a class="sourceLine" id="cb11-54" title="54">        sum[rt]=(rig-lef+<span class="dv">1</span>)*todo;</a>
<a class="sourceLine" id="cb11-55" title="55">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb11-56" title="56">    }</a>
<a class="sourceLine" id="cb11-57" title="57">    pushdown(rt,rig-lef+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb11-58" title="58">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb11-59" title="59">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb11-60" title="60">        update(toL,toR,todo,lson);</a>
<a class="sourceLine" id="cb11-61" title="61">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb11-62" title="62">        update(toL,toR,todo,rson);</a>
<a class="sourceLine" id="cb11-63" title="63">    pushup(rt);</a>
<a class="sourceLine" id="cb11-64" title="64">} </a>
<a class="sourceLine" id="cb11-65" title="65"><span class="dt">int</span> query(<span class="dt">int</span> toL,<span class="dt">int</span> toR,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb11-66" title="66">{</a>
<a class="sourceLine" id="cb11-67" title="67">    <span class="cf">if</span>(toL&lt;=lef&amp;&amp;rig&lt;=toR){</a>
<a class="sourceLine" id="cb11-68" title="68">        <span class="cf">return</span> sum[rt];</a>
<a class="sourceLine" id="cb11-69" title="69">    }</a>
<a class="sourceLine" id="cb11-70" title="70">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb11-71" title="71">    pushdown(rt,rig-lef+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb11-72" title="72">    <span class="dt">int</span> ret=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb11-73" title="73">    <span class="cf">if</span>(toL&lt;=mid)</a>
<a class="sourceLine" id="cb11-74" title="74">        ret+=query(toL,toR,lson);</a>
<a class="sourceLine" id="cb11-75" title="75">    <span class="cf">if</span>(toR&gt;mid)</a>
<a class="sourceLine" id="cb11-76" title="76">        ret+=query(toL,toR,rson);</a>
<a class="sourceLine" id="cb11-77" title="77">    <span class="cf">return</span> ret;</a>
<a class="sourceLine" id="cb11-78" title="78">}</a>
<a class="sourceLine" id="cb11-79" title="79"><span class="dt">int</span> binary(<span class="dt">int</span> L,<span class="dt">int</span> R,<span class="dt">int</span> num,<span class="dt">int</span> cnt)        <span class="co">//cnt为要找的空花瓶的数目 </span></a>
<a class="sourceLine" id="cb11-80" title="80">{</a>
<a class="sourceLine" id="cb11-81" title="81">    <span class="dt">int</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb11-82" title="82">    <span class="dt">int</span> mid=L+(R-L)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb11-83" title="83">    <span class="cf">while</span>(L&lt;=R){</a>
<a class="sourceLine" id="cb11-84" title="84">        mid=L+(R-L)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb11-85" title="85">        <span class="cf">if</span>(query(<span class="dv">0</span>,mid,<span class="dv">0</span>,n-<span class="dv">1</span>,<span class="dv">1</span>)-num&gt;=cnt){</a>
<a class="sourceLine" id="cb11-86" title="86">            R=mid-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb11-87" title="87">            ans=mid;</a>
<a class="sourceLine" id="cb11-88" title="88">        }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb11-89" title="89">            L=mid+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb11-90" title="90">        }</a>
<a class="sourceLine" id="cb11-91" title="91">    }</a>
<a class="sourceLine" id="cb11-92" title="92">    <span class="cf">return</span> ans;</a>
<a class="sourceLine" id="cb11-93" title="93">}</a>
<a class="sourceLine" id="cb11-94" title="94"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb11-95" title="95">{</a>
<a class="sourceLine" id="cb11-96" title="96">    <span class="dt">int</span> t;cin&gt;&gt;t;</a>
<a class="sourceLine" id="cb11-97" title="97">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb11-98" title="98">        cin&gt;&gt;n&gt;&gt;m;</a>
<a class="sourceLine" id="cb11-99" title="99">        build(<span class="dv">0</span>,n-<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb11-100" title="100">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;m;i++){</a>
<a class="sourceLine" id="cb11-101" title="101">            <span class="dt">int</span> op;<span class="dt">int</span> x,y;</a>
<a class="sourceLine" id="cb11-102" title="102">            cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;</a>
<a class="sourceLine" id="cb11-103" title="103">            <span class="cf">if</span>(op==<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb11-104" title="104">                <span class="dt">int</span> tot=query(x,n-<span class="dv">1</span>,<span class="dv">0</span>,n-<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb11-105" title="105">                <span class="cf">if</span>(tot==<span class="dv">0</span>){</a>
<a class="sourceLine" id="cb11-106" title="106">                    printf(<span class="st">"Can not put any one.</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb11-107" title="107">                    <span class="cf">continue</span>;</a>
<a class="sourceLine" id="cb11-108" title="108">                }</a>
<a class="sourceLine" id="cb11-109" title="109">                <span class="cf">if</span>(tot&lt;y)        y=tot;    <span class="co">//tot为从x开始最多能放的花的数目 </span></a>
<a class="sourceLine" id="cb11-110" title="110">                <span class="dt">int</span> nu=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb11-111" title="111">                <span class="cf">if</span>(x&gt;=<span class="dv">1</span>)</a>
<a class="sourceLine" id="cb11-112" title="112">                    nu=query(<span class="dv">0</span>,x-<span class="dv">1</span>,<span class="dv">0</span>,n-<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb11-113" title="113">                <span class="cf">else</span></a>
<a class="sourceLine" id="cb11-114" title="114">                    nu=<span class="dv">0</span>;        <span class="co">//此时x-1为负数，要特判一下 </span></a>
<a class="sourceLine" id="cb11-115" title="115">                <span class="dt">int</span> lef=binary(x,n-<span class="dv">1</span>,nu,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb11-116" title="116">                <span class="dt">int</span> rig=binary(x,n-<span class="dv">1</span>,nu,y);</a>
<a class="sourceLine" id="cb11-117" title="117">                cout&lt;&lt;lef&lt;&lt;<span class="st">" "</span>&lt;&lt;rig&lt;&lt;endl;</a>
<a class="sourceLine" id="cb11-118" title="118">                update(lef,rig,<span class="dv">0</span>,<span class="dv">0</span>,n-<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb11-119" title="119">            }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb11-120" title="120">                <span class="dt">int</span> ans=(y-x+<span class="dv">1</span>)-query(x,y,<span class="dv">0</span>,n-<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb11-121" title="121">                cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb11-122" title="122">                update(x,y,<span class="dv">1</span>,<span class="dv">0</span>,n-<span class="dv">1</span>,<span class="dv">1</span>);        <span class="co">//1表示空花瓶 </span></a>
<a class="sourceLine" id="cb11-123" title="123">            }</a>
<a class="sourceLine" id="cb11-124" title="124">        }</a>
<a class="sourceLine" id="cb11-125" title="125">        printf(<span class="st">"</span><span class="sc">\n</span><span class="st">"</span>);</a>
<a class="sourceLine" id="cb11-126" title="126">    }</a>
<a class="sourceLine" id="cb11-127" title="127">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb11-128" title="128">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/POJ-1177">POJ1177 Picture</a></p>
<p>题目是让我们求若干个矩形重叠后形成的大矩形的周长。 扫描线题目，但一般来说扫描线都是用来求取重叠面积的，而此处是求取周长。线段树维护区间中被覆盖的长度以及区间中线段的数目。之所以要维护线段长度，是因为在计算矩形<span class="math inline">\(y\)</span>方向上的周长时需要用到。每次update的时候根据线段树更新区间结果即可。 代码如下:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb12-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb12-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb12-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb12-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb12-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb12-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb12-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb12-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb12-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb12-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb12-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb12-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb12-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb12-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb12-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb12-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb12-17" title="17"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb12-18" title="18"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb12-19" title="19"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb12-20" title="20"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb12-21" title="21"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">20005</span>;</a>
<a class="sourceLine" id="cb12-22" title="22"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb12-23" title="23"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb12-24" title="24"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb12-25" title="25"><span class="kw">struct</span> seg{</a>
<a class="sourceLine" id="cb12-26" title="26">    <span class="dt">int</span> lef,rig;</a>
<a class="sourceLine" id="cb12-27" title="27">    <span class="dt">int</span> h;</a>
<a class="sourceLine" id="cb12-28" title="28">    <span class="dt">int</span> tag;</a>
<a class="sourceLine" id="cb12-29" title="29">    seg(){</a>
<a class="sourceLine" id="cb12-30" title="30">    }</a>
<a class="sourceLine" id="cb12-31" title="31">    seg(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> h,<span class="dt">int</span> tag)</a>
<a class="sourceLine" id="cb12-32" title="32">        :lef(lef),rig(rig),h(h),tag(tag){</a>
<a class="sourceLine" id="cb12-33" title="33">        }</a>
<a class="sourceLine" id="cb12-34" title="34">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> seg&amp; se) <span class="at">const</span>{</a>
<a class="sourceLine" id="cb12-35" title="35">        <span class="cf">return</span> h&lt;se.h;</a>
<a class="sourceLine" id="cb12-36" title="36">    }</a>
<a class="sourceLine" id="cb12-37" title="37">};</a>
<a class="sourceLine" id="cb12-38" title="38">seg segs[<span class="dv">5005</span>*<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb12-39" title="39"><span class="kw">struct</span> node{        <span class="co">//表示一个区间 </span></a>
<a class="sourceLine" id="cb12-40" title="40">    <span class="dt">int</span> lef,rig;    <span class="co">//左右端点 </span></a>
<a class="sourceLine" id="cb12-41" title="41">    <span class="dt">int</span> len;        <span class="co">//被覆盖的长度 </span></a>
<a class="sourceLine" id="cb12-42" title="42">    <span class="dt">int</span> cover_cnt;    <span class="co">//被覆盖的次数 </span></a>
<a class="sourceLine" id="cb12-43" title="43">    <span class="dt">bool</span> lc,rc;        <span class="co">//左右端点是否被覆盖 </span></a>
<a class="sourceLine" id="cb12-44" title="44">    <span class="dt">int</span> num;        <span class="co">//区间中线段数目 </span></a>
<a class="sourceLine" id="cb12-45" title="45">    node(){</a>
<a class="sourceLine" id="cb12-46" title="46">    }</a>
<a class="sourceLine" id="cb12-47" title="47">};</a>
<a class="sourceLine" id="cb12-48" title="48">node ns[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb12-49" title="49"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb12-50" title="50">{</a>
<a class="sourceLine" id="cb12-51" title="51">    ns[rt].lef=lef;ns[rt].rig=rig;</a>
<a class="sourceLine" id="cb12-52" title="52">    ns[rt].len=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-53" title="53">    ns[rt].cover_cnt=ns[rt].lc=ns[rt].rc=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-54" title="54">    ns[rt].num=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-55" title="55">    <span class="cf">if</span>(lef==rig)</a>
<a class="sourceLine" id="cb12-56" title="56">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb12-57" title="57">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb12-58" title="58">    build(lson);</a>
<a class="sourceLine" id="cb12-59" title="59">    build(rson); </a>
<a class="sourceLine" id="cb12-60" title="60">}</a>
<a class="sourceLine" id="cb12-61" title="61"><span class="dt">void</span> pushup(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb12-62" title="62">{</a>
<a class="sourceLine" id="cb12-63" title="63">    <span class="cf">if</span>(ns[rt].cover_cnt){</a>
<a class="sourceLine" id="cb12-64" title="64">        ns[rt].len=ns[rt].rig-ns[rt].lef+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb12-65" title="65">        ns[rt].lc=ns[rt].rc=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb12-66" title="66">        ns[rt].num=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb12-67" title="67">    }<span class="cf">else</span> <span class="cf">if</span>(ns[rt].lef==ns[rt].rig){</a>
<a class="sourceLine" id="cb12-68" title="68">        ns[rt].len=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-69" title="69">        ns[rt].lc=ns[rt].rc=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-70" title="70">        ns[rt].num=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-71" title="71">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb12-72" title="72">        <span class="dt">int</span> tmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-73" title="73">        <span class="cf">if</span>(ns[rt&lt;&lt;<span class="dv">1</span>].rc&amp;&amp;ns[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].lc)</a>
<a class="sourceLine" id="cb12-74" title="74">            tmp=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb12-75" title="75">        ns[rt].len=ns[rt&lt;&lt;<span class="dv">1</span>].len+ns[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len;</a>
<a class="sourceLine" id="cb12-76" title="76">        ns[rt].num=ns[rt&lt;&lt;<span class="dv">1</span>].num+ns[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].num-tmp;        </a>
<a class="sourceLine" id="cb12-77" title="77">        <span class="co">//当左儿子的右端点以及右儿子的左端点完全被覆盖时，中间会有一段被重复计算</span></a>
<a class="sourceLine" id="cb12-78" title="78">        <span class="co">//的线段，故需要将其减去. </span></a>
<a class="sourceLine" id="cb12-79" title="79">        ns[rt].lc=ns[rt&lt;&lt;<span class="dv">1</span>].lc;ns[rt].rc=ns[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].rc;</a>
<a class="sourceLine" id="cb12-80" title="80">    }</a>
<a class="sourceLine" id="cb12-81" title="81">}</a>
<a class="sourceLine" id="cb12-82" title="82"><span class="dt">void</span> update(<span class="dt">int</span> val,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)        <span class="co">//根据扫描线对线段树节点进行更新</span></a>
<a class="sourceLine" id="cb12-83" title="83"><span class="co">//参数表中的lef和rig表示扫描线的左右端点 </span></a>
<a class="sourceLine" id="cb12-84" title="84">{</a>
<a class="sourceLine" id="cb12-85" title="85"><span class="co">//    cout&lt;&lt;"rt = "&lt;&lt;rt&lt;&lt;endl;</span></a>
<a class="sourceLine" id="cb12-86" title="86">    <span class="cf">if</span>(lef==ns[rt].lef&amp;&amp;ns[rt].rig==rig){</a>
<a class="sourceLine" id="cb12-87" title="87">        ns[rt].cover_cnt+=val;</a>
<a class="sourceLine" id="cb12-88" title="88">        pushup(rt);</a>
<a class="sourceLine" id="cb12-89" title="89">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb12-90" title="90">    }</a>
<a class="sourceLine" id="cb12-91" title="91">    <span class="dt">int</span> mid=(ns[rt].lef)+(ns[rt].rig-ns[rt].lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb12-92" title="92">    <span class="cf">if</span>(rig&lt;=mid){</a>
<a class="sourceLine" id="cb12-93" title="93">        update(val,lef,rig,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb12-94" title="94">    }<span class="cf">else</span> <span class="cf">if</span>(lef&gt;mid){</a>
<a class="sourceLine" id="cb12-95" title="95">        update(val,lef,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb12-96" title="96">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb12-97" title="97">        update(val,lef,mid,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb12-98" title="98">        update(val,mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb12-99" title="99">    }</a>
<a class="sourceLine" id="cb12-100" title="100">    pushup(rt);</a>
<a class="sourceLine" id="cb12-101" title="101">}</a>
<a class="sourceLine" id="cb12-102" title="102"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb12-103" title="103">{</a>
<a class="sourceLine" id="cb12-104" title="104">    IOS;</a>
<a class="sourceLine" id="cb12-105" title="105">    <span class="dt">int</span> n;cin&gt;&gt;n;</a>
<a class="sourceLine" id="cb12-106" title="106">    <span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-107" title="107">    <span class="dt">int</span> ub=-INF;</a>
<a class="sourceLine" id="cb12-108" title="108">    <span class="dt">int</span> lb=INF;</a>
<a class="sourceLine" id="cb12-109" title="109">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb12-110" title="110">        <span class="dt">int</span> x1,y1,x2,y2;</a>
<a class="sourceLine" id="cb12-111" title="111">        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</a>
<a class="sourceLine" id="cb12-112" title="112">        segs[cnt++]=seg(x1,x2,y1,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb12-113" title="113">        segs[cnt++]=seg(x1,x2,y2,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb12-114" title="114">        ub=max(ub,x2);</a>
<a class="sourceLine" id="cb12-115" title="115">        lb=min(lb,x1);        </a>
<a class="sourceLine" id="cb12-116" title="116">    }</a>
<a class="sourceLine" id="cb12-117" title="117">    sort(segs,segs+cnt);</a>
<a class="sourceLine" id="cb12-118" title="118">    build(lb,ub,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb12-119" title="119">    <span class="dt">int</span> ans=<span class="dv">0</span>;<span class="dt">int</span> last=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-120" title="120">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;cnt;i++){</a>
<a class="sourceLine" id="cb12-121" title="121">        update(segs[i].tag,segs[i].lef,segs[i].rig-<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb12-122" title="122">        ans+=abs(ns[<span class="dv">1</span>].len-last);        <span class="co">//当前的ns[1].len包括上一次统计的区间长度,因此需要减去last </span></a>
<a class="sourceLine" id="cb12-123" title="123">        last=ns[<span class="dv">1</span>].len;</a>
<a class="sourceLine" id="cb12-124" title="124">        ans+=(segs[i+<span class="dv">1</span>].h-segs[i].h)*<span class="dv">2</span>*ns[<span class="dv">1</span>].num;        <span class="co">//ns[1]为当前扫描线下区间的线段数目 </span></a>
<a class="sourceLine" id="cb12-125" title="125">    }</a>
<a class="sourceLine" id="cb12-126" title="126">    cout&lt;&lt;ans&lt;&lt;endl;</a>
<a class="sourceLine" id="cb12-127" title="127">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb12-128" title="128">} </a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/HDU-1255">HDU1255 覆盖的面积</a></p>
<p>扫描线计算被覆盖两次及以上的覆盖面积。<span class="math inline">\(cover\_cnt\)</span>表示的是被完全覆盖的区间的长度。当一个区间被完全覆盖的次数大于等于2时，其二次覆盖长度就是其区间长度；当被完全覆盖的次数为1时，其二次覆盖长度为左儿子与右儿子的一次覆盖面积的和；若以上两种情况都不符合，那就由左儿子和右儿子的二次覆盖面积转移得到。</p>
<p>另外，这题需要离散化。</p>
<p>代码如下：</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode cpp"><code class="sourceCode cpp"><a class="sourceLine" id="cb13-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb13-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb13-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb13-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb13-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb13-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb13-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb13-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb13-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb13-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb13-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb13-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb13-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb13-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb13-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb13-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb13-17" title="17"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb13-18" title="18"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb13-19" title="19"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb13-20" title="20"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb13-21" title="21"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">1005</span>;</a>
<a class="sourceLine" id="cb13-22" title="22"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb13-23" title="23"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb13-24" title="24"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb13-25" title="25"><span class="kw">struct</span> seg{</a>
<a class="sourceLine" id="cb13-26" title="26">    <span class="dt">double</span> lef,rig;</a>
<a class="sourceLine" id="cb13-27" title="27">    <span class="dt">double</span> hei;</a>
<a class="sourceLine" id="cb13-28" title="28">    <span class="dt">int</span> tag;</a>
<a class="sourceLine" id="cb13-29" title="29">    seg(){}</a>
<a class="sourceLine" id="cb13-30" title="30">    seg(<span class="dt">double</span> lef,<span class="dt">double</span> rig,<span class="dt">double</span> hei,<span class="dt">int</span> tag)</a>
<a class="sourceLine" id="cb13-31" title="31">        :lef(lef),rig(rig),hei(hei),tag(tag){}</a>
<a class="sourceLine" id="cb13-32" title="32">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> seg&amp; se) <span class="at">const</span>{</a>
<a class="sourceLine" id="cb13-33" title="33">        <span class="cf">return</span> hei&lt;se.hei;</a>
<a class="sourceLine" id="cb13-34" title="34">    }</a>
<a class="sourceLine" id="cb13-35" title="35">};</a>
<a class="sourceLine" id="cb13-36" title="36">seg segs[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb13-37" title="37"><span class="kw">struct</span> node{        <span class="co">//线段树节点,表示一个区间</span></a>
<a class="sourceLine" id="cb13-38" title="38">    <span class="dt">int</span> lef,rig;</a>
<a class="sourceLine" id="cb13-39" title="39">    <span class="dt">double</span> len,len2;</a>
<a class="sourceLine" id="cb13-40" title="40">    <span class="dt">int</span> cover_cnt;</a>
<a class="sourceLine" id="cb13-41" title="41">    node(){}</a>
<a class="sourceLine" id="cb13-42" title="42">    node(<span class="dt">int</span> lef,<span class="dt">int</span> rig)</a>
<a class="sourceLine" id="cb13-43" title="43">        :lef(lef),rig(rig){</a>
<a class="sourceLine" id="cb13-44" title="44">            len=<span class="dv">0</span>;cover_cnt=<span class="dv">0</span>;len2=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb13-45" title="45">        }</a>
<a class="sourceLine" id="cb13-46" title="46">};</a>
<a class="sourceLine" id="cb13-47" title="47">node ns[maxn&lt;&lt;<span class="dv">3</span>];</a>
<a class="sourceLine" id="cb13-48" title="48"><span class="dt">double</span> xs[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb13-49" title="49"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb13-50" title="50">{</a>
<a class="sourceLine" id="cb13-51" title="51">    ns[rt].lef=lef;ns[rt].rig=rig;</a>
<a class="sourceLine" id="cb13-52" title="52">    ns[rt].len=ns[rt].len2=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb13-53" title="53">    ns[rt].cover_cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb13-54" title="54">    <span class="cf">if</span>(lef==rig)    <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb13-55" title="55">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb13-56" title="56">    build(lson);</a>
<a class="sourceLine" id="cb13-57" title="57">    build(rson);</a>
<a class="sourceLine" id="cb13-58" title="58">}</a>
<a class="sourceLine" id="cb13-59" title="59"><span class="dt">void</span> pushup(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb13-60" title="60">{</a>
<a class="sourceLine" id="cb13-61" title="61">    <span class="cf">if</span>(ns[rt].cover_cnt){</a>
<a class="sourceLine" id="cb13-62" title="62">        ns[rt].len=xs[ns[rt].rig+<span class="dv">1</span>]-xs[ns[rt].lef];</a>
<a class="sourceLine" id="cb13-63" title="63">    }<span class="cf">else</span> <span class="cf">if</span>(ns[rt].lef==ns[rt].rig){</a>
<a class="sourceLine" id="cb13-64" title="64">        ns[rt].len=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb13-65" title="65">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb13-66" title="66">        ns[rt].len=ns[rt&lt;&lt;<span class="dv">1</span>].len+ns[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len;</a>
<a class="sourceLine" id="cb13-67" title="67">    }</a>
<a class="sourceLine" id="cb13-68" title="68">    <span class="cf">if</span>(ns[rt].cover_cnt&gt;=<span class="dv">2</span>){</a>
<a class="sourceLine" id="cb13-69" title="69">        ns[rt].len2=xs[ns[rt].rig+<span class="dv">1</span>]-xs[ns[rt].lef];</a>
<a class="sourceLine" id="cb13-70" title="70">    }<span class="cf">else</span> <span class="cf">if</span>(ns[rt].lef==ns[rt].rig){</a>
<a class="sourceLine" id="cb13-71" title="71">        ns[rt].len2=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb13-72" title="72">    }<span class="cf">else</span> <span class="cf">if</span>(ns[rt].cover_cnt==<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb13-73" title="73">        ns[rt].len2=ns[rt&lt;&lt;<span class="dv">1</span>].len+ns[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len;</a>
<a class="sourceLine" id="cb13-74" title="74">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb13-75" title="75">        ns[rt].len2=ns[rt&lt;&lt;<span class="dv">1</span>].len2+ns[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len2;</a>
<a class="sourceLine" id="cb13-76" title="76">    }</a>
<a class="sourceLine" id="cb13-77" title="77">}</a>
<a class="sourceLine" id="cb13-78" title="78"><span class="dt">void</span> update(<span class="dt">int</span> val,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb13-79" title="79">{</a>
<a class="sourceLine" id="cb13-80" title="80">    <span class="cf">if</span>(ns[rt].lef==lef&amp;&amp;ns[rt].rig==rig){</a>
<a class="sourceLine" id="cb13-81" title="81">        ns[rt].cover_cnt+=val;</a>
<a class="sourceLine" id="cb13-82" title="82">        pushup(rt);</a>
<a class="sourceLine" id="cb13-83" title="83">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb13-84" title="84">    }</a>
<a class="sourceLine" id="cb13-85" title="85">    <span class="dt">int</span> mid=(ns[rt].lef)+(ns[rt].rig-ns[rt].lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb13-86" title="86">    <span class="cf">if</span>(rig&lt;=mid){</a>
<a class="sourceLine" id="cb13-87" title="87">        update(val,lef,rig,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb13-88" title="88">    }<span class="cf">else</span> <span class="cf">if</span>(lef&gt;mid){</a>
<a class="sourceLine" id="cb13-89" title="89">        update(val,lef,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb13-90" title="90">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb13-91" title="91">        update(val,lef,mid,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb13-92" title="92">        update(val,mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb13-93" title="93">    }</a>
<a class="sourceLine" id="cb13-94" title="94">    pushup(rt);</a>
<a class="sourceLine" id="cb13-95" title="95">}</a>
<a class="sourceLine" id="cb13-96" title="96"><span class="dt">int</span> binary(<span class="dt">double</span> arr[],<span class="dt">double</span> key,<span class="dt">int</span> n)</a>
<a class="sourceLine" id="cb13-97" title="97">{</a>
<a class="sourceLine" id="cb13-98" title="98">    <span class="dt">int</span> lef=<span class="dv">0</span>;<span class="dt">int</span> rig=n-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb13-99" title="99">    <span class="cf">while</span>(lef&lt;=rig){</a>
<a class="sourceLine" id="cb13-100" title="100">        <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb13-101" title="101">        <span class="cf">if</span>(arr[mid]==key)</a>
<a class="sourceLine" id="cb13-102" title="102">            <span class="cf">return</span> mid;</a>
<a class="sourceLine" id="cb13-103" title="103">        <span class="cf">else</span> <span class="cf">if</span>(arr[mid]&lt;key)</a>
<a class="sourceLine" id="cb13-104" title="104">            lef=mid+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb13-105" title="105">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb13-106" title="106">            rig=mid-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb13-107" title="107">    }</a>
<a class="sourceLine" id="cb13-108" title="108">    <span class="cf">return</span> rig;</a>
<a class="sourceLine" id="cb13-109" title="109">}</a>
<a class="sourceLine" id="cb13-110" title="110"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb13-111" title="111">{</a>
<a class="sourceLine" id="cb13-112" title="112">    <span class="dt">int</span> t;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb13-113" title="113">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb13-114" title="114">        mst(xs,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb13-115" title="115">        <span class="dt">int</span> n;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb13-116" title="116">        <span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb13-117" title="117">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb13-118" title="118">            <span class="dt">double</span> x1,y1,x2,y2;</a>
<a class="sourceLine" id="cb13-119" title="119">            scanf(<span class="st">"</span><span class="sc">%lf</span><span class="st"> </span><span class="sc">%lf</span><span class="st"> </span><span class="sc">%lf</span><span class="st"> </span><span class="sc">%lf</span><span class="st">"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</a>
<a class="sourceLine" id="cb13-120" title="120">            segs[cnt]=seg(x1,x2,y1,<span class="dv">1</span>);       <span class="co">//下位</span></a>
<a class="sourceLine" id="cb13-121" title="121">            xs[cnt++]=x1;</a>
<a class="sourceLine" id="cb13-122" title="122">            segs[cnt]=seg(x1,x2,y2,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb13-123" title="123">            xs[cnt++]=x2;</a>
<a class="sourceLine" id="cb13-124" title="124">        }</a>
<a class="sourceLine" id="cb13-125" title="125">        sort(xs,xs+cnt);</a>
<a class="sourceLine" id="cb13-126" title="126"><span class="co">//        for(int i=0;i&lt;cnt;i++)</span></a>
<a class="sourceLine" id="cb13-127" title="127"><span class="co">//            cout&lt;&lt;xs[i]&lt;&lt;" ";</span></a>
<a class="sourceLine" id="cb13-128" title="128"><span class="co">//        cout&lt;&lt;"\n";</span></a>
<a class="sourceLine" id="cb13-129" title="129">        sort(segs,segs+cnt);</a>
<a class="sourceLine" id="cb13-130" title="130">        <span class="dt">int</span> idx=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb13-131" title="131">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;cnt;i++)</a>
<a class="sourceLine" id="cb13-132" title="132">            <span class="cf">if</span>(xs[i]!=xs[i-<span class="dv">1</span>])</a>
<a class="sourceLine" id="cb13-133" title="133">                xs[idx++]=xs[i];</a>
<a class="sourceLine" id="cb13-134" title="134">        build(<span class="dv">0</span>,idx-<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb13-135" title="135">        <span class="dt">double</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb13-136" title="136">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;cnt-<span class="dv">1</span>;i++){</a>
<a class="sourceLine" id="cb13-137" title="137">            <span class="dt">int</span> lx=binary(xs,segs[i].lef,idx);</a>
<a class="sourceLine" id="cb13-138" title="138">            <span class="dt">int</span> rx=binary(xs,segs[i].rig,idx)-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb13-139" title="139">            update(segs[i].tag,lx,rx,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb13-140" title="140">            ans+=(segs[i+<span class="dv">1</span>].hei-segs[i].hei)*(ns[<span class="dv">1</span>].len2);</a>
<a class="sourceLine" id="cb13-141" title="141"><span class="co">//            printf("ans+: %.2lf\n",(segs[i+1].hei-segs[i].hei)*(ns[1].len2));</span></a>
<a class="sourceLine" id="cb13-142" title="142"><span class="co">//            printf("ns[1].len2: %.2lf\n",ns[1].len2);</span></a>
<a class="sourceLine" id="cb13-143" title="143"><span class="co">//            printf("segs[i+1].hei-segs[i].hei: %.2lf\n\n",segs[i+1].hei-segs[i].hei);</span></a>
<a class="sourceLine" id="cb13-144" title="144">        }</a>
<a class="sourceLine" id="cb13-145" title="145">        printf(<span class="st">"%.2lf</span><span class="sc">\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb13-146" title="146">    }</a>
<a class="sourceLine" id="cb13-147" title="147">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb13-148" title="148">}</a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/HDU-1542">HDU1542 Atlantis</a></p>
<p>扫描线最经典的应用，求矩形的面积并。线段树维护区间的被覆盖长度，然后根据扫描线高度差计算面积即可。另外，本题需要离散化。 代码如下:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb14-1" title="1"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb14-2" title="2"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb14-3" title="3"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb14-4" title="4"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb14-5" title="5"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb14-6" title="6"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb14-7" title="7"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb14-8" title="8"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb14-9" title="9"><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></a>
<a class="sourceLine" id="cb14-10" title="10"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb14-11" title="11"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb14-12" title="12"><span class="pp">#include </span><span class="im">&lt;cctype&gt;</span></a>
<a class="sourceLine" id="cb14-13" title="13"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb14-14" title="14"><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></a>
<a class="sourceLine" id="cb14-15" title="15"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(a))</a>
<a class="sourceLine" id="cb14-16" title="16"><span class="pp">#define debug </span>printf(<span class="st">"debug</span><span class="sc">\n</span><span class="st">"</span>)</a>
<a class="sourceLine" id="cb14-17" title="17"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb14-18" title="18"><span class="pp">#define IOS </span><span class="bu">std::</span>ios<span class="bu">::</span>sync_with_stdio(<span class="kw">false</span>)</a>
<a class="sourceLine" id="cb14-19" title="19"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb14-20" title="20"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb14-21" title="21"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">2005</span>;</a>
<a class="sourceLine" id="cb14-22" title="22"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb14-23" title="23"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb14-24" title="24"><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> ull;</a>
<a class="sourceLine" id="cb14-25" title="25"><span class="kw">struct</span> seg{</a>
<a class="sourceLine" id="cb14-26" title="26">    <span class="dt">double</span> lef;<span class="dt">double</span> rig;</a>
<a class="sourceLine" id="cb14-27" title="27">    <span class="dt">double</span> hei;<span class="dt">int</span> tag;</a>
<a class="sourceLine" id="cb14-28" title="28">    <span class="co">//tag=1表示下位边,tag=-1表示上位边</span></a>
<a class="sourceLine" id="cb14-29" title="29">    seg(){</a>
<a class="sourceLine" id="cb14-30" title="30">    } </a>
<a class="sourceLine" id="cb14-31" title="31">    seg(<span class="dt">double</span> lef,<span class="dt">double</span> rig,<span class="dt">double</span> hei,<span class="dt">int</span> tag)</a>
<a class="sourceLine" id="cb14-32" title="32">        :lef(lef),rig(rig),hei(hei),tag(tag){</a>
<a class="sourceLine" id="cb14-33" title="33">        } </a>
<a class="sourceLine" id="cb14-34" title="34">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> seg&amp; se) <span class="at">const</span>{</a>
<a class="sourceLine" id="cb14-35" title="35">        <span class="cf">return</span> hei&lt;se.hei;</a>
<a class="sourceLine" id="cb14-36" title="36">    }</a>
<a class="sourceLine" id="cb14-37" title="37">};</a>
<a class="sourceLine" id="cb14-38" title="38">seg segs[maxn];</a>
<a class="sourceLine" id="cb14-39" title="39"><span class="dt">double</span> X[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb14-40" title="40"><span class="dt">int</span> vis[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb14-41" title="41"><span class="dt">double</span> sum[maxn&lt;&lt;<span class="dv">2</span>];</a>
<a class="sourceLine" id="cb14-42" title="42"><span class="dt">int</span> idx;</a>
<a class="sourceLine" id="cb14-43" title="43"><span class="dt">void</span> pushup(<span class="dt">int</span> l,<span class="dt">int</span> r,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb14-44" title="44">{</a>
<a class="sourceLine" id="cb14-45" title="45">    <span class="cf">if</span>(vis[rt])</a>
<a class="sourceLine" id="cb14-46" title="46">        sum[rt]=X[r+<span class="dv">1</span>]-X[l];</a>
<a class="sourceLine" id="cb14-47" title="47">    <span class="cf">else</span> <span class="cf">if</span>(l==r)</a>
<a class="sourceLine" id="cb14-48" title="48">        sum[rt]=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb14-49" title="49">    <span class="cf">else</span></a>
<a class="sourceLine" id="cb14-50" title="50">        sum[rt]=sum[rt&lt;&lt;<span class="dv">1</span>]+sum[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>]; </a>
<a class="sourceLine" id="cb14-51" title="51">}</a>
<a class="sourceLine" id="cb14-52" title="52"><span class="dt">void</span> update(<span class="dt">int</span> L,<span class="dt">int</span> R,<span class="dt">int</span> val,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb14-53" title="53">{</a>
<a class="sourceLine" id="cb14-54" title="54">    <span class="cf">if</span>(L&lt;=lef&amp;&amp;rig&lt;=R){</a>
<a class="sourceLine" id="cb14-55" title="55">        vis[rt]+=val;</a>
<a class="sourceLine" id="cb14-56" title="56">        pushup(lef,rig,rt);</a>
<a class="sourceLine" id="cb14-57" title="57">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb14-58" title="58">    }</a>
<a class="sourceLine" id="cb14-59" title="59">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb14-60" title="60">    <span class="cf">if</span>(L&lt;=mid)</a>
<a class="sourceLine" id="cb14-61" title="61">        update(L,R,val,lson);</a>
<a class="sourceLine" id="cb14-62" title="62">    <span class="cf">if</span>(R&gt;mid)</a>
<a class="sourceLine" id="cb14-63" title="63">        update(L,R,val,rson);</a>
<a class="sourceLine" id="cb14-64" title="64">    pushup(lef,rig,rt);</a>
<a class="sourceLine" id="cb14-65" title="65">}</a>
<a class="sourceLine" id="cb14-66" title="66"><span class="dt">int</span> binary(<span class="dt">double</span> todo)</a>
<a class="sourceLine" id="cb14-67" title="67">{</a>
<a class="sourceLine" id="cb14-68" title="68">    <span class="dt">int</span> Lef,Rig;</a>
<a class="sourceLine" id="cb14-69" title="69">    Lef=<span class="dv">0</span>;Rig=idx-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb14-70" title="70">    <span class="cf">while</span>(Lef&lt;=Rig){</a>
<a class="sourceLine" id="cb14-71" title="71">        <span class="dt">int</span> mid=Lef+(Rig-Lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb14-72" title="72">        <span class="cf">if</span>(X[mid]&gt;todo)</a>
<a class="sourceLine" id="cb14-73" title="73">            Rig=mid-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb14-74" title="74">        <span class="cf">else</span></a>
<a class="sourceLine" id="cb14-75" title="75">            Lef=mid+<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb14-76" title="76">    }</a>
<a class="sourceLine" id="cb14-77" title="77">    <span class="cf">return</span> Rig;</a>
<a class="sourceLine" id="cb14-78" title="78">}</a>
<a class="sourceLine" id="cb14-79" title="79"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb14-80" title="80">{</a>
<a class="sourceLine" id="cb14-81" title="81">    <span class="dt">int</span> n;<span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb14-82" title="82">    <span class="cf">while</span>(cin&gt;&gt;n&amp;&amp;n){</a>
<a class="sourceLine" id="cb14-83" title="83">        <span class="dt">int</span> cnt=<span class="dv">0</span>;idx=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb14-84" title="84">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb14-85" title="85">            <span class="dt">double</span> x1,y1,x2,y2;</a>
<a class="sourceLine" id="cb14-86" title="86">            scanf(<span class="st">"</span><span class="sc">%lf</span><span class="st"> </span><span class="sc">%lf</span><span class="st"> </span><span class="sc">%lf</span><span class="st"> </span><span class="sc">%lf</span><span class="st">"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2); </a>
<a class="sourceLine" id="cb14-87" title="87">            segs[cnt]=seg(x1,x2,y1,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb14-88" title="88">            X[cnt++]=x1;</a>
<a class="sourceLine" id="cb14-89" title="89">            segs[cnt]=seg(x1,x2,y2,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb14-90" title="90">            X[cnt++]=x2;</a>
<a class="sourceLine" id="cb14-91" title="91">        }</a>
<a class="sourceLine" id="cb14-92" title="92">        sort(segs,segs+cnt);</a>
<a class="sourceLine" id="cb14-93" title="93">        sort(X,X+cnt);</a>
<a class="sourceLine" id="cb14-94" title="94">        idx=<span class="dv">1</span>;<span class="dt">double</span> ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb14-95" title="95">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;cnt;i++)</a>
<a class="sourceLine" id="cb14-96" title="96">            <span class="cf">if</span>(X[i]!=X[i-<span class="dv">1</span>])</a>
<a class="sourceLine" id="cb14-97" title="97">                X[idx++]=X[i];</a>
<a class="sourceLine" id="cb14-98" title="98">        mst(sum,<span class="dv">0</span>);mst(vis,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb14-99" title="99">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;cnt-<span class="dv">1</span>;i++){</a>
<a class="sourceLine" id="cb14-100" title="100">            <span class="dt">int</span> L=binary(segs[i].lef);</a>
<a class="sourceLine" id="cb14-101" title="101">            <span class="dt">int</span> R=binary(segs[i].rig)-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb14-102" title="102">            update(L,R,segs[i].tag,<span class="dv">0</span>,idx-<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb14-103" title="103">            ans+=sum[<span class="dv">1</span>]*(segs[i+<span class="dv">1</span>].hei-segs[i].hei);</a>
<a class="sourceLine" id="cb14-104" title="104">        }</a>
<a class="sourceLine" id="cb14-105" title="105">        printf(<span class="st">"Test case #</span><span class="sc">%d\n</span><span class="st">"</span>,++kase);</a>
<a class="sourceLine" id="cb14-106" title="106">        printf(<span class="st">"Total explored area: %.2lf</span><span class="sc">\n\n</span><span class="st">"</span>,ans);</a>
<a class="sourceLine" id="cb14-107" title="107">    }</a>
<a class="sourceLine" id="cb14-108" title="108">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb14-109" title="109">} </a></code></pre></div>
<p><a href="https://cn.vjudge.net/problem/HDU-3642">HDU3642 Get the Treasury</a> 题意是求在三维空间中，有若干个矩形区域，求重叠次数大于等于3的区域的体积。 思路是用线段树维护单个平面被覆盖次数大于等于3的平面区域的面积，然后枚举z轴上的高度差，进而算出面积（z的范围并不大，可以枚举） 具体见代码</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode c++"><code class="sourceCode cpp"><a class="sourceLine" id="cb15-1" title="1"><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></a>
<a class="sourceLine" id="cb15-2" title="2"><span class="pp">#include </span><span class="im">&lt;cstdio&gt;</span></a>
<a class="sourceLine" id="cb15-3" title="3"><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></a>
<a class="sourceLine" id="cb15-4" title="4"><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></a>
<a class="sourceLine" id="cb15-5" title="5"><span class="pp">#include </span><span class="im">&lt;cstring&gt;</span></a>
<a class="sourceLine" id="cb15-6" title="6"><span class="pp">#include </span><span class="im">&lt;string&gt;</span></a>
<a class="sourceLine" id="cb15-7" title="7"><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></a>
<a class="sourceLine" id="cb15-8" title="8"><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></a>
<a class="sourceLine" id="cb15-9" title="9"><span class="pp">#include </span><span class="im">&lt;list&gt;</span></a>
<a class="sourceLine" id="cb15-10" title="10"><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></a>
<a class="sourceLine" id="cb15-11" title="11"><span class="pp">#include </span><span class="im">&lt;set&gt;</span></a>
<a class="sourceLine" id="cb15-12" title="12"><span class="pp">#include </span><span class="im">&lt;map&gt;</span></a>
<a class="sourceLine" id="cb15-13" title="13"><span class="pp">#define INF </span><span class="bn">0x3f3f3f3f</span></a>
<a class="sourceLine" id="cb15-14" title="14"><span class="pp">#define mst</span>(a,b)<span class="pp"> </span>memset((a),(b),<span class="kw">sizeof</span>(b))</a>
<a class="sourceLine" id="cb15-15" title="15"><span class="pp">#define debug </span>cout&lt;&lt;<span class="st">"debug"</span>&lt;&lt;endl;</a>
<a class="sourceLine" id="cb15-16" title="16"><span class="pp">#define lson </span>lef,mid,rt&lt;&lt;<span class="dv">1</span></a>
<a class="sourceLine" id="cb15-17" title="17"><span class="pp">#define rson </span>mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span></a>
<a class="sourceLine" id="cb15-18" title="18"><span class="kw">typedef</span> <span class="dt">long</span> <span class="dt">long</span> ll;</a>
<a class="sourceLine" id="cb15-19" title="19"><span class="at">const</span> <span class="dt">int</span> maxn=<span class="dv">2500</span>;</a>
<a class="sourceLine" id="cb15-20" title="20"><span class="kw">using</span> <span class="kw">namespace</span> std;</a>
<a class="sourceLine" id="cb15-21" title="21"><span class="kw">struct</span> seg{</a>
<a class="sourceLine" id="cb15-22" title="22">    <span class="dt">int</span> lef,rig;</a>
<a class="sourceLine" id="cb15-23" title="23">    <span class="dt">int</span> hei;</a>
<a class="sourceLine" id="cb15-24" title="24">    <span class="dt">int</span> tag;</a>
<a class="sourceLine" id="cb15-25" title="25">    seg(){}</a>
<a class="sourceLine" id="cb15-26" title="26">    seg(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> hei,<span class="dt">int</span> tag)</a>
<a class="sourceLine" id="cb15-27" title="27">        :lef(lef),rig(rig),hei(hei),tag(tag){}</a>
<a class="sourceLine" id="cb15-28" title="28">    <span class="dt">void</span> set(<span class="dt">int</span> l,<span class="dt">int</span> r,<span class="dt">int</span> h,<span class="dt">int</span> tt){</a>
<a class="sourceLine" id="cb15-29" title="29">        lef=l;rig=r;hei=h;</a>
<a class="sourceLine" id="cb15-30" title="30">        tag=tt;</a>
<a class="sourceLine" id="cb15-31" title="31">    }</a>
<a class="sourceLine" id="cb15-32" title="32">    <span class="dt">bool</span> <span class="kw">operator</span>&lt;(<span class="at">const</span> seg&amp; se)<span class="at">const</span>{</a>
<a class="sourceLine" id="cb15-33" title="33">        <span class="cf">return</span> hei&lt;se.hei;</a>
<a class="sourceLine" id="cb15-34" title="34">    }</a>
<a class="sourceLine" id="cb15-35" title="35">};</a>
<a class="sourceLine" id="cb15-36" title="36"><span class="kw">struct</span> node{</a>
<a class="sourceLine" id="cb15-37" title="37">    <span class="dt">int</span> lef,rig;</a>
<a class="sourceLine" id="cb15-38" title="38">    <span class="dt">int</span> len,len2,len3;    </a>
<a class="sourceLine" id="cb15-39" title="39">    <span class="dt">int</span> cover_cnt;</a>
<a class="sourceLine" id="cb15-40" title="40">    node(){}</a>
<a class="sourceLine" id="cb15-41" title="41"><span class="co">//    node(int lef,int rig)</span></a>
<a class="sourceLine" id="cb15-42" title="42"><span class="co">//        :lef(lef),rig(rig){len=len2=len3=cover_cnt=0;}</span></a>
<a class="sourceLine" id="cb15-43" title="43">};</a>
<a class="sourceLine" id="cb15-44" title="44"><span class="kw">struct</span> point{</a>
<a class="sourceLine" id="cb15-45" title="45">    <span class="dt">int</span> x,y,z;</a>
<a class="sourceLine" id="cb15-46" title="46">    point(<span class="dt">int</span> x,<span class="dt">int</span> y,<span class="dt">int</span> z)</a>
<a class="sourceLine" id="cb15-47" title="47">        :x(x),y(y),z(z){}</a>
<a class="sourceLine" id="cb15-48" title="48">    point(){}</a>
<a class="sourceLine" id="cb15-49" title="49">};</a>
<a class="sourceLine" id="cb15-50" title="50">node tree[maxn&lt;&lt;<span class="dv">3</span>];</a>
<a class="sourceLine" id="cb15-51" title="51">point ps[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb15-52" title="52"><span class="dt">int</span> xs[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb15-53" title="53"><span class="dt">int</span> zs[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb15-54" title="54">seg segs[maxn&lt;&lt;<span class="dv">1</span>];</a>
<a class="sourceLine" id="cb15-55" title="55"><span class="dt">void</span> build(<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb15-56" title="56">{</a>
<a class="sourceLine" id="cb15-57" title="57">    tree[rt].lef=lef;tree[rt].rig=rig;</a>
<a class="sourceLine" id="cb15-58" title="58">    tree[rt].len=tree[rt].len2=tree[rt].len3=tree[rt].cover_cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-59" title="59">    <span class="cf">if</span>(lef==rig)</a>
<a class="sourceLine" id="cb15-60" title="60">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb15-61" title="61">    <span class="dt">int</span> mid=lef+(rig-lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb15-62" title="62">    build(lson);</a>
<a class="sourceLine" id="cb15-63" title="63">    build(rson);</a>
<a class="sourceLine" id="cb15-64" title="64">}</a>
<a class="sourceLine" id="cb15-65" title="65"><span class="dt">void</span> pushup(<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb15-66" title="66">{</a>
<a class="sourceLine" id="cb15-67" title="67">    <span class="cf">if</span>(tree[rt].cover_cnt&gt;=<span class="dv">3</span>){</a>
<a class="sourceLine" id="cb15-68" title="68">        tree[rt].len3=xs[tree[rt].rig+<span class="dv">1</span>]-xs[tree[rt].lef];</a>
<a class="sourceLine" id="cb15-69" title="69">        tree[rt].len2=tree[rt].len=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-70" title="70">    }<span class="cf">else</span> <span class="cf">if</span>(tree[rt].cover_cnt&gt;=<span class="dv">2</span>){</a>
<a class="sourceLine" id="cb15-71" title="71">        tree[rt].len3=tree[rt&lt;&lt;<span class="dv">1</span>].len3+tree[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len3+tree[rt&lt;&lt;<span class="dv">1</span>].len2+tree[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len2+tree[rt&lt;&lt;<span class="dv">1</span>].len+tree[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len;</a>
<a class="sourceLine" id="cb15-72" title="72">        tree[rt].len2=xs[tree[rt].rig+<span class="dv">1</span>]-xs[tree[rt].lef]-tree[rt].len3;</a>
<a class="sourceLine" id="cb15-73" title="73">        tree[rt].len=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-74" title="74">    }<span class="cf">else</span> <span class="cf">if</span>(tree[rt].cover_cnt&gt;=<span class="dv">1</span>){</a>
<a class="sourceLine" id="cb15-75" title="75">        tree[rt].len3=tree[rt&lt;&lt;<span class="dv">1</span>].len3+tree[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len3+tree[rt&lt;&lt;<span class="dv">1</span>].len2+tree[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len2;</a>
<a class="sourceLine" id="cb15-76" title="76">        tree[rt].len2=tree[rt&lt;&lt;<span class="dv">1</span>].len+tree[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len;</a>
<a class="sourceLine" id="cb15-77" title="77">        tree[rt].len=xs[tree[rt].rig+<span class="dv">1</span>]-xs[tree[rt].lef]-tree[rt].len2-tree[rt].len3;</a>
<a class="sourceLine" id="cb15-78" title="78">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb15-79" title="79">        tree[rt].len3=tree[rt&lt;&lt;<span class="dv">1</span>].len3+tree[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len3;</a>
<a class="sourceLine" id="cb15-80" title="80">        tree[rt].len2=tree[rt&lt;&lt;<span class="dv">1</span>].len2+tree[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len2;</a>
<a class="sourceLine" id="cb15-81" title="81">        tree[rt].len=tree[rt&lt;&lt;<span class="dv">1</span>].len+tree[rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>].len;</a>
<a class="sourceLine" id="cb15-82" title="82">    }</a>
<a class="sourceLine" id="cb15-83" title="83">}</a>
<a class="sourceLine" id="cb15-84" title="84"><span class="dt">void</span> update(<span class="dt">int</span> val,<span class="dt">int</span> lef,<span class="dt">int</span> rig,<span class="dt">int</span> rt)</a>
<a class="sourceLine" id="cb15-85" title="85">{</a>
<a class="sourceLine" id="cb15-86" title="86">    <span class="cf">if</span>(lef==tree[rt].lef&amp;&amp;rig==tree[rt].rig){</a>
<a class="sourceLine" id="cb15-87" title="87">        tree[rt].cover_cnt+=val;</a>
<a class="sourceLine" id="cb15-88" title="88">        pushup(rt);</a>
<a class="sourceLine" id="cb15-89" title="89">        <span class="cf">return</span> ;</a>
<a class="sourceLine" id="cb15-90" title="90">    }</a>
<a class="sourceLine" id="cb15-91" title="91">    <span class="dt">int</span> mid=(tree[rt].lef)+(tree[rt].rig-tree[rt].lef)/<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb15-92" title="92">    <span class="cf">if</span>(rig&lt;=mid){</a>
<a class="sourceLine" id="cb15-93" title="93">        update(val,lef,rig,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb15-94" title="94">    }<span class="cf">else</span> <span class="cf">if</span>(lef&gt;mid){</a>
<a class="sourceLine" id="cb15-95" title="95">        update(val,lef,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb15-96" title="96">    }<span class="cf">else</span>{</a>
<a class="sourceLine" id="cb15-97" title="97">        update(val,lef,mid,rt&lt;&lt;<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb15-98" title="98">        update(val,mid+<span class="dv">1</span>,rig,rt&lt;&lt;<span class="dv">1</span>|<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb15-99" title="99">    }</a>
<a class="sourceLine" id="cb15-100" title="100">    pushup(rt);</a>
<a class="sourceLine" id="cb15-101" title="101">}</a>
<a class="sourceLine" id="cb15-102" title="102"><span class="dt">void</span> init(<span class="dt">int</span> n)</a>
<a class="sourceLine" id="cb15-103" title="103">{</a>
<a class="sourceLine" id="cb15-104" title="104">    <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n+<span class="dv">1</span>;i++){</a>
<a class="sourceLine" id="cb15-105" title="105">        tree[i].cover_cnt=tree[i].lef=tree[i].rig=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-106" title="106">        tree[i].len=tree[i].len2=tree[i].len3=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-107" title="107">    }</a>
<a class="sourceLine" id="cb15-108" title="108">}</a>
<a class="sourceLine" id="cb15-109" title="109"><span class="dt">int</span> main()</a>
<a class="sourceLine" id="cb15-110" title="110">{</a>
<a class="sourceLine" id="cb15-111" title="111">    <span class="dt">int</span> t;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;t);</a>
<a class="sourceLine" id="cb15-112" title="112">    <span class="dt">int</span> kase=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-113" title="113">    <span class="cf">while</span>(t--){</a>
<a class="sourceLine" id="cb15-114" title="114">        init(<span class="dv">2005</span>);</a>
<a class="sourceLine" id="cb15-115" title="115">        mst(xs,<span class="dv">0</span>);mst(zs,<span class="dv">0</span>);</a>
<a class="sourceLine" id="cb15-116" title="116">        <span class="dt">int</span> n;scanf(<span class="st">"</span><span class="sc">%d</span><span class="st">"</span>,&amp;n);</a>
<a class="sourceLine" id="cb15-117" title="117">        <span class="dt">int</span> cnt=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-118" title="118">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;n;i++){</a>
<a class="sourceLine" id="cb15-119" title="119">            <span class="dt">int</span> x1,y1,z1;</a>
<a class="sourceLine" id="cb15-120" title="120">            <span class="dt">int</span> x2,y2,z2;</a>
<a class="sourceLine" id="cb15-121" title="121">            scanf(<span class="st">"</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st"> </span><span class="sc">%d</span><span class="st">"</span>,&amp;x1,&amp;y1,&amp;z1,&amp;x2,&amp;y2,&amp;z2);</a>
<a class="sourceLine" id="cb15-122" title="122">            xs[cnt]=x1;xs[cnt+<span class="dv">1</span>]=x2;</a>
<a class="sourceLine" id="cb15-123" title="123">            zs[cnt]=z1;zs[cnt+<span class="dv">1</span>]=z2;</a>
<a class="sourceLine" id="cb15-124" title="124">            ps[cnt]=point(x1,y1,z1);ps[cnt+<span class="dv">1</span>]=point(x2,y2,z2);</a>
<a class="sourceLine" id="cb15-125" title="125">            cnt+=<span class="dv">2</span>;</a>
<a class="sourceLine" id="cb15-126" title="126">        }</a>
<a class="sourceLine" id="cb15-127" title="127">        sort(xs,xs+cnt);</a>
<a class="sourceLine" id="cb15-128" title="128">        sort(zs,zs+cnt);</a>
<a class="sourceLine" id="cb15-129" title="129">        <span class="dt">int</span> idx=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb15-130" title="130">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;cnt;i++)</a>
<a class="sourceLine" id="cb15-131" title="131">            <span class="cf">if</span>(xs[i]!=xs[i-<span class="dv">1</span>])</a>
<a class="sourceLine" id="cb15-132" title="132">                xs[idx++]=xs[i];</a>
<a class="sourceLine" id="cb15-133" title="133">        <span class="dt">int</span> idx1=<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb15-134" title="134">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;cnt;i++)</a>
<a class="sourceLine" id="cb15-135" title="135">            <span class="cf">if</span>(zs[i]!=zs[i-<span class="dv">1</span>])</a>
<a class="sourceLine" id="cb15-136" title="136">                zs[idx1++]=zs[i];</a>
<a class="sourceLine" id="cb15-137" title="137">        ll ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-138" title="138">        <span class="cf">for</span>(<span class="dt">int</span> i=<span class="dv">0</span>;i&lt;idx1-<span class="dv">1</span>;i++){</a>
<a class="sourceLine" id="cb15-139" title="139">            <span class="dt">int</span> k=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-140" title="140">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;cnt;j+=<span class="dv">2</span>){</a>
<a class="sourceLine" id="cb15-141" title="141">                <span class="cf">if</span>(ps[j].z&lt;=zs[i]&amp;&amp;ps[j+<span class="dv">1</span>].z&gt;zs[i]){</a>
<a class="sourceLine" id="cb15-142" title="142">                    segs[k++].set(ps[j].x,ps[j+<span class="dv">1</span>].x,ps[j].y,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb15-143" title="143">                    segs[k++].set(ps[j].x,ps[j+<span class="dv">1</span>].x,ps[j+<span class="dv">1</span>].y,-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb15-144" title="144">                    <span class="co">// segs[k++]=seg(ps[j].x,ps[j+1].x,ps[j].y,1);</span></a>
<a class="sourceLine" id="cb15-145" title="145">                    <span class="co">// segs[k++]=seg(ps[j].x,ps[j+1].x,ps[j+1].y,-1);</span></a>
<a class="sourceLine" id="cb15-146" title="146">                }</a>
<a class="sourceLine" id="cb15-147" title="147">            }</a>
<a class="sourceLine" id="cb15-148" title="148">            init(idx-<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb15-149" title="149">            sort(segs,segs+k);</a>
<a class="sourceLine" id="cb15-150" title="150">            build(<span class="dv">0</span>,idx-<span class="dv">1</span>,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb15-151" title="151">            ll tmp=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-152" title="152">            <span class="cf">for</span>(<span class="dt">int</span> j=<span class="dv">0</span>;j&lt;k-<span class="dv">1</span>;j++){</a>
<a class="sourceLine" id="cb15-153" title="153">                <span class="dt">int</span> lx=lower_bound(xs,xs+idx,segs[j].lef)-xs;</a>
<a class="sourceLine" id="cb15-154" title="154">                <span class="dt">int</span> rx=lower_bound(xs,xs+idx,segs[j].rig)-xs-<span class="dv">1</span>;</a>
<a class="sourceLine" id="cb15-155" title="155">                update(segs[j].tag,lx,rx,<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb15-156" title="156">                tmp+=(ll)tree[<span class="dv">1</span>].len3*(ll)(segs[j+<span class="dv">1</span>].hei-segs[j].hei);</a>
<a class="sourceLine" id="cb15-157" title="157">            }</a>
<a class="sourceLine" id="cb15-158" title="158">            ans+=(ll)tmp*(ll)(zs[i+<span class="dv">1</span>]-zs[i]);</a>
<a class="sourceLine" id="cb15-159" title="159">        }</a>
<a class="sourceLine" id="cb15-160" title="160">        <span class="cf">if</span>(n&lt;<span class="dv">3</span>)</a>
<a class="sourceLine" id="cb15-161" title="161">            ans=<span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-162" title="162">        printf(<span class="st">"Case </span><span class="sc">%d</span><span class="st">: </span><span class="sc">%lld\n</span><span class="st">"</span>,++kase,ans);</a>
<a class="sourceLine" id="cb15-163" title="163">    }</a>
<a class="sourceLine" id="cb15-164" title="164">    <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb15-165" title="165">}</a>
<a class="sourceLine" id="cb15-166" title="166"><span class="co">/*</span></a>
<a class="sourceLine" id="cb15-167" title="167"><span class="co">4</span></a>
<a class="sourceLine" id="cb15-168" title="168"><span class="co">4 5 0 8 9 5</span></a>
<a class="sourceLine" id="cb15-169" title="169"><span class="co">0 3 3 4 5 7</span></a>
<a class="sourceLine" id="cb15-170" title="170"><span class="co">5 4 4 10 6 9</span></a>
<a class="sourceLine" id="cb15-171" title="171"><span class="co">5 5 5 9 9 7</span></a>
<a class="sourceLine" id="cb15-172" title="172"><span class="co">*/</span></a></code></pre></div>
<h3 id="后记">后记</h3>
<p>看了一下，虽然专题里面有区间合并的题目，但我并不是用正统的区间合并的方法做的啊......所以说这方面还需要再好好学一下呢。</p>
]]></content>
  </entry>
  <entry>
    <title>计算机系统三（二）——指令</title>
    <url>/2020/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E4%B8%89%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p><img src="https://pic.downk.cc/item/5f928ffc1cd1bbb86bf44e2f.jpg"></p>
<span id="more"></span>
<h4 id="mips寄存器">MIPS寄存器</h4>
<p><img src="https://pic.downk.cc/item/5f928fc01cd1bbb86bf44392.png"></p>
<h4 id="mips指令表">MIPS指令表</h4>
<table>
<colgroup>
<col style="width: 22%">
<col style="width: 14%">
<col style="width: 24%">
<col style="width: 39%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">指令</th>
<th style="text-align: center;">示例</th>
<th style="text-align: center;">含义</th>
<th style="text-align: center;">注释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">加法</td>
<td style="text-align: center;">add \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | \\\)</span>s1=\<span class="math inline">\(s2+\\\)</span>s3</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">减法</td>
<td style="text-align: center;">sub \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | \\\)</span>s1=\<span class="math inline">\(s2-\\\)</span>s3</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">立即数加法</td>
<td style="text-align: center;">addi \<span class="math inline">\(s1,\\\)</span>s2,20</td>
<td style="text-align: center;">\$s1=\<span class="math inline">\(2+20 | | | 取字 | lw \\\)</span>s1,20(\<span class="math inline">\(s2) | \\\)</span>s1=memory[\$s2+20] | | | 存字 | sw \<span class="math inline">\(s1,20(\\\)</span>s2) | memory[\$s2+20]=\<span class="math inline">\(s1 | | | 取半字 | lh \\\)</span>s1,20(\<span class="math inline">\(s2) | memory[\\\)</span>s2+20]=\<span class="math inline">\(s1 | 从地址20(\\\)</span>s2)开始取半字（16biwordts）（h==halfword）</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">取无符号半字</td>
<td style="text-align: center;">lhu \<span class="math inline">\(s1,20(\\\)</span>s2)</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">存半字</td>
<td style="text-align: center;">sh \<span class="math inline">\(s1,20(\$s2) | | | | 取字节 | lb \\\)</span>s1,20(\<span class="math inline">\(s2) | | | | 取无符号字节 | lbu \\\)</span>s1,20(\<span class="math inline">\(s2) | | | | 存字节 | sb \\\)</span>s1,20(\<span class="math inline">\(s2) | | | | 取链接字 | ll \\\)</span>s1,20($s2)</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">是原子交换的前半部分</td>
</tr>
<tr class="even">
<td style="text-align: center;">存条件字</td>
<td style="text-align: center;">sc \<span class="math inline">\(s1,20(\\\)</span>s2)</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">是原子交换的后半部分</td>
</tr>
<tr class="odd">
<td style="text-align: center;">取立即数的最高位</td>
<td style="text-align: center;">lui \<span class="math inline">\(s1,20 | \\\)</span>s1=20*2^{16}</td>
<td style="text-align: center;">取立即数并放到高16位</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">与</td>
<td style="text-align: center;">and \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | \\\)</span>s1=\<span class="math inline">\(s2 &amp; \\\)</span>s3</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">或</td>
<td style="text-align: center;">or \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | \\\)</span>s1=\<span class="math inline">\(s2 bitor \\\)</span>s3</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">或非</td>
<td style="text-align: center;">or \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | \\\)</span>s1=~(\<span class="math inline">\(s2 bitor \\\)</span>s3)</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">立即数与</td>
<td style="text-align: center;">andi \<span class="math inline">\(s1,\\\)</span>s2,20</td>
<td style="text-align: center;">\<span class="math inline">\(s1=\\\)</span>s2 &amp; 20</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">立即数或</td>
<td style="text-align: center;">ori \<span class="math inline">\(s1,\\\)</span>s2,20</td>
<td style="text-align: center;">\<span class="math inline">\(s1=\\\)</span>s2 bitor 20</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">逻辑左移</td>
<td style="text-align: center;">sll \<span class="math inline">\(s1,\\\)</span>s2,10</td>
<td style="text-align: center;">\<span class="math inline">\(s1=\\\)</span>s2*4（左移两位）</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">逻辑右移</td>
<td style="text-align: center;">srl \<span class="math inline">\(s1,\\\)</span>s2,20</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">相等时跳转</td>
<td style="text-align: center;">beq \<span class="math inline">\(s1,\\\)</span>s2,25</td>
<td style="text-align: center;">if(\<span class="math inline">\(s1==\\\)</span>s2) goto PC+4+100</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">不相等时跳转</td>
<td style="text-align: center;">bne \<span class="math inline">\(s1,\\\)</span>s2,25</td>
<td style="text-align: center;">if(\$s1!=\<span class="math inline">\(2) goto PC+4+100 | | | 小于时置位 | slt \\\)</span>s1,\<span class="math inline">\(s2,\\\)</span>s3</td>
<td style="text-align: center;">if(\<span class="math inline">\(s2&lt;\\\)</span>s3) \<span class="math inline">\(s1=1 else \\\)</span>s1=0</td>
</tr>
<tr class="odd">
<td style="text-align: center;">无符号数比较小于时置位</td>
<td style="text-align: center;">sltu \<span class="math inline">\(s1,\\\)</span>s2,\<span class="math inline">\(s3 | if(\\\)</span>s2&lt;\<span class="math inline">\(s3) \\\)</span>s1=1 else \<span class="math inline">\(s1=0 | 比较是否小于无符号数 | | 无符号数比较小于立即数时置位 | slti \\\)</span>s1,\<span class="math inline">\(s2,20 | if(\\\)</span>s2&lt;20) \<span class="math inline">\(s1=1 else \\\)</span>s1=0</td>
<td style="text-align: center;">比较是否小于常数</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">无符号数比较小于无符号数时置位</td>
<td style="text-align: center;">sltiu \<span class="math inline">\(s1,\\\)</span>s2,20</td>
<td style="text-align: center;">if(\<span class="math inline">\(s2&lt;20) \\\)</span>s1=1 else \<span class="math inline">\(s1=0 | 比较是否小于无符号常数 | | 跳转 | j 2500 | goto 10000 | 跳转到目标地址 | | 跳转到寄存器所指位置 | jr \\\)</span>ra</td>
<td style="text-align: center;">goto \$</td>
</tr>
<tr class="odd">
<td style="text-align: center;">跳转并链接</td>
<td style="text-align: center;">jal 2500</td>
<td style="text-align: center;">\$ra=PC+4; goto 10000</td>
<td style="text-align: center;">用于过程调用</td>
</tr>
</tbody>
</table>
<p><strong>MIPS32指令集文档：https://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MD00086-2B-MIPS32BIS-AFP-6.06.pdf</strong></p>
<h4 id="三种指令格式">三种指令格式</h4>
<ul>
<li>R-型</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">op</th>
<th style="text-align: center;">rs</th>
<th style="text-align: center;">rt</th>
<th style="text-align: center;">rd</th>
<th style="text-align: center;">shamt</th>
<th style="text-align: center;">funct</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">6bits</td>
<td style="text-align: center;">5bits</td>
<td style="text-align: center;">5bits</td>
<td style="text-align: center;">5bits</td>
<td style="text-align: center;">5bits</td>
<td style="text-align: center;">6bits</td>
</tr>
</tbody>
</table>
<p>其中：</p>
<ul>
<li>op：操作码</li>
<li>rs：第一个源寄存器编号</li>
<li>rt：第二个源寄存器编号</li>
<li>rd：destination目的寄存器编号</li>
<li>shamt：移位位数（00000表示不移位），仅在位移指令中使用</li>
<li>funct：功能码，用于选择op操作中的具体函数，如运算操作中的加法函数</li>
<li><p>R-型指令包括：add,sub,and,or,nor,slt,sltu,sll,srl,jr</p></li>
<li><p>I-型指令</p></li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">op</th>
<th style="text-align: center;">rs</th>
<th style="text-align: center;">rt</th>
<th style="text-align: center;">constant or address</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">6bits</td>
<td style="text-align: center;">5bits</td>
<td style="text-align: center;">5bits</td>
<td style="text-align: center;">16bits</td>
</tr>
</tbody>
</table>
<p>其中：</p>
<ul>
<li>op：操作码</li>
<li>rs：第一个源操作数寄存器号，参与运算使用</li>
<li>rt：第二个源操作数寄存器号，参与运算使用</li>
<li>16位立即数</li>
<li><p>I-型指令包括：addi,lw,sw,lh,sh,lb,sb,ll,sc,lui,andi,ori,beq,bne,slti,sltiu</p></li>
<li><p>J-型指令</p></li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">op</th>
<th style="text-align: center;">address</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">6bits</td>
<td style="text-align: center;">26bits</td>
</tr>
</tbody>
</table>
<ul>
<li>目标地址计算方法：dst=PC+4+address&lt;&lt;2（下一条指令的地址时当前PC加上4后，取最高的四位，再加上J型指令编码中的26位左移2位（×4）的结果）</li>
<li><p>J-型指令有：j, jr, jal</p></li>
<li><p>MIPS中的同步</p>
<ul>
<li><p>背景：处理器共享存储器同一区域，P1写，P2读。P1写的结果是P2要读的值，如果P1和P2不同步，将会发生数据竞争</p></li>
<li><p>解决方法：依赖硬件提供同步指令，即原子读/写内存操作</p></li>
<li><p>MIPS中靠ll和sc这两个指令实现同步</p>
<blockquote>
<p>LL 指令的功能是从内存中读取一个字，以实现接下来的 RMW（Read-Modify-Write） 操作；SC 指令的功能是向内存中写入一个字，以完成前面的 RMW 操作。LL/SC 指令的独特之处在于，它们不是一个简单的内存读取/写入的函数，当使用 LL 指令从内存中读取一个字之后，比如 LL d, off(b)，处理器会记住 LL 指令的这次操作（会在 CPU 的寄存器中设置一个不可见的 bit 位），同时 LL 指令读取的地址 off(b) 也会保存在处理器的寄存器中。接下来的 SC 指令，比如 SC t, off(b)，会检查上次 LL 指令执行后的 RMW 操作是否是原子操作（即不存在其它对这个地址的操作），如果是原子操作，则 t 的值将会被更新至内存中，同时 t 的值也会变为1，表示操作成功；反之，如果 RMW 的操作不是原子操作（即存在其它对这个地址的访问冲突），则 t 的值不会被更新至内存中，且 t 的值也会变为0，表示操作失败。</p>
</blockquote></li>
</ul></li>
</ul>
]]></content>
      <categories>
        <category>计算机系统三</category>
      </categories>
      <tags>
        <tag>计算机系统三</tag>
      </tags>
  </entry>
</search>
